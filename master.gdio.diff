diff --git a/10.regular-expression-matching.33856095.Accepted.leetcode.java b/10.regular-expression-matching.33856095.Accepted.leetcode.java
deleted file mode 100644
index 8409ce0f..00000000
--- ./10.regular-expression-matching.33856095.Accepted.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-  public class Solution
-  {
-    public boolean isMatch(String s, String p)
-    {
-      boolean[][] dp = new boolean[p.length() + 1][s.length() + 1];
-      dp[0][0] = true;
-
-      for (int i = 1; i <= p.length(); i++)
-      {
-        dp[i][0] = p.charAt(i - 1) == '*' && dp[i - 2][0];
-
-        for (int j = 1; j <= s.length(); j++)
-        {
-          if (p.charAt(i - 1) == '*')
-          {
-            if (dp[i - 2][j])
-            {
-              dp[i][j] = true;
-              continue;
-            }
-
-            char prev = p.charAt(i - 2);
-
-            for (int k = j; k > 0; k--)
-            {
-              if (prev != '.' && prev != s.charAt(k - 1))
-              {
-                break;
-              }
-
-              if (dp[i - 2][k - 1])
-              {
-                dp[i][j] = true;
-                break;
-              }
-            }
-          }
-          else
-          {
-            dp[i][j] = dp[i - 1][j - 1]
-                       && (p.charAt(i - 1) == '.' || p.charAt(i - 1) == s
-                           .charAt(j - 1));
-          }
-        }
-      }
-
-      return dp[p.length()][s.length()];
-    }
-  }
-
diff --git a/10.regular-expression-matching.33856367.Accepted.leetcode.java b/10.regular-expression-matching.33856367.Accepted.leetcode.java
deleted file mode 100644
index 88637720..00000000
--- ./10.regular-expression-matching.33856367.Accepted.leetcode.java
+++ /dev/null
@@ -1,40 +0,0 @@
-  public class Solution
-  {
-    public boolean isMatch(String s, String p)
-    {
-      if (p.length() == 0)
-      {
-        return s.length() == 0;
-      }
-
-      if (p.length() == 1 || p.charAt(1) != '*')
-      {
-        if (s.length() < 1
-            || (p.charAt(0) != '.' && s.charAt(0) != p.charAt(0)))
-        {
-          return false;
-        }
-
-        return isMatch(s.substring(1), p.substring(1));
-      }
-      else
-      {
-        int len = s.length();
-        int i = -1;
-
-        while (i < len
-               && (i < 0 || p.charAt(0) == '.' || p.charAt(0) == s.charAt(i)))
-        {
-          if (isMatch(s.substring(i + 1), p.substring(2)))
-          {
-            return true;
-          }
-
-          i++ ;
-        }
-
-        return false;
-      }
-    }
-  }
-
diff --git a/10.regular-expression-matching.33856747.Accepted.leetcode.java b/10.regular-expression-matching.33856747.Accepted.leetcode.java
deleted file mode 100644
index 5cdbdf9a..00000000
--- ./10.regular-expression-matching.33856747.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-  public class Solution
-  {
-    public boolean isMatch(String s, String p)
-    {
-      if (p.length() == 0)
-      {
-        return s.length() == 0;
-      }
-
-      if (p.length() == 1)
-      {
-        return s.length() == 1
-          && (p.charAt(0) == '.' || p.charAt(0) == s.charAt(0));
-      }
-
-      // p.length() i bigger than 1 here
-      if (p.charAt(1) == '*')
-      {
-        if (isMatch(s, p.substring(2)))
-        {
-          return true;
-        }
-
-        return s.length() > 0
-          && (p.charAt(0) == '.' || s.charAt(0) == p.charAt(0))
-          && isMatch(s.substring(1), p);
-      }
-      else
-      {
-        return s.length() > 0
-          && (p.charAt(0) == '.' || s.charAt(0) == p.charAt(0))
-          && isMatch(s.substring(1), p.substring(1));
-      }
-    }
-  }
-
diff --git a/10.regular-expression-matching.33857365.Accepted.leetcode.java b/10.regular-expression-matching.33857365.Accepted.leetcode.java
deleted file mode 100644
index 1b14f7d0..00000000
--- ./10.regular-expression-matching.33857365.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-  public class Solution
-  {
-    public boolean isMatch(String s, String p)
-    {
-      int height = s.length(), width = p.length();
-      boolean[][] dp = new boolean[height + 1][width + 1];
-      dp[0][0] = true;
-
-      for (int i = 1; i <= width; i++)
-      {
-        if (p.charAt(i - 1) == '*') { dp[0][i] = dp[0][i - 2]; }
-      }
-
-      for (int i = 1; i <= height; i++)
-      {
-        for (int j = 1; j <= width; j++)
-        {
-          char sChar = s.charAt(i - 1);
-          char pChar = p.charAt(j - 1);
-
-          if (sChar == pChar || pChar == '.')
-          {
-            dp[i][j] = dp[i - 1][j - 1];
-          }
-          else if (pChar == '*')
-          {
-            if (sChar != p.charAt(j - 2) && p.charAt(j - 2) != '.')
-            {
-              dp[i][j] = dp[i][j - 2];
-            }
-            else
-            {
-              dp[i][j] =  dp[i][j - 2] | dp[i - 1][j];
-            }
-          }
-        }
-      }
-
-      return dp[height][width];
-    }
-  }
-
diff --git a/10.regular-expression-matching.33859474.Accepted.leetcode.java b/10.regular-expression-matching.33859474.Accepted.leetcode.java
deleted file mode 100644
index 414319e7..00000000
--- ./10.regular-expression-matching.33859474.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-  public class Solution
-  {
-    public boolean isMatch(String s, String p)
-    {
-      boolean[][] dp = new boolean[s.length() + 1][p.length() + 1];
-      dp[0][0] = true;
-
-      for (int i = 1; i <= s.length(); i++)
-      {
-        dp[i][0] = false;
-      }
-
-      for (int j = 1; j <= p.length(); j++)
-      {
-        dp[0][j] = j > 1 && p.charAt(j - 1) == '*' && dp[0][j - 2];
-      }
-
-      for (int i = 0; i < s.length(); i++)
-      {
-        for (int j = 0; j < p.length(); j++)
-        {
-          if (p.charAt(j) != '*')
-          {
-            dp[i + 1][j + 1] = (p.charAt(j) == '.' || s.charAt(i) == p.charAt(j)) && dp[i][j];
-          }
-          else
-          {
-            dp[i + 1][j + 1] = j > 0 && dp[i + 1][j - 1] || dp[i + 1][j]
-                               || j > 0 && (p.charAt(j - 1) == '.' || s.charAt(i) == p.charAt(j - 1)) && dp[i][j + 1];
-          }
-        }
-      }
-
-      return dp[s.length()][p.length()];
-    }
-  }
-
diff --git a/10.regular-expression-matching.33860316.Runtime-Error.leetcode.java b/10.regular-expression-matching.33860316.Runtime-Error.leetcode.java
deleted file mode 100644
index 614eeecc..00000000
--- ./10.regular-expression-matching.33860316.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-  public class Solution
-  {
-    public boolean isMatch(String s, String p)
-    {
-      if (p.length() == 0)
-      {
-        return s.length() == 0;
-      }
-
-      if ('*' == p.charAt(1))
-      {
-        return (isMatch(s, p.substring(2))
-          || ((s.charAt(0) == p.charAt(0) || '.' == p.charAt(0))
-            && isMatch(s.substring(1), p)));
-      }
-
-      if (s.length() == 0)
-      {
-        return false;
-      }
-
-      return (s.charAt(0) == p.charAt(0) || '.' == p.charAt(0))
-        ? isMatch(s.substring(1), p.substring(1)) : false;
-    }
-  }
-
diff --git a/10.regular-expression-matching.33860604.Runtime-Error.leetcode.java b/10.regular-expression-matching.33860604.Runtime-Error.leetcode.java
deleted file mode 100644
index 7437f45b..00000000
--- ./10.regular-expression-matching.33860604.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-  public class Solution
-  {
-    public boolean isMatch(String s, String p)
-    {
-      if (p.length() == 0)
-      {
-        return s.length() == 0;
-      }
-
-      if (p.length() == 1)
-      {
-        return s.length() == 1
-               && (p.charAt(0) == '.' || p.charAt(0) == s.charAt(0));
-      }
-
-      if ('*' == p.charAt(1))
-      {
-        return (isMatch(s, p.substring(2))
-                || ((s.charAt(0) == p.charAt(0) || '.' == p.charAt(0))
-                    && isMatch(s.substring(1), p)));
-      }
-
-      return (s.charAt(0) == p.charAt(0) || '.' == p.charAt(0))
-             ? isMatch(s.substring(1), p.substring(1)) : false;
-    }
-  }
-
diff --git a/10.regular-expression-matching.33861048.Accepted.leetcode.java b/10.regular-expression-matching.33861048.Accepted.leetcode.java
deleted file mode 100644
index 67fcfeee..00000000
--- ./10.regular-expression-matching.33861048.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-  public class Solution
-  {
-    public boolean isMatch(String s, String p)
-    {
-      if (p.length() == 0)
-      {
-        return s.length() == 0;
-      }
-
-      if (p.length() == 1)
-      {
-        return s.length() == 1
-               && (p.charAt(0) == '.' || p.charAt(0) == s.charAt(0));
-      }
-
-      if (p.charAt(1) == '*')
-      {
-        return isMatch(s, p.substring(2)) || (s.length() > 0
-                                              && (p.charAt(0) == '.' || s.charAt(0) == p.charAt(0))
-                                              && isMatch(s.substring(1), p));
-      }
-
-      return s.length() > 0
-             && (p.charAt(0) == '.' || s.charAt(0) == p.charAt(0))
-             && isMatch(s.substring(1), p.substring(1));
-    }
-  }
-
diff --git a/103.binary-tree-zigzag-level-order-traversal.152186141.Accepted.leetcode.java b/103.binary-tree-zigzag-level-order-traversal.152186141.Accepted.leetcode.java
deleted file mode 100644
index c02c6d5c..00000000
--- ./103.binary-tree-zigzag-level-order-traversal.152186141.Accepted.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> zigzagLevelOrder(TreeNode root)
-    {
-        List<List<Integer>> ans = new ArrayList<List<Integer>>();
-        traverse(root, 1, ans, true);
-        return ans;
-    }
-
-    public void traverse(TreeNode root, int level, List<List<Integer>> result, Boolean left_to_right)
-    {
-        if (root == null)
-        {
-            return;
-        }
-
-        if (level > result.size())
-        {
-            result.add(new ArrayList<Integer>());
-        }
-
-        if (left_to_right)
-        {
-            result.get(level - 1).add(root.val);
-        }
-        else
-        {
-            result.get(level - 1).add(0, root.val);
-        }
-
-        traverse(root.left, level + 1, result, !left_to_right);
-        traverse(root.right, level + 1, result, !left_to_right);
-    }
-}
-
diff --git a/103.binary-tree-zigzag-level-order-traversal.152186481.Accepted.leetcode.java b/103.binary-tree-zigzag-level-order-traversal.152186481.Accepted.leetcode.java
deleted file mode 100644
index bdf6d70d..00000000
--- ./103.binary-tree-zigzag-level-order-traversal.152186481.Accepted.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> zigzagLevelOrder(TreeNode root)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        traverse(root, 0, result, true);
-        return result;
-    }
-
-    public void traverse(TreeNode root, int level, List<List<Integer>> result, Boolean left_to_right)
-    {
-        if (root == null)
-        {
-            return;
-        }
-
-        if (level == result.size())
-        {
-            result.add(new ArrayList<Integer>());
-        }
-
-        if (left_to_right)
-        {
-            result.get(level).add(root.val);
-        }
-        else
-        {
-            result.get(level).add(0, root.val);
-        }
-
-        traverse(root.left, level + 1, result, !left_to_right);
-        traverse(root.right, level + 1, result, !left_to_right);
-    }
-}
-
diff --git a/103.binary-tree-zigzag-level-order-traversal.96744015.Accepted.leetcode.java b/103.binary-tree-zigzag-level-order-traversal.96744015.Accepted.leetcode.java
deleted file mode 100644
index 9e75bfac..00000000
--- ./103.binary-tree-zigzag-level-order-traversal.96744015.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> zigzagLevelOrder(TreeNode root)
-    {
-        List<List<Integer>> ans = new ArrayList<List<Integer>>();
-        traverse(root, 1, ans, true);
-        return ans;
-    }
-
-    public void traverse(TreeNode root, int level, List<List<Integer>> result, Boolean left_to_right)
-    {
-        if (root == null)
-        {
-            return;
-        }
-
-        if (level > result.size())
-        {
-            result.add(new ArrayList<Integer>());
-        }
-
-        if (left_to_right)
-        {
-            result.get(level - 1).add(root.val);
-        }
-        else
-        {
-            result.get(level - 1).add(0, root.val);
-        }
-
-        traverse(root.left, level + 1, result, !left_to_right);
-        traverse(root.right, level + 1, result, !left_to_right);
-    }
-}
diff --git a/104.maximum-depth-of-binary-tree.156785188.Accepted.leetcode.java b/104.maximum-depth-of-binary-tree.156785188.Accepted.leetcode.java
deleted file mode 100644
index 522e6b26..00000000
--- ./104.maximum-depth-of-binary-tree.156785188.Accepted.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class Solution
-{
-    public int maxDepth(TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        Queue<TreeNode> queue = new LinkedList<TreeNode>();
-        queue.add(root);
-        int depth = 0;
-
-        while (!queue.isEmpty())
-        {
-            depth++;
-            int size = queue.size();
-
-            for (int i = 0; i < size; i++)
-            {
-                root = queue.poll();
-
-                if (null != root.left)
-                {
-                    queue.add(root.left);
-                }
-
-                if (null != root.right)
-                {
-                    queue.add(root.right);
-                }
-            }
-        }
-
-        return depth;
-    }
-}
-
diff --git a/105.construct-binary-tree-from-preorder-and-inorder-traversal.82056579.Accepted.leetcode.java b/105.construct-binary-tree-from-preorder-and-inorder-traversal.82056579.Accepted.leetcode.java
deleted file mode 100644
index a9e88264..00000000
--- ./105.construct-binary-tree-from-preorder-and-inorder-traversal.82056579.Accepted.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public TreeNode buildTree(int[] preorder, int[] inorder) 
-    {
-        int preStart = 0;
-        int preEnd = preorder.length - 1;
-        int inStart = 0;
-        int inEnd = inorder.length - 1;
-        return construct(preorder, preStart, preEnd, inorder, inStart, inEnd);
-    }
- 
-    public TreeNode construct(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd)
-    {
-        if(preStart > preEnd || inStart > inEnd)
-        {
-            return null;
-        }
- 
-        int val = preorder[preStart];
-        TreeNode p = new TreeNode(val);
- 
-        //find parent element index from inorder
-        int k = -1;
-        
-        for(int i = 0; i < inorder.length; i++)
-        {
-            if(val == inorder[i])
-            {
-                k = i;
-                break;
-            }
-        }
- 
-        p.left = construct(preorder, preStart + 1, preStart + (k - inStart), inorder, inStart, k - 1);
-        p.right = construct(preorder, preStart + (k - inStart) + 1, preEnd, inorder, k + 1 , inEnd);
- 
-        return p;
-    }
-}
diff --git a/105.construct-binary-tree-from-preorder-and-inorder-traversal.82056919.Accepted.leetcode.java b/105.construct-binary-tree-from-preorder-and-inorder-traversal.82056919.Accepted.leetcode.java
deleted file mode 100644
index feb1bb0f..00000000
--- ./105.construct-binary-tree-from-preorder-and-inorder-traversal.82056919.Accepted.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public TreeNode buildTree(int[] preorder, int[] inorder) 
-    {
-        int preStart = 0;
-        int preEnd = preorder.length - 1;
-        int inStart = 0;
-        int inEnd = inorder.length - 1;
-        return construct(preorder, preStart, preEnd, inorder, inStart, inEnd);
-    }
- 
-    public TreeNode construct(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd)
-    {
-        if(preStart > preEnd || inStart > inEnd || (preEnd - preStart) != (inEnd - inStart))
-        {
-            return null;
-        }
- 
-        int val = preorder[preStart];
-        TreeNode p = new TreeNode(val);
- 
-        //find parent element index from inorder
-        int k = -1;
-        
-        for(int i = 0; i < inorder.length; i++)
-        {
-            if(val == inorder[i])
-            {
-                k = i;
-                break;
-            }
-        }
-        
-        if(k == -1)
-        {
-            return null;
-        }
- 
-        p.left = construct(preorder, preStart + 1, preStart + (k - inStart), inorder, inStart, k - 1);
-        p.right = construct(preorder, preStart + (k - inStart) + 1, preEnd, inorder, k + 1 , inEnd);
- 
-        return p;
-    }
-}
diff --git a/106.construct-binary-tree-from-inorder-and-postorder-traversal.152414853.Accepted.leetcode.java b/106.construct-binary-tree-from-inorder-and-postorder-traversal.152414853.Accepted.leetcode.java
deleted file mode 100644
index e10bf655..00000000
--- ./106.construct-binary-tree-from-inorder-and-postorder-traversal.152414853.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/**
- * Definition for binary tree
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution
-{
-    public TreeNode buildTree(int[] inorder, int[] postorder)
-    {
-        HashMap inMap = new HashMap();
-
-        for (int i = 0; i < inorder.length; i++)
-        {
-            inMap.put(inorder[i], i);
-        }
-
-        TreeNode root = buildTree(inMap, inorder, 0, inorder.length - 1, postorder, 0, postorder.length - 1);
-        return root;
-    }
-
-    public TreeNode buildTree(HashMap inMap, int[] inorder, int inStart, int inEnd, int[] postorder, int postStart, int postEnd)
-    {
-        if (inStart > inEnd | postStart > postEnd)
-        {
-            return null;
-        }
-
-        TreeNode root = new TreeNode(postorder[postEnd]);
-        int mid = (int)inMap.get(postorder[postEnd]);
-        root.left = buildTree(inMap, inorder, inStart, mid - 1, postorder, postStart, postStart + mid - 1 - inStart);
-        root.right = buildTree(inMap, inorder, mid + 1, inEnd, postorder, postEnd - inEnd + mid, postEnd - 1);
-        return root;
-    }
-}
-
diff --git a/106.construct-binary-tree-from-inorder-and-postorder-traversal.158725711.Runtime-Error.leetcode.java b/106.construct-binary-tree-from-inorder-and-postorder-traversal.158725711.Runtime-Error.leetcode.java
deleted file mode 100644
index 52faebac..00000000
--- ./106.construct-binary-tree-from-inorder-and-postorder-traversal.158725711.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public TreeNode buildTree(int[] inorder, int[] postorder)
-    {
-        HashMap inMap = new HashMap();
-
-        for (int i = 0; i < inorder.length; i++)
-        {
-            inMap.put(inorder[i], i);
-        }
-
-        TreeNode root = dfs(inMap, inorder, 0, inorder.length - 1, postorder, 0, postorder.length - 1);
-        return root;
-    }
-
-    public TreeNode dfs(HashMap inMap, int[] inorder, int inLeft, int inRight, int[] postorder, int poLeft, int poRight)
-    {
-        if (inLeft > inRight || poLeft > poRight)
-        {
-            return null;
-        }
-
-        TreeNode root = new TreeNode(postorder[poRight]);
-        int mid = (int)inMap.get(postorder[poRight]);
-        root.left = dfs(inMap, inorder, inLeft, mid - 1, postorder, poLeft, poLeft + mid - 1 - inLeft);
-        root.right = dfs(inMap, inorder, mid + 1, inRight, postorder, poRight - 1 - mid + 1 + inLeft, poRight - 1);
-        return root;
-    }
-}
-
diff --git a/106.construct-binary-tree-from-inorder-and-postorder-traversal.158728449.Wrong-Answer.leetcode.java b/106.construct-binary-tree-from-inorder-and-postorder-traversal.158728449.Wrong-Answer.leetcode.java
deleted file mode 100644
index cfecf8c7..00000000
--- ./106.construct-binary-tree-from-inorder-and-postorder-traversal.158728449.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public TreeNode buildTree(int[] inorder, int[] postorder)
-    {
-        HashMap inMap = new HashMap();
-
-        for (int i = 0; i < inorder.length; i++)
-        {
-            inMap.put(inorder[i], i);
-        }
-
-        TreeNode root = dfs(inMap, inorder, 0, inorder.length - 1, postorder, 0, postorder.length - 1);
-        return root;
-    }
-
-    public TreeNode dfs(HashMap inMap, int[] inorder, int inLeft, int inRight, int[] postorder, int poLeft, int poRight)
-    {
-        if (poLeft > poRight)
-        {
-            return null;
-        }
-
-        TreeNode root = new TreeNode(postorder[poRight]);
-        int mid = (int)inMap.get(postorder[poRight]);
-        root.left = dfs(inMap, inorder, inLeft, mid - 1, postorder, poLeft, poLeft + mid - 1 - inLeft);
-        root.right = dfs(inMap, inorder, mid + 1, inRight, postorder, poRight + mid - inLeft, poRight - 1);
-        return root;
-    }
-}
-
diff --git a/106.construct-binary-tree-from-inorder-and-postorder-traversal.158731272.Accepted.leetcode.java b/106.construct-binary-tree-from-inorder-and-postorder-traversal.158731272.Accepted.leetcode.java
deleted file mode 100644
index 5493c7b0..00000000
--- ./106.construct-binary-tree-from-inorder-and-postorder-traversal.158731272.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public TreeNode buildTree(int[] inorder, int[] postorder)
-    {
-        HashMap inMap = new HashMap();
-
-        for (int i = 0; i < inorder.length; i++)
-        {
-            inMap.put(inorder[i], i);
-        }
-
-        return dfs(inMap, inorder, 0, inorder.length - 1, postorder, 0, postorder.length - 1);
-    }
-
-    public TreeNode dfs(HashMap inMap, int[] inorder, int inLeft, int inRight, int[] postorder, int poLeft, int poRight)
-    {
-        if (poLeft > poRight)
-        {
-            return null;
-        }
-
-        TreeNode root = new TreeNode(postorder[poRight]);
-        int mid = (int)inMap.get(postorder[poRight]);
-        root.left = dfs(inMap, inorder, inLeft, mid - 1, postorder, poLeft, poLeft + mid - 1 - inLeft);
-        root.right = dfs(inMap, inorder, mid + 1, inRight, postorder, poRight + mid - inRight, poRight - 1);
-        return root;
-    }
-}
-
diff --git a/106.construct-binary-tree-from-inorder-and-postorder-traversal.158735820.Accepted.leetcode.java b/106.construct-binary-tree-from-inorder-and-postorder-traversal.158735820.Accepted.leetcode.java
deleted file mode 100644
index c2dae9e6..00000000
--- ./106.construct-binary-tree-from-inorder-and-postorder-traversal.158735820.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public TreeNode buildTree(int[] inorder, int[] postorder)
-    {
-        HashMap inMap = new HashMap();
-
-        for (int i = 0; i < inorder.length; i++)
-        {
-            inMap.put(inorder[i], i);
-        }
-
-        return buildTree(inMap, inorder, 0, inorder.length - 1, postorder, 0, postorder.length - 1);
-    }
-
-    public TreeNode buildTree(HashMap inMap, int[] inorder, int inLeft, int inRight, int[] postorder, int poLeft, int poRight)
-    {
-        if (inLeft > inRight)
-        {
-            return null;
-        }
-
-        TreeNode root = new TreeNode(postorder[poRight]);
-        int mid = (int)inMap.get(postorder[poRight]);
-        root.left = buildTree(inMap, inorder, inLeft, mid - 1, postorder, poLeft, poLeft + mid - 1 - inLeft);
-        root.right = buildTree(inMap, inorder, mid + 1, inRight, postorder, poRight - inRight + mid, poRight - 1);
-        return root;
-    }
-}
-
diff --git a/106.construct-binary-tree-from-inorder-and-postorder-traversal.205455200.Accepted.leetcode.java b/106.construct-binary-tree-from-inorder-and-postorder-traversal.205455200.Accepted.leetcode.java
deleted file mode 100644
index aa4e38c3..00000000
--- ./106.construct-binary-tree-from-inorder-and-postorder-traversal.205455200.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    private TreeNode buildTree(Map<Integer, Integer> inorder, int b1, int[] postorder, int b2, int len)
-    {
-        if (len == 0)
-        {
-            return null;
-        }
-
-        TreeNode node = new TreeNode(postorder[b2 + len - 1]);
-        int i = inorder.get(node.val);
-        node.left = buildTree(inorder, b1, postorder, b2, i - b1);
-        node.right = buildTree(inorder, i + 1, postorder, b2 + i - b1, len - i + b1 - 1);
-        return node;
-    }
-
-    public TreeNode buildTree(int[] inorder, int[] postorder)
-    {
-        Map<Integer, Integer> inorderNodes = new HashMap<Integer, Integer>();
-
-        for (int i = 0; i < inorder.length; i++)
-        {
-            inorderNodes.put(inorder[i], i);
-        }
-
-        return buildTree(inorderNodes, 0, postorder, 0, inorder.length);
-    }
-}
-
diff --git a/107.binary-tree-level-order-traversal-ii.7712529.Accepted.leetcode.java b/107.binary-tree-level-order-traversal-ii.7712529.Accepted.leetcode.java
deleted file mode 100644
index d08c56f0..00000000
--- ./107.binary-tree-level-order-traversal-ii.7712529.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-  public class Solution {
-    private void search(TreeNode root, int level,
-                        ArrayList<ArrayList<Integer>> ans) {
-      if (root == null) {
-        return;
-      }
-
-      if (level >= ans.size()) {
-        ans.add(new ArrayList<Integer>());
-      }
-
-      ans.get(level).add(root.val);
-      search(root.left, level + 1, ans);
-      search(root.right, level + 1, ans);
-    }
-
-    public ArrayList<ArrayList<Integer>> levelOrderBottom(TreeNode root) {
-      ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();
-      search(root, 0, ans);
-      Collections.reverse(ans);
-      return ans;
-    }
-  }
-
diff --git a/108.convert-sorted-array-to-binary-search-tree.158824455.Accepted.leetcode.java b/108.convert-sorted-array-to-binary-search-tree.158824455.Accepted.leetcode.java
deleted file mode 100644
index b327c50e..00000000
--- ./108.convert-sorted-array-to-binary-search-tree.158824455.Accepted.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution
-{
-    public TreeNode sortedArrayToBST(int[] num)
-    {
-        return dfs(num, 0, num.length - 1);
-    }
-    public TreeNode dfs(int [] num, int l, int r)
-    {
-        if (l > r)
-        {
-            return null;
-        }
-
-        int m = (l + r) / 2;
-        TreeNode root = new TreeNode(num[m]);
-        root.left = dfs(num, l, m - 1);
-        root.right = dfs(num, m + 1, r);
-        return root;
-    }
-}
-
diff --git a/109.convert-sorted-list-to-binary-search-tree.158836999.Accepted.leetcode.java b/109.convert-sorted-list-to-binary-search-tree.158836999.Accepted.leetcode.java
deleted file mode 100644
index 223a3002..00000000
--- ./109.convert-sorted-list-to-binary-search-tree.158836999.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution
-{
-    private ListNode current;
-
-    private int getListLength(ListNode head)
-    {
-        int size = 0;
-
-        while (head != null)
-        {
-            size++;
-            head = head.next;
-        }
-
-        return size;
-    }
-
-    public TreeNode sortedListToBST(ListNode head)
-    {
-        int size;
-        current = head;
-        size = getListLength(head);
-        return sortedListToBSTHelper(size);
-    }
-
-    public TreeNode sortedListToBSTHelper(int size)
-    {
-        if (size <= 0)
-        {
-            return null;
-        }
-
-        TreeNode left = sortedListToBSTHelper(size / 2);
-        TreeNode root = new TreeNode(current.val);
-        current = current.next;
-        TreeNode right = sortedListToBSTHelper(size - 1 - size / 2);
-        root.left = left;
-        root.right = right;
-        return root;
-    }
-}
-
diff --git a/109.convert-sorted-list-to-binary-search-tree.158838586.Accepted.leetcode.java b/109.convert-sorted-list-to-binary-search-tree.158838586.Accepted.leetcode.java
deleted file mode 100644
index 436661e4..00000000
--- ./109.convert-sorted-list-to-binary-search-tree.158838586.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution
-{
-    private ListNode current;
-
-    private int getListLength(ListNode head)
-    {
-        int size = 0;
-
-        while (head != null)
-        {
-            size++;
-            head = head.next;
-        }
-
-        return size;
-    }
-
-    public TreeNode sortedListToBST(ListNode head)
-    {
-        current = head;
-        return sortedListToBSTHelper(0, getListLength(head) - 1);
-    }
-
-    public TreeNode sortedListToBSTHelper(int start, int end)
-    {
-        if (start > end)
-        {
-            return null;
-        }
-
-        int mid = (start + end) / 2;
-        TreeNode left = sortedListToBSTHelper(start, mid - 1);
-        TreeNode root = new TreeNode(current.val);
-        current = current.next;
-        TreeNode right = sortedListToBSTHelper(mid + 1, end);
-        root.left = left;
-        root.right = right;
-        return root;
-    }
-}
-
diff --git a/109.convert-sorted-list-to-binary-search-tree.158839144.Accepted.leetcode.java b/109.convert-sorted-list-to-binary-search-tree.158839144.Accepted.leetcode.java
deleted file mode 100644
index 2f0ac02f..00000000
--- ./109.convert-sorted-list-to-binary-search-tree.158839144.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    private ListNode current;
-
-    public TreeNode sortedListToBST(ListNode head)
-    {
-        current = head;
-        int size = 0;
-
-        while (head != null)
-        {
-            size++;
-            head = head.next;
-        }
-
-        return dfs(0, size - 1);
-    }
-
-    public TreeNode dfs(int start, int end)
-    {
-        if (start > end)
-        {
-            return null;
-        }
-
-        int mid = (start + end) / 2;
-        TreeNode left = dfs(start, mid - 1);
-        TreeNode root = new TreeNode(current.val);
-        current = current.next;
-        TreeNode right = dfs(mid + 1, end);
-        root.left = left;
-        root.right = right;
-        return root;
-    }
-}
-
diff --git a/109.convert-sorted-list-to-binary-search-tree.158840892.Accepted.leetcode.java b/109.convert-sorted-list-to-binary-search-tree.158840892.Accepted.leetcode.java
deleted file mode 100644
index 8411a668..00000000
--- ./109.convert-sorted-list-to-binary-search-tree.158840892.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    private ListNode current;
-    private TreeNode sortedListToBST(int begin, int end)
-    {
-        if (begin > end)
-        {
-            return null;
-        }
-
-        TreeNode root = new TreeNode(0);
-        int mid = (begin + end) / 2;
-        root.left = sortedListToBST(begin, mid - 1);
-        root.val = current.val;
-        current = current.next;
-        root.right = sortedListToBST(mid + 1, end);
-        return root;
-    }
-
-    public TreeNode sortedListToBST(ListNode head)
-    {
-        current = head;
-        int len = 0;
-
-        while (head != null)
-        {
-            len++;
-            head = head.next;
-        }
-
-        return sortedListToBST(0, len - 1);
-    }
-}
-
diff --git a/109.convert-sorted-list-to-binary-search-tree.8308116.Accepted.leetcode.java b/109.convert-sorted-list-to-binary-search-tree.8308116.Accepted.leetcode.java
deleted file mode 100644
index 3d53794b..00000000
--- ./109.convert-sorted-list-to-binary-search-tree.8308116.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-  public class Solution {
-    private TreeNode sortedListToBST(ListNode head, ListNode[] tail,
-                                     int begin, int end) {
-      if (begin > end) {
-        tail[0] = head;
-        return null;
-      }
-
-      TreeNode p = new TreeNode(0);
-      int mid = begin + (end - begin) / 2;
-      p.left = sortedListToBST(head, tail, begin, mid - 1);
-      p.val = tail[0].val;
-      p.right = sortedListToBST(tail[0].next, tail, mid + 1, end);
-      return p;
-    }
-
-    public TreeNode sortedListToBST(ListNode head) {
-      ListNode p = head;
-      int len = 0;
-
-      while (p != null) {
-        len++;
-        p = p.next;
-      }
-
-      return sortedListToBST(head, new ListNode[1], 0, len - 1);
-    }
-  }
-
diff --git a/109.convert-sorted-list-to-binary-search-tree.8308170.Wrong-Answer.leetcode.java b/109.convert-sorted-list-to-binary-search-tree.8308170.Wrong-Answer.leetcode.java
deleted file mode 100644
index d4944320..00000000
--- ./109.convert-sorted-list-to-binary-search-tree.8308170.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution {
-		private TreeNode sortedListToBST(ListNode head, ListNode tail,
-				int begin, int end) {
-			if (begin > end) {
-				tail = head;
-				return null;
-			}
-
-			TreeNode p = new TreeNode(0);
-			int mid = begin + (end - begin) / 2;
-			p.left = sortedListToBST(head, tail, begin, mid - 1);
-			p.val = tail.val;
-			p.right = sortedListToBST(tail.next, tail, mid + 1, end);
-			return p;
-		}
-
-		public TreeNode sortedListToBST(ListNode head) {
-			ListNode p = head;
-			int len = 0;
-
-			while (p != null) {
-				len++;
-				p = p.next;
-			}
-
-			return sortedListToBST(head, new ListNode(0), 0, len - 1);
-		}
-	}
-
diff --git a/109.convert-sorted-list-to-binary-search-tree.8417826.Accepted.leetcode.java b/109.convert-sorted-list-to-binary-search-tree.8417826.Accepted.leetcode.java
deleted file mode 100644
index 27d56c39..00000000
--- ./109.convert-sorted-list-to-binary-search-tree.8417826.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-  public class Solution {
-    ListNode h;
-
-    public TreeNode sortedListToBST(ListNode head) {
-      if (head == null) {
-        return null;
-      }
-
-      h = head;
-      int len = getLength(head);
-      return sortedListToBST(0, len - 1);
-    }
-
-    public int getLength(ListNode head) {
-      int len = 0;
-      ListNode p = head;
-
-      while (p != null) {
-        len++;
-        p = p.next;
-      }
-
-      return len;
-    }
-
-    public TreeNode sortedListToBST(int start, int end) {
-      if (start > end) {
-        return null;
-      }
-
-      int mid = (start + end) / 2;
-      TreeNode left = sortedListToBST(start, mid - 1);
-      TreeNode root = new TreeNode(h.val);
-      h = h.next;
-      TreeNode right = sortedListToBST(mid + 1, end);
-      root.left = left;
-      root.right = right;
-      return root;
-    }
-  }
-
diff --git a/109.convert-sorted-list-to-binary-search-tree.8420378.Wrong-Answer.leetcode.java b/109.convert-sorted-list-to-binary-search-tree.8420378.Wrong-Answer.leetcode.java
deleted file mode 100644
index b7e1e292..00000000
--- ./109.convert-sorted-list-to-binary-search-tree.8420378.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-  public class Solution {
-
-    public TreeNode sortedListToBST(ListNode head) {
-      if (head == null) {
-        return null;
-      }
-
-      int len = getLength(head);
-      return sortedListToBST(head, 0, len - 1);
-    }
-
-    public int getLength(ListNode head) {
-      int len = 0;
-      ListNode p = head;
-
-      while (p != null) {
-        len++;
-        p = p.next;
-      }
-
-      return len;
-    }
-
-    public TreeNode sortedListToBST(ListNode head, int start, int end) {
-      if (start > end) {
-        return null;
-      }
-
-      int mid = (start + end) / 2;
-      TreeNode left = sortedListToBST(head, start, mid - 1);
-      TreeNode root = new TreeNode(head.val);
-      head = head.next;
-      TreeNode right = sortedListToBST(head, mid + 1, end);
-      root.left = left;
-      root.right = right;
-      return root;
-    }
-  }
-
diff --git a/11.container-with-most-water.155487555.Wrong-Answer.leetcode.java b/11.container-with-most-water.155487555.Wrong-Answer.leetcode.java
deleted file mode 100644
index d63c6f5a..00000000
--- ./11.container-with-most-water.155487555.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public int maxArea(int[] height)
-    {
-        int maxArea = 0;
-        int start = 0;
-        int end = height.length - 1;
-
-        while (start < end)
-        {
-            maxArea = Math.max(maxArea, (end - start) * height[start]);
-
-            if (height[start] < height[end])
-            {
-                start++;
-            }
-            else
-            {
-                end--;
-            }
-        }
-
-        return maxArea;
-    }
-}
-
diff --git a/11.container-with-most-water.155582856.Accepted.leetcode.java b/11.container-with-most-water.155582856.Accepted.leetcode.java
deleted file mode 100644
index 983ff7aa..00000000
--- ./11.container-with-most-water.155582856.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public int maxArea(int[] height)
-    {
-        int maxArea = 0;
-        int start = 0;
-        int end = height.length - 1;
-
-        while (start < end)
-        {
-            maxArea = Math.max(maxArea, (end - start) * Math.min(height[start], height[end]));
-
-            if (height[start] < height[end])
-            {
-                start++;
-            }
-            else
-            {
-                end--;
-            }
-        }
-
-        return maxArea;
-    }
-}
-
diff --git a/11.container-with-most-water.33878708.Accepted.leetcode.java b/11.container-with-most-water.33878708.Accepted.leetcode.java
deleted file mode 100644
index 0de0b24a..00000000
--- ./11.container-with-most-water.33878708.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-  public class Solution
-  {
-    public int maxArea(int[] height)
-    {
-      int maxArea = 0;
-      int start = 0;
-      int end = height.length - 1;
-
-      while (start < end)
-      {
-        maxArea = Math.max(maxArea, (end - start) * Math.min(height[start] , height[end]));
-
-        if (height[start] < height[end])
-        {
-          start++ ;
-        }
-        else
-        {
-          end-- ;
-        }
-      }
-
-      return maxArea;
-    }
-  }
-
diff --git a/11.container-with-most-water.79592521.Wrong-Answer.leetcode.java b/11.container-with-most-water.79592521.Wrong-Answer.leetcode.java
deleted file mode 100644
index c00276df..00000000
--- ./11.container-with-most-water.79592521.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public int maxArea(int[] height)
-    {
-        int maxArea = 0;
-        int start = 0;
-        int end = height.length - 1;
-
-        while (start < end)
-        {
-            maxArea = Math.max(maxArea, (end - start) * height[start]);
-
-            if (height[start] < height[end])
-            {
-                start++ ;
-            }
-            else
-            {
-                end-- ;
-            }
-        }
-
-        return maxArea;
-    }
-}
diff --git a/11.container-with-most-water.79592734.Accepted.leetcode.java b/11.container-with-most-water.79592734.Accepted.leetcode.java
deleted file mode 100644
index bf5060fd..00000000
--- ./11.container-with-most-water.79592734.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public int maxArea(int[] height)
-    {
-        int maxArea = 0;
-        int start = 0;
-        int end = height.length - 1;
-
-        while (start < end)
-        {
-            maxArea = Math.max(maxArea, (end - start) * Math.min(height[start], height[end]));
-
-            if (height[start] < height[end])
-            {
-                start++ ;
-            }
-            else
-            {
-                end-- ;
-            }
-        }
-
-        return maxArea;
-    }
-}
diff --git a/110.balanced-binary-tree.73589190.Accepted.leetcode.java b/110.balanced-binary-tree.73589190.Accepted.leetcode.java
deleted file mode 100644
index c737c42b..00000000
--- ./110.balanced-binary-tree.73589190.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-class Solution
-{
-    private int maxDepth(TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        int left = maxDepth(root.left);
-        int right = maxDepth(root.right);
-
-        if (left == -1 || right == -1 || Math.abs(left - right) > 1)
-        {
-            return -1;
-        }
-
-        return Math.max(left, right) + 1;
-    }
-    public boolean isBalanced(TreeNode root)
-    {
-        return maxDepth(root) >= 0;
-    }
-}
-
diff --git a/110.balanced-binary-tree.73589356.Wrong-Answer.leetcode.java b/110.balanced-binary-tree.73589356.Wrong-Answer.leetcode.java
deleted file mode 100644
index 1c01f4ea..00000000
--- ./110.balanced-binary-tree.73589356.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-class Solution
-{
-    private int maxDepth(TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        int left = maxDepth(root.left);
-        int right = maxDepth(root.right);
-
-        if (left == -1 || right == -1 || Math.abs(left - right) > 1)
-        {
-            return -1;
-        }
-
-        return Math.max(left, right) + 1;
-    }
-    public boolean isBalanced(TreeNode root)
-    {
-        return maxDepth(root) == -1;
-    }
-}
-
diff --git a/110.balanced-binary-tree.73589384.Accepted.leetcode.java b/110.balanced-binary-tree.73589384.Accepted.leetcode.java
deleted file mode 100644
index ea0cf34d..00000000
--- ./110.balanced-binary-tree.73589384.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-class Solution
-{
-    private int maxDepth(TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        int left = maxDepth(root.left);
-        int right = maxDepth(root.right);
-
-        if (left == -1 || right == -1 || Math.abs(left - right) > 1)
-        {
-            return -1;
-        }
-
-        return Math.max(left, right) + 1;
-    }
-    public boolean isBalanced(TreeNode root)
-    {
-        return maxDepth(root) != -1;
-    }
-}
-
diff --git a/110.balanced-binary-tree.73589630.Accepted.leetcode.java b/110.balanced-binary-tree.73589630.Accepted.leetcode.java
deleted file mode 100644
index 13598151..00000000
--- ./110.balanced-binary-tree.73589630.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-class Solution
-{
-    private int maxDepth(TreeNode root)
-    {
-        if(root == null)
-        {
-            return 0;
-        }
-        
-        int left = maxDepth(root.left);
-        int right = maxDepth(root.right);
-        
-        if(left == -1 || right == -1 || Math.abs(left - right) > 1)
-        {
-            return -1;
-        }
-        
-        return Math.max(left, right) + 1;
-    }
-    public boolean isBalanced(TreeNode root)
-    {
-        return maxDepth(root) != -1;
-    }
-}
-
diff --git a/110.balanced-binary-tree.7646455.Accepted.leetcode.java b/110.balanced-binary-tree.7646455.Accepted.leetcode.java
deleted file mode 100644
index edd48aca..00000000
--- ./110.balanced-binary-tree.7646455.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/**
- * Definition for binary tree
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-  class Solution {
-    private int getBalancedTreeHeight(TreeNode root) {
-      if (root == null) {
-        return 0;
-      }
-
-      int l = getBalancedTreeHeight(root.left);
-      int r = getBalancedTreeHeight(root.right);
-
-      if (l >= 0 && r >= 0) {
-        if (Math.abs(l - r) <= 1) {
-          return Math.max(l, r) + 1;
-        }
-      }
-
-      return -1;
-    }
-
-    public boolean isBalanced(TreeNode root) {
-      return getBalancedTreeHeight(root) >= 0;
-    }
-  }
-
diff --git a/110.balanced-binary-tree.7725297.Accepted.leetcode.java b/110.balanced-binary-tree.7725297.Accepted.leetcode.java
deleted file mode 100644
index c6073f0d..00000000
--- ./110.balanced-binary-tree.7725297.Accepted.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-class Solution {
-    private int getBalancedTreeHeight(TreeNode root) {
-      if (root == null) {
-        return 0;
-      }
-
-      int left = getBalancedTreeHeight(root.left);
-      int right = getBalancedTreeHeight(root.right);
-
-      if (left < 0 || right < 0 || Math.abs(left - right) > 1) {
-        return -1;
-      }
-
-      return Math.max(left, right) + 1;
-    }
-
-    public boolean isBalanced(TreeNode root) {
-      return getBalancedTreeHeight(root) >= 0;
-    }
-  }
-
diff --git a/110.balanced-binary-tree.81037187.Wrong-Answer.leetcode.java b/110.balanced-binary-tree.81037187.Wrong-Answer.leetcode.java
deleted file mode 100644
index d2afc8c5..00000000
--- ./110.balanced-binary-tree.81037187.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-class Solution
-{
-    private int maxDepth(TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        int left = maxDepth(root.left);
-        int right = maxDepth(root.right);
-
-        if (left == -1 || right == -1 || Math.abs(left - right) > 1)
-        {
-            return -1;
-        }
-
-        return Math.max(left, right) + 1;
-    }
-    public boolean isBalanced(TreeNode root)
-    {
-        return maxDepth(root) == -1;
-    }
-}
diff --git a/110.balanced-binary-tree.81037403.Accepted.leetcode.java b/110.balanced-binary-tree.81037403.Accepted.leetcode.java
deleted file mode 100644
index b7b82f68..00000000
--- ./110.balanced-binary-tree.81037403.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-class Solution
-{
-    private int maxDepth(TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        int left = maxDepth(root.left);
-        int right = maxDepth(root.right);
-
-        if (left == -1 || right == -1 || Math.abs(left - right) > 1)
-        {
-            return -1;
-        }
-
-        return Math.max(left, right) + 1;
-    }
-    public boolean isBalanced(TreeNode root)
-    {
-        return maxDepth(root) != -1;
-    }
-}
diff --git a/114.flatten-binary-tree-to-linked-list.159325899.Runtime-Error.leetcode.java b/114.flatten-binary-tree-to-linked-list.159325899.Runtime-Error.leetcode.java
deleted file mode 100644
index 728e6738..00000000
--- ./114.flatten-binary-tree-to-linked-list.159325899.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    private TreeNode lastVisit = null;
-
-    public void flatten(TreeNode root)
-    {
-        if (root == null)
-        {
-            return;
-        }
-
-        TreeNode savedRight = root.right;
-
-        if (lastVisit != null)
-        {
-            lastVisit.left = null;
-            lastVisit.right = root;
-        }
-
-        lastVisit = root;
-        flatten(root.left);
-        flatten(root.right);
-    }
-}
-
diff --git a/114.flatten-binary-tree-to-linked-list.159330837.Runtime-Error.leetcode.java b/114.flatten-binary-tree-to-linked-list.159330837.Runtime-Error.leetcode.java
deleted file mode 100644
index 2cbefff1..00000000
--- ./114.flatten-binary-tree-to-linked-list.159330837.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution
-{
-    public void flatten(TreeNode root)
-    {
-        flattenHelper(root);
-    }
-
-    private TreeNode flattenHelper(TreeNode root)
-    {
-        if (root.left == null && root.right == null)
-        {
-            return root;
-        }
-
-        if (root.left == null)
-        {
-            return flattenHelper(root.right);
-        }
-
-        if (root.right == null)
-        {
-            root.right = root.left;
-            root.left = null;
-            return flattenHelper(root.right);
-        }
-
-        TreeNode leftLastNode = flattenHelper(root.left);
-        TreeNode rightLastNode = flattenHelper(root.right);
-        leftLastNode.right = root.right;
-        root.right = root.left;
-        root.left = null;
-        return rightLastNode;
-    }
-}
-
diff --git a/114.flatten-binary-tree-to-linked-list.159331626.Accepted.leetcode.java b/114.flatten-binary-tree-to-linked-list.159331626.Accepted.leetcode.java
deleted file mode 100644
index c1f8d6aa..00000000
--- ./114.flatten-binary-tree-to-linked-list.159331626.Accepted.leetcode.java
+++ /dev/null
@@ -1,40 +0,0 @@
-public class Solution
-{
-    public void flatten(TreeNode root)
-    {
-        flattenHelper(root);
-    }
-
-    private TreeNode flattenHelper(TreeNode root)
-    {
-        if (root == null)
-        {
-            return null;
-        }
-
-        if (root.left == null && root.right == null)
-        {
-            return root;
-        }
-
-        if (root.left == null)
-        {
-            return flattenHelper(root.right);
-        }
-
-        if (root.right == null)
-        {
-            root.right = root.left;
-            root.left = null;
-            return flattenHelper(root.right);
-        }
-
-        TreeNode leftLastNode = flattenHelper(root.left);
-        TreeNode rightLastNode = flattenHelper(root.right);
-        leftLastNode.right = root.right;
-        root.right = root.left;
-        root.left = null;
-        return rightLastNode;
-    }
-}
-
diff --git a/114.flatten-binary-tree-to-linked-list.159331905.Wrong-Answer.leetcode.java b/114.flatten-binary-tree-to-linked-list.159331905.Wrong-Answer.leetcode.java
deleted file mode 100644
index 7972bd15..00000000
--- ./114.flatten-binary-tree-to-linked-list.159331905.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public void flatten(TreeNode root)
-    {
-        flattenHelper(root);
-    }
-
-    private TreeNode flattenHelper(TreeNode root)
-    {
-        if (root == null)
-        {
-            return null;
-        }
-
-        if (root.left == null && root.right == null)
-        {
-            return root;
-        }
-
-        if (root.left == null)
-        {
-            return flattenHelper(root.right);
-        }
-
-        if (root.right == null)
-        {
-            root.right = root.left;
-            root.left = null;
-            return flattenHelper(root.right);
-        }
-
-        TreeNode leftLastNode = flattenHelper(root.left);
-        TreeNode rightLastNode = flattenHelper(root.right);
-        return rightLastNode;
-    }
-}
-
diff --git a/114.flatten-binary-tree-to-linked-list.85062228.Timeout.leetcode.java b/114.flatten-binary-tree-to-linked-list.85062228.Timeout.leetcode.java
deleted file mode 100644
index e2059831..00000000
--- ./114.flatten-binary-tree-to-linked-list.85062228.Timeout.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution 
-{
-    public void flatten(TreeNode root) 
-    {
-        flattenHelper(root);
-    }
-    
-    private TreeNode flattenHelper(TreeNode root) 
-    {
-        if (root == null) 
-        {
-            return null;
-        }
-        
-        if (root.left == null && root.right == null)
-        {
-            return root;
-        }
-        
-        if (root.left == null) 
-        {
-            return flattenHelper(root.right);
-        }
-        
-        if (root.right == null) 
-        {
-            root.right = root.left;
-            root.left = null;
-            return flattenHelper(root.right);
-        }
-        
-        // Divide
-        TreeNode leftLastNode = flattenHelper(root.left);
-        TreeNode rightLastNode = flattenHelper(root.right);
-        
-        // Conquer
-        leftLastNode.right = root.right;
-        root.right = root.left;
-        root.left = null;
-        return rightLastNode;
-    }
-}
diff --git a/115.distinct-subsequences.159435178.Accepted.leetcode.java b/115.distinct-subsequences.159435178.Accepted.leetcode.java
deleted file mode 100644
index b1849d26..00000000
--- ./115.distinct-subsequences.159435178.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int numDistinct(String S, String T)
-    {
-        int[] dp = new int[T.length() + 1];
-        dp[0] = 1;
-
-        for (int i = 1; i <= S.length(); i++)
-        {
-            for (int j = T.length(); j >= 1; j--)
-            {
-                if (S.charAt(i - 1) == T.charAt(j - 1))
-                {
-                    dp[j] += dp[j - 1];
-                }
-            }
-        }
-
-        return dp[T.length()];
-    }
-}
-
diff --git a/115.distinct-subsequences.159442005.Wrong-Answer.leetcode.java b/115.distinct-subsequences.159442005.Wrong-Answer.leetcode.java
deleted file mode 100644
index 514a3a4a..00000000
--- ./115.distinct-subsequences.159442005.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution
-{
-    public int numDistinct(String S, String T)
-    {
-        int[][] dp = new int[S.length() + 1][T.length() + 1];
-        dp[0][0] = 1;
-
-        for (int i = 1; i <= S.length(); i++)
-        {
-            for (int j = 1; j <= T.length(); j++)
-            {
-                dp[i][j] = dp[i - 1][j];
-
-                if (S.charAt(i - 1) == T.charAt(j - 1))
-                {
-                    dp[i][j] += dp[i - 1][j - 1];
-                }
-            }
-        }
-
-        return dp[S.length()][T.length()];
-    }
-}
-
diff --git a/115.distinct-subsequences.159444038.Accepted.leetcode.java b/115.distinct-subsequences.159444038.Accepted.leetcode.java
deleted file mode 100644
index 7faaa15d..00000000
--- ./115.distinct-subsequences.159444038.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public int numDistinct(String S, String T)
-    {
-        int[][] dp = new int[S.length() + 1][T.length() + 1];
-        dp[0][0] = 1;
-
-        for (int i = 1; i <= S.length(); i++)
-        {
-            dp[i][0] = 1;
-
-            for (int j = 1; j <= T.length(); j++)
-            {
-                dp[i][j] = dp[i - 1][j];
-
-                if (S.charAt(i - 1) == T.charAt(j - 1))
-                {
-                    dp[i][j] += dp[i - 1][j - 1];
-                }
-            }
-        }
-
-        return dp[S.length()][T.length()];
-    }
-}
-
diff --git a/115.distinct-subsequences.159444474.Accepted.leetcode.java b/115.distinct-subsequences.159444474.Accepted.leetcode.java
deleted file mode 100644
index 9578cb6f..00000000
--- ./115.distinct-subsequences.159444474.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public int numDistinct(String S, String T)
-    {
-        int[][] dp = new int[S.length() + 1][T.length() + 1];
-        dp[0][0] = 1;
-
-        for (int i = 1; i <= S.length(); i++)
-        {
-            dp[i][0] = 1;
-
-            for (int j = T.length(); j >= 1; j--)
-            {
-                dp[i][j] = dp[i - 1][j];
-
-                if (S.charAt(i - 1) == T.charAt(j - 1))
-                {
-                    dp[i][j] += dp[i - 1][j - 1];
-                }
-            }
-        }
-
-        return dp[S.length()][T.length()];
-    }
-}
-
diff --git a/115.distinct-subsequences.159445506.Runtime-Error.leetcode.java b/115.distinct-subsequences.159445506.Runtime-Error.leetcode.java
deleted file mode 100644
index ff278ccf..00000000
--- ./115.distinct-subsequences.159445506.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int numDistinct(String S, String T)
-    {
-        int[][] dp = new int[S.length()][T.length()];
-
-        for (int i = 0; i < S.length(); i++)
-        {
-            for (int j = 0; j < T.length(); j++)
-            {
-                if (i == 0 && j == 0)
-                {
-                    dp[i][j] = S.charAt(0) == T.charAt(0) ? 1 : 0;
-                    continue;
-                }
-
-                dp[i][j] = dp[i - 1][j];
-
-                if (S.charAt(i) == T.charAt(j))
-                {
-                    dp[i][j] += dp[i - 1][j - 1];
-                }
-            }
-        }
-
-        return dp[S.length() - 1][T.length() - 1];
-    }
-}
-
diff --git a/115.distinct-subsequences.159445918.Runtime-Error.leetcode.java b/115.distinct-subsequences.159445918.Runtime-Error.leetcode.java
deleted file mode 100644
index 2434c2d1..00000000
--- ./115.distinct-subsequences.159445918.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution
-{
-    public int numDistinct(String S, String T)
-    {
-        int[][] dp = new int[S.length()][T.length()];
-
-        for (int i = 0; i < S.length(); i++)
-        {
-            for (int j = 0; j < T.length(); j++)
-            {
-                if (i == 0 && j == 0)
-                {
-                    dp[i][j] = S.charAt(0) == T.charAt(0) ? 1 : 0;
-                    continue;
-                }
-
-                if (i == 0)
-                {
-                    dp[i][j] = 0;
-                    continue;
-                }
-
-                dp[i][j] = dp[i - 1][j];
-
-                if (S.charAt(i) == T.charAt(j))
-                {
-                    dp[i][j] += dp[i - 1][j - 1];
-                }
-            }
-        }
-
-        return dp[S.length() - 1][T.length() - 1];
-    }
-}
-
diff --git a/115.distinct-subsequences.159446204.Runtime-Error.leetcode.java b/115.distinct-subsequences.159446204.Runtime-Error.leetcode.java
deleted file mode 100644
index a1345336..00000000
--- ./115.distinct-subsequences.159446204.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution
-{
-    public int numDistinct(String S, String T)
-    {
-        int[][] dp = new int[S.length()][T.length()];
-
-        for (int i = 0; i < S.length(); i++)
-        {
-            for (int j = 0; j < T.length(); j++)
-            {
-                if (i == 0 && j == 0)
-                {
-                    dp[i][j] = S.charAt(0) == T.charAt(0) ? 1 : 0;
-                    continue;
-                }
-
-                if (i == 0)
-                {
-                    dp[i][j] = 0;
-                    continue;
-                }
-
-                if (j == 0)
-                {
-                    dp[i][j] = dp[i - 1][j];
-                    continue;
-                }
-
-                dp[i][j] = dp[i - 1][j];
-
-                if (S.charAt(i) == T.charAt(j))
-                {
-                    dp[i][j] += dp[i - 1][j - 1];
-                }
-            }
-        }
-
-        return dp[S.length() - 1][T.length() - 1];
-    }
-}
-
diff --git a/119.pascals-triangle-ii.10384577.Wrong-Answer.leetcode.java b/119.pascals-triangle-ii.10384577.Wrong-Answer.leetcode.java
deleted file mode 100644
index 11e26b9a..00000000
--- ./119.pascals-triangle-ii.10384577.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-	public class Solution {
-		public ArrayList<Integer> getRow(int rowIndex) {
-			ArrayList<Integer> row = new ArrayList<Integer>();
-
-			for (int r = 0; r <= rowIndex; r++) {
-				for (int j = 1; j <= r - 1; j++) {
-					row.set(j, row.get(j - 1) + row.get(j));
-				}
-
-				row.add(1);
-			}
-
-			return row;
-		}
-	}
-
diff --git a/119.pascals-triangle-ii.159818870.Accepted.leetcode.java b/119.pascals-triangle-ii.159818870.Accepted.leetcode.java
deleted file mode 100644
index d23d86d8..00000000
--- ./119.pascals-triangle-ii.159818870.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public ArrayList<Integer> getRow(int rowIndex)
-    {
-        ArrayList<Integer> row = new ArrayList<Integer>();
-
-        for (int r = 0; r <= rowIndex; r++)
-        {
-            for (int j = r - 1; j >= 1; j--)
-            {
-                row.set(j, row.get(j - 1) + row.get(j));
-            }
-
-            row.add(1);
-        }
-
-        return row;
-    }
-}
-
diff --git a/119.pascals-triangle-ii.9265241.Accepted.leetcode.java b/119.pascals-triangle-ii.9265241.Accepted.leetcode.java
deleted file mode 100644
index b3a00b26..00000000
--- ./119.pascals-triangle-ii.9265241.Accepted.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-  public class Solution {
-    public ArrayList<Integer> getRow(int rowIndex) {
-      ArrayList<Integer> row = new ArrayList<Integer>();
-
-      for (int r = 0; r <= rowIndex; r++) {
-        for (int j = r - 1; j >= 1; j--) {
-          row.set(j, row.get(j - 1) + row.get(j));
-        }
-
-        row.add(1);
-      }
-
-      return row;
-    }
-  }
-
diff --git a/12.integer-to-roman.31084015.Accepted.leetcode.java b/12.integer-to-roman.31084015.Accepted.leetcode.java
deleted file mode 100644
index da297734..00000000
--- ./12.integer-to-roman.31084015.Accepted.leetcode.java
+++ /dev/null
@@ -1,55 +0,0 @@
-  public class Solution
-  {
-
-    private final char[] symbols = new char[] { 'M', 'D', 'C', 'L', 'X',
-        'V', 'I'
-                                              };
-
-    private String repeat(char c, int times)
-    {
-      String re = "";
-
-      for (int i = 0; i < times; i++)
-      {
-        re += c;
-      }
-
-      return re;
-    }
-
-    public String intToRoman(int num)
-    {
-      String roman = "";
-      int scala = 1000;
-
-      for (int i = 0; i < symbols.length; i += 2)
-      {
-        int digit = num / scala;
-        num %= scala;
-        scala /= 10;
-
-        if (digit == 9)
-        {
-          roman += symbols[i];
-          roman += symbols[i - 2];
-        }
-        else if (digit >= 5)
-        {
-          roman += symbols[i - 1];
-          roman += repeat(symbols[i], digit - 5);
-        }
-        else if (digit == 4)
-        {
-          roman += symbols[i];
-          roman += symbols[i - 1];
-        }
-        else
-        {
-          roman += repeat(symbols[i], digit);
-        }
-      }
-
-      return roman;
-    }
-  }
-
diff --git a/121.best-time-to-buy-and-sell-stock.159986568.Wrong-Answer.leetcode.java b/121.best-time-to-buy-and-sell-stock.159986568.Wrong-Answer.leetcode.java
deleted file mode 100644
index 1d9202c0..00000000
--- ./121.best-time-to-buy-and-sell-stock.159986568.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,17 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        int maxProfit = Integer.MIN_VALUE;
-        int minPrice = Integer.MAX_VALUE;
-
-        for (int i = 1; i < prices.length; i++)
-        {
-            minPrice = Math.min(minPrice, prices[i - 1]);
-            maxProfit = Math.max(maxProfit, prices[i] - minPrice);
-        }
-
-        return maxProfit;
-    }
-}
-
diff --git a/121.best-time-to-buy-and-sell-stock.160144775.Accepted.leetcode.java b/121.best-time-to-buy-and-sell-stock.160144775.Accepted.leetcode.java
deleted file mode 100644
index 5f400e58..00000000
--- ./121.best-time-to-buy-and-sell-stock.160144775.Accepted.leetcode.java
+++ /dev/null
@@ -1,17 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        int maxProfit = 0;
-        int minPrice = Integer.MAX_VALUE;
-
-        for (int i = 1; i < prices.length; i++)
-        {
-            minPrice = Math.min(minPrice, prices[i - 1]);
-            maxProfit = Math.max(maxProfit, prices[i] - minPrice);
-        }
-
-        return maxProfit;
-    }
-}
-
diff --git a/121.best-time-to-buy-and-sell-stock.160145053.Runtime-Error.leetcode.java b/121.best-time-to-buy-and-sell-stock.160145053.Runtime-Error.leetcode.java
deleted file mode 100644
index 85f2fc57..00000000
--- ./121.best-time-to-buy-and-sell-stock.160145053.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        int maxProfit = 0;
-        int minPrice = prices[0];
-
-        for (int i = 1; i < prices.length; i++)
-        {
-            minPrice = Math.min(minPrice, prices[i - 1]);
-            maxProfit = Math.max(maxProfit, prices[i] - minPrice);
-        }
-
-        return maxProfit;
-    }
-}
-
-
diff --git a/121.best-time-to-buy-and-sell-stock.160146009.Accepted.leetcode.java b/121.best-time-to-buy-and-sell-stock.160146009.Accepted.leetcode.java
deleted file mode 100644
index 91bc8a5e..00000000
--- ./121.best-time-to-buy-and-sell-stock.160146009.Accepted.leetcode.java
+++ /dev/null
@@ -1,17 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        int maxProfit = 0;
-        int minPrice = Integer.MAX_VALUE;
-
-        for (int i = 0; i < prices.length; i++)
-        {
-            minPrice = Math.min(minPrice, prices[i]);
-            maxProfit = Math.max(maxProfit, prices[i] - minPrice);
-        }
-
-        return maxProfit;
-    }
-}
-
diff --git a/122.best-time-to-buy-and-sell-stock-ii.102740374.Accepted.leetcode.java b/122.best-time-to-buy-and-sell-stock-ii.102740374.Accepted.leetcode.java
deleted file mode 100644
index e8ebe4c2..00000000
--- ./122.best-time-to-buy-and-sell-stock-ii.102740374.Accepted.leetcode.java
+++ /dev/null
@@ -1,14 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        int profit = 0;
-
-        for (int i = 1; i < prices.length; i++)
-        {
-            profit += Math.max(0, prices[i] - prices[i - 1]);
-        }
-
-        return profit;
-    }
-}
diff --git a/122.best-time-to-buy-and-sell-stock-ii.102742161.Wrong-Answer.leetcode.java b/122.best-time-to-buy-and-sell-stock-ii.102742161.Wrong-Answer.leetcode.java
deleted file mode 100644
index da97539d..00000000
--- ./122.best-time-to-buy-and-sell-stock-ii.102742161.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,14 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        int profit = 0;
-
-        for (int i = 1; i < prices.length; i++)
-        {
-            profit += prices[i] - prices[i - 1];
-        }
-
-        return profit;
-    }
-}
diff --git a/122.best-time-to-buy-and-sell-stock-ii.102742173.Runtime-Error.leetcode.java b/122.best-time-to-buy-and-sell-stock-ii.102742173.Runtime-Error.leetcode.java
deleted file mode 100644
index 3e07457b..00000000
--- ./122.best-time-to-buy-and-sell-stock-ii.102742173.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,14 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        int profit = 0;
-
-        for (int i = 0; i < prices.length; i++)
-        {
-            profit += Math.max(0, prices[i] - prices[i - 1]);
-        }
-
-        return profit;
-    }
-}
diff --git a/122.best-time-to-buy-and-sell-stock-ii.102765956.Runtime-Error.leetcode.java b/122.best-time-to-buy-and-sell-stock-ii.102765956.Runtime-Error.leetcode.java
deleted file mode 100644
index cdbfac5c..00000000
--- ./122.best-time-to-buy-and-sell-stock-ii.102765956.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        if (prices == null || prices.length < 2)
-        {
-            return 0;
-        }
-        
-        int profit = 0;
-
-        for (int i = 0; i < prices.length; i++)
-        {
-            profit += Math.max(0, prices[i] - prices[i - 1]);
-        }
-
-        return profit;
-    }
-}
diff --git a/122.best-time-to-buy-and-sell-stock-ii.102765972.Accepted.leetcode.java b/122.best-time-to-buy-and-sell-stock-ii.102765972.Accepted.leetcode.java
deleted file mode 100644
index 51b44ea9..00000000
--- ./122.best-time-to-buy-and-sell-stock-ii.102765972.Accepted.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        if (prices == null || prices.length < 2)
-        {
-            return 0;
-        }
-        
-        int profit = 0;
-
-        for (int i = 1; i < prices.length; i++)
-        {
-            profit += Math.max(0, prices[i] - prices[i - 1]);
-        }
-
-        return profit;
-    }
-}
diff --git a/122.best-time-to-buy-and-sell-stock-ii.155312055.Accepted.leetcode.java b/122.best-time-to-buy-and-sell-stock-ii.155312055.Accepted.leetcode.java
deleted file mode 100644
index 2d4a0ffb..00000000
--- ./122.best-time-to-buy-and-sell-stock-ii.155312055.Accepted.leetcode.java
+++ /dev/null
@@ -1,15 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        int profit = 0;
-
-        for (int i = 1; i < prices.length; i++)
-        {
-            profit += Math.max(0, prices[i] - prices[i - 1]);
-        }
-
-        return profit;
-    }
-}
-
diff --git a/122.best-time-to-buy-and-sell-stock-ii.31081141.Accepted.leetcode.java b/122.best-time-to-buy-and-sell-stock-ii.31081141.Accepted.leetcode.java
deleted file mode 100644
index 820d6885..00000000
--- ./122.best-time-to-buy-and-sell-stock-ii.31081141.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-  public class Solution
-  {
-    public int maxProfit(int[] prices)
-    {
-      if (prices.length == 0)
-      {
-        return 0;
-      }
-
-      int profit = 0;
-
-      for (int i = 1; i < prices.length; i++)
-      {
-        profit += Math.max(0, prices[i] - prices[i - 1]);
-      }
-
-      return profit;
-    }
-  }
-
diff --git a/122.best-time-to-buy-and-sell-stock-ii.84756441.Accepted.leetcode.java b/122.best-time-to-buy-and-sell-stock-ii.84756441.Accepted.leetcode.java
deleted file mode 100644
index de795d88..00000000
--- ./122.best-time-to-buy-and-sell-stock-ii.84756441.Accepted.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        if (prices.length == 0)
-        {
-            return 0;
-        }
-
-        int profit = 0;
-
-        for (int i = 1; i < prices.length; i++)
-        {
-            profit += Math.max(0, prices[i] - prices[i - 1]);
-        }
-
-        return profit;
-    }
-}
diff --git a/123.best-time-to-buy-and-sell-stock-iii.209750730.Runtime-Error.leetcode.java b/123.best-time-to-buy-and-sell-stock-iii.209750730.Runtime-Error.leetcode.java
deleted file mode 100644
index e6900970..00000000
--- ./123.best-time-to-buy-and-sell-stock-iii.209750730.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        int[] preProfit = new int[prices.length];
-        preProfit[0] = 0;
-        int minPrice = prices[0];
-
-        for (int i = 1; i < prices.length; i++)
-        {
-            minPrice = Math.min(minPrice, prices[i - 1]);
-            preProfit[i] = Math.max(preProfit[i - 1], prices[i] - minPrice);
-        }
-
-        int maxPrice = prices[prices.length - 1];
-        int maxProfit = preProfit[prices.length - 1];
-
-        for (int i = prices.length - 2; i > 0; i--)
-        {
-            maxPrice = Math.max(maxPrice, prices[i]);
-            maxProfit = Math.max(maxProfit, preProfit[i - 1] + maxPrice - prices[i]);
-        }
-
-        return maxProfit;
-    }
-}
-
diff --git a/123.best-time-to-buy-and-sell-stock-iii.209750863.Runtime-Error.leetcode.java b/123.best-time-to-buy-and-sell-stock-iii.209750863.Runtime-Error.leetcode.java
deleted file mode 100644
index e969669f..00000000
--- ./123.best-time-to-buy-and-sell-stock-iii.209750863.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        int[] preProfit = new int[prices.length];
-        preProfit[0] = 0;
-        int minPrice = prices[0];
-
-        for (int i = 1; i < prices.length; i++)
-        {
-            minPrice = Math.min(minPrice, prices[i]);
-            preProfit[i] = Math.max(preProfit[i - 1], prices[i] - minPrice);
-        }
-
-        int maxPrice = prices[prices.length - 1];
-        int maxProfit = preProfit[prices.length - 1];
-
-        for (int i = prices.length - 2; i > 0; i--)
-        {
-            maxPrice = Math.max(maxPrice, prices[i]);
-            maxProfit = Math.max(maxProfit, preProfit[i - 1] + maxPrice - prices[i]);
-        }
-
-        return maxProfit;
-    }
-}
-
diff --git a/123.best-time-to-buy-and-sell-stock-iii.209751383.Accepted.leetcode.java b/123.best-time-to-buy-and-sell-stock-iii.209751383.Accepted.leetcode.java
deleted file mode 100644
index 3f3ced3d..00000000
--- ./123.best-time-to-buy-and-sell-stock-iii.209751383.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        if (prices.length == 0)
-        {
-            return 0;
-        }
-
-        int[] preProfit = new int[prices.length];
-        preProfit[0] = 0;
-        int minPrice = prices[0];
-
-        for (int i = 1; i < prices.length; i++)
-        {
-            minPrice = Math.min(minPrice, prices[i - 1]);
-            preProfit[i] = Math.max(preProfit[i - 1], prices[i] - minPrice);
-        }
-
-        int maxPrice = prices[prices.length - 1];
-        int maxProfit = preProfit[prices.length - 1];
-
-        for (int i = prices.length - 2; i > 0; i--)
-        {
-            maxPrice = Math.max(maxPrice, prices[i]);
-            maxProfit = Math.max(maxProfit, preProfit[i - 1] + maxPrice - prices[i]);
-        }
-
-        return maxProfit;
-    }
-}
-
diff --git a/123.best-time-to-buy-and-sell-stock-iii.209751601.Accepted.leetcode.java b/123.best-time-to-buy-and-sell-stock-iii.209751601.Accepted.leetcode.java
deleted file mode 100644
index 1ce3a8b5..00000000
--- ./123.best-time-to-buy-and-sell-stock-iii.209751601.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        if (prices.length == 0)
-        {
-            return 0;
-        }
-
-        int[] preProfit = new int[prices.length];
-        preProfit[0] = 0;
-        int minPrice = prices[0];
-
-        for (int i = 1; i < prices.length; i++)
-        {
-            minPrice = Math.min(minPrice, prices[i - 1]);
-            preProfit[i] = Math.max(preProfit[i - 1], prices[i] - minPrice);
-        }
-
-        int maxPrice = prices[prices.length - 1];
-        int maxProfit = preProfit[prices.length - 1];
-
-        for (int i = prices.length - 2; i > 0; i--)
-        {
-            maxPrice = Math.max(maxPrice, prices[i + 1]);
-            maxProfit = Math.max(maxProfit, preProfit[i - 1] + maxPrice - prices[i]);
-        }
-
-        return maxProfit;
-    }
-}
-
diff --git a/123.best-time-to-buy-and-sell-stock-iii.209751788.Accepted.leetcode.java b/123.best-time-to-buy-and-sell-stock-iii.209751788.Accepted.leetcode.java
deleted file mode 100644
index 56bc068a..00000000
--- ./123.best-time-to-buy-and-sell-stock-iii.209751788.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        if (prices == null || prices.length == 0)
-        {
-            return 0;
-        }
-
-        int[] preProfit = new int[prices.length];
-        preProfit[0] = 0;
-        int minPrice = prices[0];
-
-        for (int i = 1; i < prices.length; i++)
-        {
-            minPrice = Math.min(minPrice, prices[i]);
-            preProfit[i] = Math.max(preProfit[i - 1], prices[i] - minPrice);
-        }
-
-        int maxPrice = prices[prices.length - 1];
-        int maxProfit = preProfit[prices.length - 1];
-
-        for (int i = prices.length - 2; i > 0; i--)
-        {
-            maxPrice = Math.max(maxPrice, prices[i]);
-            maxProfit = Math.max(maxProfit, preProfit[i - 1] + maxPrice - prices[i]);
-        }
-
-        return maxProfit;
-    }
-}
-
diff --git a/123.best-time-to-buy-and-sell-stock-iii.209752027.Accepted.leetcode.java b/123.best-time-to-buy-and-sell-stock-iii.209752027.Accepted.leetcode.java
deleted file mode 100644
index ad6e857a..00000000
--- ./123.best-time-to-buy-and-sell-stock-iii.209752027.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public int maxProfit(int[] prices)
-    {
-        if (prices.length == 0)
-        {
-            return 0;
-        }
-
-        int[] preProfit = new int[prices.length];
-        preProfit[0] = 0;
-        int minPrice = prices[0];
-
-        for (int i = 1; i < prices.length; i++)
-        {
-            minPrice = Math.min(minPrice, prices[i]);
-            preProfit[i] = Math.max(preProfit[i - 1], prices[i] - minPrice);
-        }
-
-        int maxPrice = prices[prices.length - 1];
-        int maxProfit = preProfit[prices.length - 1];
-
-        for (int i = prices.length - 2; i > 0; i--)
-        {
-            maxPrice = Math.max(maxPrice, prices[i]);
-            maxProfit = Math.max(maxProfit, preProfit[i - 1] + maxPrice - prices[i]);
-        }
-
-        return maxProfit;
-    }
-}
-
diff --git a/124.binary-tree-maximum-path-sum.160364337.Accepted.leetcode.java b/124.binary-tree-maximum-path-sum.160364337.Accepted.leetcode.java
deleted file mode 100644
index fdd637dd..00000000
--- ./124.binary-tree-maximum-path-sum.160364337.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-
-    private int max;
-
-    public int findMax(TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        int left = Math.max(findMax(root.left), 0);
-        int right = Math.max(findMax(root.right), 0);
-        max = Math.max(max, root.val + left + right);
-        return Math.max(left, right) > 0 ? Math.max(left, right) + root.val : root.val;
-    }
-
-    public int maxPathSum(TreeNode root)
-    {
-        max = Integer.MIN_VALUE;
-        findMax(root);
-        return max;
-    }
-}
-
diff --git a/124.binary-tree-maximum-path-sum.160377317.Wrong-Answer.leetcode.java b/124.binary-tree-maximum-path-sum.160377317.Wrong-Answer.leetcode.java
deleted file mode 100644
index 6087c810..00000000
--- ./124.binary-tree-maximum-path-sum.160377317.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class Solution
-{
-
-    private int max_sum;
-
-    public int dfs(TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        int left = maxPathSum(root.left);
-        int right = maxPathSum(root.right);
-        int sum = root.val;
-
-        if (left > 0)
-        {
-            sum += left;
-        }
-
-        if (right > 0)
-        {
-            sum += right;
-        }
-
-        max_sum = Math.max(max_sum, sum);
-        return Math.max(left, right) > 0 ? Math.max(left, right) + root.val : root.val;
-    }
-
-    public int maxPathSum(TreeNode root)
-    {
-        max_sum = Integer.MIN_VALUE;
-        dfs(root);
-        return max_sum;
-    }
-}
-
diff --git a/124.binary-tree-maximum-path-sum.160378263.Accepted.leetcode.java b/124.binary-tree-maximum-path-sum.160378263.Accepted.leetcode.java
deleted file mode 100644
index d59a638f..00000000
--- ./124.binary-tree-maximum-path-sum.160378263.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution
-{
-    private int max;
-    public int findMax(TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        int left = Math.max(findMax(root.left), 0);
-        int right = Math.max(findMax(root.right), 0);
-        max = Math.max(max, root.val + left + right);
-        return root.val + Math.max(left, right);
-    }
-
-    public int maxPathSum(TreeNode root)
-    {
-        max = Integer.MIN_VALUE;
-        findMax(root);
-        return max;
-    }
-}
-
diff --git a/124.binary-tree-maximum-path-sum.73741216.Accepted.leetcode.java b/124.binary-tree-maximum-path-sum.73741216.Accepted.leetcode.java
deleted file mode 100644
index d072b7c3..00000000
--- ./124.binary-tree-maximum-path-sum.73741216.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution {
-    private class ResultType {
-        // singlePath: 从root往下走到任意点的最大路径，这条路径可以不包含任何点
-        // maxPath: 从树中任意到任意点的最大路径，这条路径至少包含一个点
-        int singlePath, maxPath; 
-        ResultType(int singlePath, int maxPath) {
-            this.singlePath = singlePath;
-            this.maxPath = maxPath;
-        }
-    }
-
-    private ResultType helper(TreeNode root) {
-        if (root == null) {
-            return new ResultType(0, Integer.MIN_VALUE);
-        }
-        // Divide
-        ResultType left = helper(root.left);
-        ResultType right = helper(root.right);
-
-        // Conquer
-        int singlePath = Math.max(left.singlePath, right.singlePath) + root.val;
-        singlePath = Math.max(singlePath, 0);
-
-        int maxPath = Math.max(left.maxPath, right.maxPath);
-        maxPath = Math.max(maxPath, left.singlePath + right.singlePath + root.val);
-
-        return new ResultType(singlePath, maxPath);
-    }
-
-    public int maxPathSum(TreeNode root) {
-        ResultType result = helper(root);
-        return result.maxPath;
-    }
-}
diff --git a/124.binary-tree-maximum-path-sum.73741605.Accepted.leetcode.java b/124.binary-tree-maximum-path-sum.73741605.Accepted.leetcode.java
deleted file mode 100644
index 05595d08..00000000
--- ./124.binary-tree-maximum-path-sum.73741605.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    private int max;
-    public int findMax(TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        int left = Math.max(findMax(root.left), 0);
-        int right = Math.max(findMax(root.right), 0);
-        max = Math.max(max, root.val + left + right);
-        return root.val + Math.max(left, right);
-    }
-    public int maxPathSum(TreeNode root)
-    {
-        max = Integer.MIN_VALUE;
-        findMax(root);
-        return max;
-    }
-}
-
diff --git a/124.binary-tree-maximum-path-sum.81168503.Time-Limit-Exceeded.leetcode.java b/124.binary-tree-maximum-path-sum.81168503.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 99ce6a79..00000000
--- ./124.binary-tree-maximum-path-sum.81168503.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    private int max;
-    public int findMax(TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        int left = Math.max(findMax(root.left), 0);
-        int right = Math.max(findMax(root.right), 0);
-        max = Math.max(max, root.val + left + right);
-        return root.val + Math.max(left, right);
-    }
-    
-    public int maxPathSum(TreeNode root)
-    {
-        max = Integer.MIN_VALUE;
-        findMax(root);
-        return max;
-    }
-}
diff --git a/126.word-ladder-ii.10785184.Time-Limit-Exceeded.leetcode.java b/126.word-ladder-ii.10785184.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index e3489996..00000000
--- ./126.word-ladder-ii.10785184.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,131 +0,0 @@
-  public class Solution {
-
-    private HashMap<Integer, List<Integer>> searchNeighbors(String[] nodes) {
-      HashMap<String, Integer> indices = new HashMap<String, Integer>(
-        nodes.length);
-      int i = 0;
-
-      for (String word : nodes) {
-        indices.put(word, i++);
-      }
-
-      HashMap<Integer, List<Integer>> neighbors = new
-      HashMap<Integer, List<Integer>>();
-      i = 0;
-
-      for (String word : nodes) {
-        List<Integer> neighbor = neighbors.get(word);
-
-        if (neighbor == null) {
-          neighbor = new ArrayList<Integer>();
-          neighbors.put(i, neighbor);
-        }
-
-        char[] temp = word.toCharArray();
-
-        for (int j = 0; j < temp.length; j++) {
-          char oldC = temp[j];
-
-          for (char c = 'a'; c <= 'z'; c++) {
-            if (c != oldC) {
-              temp[j] = c;
-              String newS = new String(temp);
-              Integer index = indices.get(newS);
-
-              if (index != null) {
-                neighbor.add(index);
-              }
-            }
-          }
-
-          temp[j] = oldC;
-        }
-
-        i++;
-      }
-
-      return neighbors;
-    }
-
-    public ArrayList<ArrayList<String>> findLadders(String start,
-        String end, HashSet<String> dict) {
-      ArrayList<ArrayList<String>> ans = new ArrayList<ArrayList<String>>();
-
-      if (start.equals(end)) {
-        ArrayList<String> l = new ArrayList<String>();
-        l.add(start);
-        ans.add(l);
-        return ans;
-      }
-
-      ArrayList<Integer> queue = new ArrayList<Integer>();
-      ArrayList<Integer> prev = new ArrayList<Integer>();
-      dict.add(start);
-      dict.add(end);
-      String[] nodes = new String[dict.size()];
-      int j = 0;
-      int startIndex = 0;
-      int endIndex = 0;
-
-      for (String word : dict) {
-        if (word.equals(start)) {
-          startIndex = j;
-        }
-
-        if (word.equals(end)) {
-          endIndex = j;
-        }
-
-        nodes[j++] = word;
-      }
-
-      HashMap<Integer, List<Integer>> neighbors = searchNeighbors(nodes);
-      System.gc(); // To avoid "Memory Limit Exceeded"
-      queue.add(startIndex);
-      prev.add(-1);
-      boolean[] used = new boolean[nodes.length];
-      used[startIndex] = true;
-      int begin = 0;
-      boolean find = false;
-
-      while (!find && begin < queue.size()) {
-        int tail = queue.size();
-
-        for (int i = begin; i < tail; i++) {
-          int s = queue.get(i);
-
-          for (int indexInNode : neighbors.get(s)) {
-            if (indexInNode == endIndex) {
-              find = true;
-              ArrayList<String> path = new ArrayList<String>();
-              path.add(end);
-              int index = i;
-
-              while (index >= 0) {
-                path.add(nodes[queue.get(index)]);
-                index = prev.get(index);
-              }
-
-              Collections.reverse(path);
-              ans.add(path);
-              break;
-            }
-
-            if (!find && !used[indexInNode]) {
-              queue.add(indexInNode);
-              prev.add(i);
-            }
-          }
-        }
-
-        begin = tail;
-
-        for (int i = begin; i < tail; i++) {
-          used[queue.get(i)] = true;
-        }
-      }
-
-      return ans;
-    }
-  }
-
diff --git a/126.word-ladder-ii.31081602.Memory-Limit-Exceeded.leetcode.java b/126.word-ladder-ii.31081602.Memory-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 726e5fbf..00000000
--- ./126.word-ladder-ii.31081602.Memory-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,152 +0,0 @@
-  public class Solution
-  {
-
-    private HashMap<Integer, List<Integer>> searchNeighbors(String[] nodes)
-    {
-      HashMap<String, Integer> indices = new HashMap<String, Integer>(
-        nodes.length);
-      int i = 0;
-
-      for (String word : nodes)
-      {
-        indices.put(word, i++);
-      }
-
-      HashMap<Integer, List<Integer>> neighbors = new
-      HashMap<Integer, List<Integer>>();
-      i = 0;
-
-      for (String word : nodes)
-      {
-        List<Integer> neighbor = neighbors.get(word);
-
-        if (neighbor == null)
-        {
-          neighbor = new ArrayList<Integer>();
-          neighbors.put(i, neighbor);
-        }
-
-        char[] temp = word.toCharArray();
-
-        for (int j = 0; j < temp.length; j++)
-        {
-          char oldC = temp[j];
-
-          for (char c = 'a'; c <= 'z'; c++)
-          {
-            if (c != oldC)
-            {
-              temp[j] = c;
-              String newS = new String(temp);
-              Integer index = indices.get(newS);
-
-              if (index != null)
-              {
-                neighbor.add(index);
-              }
-            }
-          }
-
-          temp[j] = oldC;
-        }
-
-        i++;
-      }
-
-      return neighbors;
-    }
-
-    public ArrayList<ArrayList<String>> findLadders(String start,
-        String end, HashSet<String> dict)
-    {
-      ArrayList<ArrayList<String>> ans = new ArrayList<ArrayList<String>>();
-
-      if (start.equals(end))
-      {
-        ArrayList<String> l = new ArrayList<String>();
-        l.add(start);
-        ans.add(l);
-        return ans;
-      }
-
-      ArrayList<Integer> queue = new ArrayList<Integer>();
-      ArrayList<Integer> prev = new ArrayList<Integer>();
-      dict.add(start);
-      dict.add(end);
-      String[] nodes = new String[dict.size()];
-      int j = 0;
-      int startIndex = 0;
-      int endIndex = 0;
-
-      for (String word : dict)
-      {
-        if (word.equals(start))
-        {
-          startIndex = j;
-        }
-
-        if (word.equals(end))
-        {
-          endIndex = j;
-        }
-
-        nodes[j++] = word;
-      }
-
-      HashMap<Integer, List<Integer>> neighbors = searchNeighbors(nodes);
-      System.gc(); // To avoid "Memory Limit Exceeded"
-      queue.add(startIndex);
-      prev.add(-1);
-      boolean[] used = new boolean[nodes.length];
-      used[startIndex] = true;
-      int begin = 0;
-      boolean find = false;
-
-      while (!find && begin < queue.size())
-      {
-        int tail = queue.size();
-
-        for (int i = begin; i < tail; i++)
-        {
-          int s = queue.get(i);
-
-          for (int indexInNode : neighbors.get(s))
-          {
-            if (indexInNode == endIndex)
-            {
-              find = true;
-              ArrayList<String> path = new ArrayList<String>();
-              path.add(end);
-              int index = i;
-
-              while (index >= 0)
-              {
-                path.add(nodes[queue.get(index)]);
-                index = prev.get(index);
-              }
-
-              Collections.reverse(path);
-              ans.add(path);
-              break;
-            }
-
-            if (!find && !used[indexInNode])
-            {
-              queue.add(indexInNode);
-              prev.add(i);
-            }
-          }
-        }
-
-        begin = tail;
-
-        for (int i = begin; i < tail; i++)
-        {
-          used[queue.get(i)] = true;
-        }
-      }
-
-      return ans;
-    }
-  }
-
diff --git a/126.word-ladder-ii.31081793.Accepted.leetcode.java b/126.word-ladder-ii.31081793.Accepted.leetcode.java
deleted file mode 100644
index 0a223a77..00000000
--- ./126.word-ladder-ii.31081793.Accepted.leetcode.java
+++ /dev/null
@@ -1,84 +0,0 @@
-public class Solution {
-    class StringWithLevel {  
-   String str;  
-   int level;  
-   public StringWithLevel(String str, int level) {  
-      this.str = str;  
-      this.level = level;  
-   }  
-}  
-public ArrayList<ArrayList<String>> findLadders(String start, String end, HashSet<String> dict) {  
-   ArrayList<ArrayList<String>> res = new ArrayList<ArrayList<String>>();  
-   HashSet<String> unvisitedSet = new HashSet<String>();  
-   unvisitedSet.addAll(dict);  
-   unvisitedSet.add(start);  
-   unvisitedSet.remove(end);  
-   Map<String, List<String>> nextMap = new HashMap<String, List<String>>();  
-   for (String e : unvisitedSet) {  
-      nextMap.put(e, new ArrayList<String>());  
-   }  
-   LinkedList<StringWithLevel> queue = new LinkedList<StringWithLevel>();  
-   queue.add(new StringWithLevel(end, 0));  
-   boolean found = false;  
-   int finalLevel = Integer.MAX_VALUE;  
-   int curLevel = 0;  
-   int preLevel = 0;  
-   HashSet<String> visitedCurLevel = new HashSet<String>();  
-   while (!queue.isEmpty()) {  
-      StringWithLevel cur = queue.poll();  
-      String curStr = cur.str;  
-      curLevel = cur.level;  
-      if(found && curLevel > finalLevel) {  
-         break;  
-      }  
-      if (curLevel > preLevel) {  
-         unvisitedSet.removeAll(visitedCurLevel);  
-      }  
-      preLevel = curLevel;  
-      char[] curStrCharArray = curStr.toCharArray();  
-      for (int i = 0; i < curStr.length(); ++i) {  
-         char originalChar = curStrCharArray[i];  
-         boolean foundCurCycle = false;  
-         for (char c = 'a'; c <= 'z'; ++c) {  
-            curStrCharArray[i] = c;  
-            String newStr = new String(curStrCharArray);  
-            if(c != originalChar && unvisitedSet.contains(newStr)) {  
-               nextMap.get(newStr).add(curStr);  
-               if(newStr.equals(start)) {  
-                  found = true;  
-                  finalLevel = curLevel;  
-                  foundCurCycle = true;  
-                  break;  
-               }  
-               if(visitedCurLevel.add(newStr)) {  
-                  queue.add(new StringWithLevel(newStr, curLevel + 1));  
-               }  
-            }  
-         }  
-         if(foundCurCycle) {  
-            break;  
-         }  
-         curStrCharArray[i] = originalChar;  
-     }  
-   }  
-   if(found) {  
-       ArrayList<String> list = new ArrayList<String>();  
-       list.add(start);  
-       getPaths(start, end, list, finalLevel + 1, nextMap, res);  
-   }  
-   return res;  
-}  
-private void getPaths(String cur, String end, ArrayList<String> list, int level, Map<String, List<String>> nextMap, ArrayList<ArrayList<String>> res) {  
-   if(cur.equals(end)){  
-      res.add(new ArrayList<String>(list));  
-   }  
-   else if(level > 0){  
-      List<String> parentsSet = nextMap.get(cur);  
-      for (String parent : parentsSet) {  
-         list.add(parent);  
-         getPaths(parent, end, list, level - 1, nextMap, res);  
-         list.remove(list.size() - 1);  
-      }  
-   }  
-} 
-}
diff --git a/127.word-ladder.160425933.Accepted.leetcode.java b/127.word-ladder.160425933.Accepted.leetcode.java
deleted file mode 100644
index 78430241..00000000
--- ./127.word-ladder.160425933.Accepted.leetcode.java
+++ /dev/null
@@ -1,67 +0,0 @@
-class Solution
-{
-    public int ladderLength(String beginWord, String endWord, List<String> wordList)
-    {
-        Set<String> dict = new HashSet<>();
-
-        for (String word : wordList)
-        {
-            dict.add(word);
-        }
-
-        if (!dict.contains(endWord))
-        {
-            return 0;
-        }
-
-        Queue<String> q = new ArrayDeque<>();
-        q.offer(beginWord);
-        int l = beginWord.length();
-        int steps = 0;
-
-        while (!q.isEmpty())
-        {
-            ++steps;
-
-            for (int s = q.size(); s > 0; --s)
-            {
-                String w = q.poll();
-                char[] chs = w.toCharArray();
-
-                for (int i = 0; i < l; ++i)
-                {
-                    char ch = chs[i];
-
-                    for (char c = 'a'; c <= 'z'; ++c)
-                    {
-                        if (c == ch)
-                        {
-                            continue;
-                        }
-
-                        chs[i] = c;
-                        String t = new String(chs);
-
-                        if (t.equals(endWord))
-                        {
-                            return steps + 1;
-                        }
-
-                        if (!dict.contains(t))
-                        {
-                            continue;
-                        }
-
-                        dict.remove(t);
-                        q.offer(t);
-                    }
-
-                    chs[i] = ch;
-                }
-            }
-        }
-
-        return 0;
-    }
-}
-
diff --git a/127.word-ladder.160426004.Accepted.leetcode.java b/127.word-ladder.160426004.Accepted.leetcode.java
deleted file mode 100644
index 5dd0f616..00000000
--- ./127.word-ladder.160426004.Accepted.leetcode.java
+++ /dev/null
@@ -1,74 +0,0 @@
-class Solution
-{
-    public int ladderLength(String beginWord, String endWord, List<String> wordList)
-    {
-        Set<String> dict = new HashSet<>();
-
-        for (String word : wordList)
-        {
-            dict.add(word);
-        }
-
-        if (!dict.contains(endWord))
-        {
-            return 0;
-        }
-
-        Set<String> q1 = new HashSet<>();
-        Set<String> q2 = new HashSet<>();
-        q1.add(beginWord);
-        q2.add(endWord);
-        int l = beginWord.length();
-        int steps = 0;
-
-        while (!q1.isEmpty() && !q2.isEmpty())
-        {
-            ++steps;
-
-            if (q1.size() > q2.size())
-            {
-                Set<String> tmp = q1;
-                q1 = q2;
-                q2 = tmp;
-            }
-
-            Set<String> q = new HashSet<>();
-
-            for (String w : q1)
-            {
-                char[] chs = w.toCharArray();
-
-                for (int i = 0; i < l; ++i)
-                {
-                    char ch = chs[i];
-
-                    for (char c = 'a'; c <= 'z'; ++c)
-                    {
-                        chs[i] = c;
-                        String t = new String(chs);
-
-                        if (q2.contains(t))
-                        {
-                            return steps + 1;
-                        }
-
-                        if (!dict.contains(t))
-                        {
-                            continue;
-                        }
-
-                        dict.remove(t);
-                        q.add(t);
-                    }
-
-                    chs[i] = ch;
-                }
-            }
-
-            q1 = q;
-        }
-
-        return 0;
-    }
-}
-
diff --git a/128.longest-consecutive-sequence.160428737.Wrong-Answer.leetcode.java b/128.longest-consecutive-sequence.160428737.Wrong-Answer.leetcode.java
deleted file mode 100644
index df204c95..00000000
--- ./128.longest-consecutive-sequence.160428737.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-public class Solution
-{
-    public int longestConsecutive(int[] nums)
-    {
-        int result = 1;
-        Set<Integer> dict = new HashSet<Integer>();
-
-        for (int num : nums)
-        {
-            dict.add(num);
-        }
-
-        for (int num : nums)
-        {
-            int count = 1;
-
-            if (dict.contains(num))
-            {
-                int right = num + 1;
-
-                while (dict.contains(right))
-                {
-                    count++;
-                    dict.remove(right++);
-                }
-
-                int left = num - 1;
-
-                while (dict.contains(left))
-                {
-                    count++;
-                    dict.remove(left--);
-                }
-
-                dict.remove(num);
-            }
-
-            result = Math.max(result, count);
-        }
-
-        return result;
-    }
-}
-
diff --git a/128.longest-consecutive-sequence.160429004.Wrong-Answer.leetcode.java b/128.longest-consecutive-sequence.160429004.Wrong-Answer.leetcode.java
deleted file mode 100644
index db4abd3a..00000000
--- ./128.longest-consecutive-sequence.160429004.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-public class Solution
-{
-    public int longestConsecutive(int[] nums)
-    {
-        int result = 1;
-        Set<Integer> dict = new HashSet<Integer>();
-
-        for (int num : nums)
-        {
-            dict.add(num);
-        }
-
-        for (int num : nums)
-        {
-            int count = 0;
-
-            if (dict.contains(num))
-            {
-                int right = num + 1;
-
-                while (dict.contains(right))
-                {
-                    ++count;
-                    dict.remove(right++);
-                }
-
-                int left = num - 1;
-
-                while (dict.contains(left))
-                {
-                    ++count;
-                    dict.remove(left--);
-                }
-
-                dict.remove(num);
-            }
-
-            result = Math.max(result, count);
-        }
-
-        return result;
-    }
-}
-
diff --git a/128.longest-consecutive-sequence.160429161.Accepted.leetcode.java b/128.longest-consecutive-sequence.160429161.Accepted.leetcode.java
deleted file mode 100644
index 5649aed7..00000000
--- ./128.longest-consecutive-sequence.160429161.Accepted.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-public class Solution
-{
-    public int longestConsecutive(int[] nums)
-    {
-        int result = 0;
-        Set<Integer> dict = new HashSet<Integer>();
-
-        for (int num : nums)
-        {
-            dict.add(num);
-        }
-
-        for (int num : nums)
-        {
-            int count = 1;
-
-            if (dict.contains(num))
-            {
-                int right = num + 1;
-
-                while (dict.contains(right))
-                {
-                    count++;
-                    dict.remove(right++);
-                }
-
-                int left = num - 1;
-
-                while (dict.contains(left))
-                {
-                    count++;
-                    dict.remove(left--);
-                }
-
-                dict.remove(num);
-            }
-
-            result = Math.max(result, count);
-        }
-
-        return result;
-    }
-}
-
diff --git a/128.longest-consecutive-sequence.94681119.Wrong-Answer.leetcode.java b/128.longest-consecutive-sequence.94681119.Wrong-Answer.leetcode.java
deleted file mode 100644
index 5e4c5d00..00000000
--- ./128.longest-consecutive-sequence.94681119.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution 
-{
-    public int longestConsecutive(int[] nums) 
-    {
-        int result = 1;
-        Set<Integer> dict = new HashSet<Integer>();
-        
-        for (int num : nums)
-        {
-            dict.add(num);    
-        }
-        
-        for (int num : nums)
-        {
-            int count = 1;
-            
-            if (dict.contains(num))
-            {
-                int right = num + 1;
-                
-                while (dict.contains(right))
-                {
-                    count++;
-                    dict.remove(right++);
-                }
-                
-                int left = num - 1;
-                
-                while (dict.contains(left))
-                {
-                    count++;
-                    dict.remove(left--);
-                }
-                
-                dict.remove(num);
-            }
-            
-            result = Math.max(result, count);
-        }
-        
-        return result;
-    }
-}
diff --git a/128.longest-consecutive-sequence.94681173.Accepted.leetcode.java b/128.longest-consecutive-sequence.94681173.Accepted.leetcode.java
deleted file mode 100644
index 8afa7eed..00000000
--- ./128.longest-consecutive-sequence.94681173.Accepted.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution 
-{
-    public int longestConsecutive(int[] nums) 
-    {
-        int result = 0;
-        Set<Integer> dict = new HashSet<Integer>();
-        
-        for (int num : nums)
-        {
-            dict.add(num);    
-        }
-        
-        for (int num : nums)
-        {
-            int count = 1;
-            
-            if (dict.contains(num))
-            {
-                int right = num + 1;
-                
-                while (dict.contains(right))
-                {
-                    count++;
-                    dict.remove(right++);
-                }
-                
-                int left = num - 1;
-                
-                while (dict.contains(left))
-                {
-                    count++;
-                    dict.remove(left--);
-                }
-                
-                dict.remove(num);
-            }
-            
-            result = Math.max(result, count);
-        }
-        
-        return result;
-    }
-}
diff --git a/129.sum-root-to-leaf-numbers.160438450.Runtime-Error.leetcode.java b/129.sum-root-to-leaf-numbers.160438450.Runtime-Error.leetcode.java
deleted file mode 100644
index 2ddc3622..00000000
--- ./129.sum-root-to-leaf-numbers.160438450.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution
-{
-
-    private int sumNumbers(TreeNode root, int base)
-    {
-        if (root.left == null && root.right == null)
-        {
-            return base;
-        }
-
-        return sumNumbers(root.left, base * 10 + root.left.val) + sumNumbers(root.right, base * 10 + root.right.val);
-    }
-
-    public int sumNumbers(TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        return sumNumbers(root, root.val);
-    }
-}
-
diff --git a/129.sum-root-to-leaf-numbers.160438493.Accepted.leetcode.java b/129.sum-root-to-leaf-numbers.160438493.Accepted.leetcode.java
deleted file mode 100644
index 6f43a752..00000000
--- ./129.sum-root-to-leaf-numbers.160438493.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution
-{
-
-    private int dfs(TreeNode root, int sum)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        if (root.left == null && root.right == null)
-        {
-            return sum * 10 + root.val;
-        }
-
-        return dfs(root.left, sum * 10 + root.val) + dfs(root.right, sum * 10 + root.val);
-    }
-
-    public int sumNumbers(TreeNode root)
-    {
-        return dfs(root, 0);
-    }
-}
-
diff --git a/129.sum-root-to-leaf-numbers.160438889.Accepted.leetcode.java b/129.sum-root-to-leaf-numbers.160438889.Accepted.leetcode.java
deleted file mode 100644
index 8a935232..00000000
--- ./129.sum-root-to-leaf-numbers.160438889.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-
-    private int dfs(TreeNode root, int base)
-    {
-        if (root.left == null && root.right == null)
-        {
-            return base;
-        }
-
-        int sum = 0;
-
-        if (root.left != null)
-        {
-            sum += dfs(root.left, base * 10 + root.left.val);
-        }
-
-        if (root.right != null)
-        {
-            sum += dfs(root.right, base * 10 + root.right.val);
-        }
-
-        return sum;
-    }
-
-    public int sumNumbers(TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        return dfs(root, root.val);
-    }
-}
-
diff --git a/129.sum-root-to-leaf-numbers.29677651.Accepted.leetcode.java b/129.sum-root-to-leaf-numbers.29677651.Accepted.leetcode.java
deleted file mode 100644
index 64dae799..00000000
--- ./129.sum-root-to-leaf-numbers.29677651.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-  public class Solution
-  {
-    private int dfs(TreeNode root, int sum)
-    {
-      if (root == null)
-      {
-        return 0;
-      }
-
-      if (root.left == null && root.right == null)
-      {
-        return sum * 10 + root.val;
-      }
-
-      return dfs(root.left, sum * 10 + root.val)
-        + dfs(root.right, sum * 10 + root.val);
-    }
-
-    public int sumNumbers(TreeNode root)
-    {
-      return dfs(root, 0);
-    }
-  }
-
diff --git a/129.sum-root-to-leaf-numbers.8498913.Runtime-Error.leetcode.java b/129.sum-root-to-leaf-numbers.8498913.Runtime-Error.leetcode.java
deleted file mode 100644
index d3932450..00000000
--- ./129.sum-root-to-leaf-numbers.8498913.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-  public class Solution {
-
-    private int sumNumbers(TreeNode root, int base) {
-      if (root == null) {
-        return 0;
-      }
-
-      if (root.left == null && root.right == null) {
-        return base;
-      }
-
-      int sum = 0;
-
-      if (root.left != null) {
-        sum += sumNumbers(root.left, base * 10 + root.left.val);
-      }
-
-      if (root.right != null) {
-        sum += sumNumbers(root.right, base * 10 + root.right.val);
-      }
-
-      return sum;
-    }
-
-    public int sumNumbers(TreeNode root) {
-      return sumNumbers(root, root.val);
-    }
-  }
-
diff --git a/129.sum-root-to-leaf-numbers.8498947.Accepted.leetcode.java b/129.sum-root-to-leaf-numbers.8498947.Accepted.leetcode.java
deleted file mode 100644
index e83061c0..00000000
--- ./129.sum-root-to-leaf-numbers.8498947.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-  public class Solution {
-
-    private int sumNumbers(TreeNode root, int base) {
-      if (root.left == null && root.right == null) {
-        return base;
-      }
-
-      int sum = 0;
-
-      if (root.left != null) {
-        sum += sumNumbers(root.left, base * 10 + root.left.val);
-      }
-
-      if (root.right != null) {
-        sum += sumNumbers(root.right, base * 10 + root.right.val);
-      }
-
-      return sum;
-    }
-
-    public int sumNumbers(TreeNode root) {
-      if (root == null) {
-        return 0;
-      }
-
-      return sumNumbers(root, root.val);
-    }
-  }
-
diff --git a/129.sum-root-to-leaf-numbers.9142075.Accepted.leetcode.java b/129.sum-root-to-leaf-numbers.9142075.Accepted.leetcode.java
deleted file mode 100644
index d502456c..00000000
--- ./129.sum-root-to-leaf-numbers.9142075.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution {
-
-    private int dfs(TreeNode root, int sum) {
-      if (root == null) {
-        return 0;
-      }
-
-      if (root.left == null && root.right == null) {
-        return sum * 10 + root.val;
-      }
-
-      return dfs(root.left, sum * 10 + root.val) +
-             dfs(root.right, sum * 10 + root.val);
-    }
-
-    public int sumNumbers(TreeNode root) {
-      return dfs(root, 0);
-    }
-  }
-
diff --git a/13.roman-to-integer.27579821.Accepted.leetcode.java b/13.roman-to-integer.27579821.Accepted.leetcode.java
deleted file mode 100644
index 3ed31125..00000000
--- ./13.roman-to-integer.27579821.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-  public class Solution
-  {
-    private Map<Character, Integer> symbols = new HashMap<Character, Integer>();
-    {
-      symbols.put('M', 1000);
-      symbols.put('D', 500);
-      symbols.put('C', 100);
-      symbols.put('L', 50);
-      symbols.put('X', 10);
-      symbols.put('V', 5);
-      symbols.put('I', 1);
-    }
-
-    public int romanToInt(String s)
-    {
-      int num = 0;
-      num += symbols.get(s.charAt(s.length() - 1));
-
-      for (int i = s.length() - 2; i >= 0; i--)
-      {
-        char c = s.charAt(i);
-        char nextC = s.charAt(i + 1);
-
-        if (symbols.get(c) < symbols.get(nextC))
-        {
-          num -= symbols.get(c);
-        }
-        else
-        {
-          num += symbols.get(c);
-        }
-      }
-
-      return num;
-    }
-  }
-
diff --git a/130.surrounded-regions.160554347.Accepted.leetcode.java b/130.surrounded-regions.160554347.Accepted.leetcode.java
deleted file mode 100644
index a63a7952..00000000
--- ./130.surrounded-regions.160554347.Accepted.leetcode.java
+++ /dev/null
@@ -1,82 +0,0 @@
-public class Solution
-{
-    int[] unitArray;    //集合编号（隶属于哪一类）
-    boolean[] edge; //是否被包围，每一类的edge都应该相同
-
-    public void solve(char[][] board)
-    {
-        if (board.length < 3 || board[0].length < 3)
-        {
-            return;
-        }
-
-        unitArray = new int[board.length * board[0].length];
-        edge = new boolean[unitArray.length];
-
-        //initial the array
-        for (int i = 0; i < unitArray.length; i++)
-        {
-            unitArray[i] = i;
-        }
-
-        for (int i = 0; i < unitArray.length; i++)
-        {
-            int r = i / board[0].length;
-            int c = i % board[0].length;
-            edge[i] = (board[r][c] == 'O' && (r == 0 || r == board.length - 1 || c == 0 || c == board[0].length - 1));  // true表示没有被包围
-        }
-
-        // span the matrix
-        for (int i = 0; i < unitArray.length; i++)
-        {
-            int r = i / board[0].length;
-            int c = i % board[0].length;
-            int up = r - 1;
-            int pre = c - 1;
-
-            //the unper field
-            if (up >= 0 && board[r][c] == board[up][c])
-            {
-                union_set(i, i - board[0].length);    //应该属于一类，union_set一下
-            }
-
-            //the pre field
-            if (pre >= 0 && board[r][c] == board[r][pre])
-            {
-                union_set(i, i - 1);
-            }
-        }
-
-        for (int i = 0; i < unitArray.length; i++)
-        {
-            int r = i / board[0].length;
-            int c = i % board[0].length;
-
-            if (board[r][c] == 'O' && !edge[find_set(i)])
-            {
-                board[r][c] = 'X';
-            }
-        }
-    }
-
-    private void union_set(int x, int y)
-    {
-        int rootX = find_set(x);   //找到这一类的根
-        int rootY = find_set(y);
-        boolean edgeU = this.edge[rootX] || this.edge[rootY];  //只要有一个被包围，则都被包围
-        unitArray[rootX] = rootY;
-        this.edge[rootY] = edgeU;
-    }
-
-    private int find_set(int x)
-    {
-        if (unitArray[x] == x)
-        {
-            return x;
-        }
-
-        unitArray[x] = find_set(unitArray[x]);
-        return unitArray[x];
-    }
-}
-
diff --git a/130.surrounded-regions.160554680.Runtime-Error.leetcode.java b/130.surrounded-regions.160554680.Runtime-Error.leetcode.java
deleted file mode 100644
index eec7490b..00000000
--- ./130.surrounded-regions.160554680.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,71 +0,0 @@
-public class Solution
-{
-    private class Pos
-    {
-        int x;
-        int y;
-
-        Pos(int x, int y)
-        {
-            this.x = x;
-            this.y = y;
-        }
-    }
-
-    private boolean isOutOfBound(int x, int y, int rows, int columns)
-    {
-        return x < 0 || y < 0 || x >= rows || y >= columns;
-    }
-
-    public void solve(char[][] board)
-    {
-        if (board.length == 0 || board[0].length == 0)
-        {
-            return;
-        }
-
-        int rows = board.length;
-        int columns = board[0].length;
-        LinkedList<Pos> queue = new LinkedList<Pos>();
-
-        for (int i = 0; i < rows; i++)
-        {
-            queue.add(new Pos(i, 0));
-            queue.add(new Pos(i, columns - 1));
-        }
-
-        for (int i = 0; i < columns; i++)
-        {
-            queue.add(new Pos(0, i));
-            queue.add(new Pos(rows - 1, i));
-        }
-
-        while (!queue.isEmpty())
-        {
-            Pos pos = queue.remove();
-            int x = pos.x;
-            int y = pos.y;
-            board[x][y] = 'N';
-            queue.add(new Pos(x - 1, y));
-            queue.add(new Pos(x + 1, y));
-            queue.add(new Pos(x, y - 1));
-            queue.add(new Pos(x, y + 1));
-        }
-
-        for (int i = 0; i < rows; i++)
-        {
-            for (int j = 0; j < columns; j++)
-            {
-                if (board[i][j] == 'O')
-                {
-                    board[i][j] = 'X';
-                }
-                else if (board[i][j] == 'N')
-                {
-                    board[i][j] = 'O';
-                }
-            }
-        }
-    }
-}
-
diff --git a/130.surrounded-regions.160554749.Wrong-Answer.leetcode.java b/130.surrounded-regions.160554749.Wrong-Answer.leetcode.java
deleted file mode 100644
index fdfe7f30..00000000
--- ./130.surrounded-regions.160554749.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,76 +0,0 @@
-public class Solution
-{
-    private class Pos
-    {
-        int x;
-        int y;
-
-        Pos(int x, int y)
-        {
-            this.x = x;
-            this.y = y;
-        }
-    }
-
-    private boolean isOutOfBound(int x, int y, int rows, int columns)
-    {
-        return x < 0 || y < 0 || x >= rows || y >= columns;
-    }
-
-    public void solve(char[][] board)
-    {
-        if (board.length == 0 || board[0].length == 0)
-        {
-            return;
-        }
-
-        int rows = board.length;
-        int columns = board[0].length;
-        LinkedList<Pos> queue = new LinkedList<Pos>();
-
-        for (int i = 0; i < rows; i++)
-        {
-            queue.add(new Pos(i, 0));
-            queue.add(new Pos(i, columns - 1));
-        }
-
-        for (int i = 0; i < columns; i++)
-        {
-            queue.add(new Pos(0, i));
-            queue.add(new Pos(rows - 1, i));
-        }
-
-        while (!queue.isEmpty())
-        {
-            Pos pos = queue.remove();
-            int x = pos.x;
-            int y = pos.y;
-
-            if (isOutOfBound(x, y, rows, columns) || board[x][y] != 'O')
-            {
-                continue;
-            }
-
-            queue.add(new Pos(x - 1, y));
-            queue.add(new Pos(x + 1, y));
-            queue.add(new Pos(x, y - 1));
-            queue.add(new Pos(x, y + 1));
-        }
-
-        for (int i = 0; i < rows; i++)
-        {
-            for (int j = 0; j < columns; j++)
-            {
-                if (board[i][j] == 'O')
-                {
-                    board[i][j] = 'X';
-                }
-                else if (board[i][j] == 'N')
-                {
-                    board[i][j] = 'O';
-                }
-            }
-        }
-    }
-}
-
diff --git a/130.surrounded-regions.160554800.Wrong-Answer.leetcode.java b/130.surrounded-regions.160554800.Wrong-Answer.leetcode.java
deleted file mode 100644
index 4c4ba3e9..00000000
--- ./130.surrounded-regions.160554800.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,73 +0,0 @@
-public class Solution
-{
-    private class Pos
-    {
-        int x;
-        int y;
-
-        Pos(int x, int y)
-        {
-            this.x = x;
-            this.y = y;
-        }
-    }
-
-    private boolean isOutOfBound(int x, int y, int rows, int columns)
-    {
-        return x < 0 || y < 0 || x >= rows || y >= columns;
-    }
-
-    public void solve(char[][] board)
-    {
-        if (board.length == 0 || board[0].length == 0)
-        {
-            return;
-        }
-
-        int rows = board.length;
-        int columns = board[0].length;
-        LinkedList<Pos> queue = new LinkedList<Pos>();
-
-        for (int i = 0; i < rows; i++)
-        {
-            queue.add(new Pos(i, 0));
-            queue.add(new Pos(i, columns - 1));
-        }
-
-        for (int i = 0; i < columns; i++)
-        {
-            queue.add(new Pos(0, i));
-            queue.add(new Pos(rows - 1, i));
-        }
-
-        while (!queue.isEmpty())
-        {
-            Pos pos = queue.remove();
-            int x = pos.x;
-            int y = pos.y;
-
-            if (isOutOfBound(x, y, rows, columns) || board[x][y] != 'O')
-            {
-                continue;
-            }
-
-            board[x][y] = 'N';
-        }
-
-        for (int i = 0; i < rows; i++)
-        {
-            for (int j = 0; j < columns; j++)
-            {
-                if (board[i][j] == 'O')
-                {
-                    board[i][j] = 'X';
-                }
-                else if (board[i][j] == 'N')
-                {
-                    board[i][j] = 'O';
-                }
-            }
-        }
-    }
-}
-
diff --git a/130.surrounded-regions.160554926.Wrong-Answer.leetcode.java b/130.surrounded-regions.160554926.Wrong-Answer.leetcode.java
deleted file mode 100644
index 97450a94..00000000
--- ./130.surrounded-regions.160554926.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,62 +0,0 @@
-public class Solution
-{
-    private class Pos
-    {
-        int x;
-        int y;
-
-        Pos(int x, int y)
-        {
-            this.x = x;
-            this.y = y;
-        }
-    }
-
-    private boolean isOutOfBound(int x, int y, int rows, int columns)
-    {
-        return x < 0 || y < 0 || x >= rows || y >= columns;
-    }
-
-    public void solve(char[][] board)
-    {
-        if (board.length == 0 || board[0].length == 0)
-        {
-            return;
-        }
-
-        int rows = board.length;
-        int columns = board[0].length;
-        LinkedList<Pos> queue = new LinkedList<Pos>();
-
-        for (int i = 0; i < rows; i++)
-        {
-            queue.add(new Pos(i, 0));
-            queue.add(new Pos(i, columns - 1));
-        }
-
-        for (int i = 0; i < columns; i++)
-        {
-            queue.add(new Pos(0, i));
-            queue.add(new Pos(rows - 1, i));
-        }
-
-        while (!queue.isEmpty())
-        {
-            Pos pos = queue.remove();
-            int x = pos.x;
-            int y = pos.y;
-
-            if (isOutOfBound(x, y, rows, columns) || board[x][y] != 'O')
-            {
-                continue;
-            }
-
-            board[x][y] = 'N';
-            queue.add(new Pos(x - 1, y));
-            queue.add(new Pos(x + 1, y));
-            queue.add(new Pos(x, y - 1));
-            queue.add(new Pos(x, y + 1));
-        }
-    }
-}
-
diff --git a/132.palindrome-partitioning-ii.102606325.Runtime-Error.leetcode.java b/132.palindrome-partitioning-ii.102606325.Runtime-Error.leetcode.java
deleted file mode 100644
index c3c66030..00000000
--- ./132.palindrome-partitioning-ii.102606325.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int minCut(String s)
-    {
-        int n = s.length();
-        // dp[i,n] = 区间[i,n]之间最小的cut数，n为字符串长度
-        int[] dp = new int[n];
-        boolean isPalin[][] = new boolean[n][n];
-
-        for (int i = 0; i < n; i++)
-        {
-            dp[i] = n - 1 - i;
-        }
-
-        for (int i = n - 1; i >= 0; i--)
-        {
-            for (int j = i; j < n; j++)
-            {
-                if (s.charAt(i) == s.charAt(j) && (j - i < 2 || isPalin[i + 1][j - 1]))
-                {
-                    isPalin[i][j] = true;
-                    dp[i] = Math.min(dp[i], dp[j + 1] + 1);
-                }
-            }
-        }
-
-        return dp[0];
-    }
-}
diff --git a/132.palindrome-partitioning-ii.102607623.Wrong-Answer.leetcode.java b/132.palindrome-partitioning-ii.102607623.Wrong-Answer.leetcode.java
deleted file mode 100644
index c4c9c071..00000000
--- ./132.palindrome-partitioning-ii.102607623.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int minCut(String s)
-    {
-        int n = s.length();
-        // dp[i,n] = 区间[i,n]之间最小的cut数，n为字符串长度
-        int[] dp = new int[n + 1];
-        boolean isPalin[][] = new boolean[n][n];
-
-        for (int i = 0; i < n; i++)
-        {
-            dp[i] = n - 1 - i;
-        }
-
-        for (int i = n - 1; i >= 0; i--)
-        {
-            for (int j = i; j < n; j++)
-            {
-                if (s.charAt(i) == s.charAt(j) && (j - i < 2 || isPalin[i + 1][j - 1]))
-                {
-                    isPalin[i][j] = true;
-                    dp[i] = Math.min(dp[i], dp[j + 1] + 1);
-                }
-            }
-        }
-
-        return dp[0];
-    }
-}
diff --git a/132.palindrome-partitioning-ii.102607679.Time-Limit-Exceeded.leetcode.java b/132.palindrome-partitioning-ii.102607679.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 94215bd4..00000000
--- ./132.palindrome-partitioning-ii.102607679.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int minCut(String s)
-    {
-        int n = s.length();
-        // dp[i,n] = 区间[i,n]之间最小的cut数，n为字符串长度
-        int[] dp = new int[n + 1];
-        boolean isPalin[][] = new boolean[n][n];
-
-        for (int i = 0; i <= n; i++)
-        {
-            dp[i] = n - 1 - i;
-        }
-
-        for (int i = n - 1; i >= 0; i--)
-        {
-            for (int j = i; j < n; j++)
-            {
-                if (s.charAt(i) == s.charAt(j) && (j - i < 2 || isPalin[i + 1][j - 1]))
-                {
-                    isPalin[i][j] = true;
-                    dp[i] = Math.min(dp[i], dp[j + 1] + 1);
-                }
-            }
-        }
-
-        return dp[0];
-    }
-}
diff --git a/132.palindrome-partitioning-ii.102608001.Accepted.leetcode.java b/132.palindrome-partitioning-ii.102608001.Accepted.leetcode.java
deleted file mode 100644
index 8dc72700..00000000
--- ./132.palindrome-partitioning-ii.102608001.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int minCut(String s)
-    {
-        int n = s.length();
-        // dp[i,n] = 区间[i,n]之间最小的cut数，n为字符串长度
-        int[] dp = new int[n + 1];
-        boolean isPalin[][] = new boolean[n][n];
-
-        for (int i = 0; i <= n; i++ )
-        {
-            dp[i] = n - 1 - i;
-        }
-
-        for (int i = n - 1; i >= 0; i--)
-        {
-            for (int j = i; j < n; j++)
-            {
-                if (s.charAt(i) == s.charAt(j) && (j - i <= 2 || isPalin[i + 1][j - 1]))
-                {
-                    isPalin[i][j] = true;
-                    dp[i] = Math.min(dp[i], dp[j + 1] + 1);
-                }
-            }
-        }
-
-        return dp[0];
-    }
-}
diff --git a/132.palindrome-partitioning-ii.102608140.Accepted.leetcode.java b/132.palindrome-partitioning-ii.102608140.Accepted.leetcode.java
deleted file mode 100644
index ae885e13..00000000
--- ./132.palindrome-partitioning-ii.102608140.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int minCut(String s)
-    {
-        int n = s.length();
-        int[] dp = new int[n + 1];
-        boolean isPalin[][] = new boolean[n][n];
-
-        for (int i = 0; i <= n; i++ )
-        {
-            dp[i] = n - 1 - i;
-        }
-
-        for (int i = n - 1; i >= 0; i-- )
-        {
-            for (int j = i; j < n; j++ )
-            {
-                if (s.charAt(i) == s.charAt(j) && (j - i <= 2 || isPalin[i + 1][j - 1]))
-                {
-                    isPalin[i][j] = true;
-                    dp[i] = Math.min(dp[i], dp[j + 1] + 1);
-                }
-            }
-        }
-
-        return dp[0];
-    }
-}
diff --git a/132.palindrome-partitioning-ii.33370228.Runtime-Error.leetcode.java b/132.palindrome-partitioning-ii.33370228.Runtime-Error.leetcode.java
deleted file mode 100644
index 10576801..00000000
--- ./132.palindrome-partitioning-ii.33370228.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-  public class Solution
-  {
-    public int minCut(String s)
-    {
-      int n = s.length();
-      int[] dp = new int[n];
-      boolean isPalin[][] = new boolean[n][n];
-
-      for (int i = 0; i < n; i++ )
-      {
-        dp[i] = n - 1 - i;
-      }
-
-      for (int i = n - 1; i >= 0; i-- )
-      {
-        for (int j = i; j < n; j++ )
-        {
-          if (s.charAt(i) == s.charAt(j)
-            && (j - i < 2 || isPalin[i + 1][j - 1]))
-          {
-            isPalin[i][j] = true;
-            dp[i] = Math.min(dp[i], dp[j + 1] + 1);
-          }
-        }
-      }
-
-      return dp[0];
-    }
-  }
-
diff --git a/132.palindrome-partitioning-ii.81738113.Runtime-Error.leetcode.java b/132.palindrome-partitioning-ii.81738113.Runtime-Error.leetcode.java
deleted file mode 100644
index f627ec02..00000000
--- ./132.palindrome-partitioning-ii.81738113.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int minCut(String s)
-    {
-        int n = s.length();
-        int[] dp = new int[n];
-        boolean isPalin[][] = new boolean[n][n];
-
-        for (int i = 0; i < n; i++ )
-        {
-            dp[i] = n - 1 - i;
-        }
-
-        for (int i = n - 1; i >= 0; i-- )
-        {
-            for (int j = i; j < n; j++ )
-            {
-                if (s.charAt(i) == s.charAt(j) && (j - i < 2 || isPalin[i + 1][j - 1]))
-                {
-                    isPalin[i][j] = true;
-                    dp[i] = Math.min(dp[i], dp[j + 1] + 1);
-                }
-            }
-        }
-
-        return dp[0];
-    }
-}
diff --git a/132.palindrome-partitioning-ii.81814973.Runtime-Error.leetcode.java b/132.palindrome-partitioning-ii.81814973.Runtime-Error.leetcode.java
deleted file mode 100644
index 6912fc92..00000000
--- ./132.palindrome-partitioning-ii.81814973.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int minCut(String s)
-    {
-        int n = s.length();
-        // dp[i,n] = 区间[i,n]之间最小的cut数，n为字符串长度
-        int[] dp = new int[n];
-        boolean isPalin[][] = new boolean[n][n];
-
-        for (int i = 0; i < n; i++ )
-        {
-            dp[i] = n - 1 - i;
-        }
-
-        for (int i = n - 1; i >= 0; i-- )
-        {
-            for (int j = i; j < n; j++ )
-            {
-                if (s.charAt(i) == s.charAt(j) && (j - i < 2 || isPalin[i + 1][j - 1]))
-                {
-                    isPalin[i][j] = true;
-                    dp[i] = Math.min(dp[i], dp[j + 1] + 1);
-                }
-            }
-        }
-
-        return dp[0];
-    }
-}
diff --git a/132.palindrome-partitioning-ii.81816333.Accepted.leetcode.java b/132.palindrome-partitioning-ii.81816333.Accepted.leetcode.java
deleted file mode 100644
index 834db2d8..00000000
--- ./132.palindrome-partitioning-ii.81816333.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int minCut(String s)
-    {
-        int n = s.length();
-        int[] f = new int[n + 1];
-        boolean p[][] = new boolean[n][n];
-
-        for (int i = 0; i <= n; i++ )
-        {
-            f[i] = n - 1 - i;
-        }
-
-        for (int i = n - 1; i >= 0; i-- )
-        {
-            for (int j = i; j < n; j++ )
-            {
-                if (s.charAt(i) == s.charAt(j) && (j - i < 2 || p[i + 1][j - 1]))
-                {
-                    p[i][j] = true;
-                    f[i] = Math.min(f[i], f[j + 1] + 1);
-                }
-            }
-        }
-
-        return f[0];
-    }
-}
diff --git a/132.palindrome-partitioning-ii.81817188.Accepted.leetcode.java b/132.palindrome-partitioning-ii.81817188.Accepted.leetcode.java
deleted file mode 100644
index 242ffc1a..00000000
--- ./132.palindrome-partitioning-ii.81817188.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int minCut(String s)
-    {
-        int n = s.length();
-        // dp[i,n] = 区间[i,n]之间最小的cut数，n为字符串长度
-        int[] dp = new int[n + 1];
-        boolean isPalin[][] = new boolean[n][n];
-
-        for (int i = 0; i <= n; i++ )
-        {
-            dp[i] = n - 1 - i;
-        }
-
-        for (int i = n - 1; i >= 0; i--)
-        {
-            for (int j = i; j < n; j++)
-            {
-                if (s.charAt(i) == s.charAt(j) && (j - i < 2 || isPalin[i + 1][j - 1]))
-                {
-                    isPalin[i][j] = true;
-                    dp[i] = Math.min(dp[i], dp[j + 1] + 1);
-                }
-            }
-        }
-
-        return dp[0];
-    }
-}
diff --git a/134.gas-station.209961898.Accepted.leetcode.java b/134.gas-station.209961898.Accepted.leetcode.java
deleted file mode 100644
index b9fbc78e..00000000
--- ./134.gas-station.209961898.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    int canCompleteCircuit(int[] gas, int[] cost)
-    {
-        int leftGas = 0, sum = 0, startnode = 0;
-
-        for (int i = 0; i < gas.length; ++i)
-        {
-            leftGas += gas[i] - cost[i];
-            sum += gas[i] - cost[i];
-
-            if (sum < 0)
-            {
-                startnode = i + 1;
-                sum = 0;
-            }
-        }
-
-        return (leftGas < 0) ? -1 : startnode;
-    }
-}
-
diff --git a/134.gas-station.33621563.Accepted.leetcode.java b/134.gas-station.33621563.Accepted.leetcode.java
deleted file mode 100644
index f9611dab..00000000
--- ./134.gas-station.33621563.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-  public class Solution
-  {
-    int canCompleteCircuit(int[] gas, int[] cost)
-    {
-      int[] diff = new int[gas.length];
-      int leftGas = 0, sum = 0, startnode = 0;
-
-      for (int i = 0; i < gas.length; ++i)
-      {
-        leftGas += gas[i] - cost[i];
-        sum += gas[i] - cost[i];
-
-        if (sum < 0)
-        {
-          startnode = i + 1;
-          sum = 0;
-        }
-      }
-
-      return (leftGas < 0) ? -1 : startnode;
-    }
-  }
-
diff --git a/134.gas-station.8690936.Accepted.leetcode.java b/134.gas-station.8690936.Accepted.leetcode.java
deleted file mode 100644
index d06bf54c..00000000
--- ./134.gas-station.8690936.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-  public class Solution {
-
-    int canCompleteCircuit(int[] gas, int[] cost) {
-      int[] diff = new int[gas.length];
-
-      for (int i = 0; i < gas.length; ++i) {
-        diff[i] = gas[i] - cost[i];
-      }
-
-      int leftGas = 0, sum = 0, startnode = 0;
-
-      for (int i = 0; i < gas.length; ++i) {
-        leftGas += diff[i];
-        sum += diff[i];
-
-        if (sum < 0) {
-          startnode = i + 1;
-          sum = 0;
-        }
-      }
-
-      if (leftGas < 0) {
-        return -1;
-      }
-      else {
-        return startnode;
-      }
-    }
-  }
-
diff --git a/135.candy.158175034.Wrong-Answer.leetcode.java b/135.candy.158175034.Wrong-Answer.leetcode.java
deleted file mode 100644
index 5efc7f0c..00000000
--- ./135.candy.158175034.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public int candy(int[] ratings)
-    {
-        int n = ratings.length;
-        int[] candies = new int[n];
-        Arrays.fill(candies, 1);
-
-        for (int i = 1; i < n; i++)
-        {
-            if (ratings[i] > ratings[i - 1])
-            {
-                candies[i] = candies[i - 1] + 1;
-            }
-        }
-
-        int count = candies[0];
-
-        for (int i = n - 2; i >= 0; i--)
-        {
-            if (ratings[i] > ratings[i + 1] && candies[i] <= candies[i + 1])
-            {
-                candies[i] = candies[i + 1] + 1;
-            }
-
-            count += candies[i + 1];
-        }
-
-        return count;
-    }
-}
-
diff --git a/135.candy.158175182.Accepted.leetcode.java b/135.candy.158175182.Accepted.leetcode.java
deleted file mode 100644
index 3ec8eb15..00000000
--- ./135.candy.158175182.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public int candy(int[] ratings)
-    {
-        int n = ratings.length;
-        int[] candies = new int[n];
-        Arrays.fill(candies, 1);
-
-        for (int i = 1; i < n; i++)
-        {
-            if (ratings[i] > ratings[i - 1])
-            {
-                candies[i] = candies[i - 1] + 1;
-            }
-        }
-
-        int count = candies[n - 1];
-
-        for (int i = n - 2; i >= 0; i--)
-        {
-            if (ratings[i] > ratings[i + 1] && candies[i] <= candies[i + 1])
-            {
-                candies[i] = candies[i + 1] + 1;
-            }
-
-            count += candies[i];
-        }
-
-        return count;
-    }
-}
-
diff --git a/135.candy.160916542.Accepted.leetcode.java b/135.candy.160916542.Accepted.leetcode.java
deleted file mode 100644
index 158bd9ef..00000000
--- ./135.candy.160916542.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public int candy(int[] ratings)
-    {
-        int n = ratings.length;
-        int[] candies = new int[n];
-        Arrays.fill(candies, 1);
-
-        for (int i = 1; i < n; i++)
-        {
-            if (ratings[i] > ratings[i - 1])
-            {
-                candies[i] = candies[i - 1] + 1;
-            }
-        }
-
-        int count = 0;
-
-        for (int i = n - 2; i >= 0; i--)
-        {
-            if (ratings[i] > ratings[i + 1] && candies[i] <= candies[i + 1])
-            {
-                candies[i] = candies[i + 1] + 1;
-            }
-
-            count += candies[i + 1];
-        }
-
-        count += candies[0];
-        return count;
-    }
-}
-
diff --git a/135.candy.160916999.Wrong-Answer.leetcode.java b/135.candy.160916999.Wrong-Answer.leetcode.java
deleted file mode 100644
index 00f548fd..00000000
--- ./135.candy.160916999.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public int candy(int[] ratings)
-    {
-        int n = ratings.length;
-        int[] candies = new int[n];
-        Arrays.fill(candies, 1);
-
-        for (int i = 1; i < n; i++)
-        {
-            if (ratings[i] > ratings[i - 1])
-            {
-                candies[i] = candies[i - 1] + 1;
-            }
-        }
-
-        int count = 0;
-
-        for (int i = 0; i <= n - 2; i++)
-        {
-            if (ratings[i] > ratings[i + 1] && candies[i] <= candies[i + 1])
-            {
-                candies[i] = candies[i + 1] + 1;
-            }
-
-            count += candies[i + 1];
-        }
-
-        count += candies[0];
-        return count;
-    }
-}
-
diff --git a/135.candy.160917827.Wrong-Answer.leetcode.java b/135.candy.160917827.Wrong-Answer.leetcode.java
deleted file mode 100644
index 419063dd..00000000
--- ./135.candy.160917827.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public int candy(int[] ratings)
-    {
-        int n = ratings.length;
-        int[] candies = new int[n];
-        Arrays.fill(candies, 1);
-
-        for (int i = 1; i < n; i++)
-        {
-            if (ratings[i] > ratings[i - 1])
-            {
-                candies[i] = candies[i - 1] + 1;
-            }
-        }
-
-        int count = 0;
-
-        for (int i = n - 2; i >= 0; i--)
-        {
-            if (ratings[i] > ratings[i + 1] && candies[i] <= candies[i + 1])
-            {
-                candies[i] = candies[i + 1] + 1;
-            }
-
-            count += candies[i];
-        }
-
-        count += candies[0];
-        return count;
-    }
-}
-
diff --git a/135.candy.160918263.Accepted.leetcode.java b/135.candy.160918263.Accepted.leetcode.java
deleted file mode 100644
index 40a165ee..00000000
--- ./135.candy.160918263.Accepted.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution
-{
-    public int candy(int[] ratings)
-    {
-        int n = ratings.length;
-        int[] candies = new int[n];
-        Arrays.fill(candies, 1);
-
-        for (int i = 1; i < n; i++)
-        {
-            if (ratings[i] > ratings[i - 1])
-            {
-                candies[i] = candies[i - 1] + 1;
-            }
-        }
-
-        for (int i = n - 2; i >= 0; i--)
-        {
-            if (ratings[i] > ratings[i + 1] && candies[i] <= candies[i + 1])
-            {
-                candies[i] = candies[i + 1] + 1;
-            }
-        }
-
-        int count = 0;
-
-        for (int i = 0; i < n; i++)
-        {
-            count += candies[i];
-        }
-
-        return count;
-    }
-}
-
diff --git a/135.candy.88768168.Wrong-Answer.leetcode.java b/135.candy.88768168.Wrong-Answer.leetcode.java
deleted file mode 100644
index 79ca0ea6..00000000
--- ./135.candy.88768168.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution
-{
-    public int candy(int[] ratings)
-    {
-        int n = ratings.length;
-        
-        if (n == 1)
-        {
-            return 1;
-        }
-        
-        int[] candies = new int[n];
-        Arrays.fill(candies, 1);
-
-        for (int i = 1; i < n; i++)
-        {
-            if (ratings[i] > ratings[i - 1])
-            {
-                candies[i] = candies[i - 1] + 1;
-            }
-        }
-        
-        int count = candies[n - 1];
-        
-        for (int i = n - 2; i >= 0; i--)
-        {
-            if (ratings[i] > ratings[i + 1] && candies[i] <= candies[i + 1])
-            {
-                candies[i] = candies[i + 1] + 1;
-            }
-            
-            System.out.println(i + " -->" + candies[i]);
-            count += candies[i];
-        }
-        
-        count += candies[0];
-        return count;
-    }
-}
diff --git a/135.candy.88768250.Wrong-Answer.leetcode.java b/135.candy.88768250.Wrong-Answer.leetcode.java
deleted file mode 100644
index 33a09f99..00000000
--- ./135.candy.88768250.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution
-{
-    public int candy(int[] ratings)
-    {
-        int n = ratings.length;
-        
-        if (n == 1)
-        {
-            return 1;
-        }
-        
-        int[] candies = new int[n];
-        Arrays.fill(candies, 1);
-
-        for (int i = 1; i < n; i++)
-        {
-            if (ratings[i] > ratings[i - 1])
-            {
-                candies[i] = candies[i - 1] + 1;
-            }
-        }
-        
-        int count = candies[n - 1];
-        
-        for (int i = n - 2; i >= 0; i--)
-        {
-            if (ratings[i] > ratings[i + 1] && candies[i] < candies[i + 1])
-            {
-                candies[i] = candies[i + 1] + 1;
-            }
-            
-            System.out.println(i + " -->" + candies[i]);
-            count += candies[i];
-        }
-        
-        count += candies[0];
-        return count;
-    }
-}
diff --git a/135.candy.88768344.Wrong-Answer.leetcode.java b/135.candy.88768344.Wrong-Answer.leetcode.java
deleted file mode 100644
index 85b6935c..00000000
--- ./135.candy.88768344.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class Solution
-{
-    public int candy(int[] ratings)
-    {
-        int n = ratings.length;
-        
-        if (n == 1)
-        {
-            return 1;
-        }
-        
-        int[] candies = new int[n];
-        Arrays.fill(candies, 1);
-
-        for (int i = 1; i < n; i++)
-        {
-            if (ratings[i] > ratings[i - 1])
-            {
-                candies[i] = candies[i - 1] + 1;
-            }
-        }
-        
-        int count = candies[n - 1];
-        
-        for (int i = n - 2; i >= 0; i--)
-        {
-            if (ratings[i] > ratings[i + 1] && candies[i] < candies[i + 1])
-            {
-                candies[i] = candies[i + 1] + 1;
-            }
-            
-            System.out.println(i + " -->" + candies[i]);
-            count += candies[i];
-        }
-        
-        return count;
-    }
-}
diff --git a/135.candy.88768468.Time-Limit-Exceeded.leetcode.java b/135.candy.88768468.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index e30c3bab..00000000
--- ./135.candy.88768468.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class Solution
-{
-    public int candy(int[] ratings)
-    {
-        int n = ratings.length;
-        
-        if (n == 1)
-        {
-            return 1;
-        }
-        
-        int[] candies = new int[n];
-        Arrays.fill(candies, 1);
-
-        for (int i = 1; i < n; i++)
-        {
-            if (ratings[i] > ratings[i - 1])
-            {
-                candies[i] = candies[i - 1] + 1;
-            }
-        }
-        
-        int count = candies[n - 1];
-        
-        for (int i = n - 2; i >= 0; i--)
-        {
-            if (ratings[i] > ratings[i + 1] && candies[i] <= candies[i + 1])
-            {
-                candies[i] = candies[i + 1] + 1;
-            }
-            
-            System.out.println(i + " -->" + candies[i]);
-            count += candies[i];
-        }
-        
-        return count;
-    }
-}
diff --git a/135.candy.88768500.Accepted.leetcode.java b/135.candy.88768500.Accepted.leetcode.java
deleted file mode 100644
index 99e5849f..00000000
--- ./135.candy.88768500.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public int candy(int[] ratings)
-    {
-        int n = ratings.length;
-        
-        if (n == 1)
-        {
-            return 1;
-        }
-        
-        int[] candies = new int[n];
-        Arrays.fill(candies, 1);
-
-        for (int i = 1; i < n; i++)
-        {
-            if (ratings[i] > ratings[i - 1])
-            {
-                candies[i] = candies[i - 1] + 1;
-            }
-        }
-        
-        int count = candies[n - 1];
-        
-        for (int i = n - 2; i >= 0; i--)
-        {
-            if (ratings[i] > ratings[i + 1] && candies[i] <= candies[i + 1])
-            {
-                candies[i] = candies[i + 1] + 1;
-            }
-            
-            count += candies[i];
-        }
-        
-        return count;
-    }
-}
diff --git a/135.candy.88768611.Accepted.leetcode.java b/135.candy.88768611.Accepted.leetcode.java
deleted file mode 100644
index 5ecfcaa7..00000000
--- ./135.candy.88768611.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public int candy(int[] ratings)
-    {
-        int n = ratings.length;
-        
-        int[] candies = new int[n];
-        Arrays.fill(candies, 1);
-
-        for (int i = 1; i < n; i++)
-        {
-            if (ratings[i] > ratings[i - 1])
-            {
-                candies[i] = candies[i - 1] + 1;
-            }
-        }
-        
-        int count = candies[n - 1];
-        
-        for (int i = n - 2; i >= 0; i--)
-        {
-            if (ratings[i] > ratings[i + 1] && candies[i] <= candies[i + 1])
-            {
-                candies[i] = candies[i + 1] + 1;
-            }
-            
-            count += candies[i];
-        }
-        
-        return count;
-    }
-}
diff --git a/135.candy.88768642.Accepted.leetcode.java b/135.candy.88768642.Accepted.leetcode.java
deleted file mode 100644
index 0538f91b..00000000
--- ./135.candy.88768642.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public int candy(int[] ratings)
-    {
-        int n = ratings.length;
-        int[] candies = new int[n];
-        Arrays.fill(candies, 1);
-
-        for (int i = 1; i < n; i++)
-        {
-            if (ratings[i] > ratings[i - 1])
-            {
-                candies[i] = candies[i - 1] + 1;
-            }
-        }
-        
-        int count = candies[n - 1];
-        
-        for (int i = n - 2; i >= 0; i--)
-        {
-            if (ratings[i] > ratings[i + 1] && candies[i] <= candies[i + 1])
-            {
-                candies[i] = candies[i + 1] + 1;
-            }
-            
-            count += candies[i];
-        }
-        
-        return count;
-    }
-}
diff --git a/136.single-number.28680015.Accepted.leetcode.java b/136.single-number.28680015.Accepted.leetcode.java
deleted file mode 100644
index 28de7252..00000000
--- ./136.single-number.28680015.Accepted.leetcode.java
+++ /dev/null
@@ -1,10 +0,0 @@
-public class Solution {
-    public int singleNumber(int[] nums) {
-        int result = 0;
-        for(int num : nums)
-        {
-            result ^= num;
-        }
-        return result;
-    }
-}
diff --git a/136.single-number.7617962.Accepted.leetcode.java b/136.single-number.7617962.Accepted.leetcode.java
deleted file mode 100644
index 71f4069d..00000000
--- ./136.single-number.7617962.Accepted.leetcode.java
+++ /dev/null
@@ -1,12 +0,0 @@
-  public class Solution {
-    public int singleNumber(int[] A) {
-      int ans = 0;
-
-      for (int i : A) {
-        ans ^= i;
-      }
-
-      return ans;
-    }
-  }
-
diff --git a/137.single-number-ii.28681249.Accepted.leetcode.java b/137.single-number-ii.28681249.Accepted.leetcode.java
deleted file mode 100644
index b55c5919..00000000
--- ./137.single-number-ii.28681249.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-  public class Solution
-  {
-    public int singleNumber(int[] A)
-    {
-      int res = 0;
-      int[] digits = new int[32];
-
-      for (int i = 0; i < 32; i++ )
-      {
-        for (int j = 0; j < A.length; j++ )
-        {
-          if (1 == ((A[j] >> i) & 1))
-          {
-            digits[i] = (digits[i] + 1) % 3;
-          }
-        }
-
-        res |= (digits[i] << i);
-      }
-
-      return res;
-    }
-  }
-
diff --git a/137.single-number-ii.33644297.Accepted.leetcode.java b/137.single-number-ii.33644297.Accepted.leetcode.java
deleted file mode 100644
index 8bc9bc66..00000000
--- ./137.single-number-ii.33644297.Accepted.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-  public class Solution
-  {
-    public int singleNumber(int[] A)
-    {
-      if (A.length <= 0)
-      {
-        return -1;
-      }
-
-      if (A.length == 1)
-      {
-        return A[0];
-      }
-
-      Arrays.sort(A);
-      int j = 1;
-
-      for (int i = 0; i < A.length - 1; i++)
-      {
-        if (A[i] == A[i + 1])
-        {
-          j++ ;
-        }
-        else
-        {
-          if (j < 3)
-          {
-            return A[i];
-          }
-
-          j = 1;
-        }
-      }
-
-      return A[A.length - 1];
-    }
-  }
-
diff --git a/137.single-number-ii.33644318.Accepted.leetcode.java b/137.single-number-ii.33644318.Accepted.leetcode.java
deleted file mode 100644
index 3056c51d..00000000
--- ./137.single-number-ii.33644318.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-  public class Solution
-  {
-    public int singleNumber(int[] A)
-    {
-      int res = 0;
-      int[] digits = new int[32];
-
-      for (int i = 0; i < 32; i++)
-      {
-        for (int j = 0; j < A.length; j++)
-        {
-          if (1 == ((A[j] >> i) & 1))
-          {
-            digits[i] = (digits[i] + 1) % 3;
-          }
-        }
-
-        res |= (digits[i] << i);
-      }
-
-      return res;
-    }
-  }
-
diff --git a/139.word-break.161094847.Wrong-Answer.leetcode.java b/139.word-break.161094847.Wrong-Answer.leetcode.java
deleted file mode 100644
index a139ef83..00000000
--- ./139.word-break.161094847.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution
-{
-    public boolean wordBreak(String s, List<String> dict)
-    {
-        boolean[] dp = new boolean[s.length() + 1];
-        dp[0] = true;
-
-        for (int start = 0; start < s.length(); start++)
-        {
-            if (!dp[start])
-            {
-                continue;
-            }
-
-            for (int end = start + 1; end <= s.length() && !dp[end]; end++)
-            {
-                dp[end] = dict.contains(s.substring(start, end));
-            }
-        }
-
-        return dp[s.length()];
-    }
-}
-
diff --git a/139.word-break.161097370.Accepted.leetcode.java b/139.word-break.161097370.Accepted.leetcode.java
deleted file mode 100644
index 4db85454..00000000
--- ./139.word-break.161097370.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public boolean wordBreak(String s, List<String> dict)
-    {
-        boolean[] dp = new boolean[s.length() + 1];
-        dp[0] = true;
-
-        for (int start = 0; start < s.length(); start++)
-        {
-            for (int end = start + 1; end <= s.length(); end++)
-            {
-                if (dp[start] && dict.contains(s.substring(start, end)))
-                {
-                    dp[end] = true;
-                }
-            }
-        }
-
-        return dp[s.length()];
-    }
-}
-
diff --git a/142.linked-list-cycle-ii.161253051.Runtime-Error.leetcode.java b/142.linked-list-cycle-ii.161253051.Runtime-Error.leetcode.java
deleted file mode 100644
index 1f0d2960..00000000
--- ./142.linked-list-cycle-ii.161253051.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public ListNode detectCycle(ListNode head)
-    {
-        ListNode fast = head;
-        ListNode slow = head;
-
-        do
-        {
-            if (fast.next == null)
-            {
-                return null;
-            }
-
-            fast = fast.next.next;
-            slow = slow.next;
-        }
-        while (fast != slow);
-
-        slow = head;
-
-        while (fast != slow)
-        {
-            fast = fast.next;
-            slow = slow.next;
-        }
-
-        return fast;
-    }
-}
-
diff --git a/142.linked-list-cycle-ii.161253186.Runtime-Error.leetcode.java b/142.linked-list-cycle-ii.161253186.Runtime-Error.leetcode.java
deleted file mode 100644
index 4d3e11ac..00000000
--- ./142.linked-list-cycle-ii.161253186.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public ListNode detectCycle(ListNode head)
-    {
-        if (head == null)
-        {
-            return null;
-        }
-
-        ListNode fast = head;
-        ListNode slow = head;
-
-        do
-        {
-            if (fast.next == null)
-            {
-                return null;
-            }
-
-            fast = fast.next.next;
-            slow = slow.next;
-        }
-        while (fast != slow);
-
-        slow = head;
-
-        while (fast != slow)
-        {
-            fast = fast.next;
-            slow = slow.next;
-        }
-
-        return fast;
-    }
-}
-
diff --git a/142.linked-list-cycle-ii.161253270.Accepted.leetcode.java b/142.linked-list-cycle-ii.161253270.Accepted.leetcode.java
deleted file mode 100644
index 22d19288..00000000
--- ./142.linked-list-cycle-ii.161253270.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public ListNode detectCycle(ListNode head)
-    {
-        if (head == null)
-        {
-            return null;
-        }
-
-        ListNode fast = head;
-        ListNode slow = head;
-
-        do
-        {
-            if (fast == null || fast.next == null)
-            {
-                return null;
-            }
-
-            fast = fast.next.next;
-            slow = slow.next;
-        }
-        while (fast != slow);
-
-        slow = head;
-
-        while (fast != slow)
-        {
-            fast = fast.next;
-            slow = slow.next;
-        }
-
-        return fast;
-    }
-}
-
diff --git a/142.linked-list-cycle-ii.161253389.Wrong-Answer.leetcode.java b/142.linked-list-cycle-ii.161253389.Wrong-Answer.leetcode.java
deleted file mode 100644
index 3820eef0..00000000
--- ./142.linked-list-cycle-ii.161253389.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public ListNode detectCycle(ListNode head)
-    {
-        ListNode fast = head;
-        ListNode slow = head;
-
-        while (fast != null && fast.next != null && fast != slow)
-        {
-            fast = fast.next.next;
-            slow = slow.next;
-        }
-
-        while (fast != null && fast != head)
-        {
-            fast = fast.next;
-            head = head.next;
-        }
-
-        return fast;
-    }
-}
-
diff --git a/142.linked-list-cycle-ii.161253778.Wrong-Answer.leetcode.java b/142.linked-list-cycle-ii.161253778.Wrong-Answer.leetcode.java
deleted file mode 100644
index ede7e0ad..00000000
--- ./142.linked-list-cycle-ii.161253778.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public ListNode detectCycle(ListNode head)
-    {
-        ListNode fast = head;
-        ListNode slow = head;
-
-        while (fast != null && fast.next != null && fast != slow)
-        {
-            fast = fast.next.next;
-            System.out.printf("fast --> %s\n", fast.val);
-            slow = slow.next;
-        }
-
-        while (fast != null && fast != head)
-        {
-            fast = fast.next;
-            System.out.printf("fast --> %s\n", fast.val);
-            head = head.next;
-        }
-
-        return fast;
-    }
-}
-
diff --git a/142.linked-list-cycle-ii.86893711.Accepted.leetcode.java b/142.linked-list-cycle-ii.86893711.Accepted.leetcode.java
deleted file mode 100644
index 1f351a16..00000000
--- ./142.linked-list-cycle-ii.86893711.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution 
-{
-    public ListNode detectCycle(ListNode head) 
-    {
-        ListNode fast = head;
-        ListNode slow = head;
-
-        do 
-        {
-            if (fast == null || fast.next == null)
-            {
-                return null;    
-            }
-            
-            fast = fast.next.next;
-            slow = slow.next;
-        }
-        while (fast != slow);
-
-        if (fast == slow) 
-        {
-            while (fast != null && fast != head) 
-            {
-                fast = fast.next;
-                head = head.next;
-            }
-
-            return fast;
-        }
-
-        return null;
-    }
-}
diff --git a/142.linked-list-cycle-ii.86893802.Accepted.leetcode.java b/142.linked-list-cycle-ii.86893802.Accepted.leetcode.java
deleted file mode 100644
index d096568c..00000000
--- ./142.linked-list-cycle-ii.86893802.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution 
-{
-    public ListNode detectCycle(ListNode head) 
-    {
-        ListNode fast = head;
-        ListNode slow = head;
-
-        do 
-        {
-            if (fast == null || fast.next == null)
-            {
-                return null;    
-            }
-            
-            fast = fast.next.next;
-            slow = slow.next;
-        }
-        while (fast != slow);
-
-        while (fast != null && fast != head) 
-        {
-            fast = fast.next;
-            head = head.next;
-        }
-
-        return fast;
-    }
-}
diff --git a/142.linked-list-cycle-ii.86893819.Accepted.leetcode.java b/142.linked-list-cycle-ii.86893819.Accepted.leetcode.java
deleted file mode 100644
index fbed4d20..00000000
--- ./142.linked-list-cycle-ii.86893819.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution 
-{
-    public ListNode detectCycle(ListNode head) 
-    {
-        ListNode fast = head;
-        ListNode slow = head;
-
-        do 
-        {
-            if (fast == null || fast.next == null)
-            {
-                return null;    
-            }
-            
-            fast = fast.next.next;
-            slow = slow.next;
-        }
-        while (fast != slow);
-
-        while (fast != head) 
-        {
-            fast = fast.next;
-            head = head.next;
-        }
-
-        return fast;
-    }
-}
diff --git a/142.linked-list-cycle-ii.86895130.Wrong-Answer.leetcode.java b/142.linked-list-cycle-ii.86895130.Wrong-Answer.leetcode.java
deleted file mode 100644
index 8cd6e435..00000000
--- ./142.linked-list-cycle-ii.86895130.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution 
-{
-    public ListNode detectCycle(ListNode head) 
-    {
-        ListNode fast = head;
-        ListNode slow = head;
-
-        while (fast != null && fast.next != null && fast != slow) 
-        {
-            fast = fast.next.next;
-            slow = slow.next;
-        }
-
-        if (fast == slow) 
-        {
-            while (fast != null && fast != head) 
-            {
-                fast = fast.next;
-                head = head.next;
-            }
-
-            return fast;
-        }
-
-        return null;
-    }
-}
diff --git a/142.linked-list-cycle-ii.86895788.Accepted.leetcode.java b/142.linked-list-cycle-ii.86895788.Accepted.leetcode.java
deleted file mode 100644
index 004fdced..00000000
--- ./142.linked-list-cycle-ii.86895788.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution 
-{
-    public ListNode detectCycle(ListNode head) 
-    {
-        ListNode fast = head;
-        ListNode slow = head;
-
-        do
-        {
-            if (fast == null || fast.next == null)
-            {
-                return null;
-            }
-            
-            fast = fast.next.next;
-            slow = slow.next;
-        }
-        while (fast != slow); 
-
-        while (fast != head) 
-        {
-            fast = fast.next;
-            head = head.next;
-        }
-
-        return fast;
-    }
-}
diff --git a/143.reorder-list.10812070.Runtime-Error.leetcode.java b/143.reorder-list.10812070.Runtime-Error.leetcode.java
deleted file mode 100644
index f6a06cf6..00000000
--- ./143.reorder-list.10812070.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,66 +0,0 @@
-  public class Solution {
-    private ListNode reverse(ListNode head) {
-      if (head == null || head.next == null) {
-        return head;
-      }
-
-      ListNode dummy = new ListNode(-1);
-      dummy.next = head;
-      ListNode pre = dummy.next;
-      ListNode curr = null;
-
-      do {
-        curr = pre.next;
-        pre.next = curr.next;
-        curr.next = dummy.next;
-        dummy.next = curr;
-      }
-      while (curr != null);
-
-      return dummy.next;
-    }
-
-    private ListNode[] split(ListNode head) {
-      ListNode[] lists = new ListNode[2];
-      lists[0] = head;
-
-      if (head == null || head.next == null) {
-        return lists;
-      }
-
-      ListNode slow = head;
-      ListNode fast = head.next.next;
-
-      while (fast != null) {
-        slow = slow.next;
-
-        if (fast.next == null) {
-          break;
-        }
-
-        fast = fast.next.next;
-      }
-
-      lists[1] = slow.next;
-      slow.next = null;
-      return lists;
-    }
-
-    private void merge(ListNode l1, ListNode l2) {
-      while (l2 != null) {
-        ListNode temp = l1.next;
-        l1.next = l2;
-        l1 = temp;
-        temp = l2.next;
-        l2.next = l1;
-        l2 = temp;
-      }
-    }
-
-    public void reorderList(ListNode head) {
-      ListNode[] lists = split(head);
-      lists[1] = reverse(lists[1]);
-      merge(lists[0], lists[1]);
-    }
-  }
-
diff --git a/143.reorder-list.161532439.Wrong-Answer.leetcode.java b/143.reorder-list.161532439.Wrong-Answer.leetcode.java
deleted file mode 100644
index 98ac3163..00000000
--- ./143.reorder-list.161532439.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,72 +0,0 @@
-public class Solution
-{
-    private ListNode reverse(ListNode head)
-    {
-        ListNode dummy = new ListNode(-1);
-        dummy.next = head;
-        ListNode pre = null;
-        ListNode temp = null;
-        ListNode current = head;
-
-        while (current != null)
-        {
-            temp = current.next;
-            current.next = pre;
-            pre = current;
-            current = temp;
-        }
-
-        return dummy.next;
-    }
-
-    private ListNode[] split(ListNode head)
-    {
-        ListNode[] lists = new ListNode[2];
-        lists[0] = head;
-
-        if (head == null || head.next == null)
-        {
-            return lists;
-        }
-
-        ListNode slow = head;
-        ListNode fast = head.next.next;
-
-        while (fast != null)
-        {
-            slow = slow.next;
-
-            if (fast.next == null)
-            {
-                break;
-            }
-
-            fast = fast.next.next;
-        }
-
-        lists[1] = slow.next;
-        slow.next = null;
-        return lists;
-    }
-
-    private void merge(ListNode l1, ListNode l2)
-    {
-        while (l2 != null)
-        {
-            ListNode temp = l1.next;
-            l1.next = l2;
-            l1 = temp;
-            temp = l2.next;
-            l2.next = l1;
-            l2 = temp;
-        }
-    }
-
-    public void reorderList(ListNode head)
-    {
-        ListNode[] lists = split(head);
-        lists[1] = reverse(lists[1]);
-        merge(lists[0], lists[1]);
-    }
-}
-
diff --git a/143.reorder-list.161532770.Accepted.leetcode.java b/143.reorder-list.161532770.Accepted.leetcode.java
deleted file mode 100644
index 75773c60..00000000
--- ./143.reorder-list.161532770.Accepted.leetcode.java
+++ /dev/null
@@ -1,70 +0,0 @@
-public class Solution
-{
-    private ListNode reverse(ListNode head)
-    {
-        ListNode pre = null;
-        ListNode temp = null;
-        ListNode current = head;
-
-        while (current != null)
-        {
-            temp = current.next;
-            current.next = pre;
-            pre = current;
-            current = temp;
-        }
-
-        return pre;
-    }
-
-    private ListNode[] split(ListNode head)
-    {
-        ListNode[] lists = new ListNode[2];
-        lists[0] = head;
-
-        if (head == null || head.next == null)
-        {
-            return lists;
-        }
-
-        ListNode slow = head;
-        ListNode fast = head.next.next;
-
-        while (fast != null)
-        {
-            slow = slow.next;
-
-            if (fast.next == null)
-            {
-                break;
-            }
-
-            fast = fast.next.next;
-        }
-
-        lists[1] = slow.next;
-        slow.next = null;
-        return lists;
-    }
-
-    private void merge(ListNode l1, ListNode l2)
-    {
-        while (l2 != null)
-        {
-            ListNode temp = l1.next;
-            l1.next = l2;
-            l1 = temp;
-            temp = l2.next;
-            l2.next = l1;
-            l2 = temp;
-        }
-    }
-
-    public void reorderList(ListNode head)
-    {
-        ListNode[] lists = split(head);
-        lists[1] = reverse(lists[1]);
-        merge(lists[0], lists[1]);
-    }
-}
-
diff --git a/143.reorder-list.161532952.Accepted.leetcode.java b/143.reorder-list.161532952.Accepted.leetcode.java
deleted file mode 100644
index e1822f78..00000000
--- ./143.reorder-list.161532952.Accepted.leetcode.java
+++ /dev/null
@@ -1,70 +0,0 @@
-public class Solution
-{
-    private ListNode reverse(ListNode head)
-    {
-        ListNode pre = null;
-        ListNode temp = null;
-        ListNode curr = head;
-
-        while (curr != null)
-        {
-            temp = curr.next;
-            curr.next = pre;
-            pre = curr;
-            curr = temp;
-        }
-
-        return pre;
-    }
-
-    private ListNode[] split(ListNode head)
-    {
-        ListNode[] lists = new ListNode[2];
-        lists[0] = head;
-
-        if (head == null || head.next == null)
-        {
-            return lists;
-        }
-
-        ListNode slow = head;
-        ListNode fast = head.next.next;
-
-        while (fast != null)
-        {
-            slow = slow.next;
-
-            if (fast.next == null)
-            {
-                break;
-            }
-
-            fast = fast.next.next;
-        }
-
-        lists[1] = slow.next;
-        slow.next = null;
-        return lists;
-    }
-
-    private void merge(ListNode l1, ListNode l2)
-    {
-        while (l2 != null)
-        {
-            ListNode temp = l1.next;
-            l1.next = l2;
-            l1 = temp;
-            temp = l2.next;
-            l2.next = l1;
-            l2 = temp;
-        }
-    }
-
-    public void reorderList(ListNode head)
-    {
-        ListNode[] lists = split(head);
-        lists[1] = reverse(lists[1]);
-        merge(lists[0], lists[1]);
-    }
-}
-
diff --git a/143.reorder-list.161533753.Wrong-Answer.leetcode.java b/143.reorder-list.161533753.Wrong-Answer.leetcode.java
deleted file mode 100644
index c6ce437f..00000000
--- ./143.reorder-list.161533753.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,61 +0,0 @@
-public class Solution
-{
-    private ListNode reverse(ListNode head)
-    {
-        ListNode pre = null;
-        ListNode temp = null;
-        ListNode curr = head;
-
-        while (curr != null)
-        {
-            temp = curr.next;
-            curr.next = pre;
-            pre = curr;
-            curr = temp;
-        }
-
-        return pre;
-    }
-
-    private ListNode[] split(ListNode head)
-    {
-        ListNode[] lists = new ListNode[2];
-        lists[0] = head;
-
-        if (head == null || head.next == null)
-        {
-            return lists;
-        }
-
-        ListNode slow = head;
-        ListNode fast = head.next.next;
-
-        while (fast != null)
-        {
-            slow = slow.next;
-
-            if (fast.next == null)
-            {
-                break;
-            }
-
-            fast = fast.next.next;
-        }
-
-        lists[1] = slow.next;
-        slow.next = null;
-        return lists;
-    }
-
-    private void merge(ListNode l1, ListNode l2)
-    {
-    }
-
-    public void reorderList(ListNode head)
-    {
-        ListNode[] lists = split(head);
-        lists[1] = reverse(lists[1]);
-        merge(lists[0], lists[1]);
-    }
-}
-
diff --git a/143.reorder-list.32426820.Accepted.leetcode.java b/143.reorder-list.32426820.Accepted.leetcode.java
deleted file mode 100644
index ebbc297c..00000000
--- ./143.reorder-list.32426820.Accepted.leetcode.java
+++ /dev/null
@@ -1,76 +0,0 @@
-  public class Solution
-  {
-    private ListNode reverse(ListNode head)
-    {
-      if (head == null || head.next == null)
-      {
-        return head;
-      }
-
-      ListNode dummy = new ListNode(-1);
-      dummy.next = head;
-      ListNode curr = head.next;
-
-      while (curr != null)
-      {
-        ListNode nextNode = curr.next;
-        curr.next = dummy.next;
-        dummy.next = curr;
-        curr = nextNode;
-      }
-
-      head.next = null;
-      return dummy.next;
-    }
-
-    private ListNode[] split(ListNode head)
-    {
-      ListNode[] lists = new ListNode[2];
-      lists[0] = head;
-
-      if (head == null || head.next == null)
-      {
-        return lists;
-      }
-
-      ListNode slow = head;
-      ListNode fast = head.next.next;
-
-      while (fast != null)
-      {
-        slow = slow.next;
-
-        if (fast.next == null)
-        {
-          break;
-        }
-
-        fast = fast.next.next;
-      }
-
-      lists[1] = slow.next;
-      slow.next = null;
-      return lists;
-    }
-
-    private void merge(ListNode l1, ListNode l2)
-    {
-      while (l2 != null)
-      {
-        ListNode temp = l1.next;
-        l1.next = l2;
-        l1 = temp;
-        temp = l2.next;
-        l2.next = l1;
-        l2 = temp;
-      }
-    }
-
-    public void reorderList(ListNode head)
-    {
-      ListNode[] lists = split(head);
-      lists[1] = reverse(lists[1]);
-      merge(lists[0], lists[1]);
-    }
-  }
-
diff --git a/147.insertion-sort-list.161859570.Wrong-Answer.leetcode.java b/147.insertion-sort-list.161859570.Wrong-Answer.leetcode.java
deleted file mode 100644
index 8ccd51fc..00000000
--- ./147.insertion-sort-list.161859570.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public ListNode insertionSortList(ListNode head)
-    {
-        if (head == null)
-        {
-            return null;
-        }
-
-        ListNode dummy = new ListNode(0);
-        ListNode pre = dummy;
-        ListNode cur = head;
-        ListNode nextNode = null;
-
-        while (cur != null)
-        {
-            pre = dummy;
-            nextNode = cur.next;
-            cur.next = pre.next;
-            pre.next = cur;
-            cur = nextNode;
-        }
-
-        return dummy.next;
-    }
-}
-
diff --git a/147.insertion-sort-list.161859603.Time-Limit-Exceeded.leetcode.java b/147.insertion-sort-list.161859603.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 1bf99f8e..00000000
--- ./147.insertion-sort-list.161859603.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public ListNode insertionSortList(ListNode head)
-    {
-        if (head == null)
-        {
-            return null;
-        }
-
-        ListNode dummy = new ListNode(0);
-        ListNode pre = dummy;
-        ListNode cur = head;
-        ListNode nextNode = null;
-
-        while (cur != null)
-        {
-            pre = dummy;
-
-            while (pre.next != null && pre.next.val < cur.val)
-            {
-                pre = pre.next;
-            }
-        }
-
-        return dummy.next;
-    }
-}
-
diff --git a/147.insertion-sort-list.161859656.Accepted.leetcode.java b/147.insertion-sort-list.161859656.Accepted.leetcode.java
deleted file mode 100644
index d3e4db6e..00000000
--- ./147.insertion-sort-list.161859656.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public ListNode insertionSortList(ListNode head)
-    {
-        ListNode dummy = new ListNode(0);
-        ListNode pre = dummy;
-        ListNode cur = head;
-        ListNode nextNode = null;
-
-        while (cur != null)
-        {
-            pre = dummy;
-
-            while (pre.next != null && pre.next.val < cur.val)
-            {
-                pre = pre.next;
-            }
-
-            nextNode = cur.next;
-            cur.next = pre.next;
-            pre.next = cur;
-            cur = nextNode;
-        }
-
-        return dummy.next;
-    }
-}
-
diff --git a/147.insertion-sort-list.161859701.Wrong-Answer.leetcode.java b/147.insertion-sort-list.161859701.Wrong-Answer.leetcode.java
deleted file mode 100644
index 1205bda4..00000000
--- ./147.insertion-sort-list.161859701.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public ListNode insertionSortList(ListNode head)
-    {
-        ListNode dummy = new ListNode(0);
-        ListNode pre = dummy;
-        ListNode cur = head;
-        ListNode nextNode = null;
-
-        while (cur != null)
-        {
-            while (pre.next != null && pre.next.val < cur.val)
-            {
-                pre = pre.next;
-            }
-
-            nextNode = cur.next;
-            cur.next = pre.next;
-            pre.next = cur;
-            cur = nextNode;
-        }
-
-        return dummy.next;
-    }
-}
-
diff --git a/147.insertion-sort-list.32533211.Accepted.leetcode.java b/147.insertion-sort-list.32533211.Accepted.leetcode.java
deleted file mode 100644
index 60c72782..00000000
--- ./147.insertion-sort-list.32533211.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-  public class Solution
-  {
-    public ListNode insertionSortList(ListNode head)
-    {
-      if (head == null)
-      {
-        return null;
-      }
-
-      ListNode dummy = new ListNode(0);
-      ListNode pre = dummy;
-      ListNode cur = head;
-      ListNode nextNode = null;
-
-      while (cur != null)
-      {
-        pre = dummy;
-
-        while (pre.next != null && pre.next.val < cur.val)
-        {
-          pre = pre.next;
-        }
-
-        nextNode = cur.next;
-        cur.next = pre.next;
-        pre.next = cur;
-        cur = nextNode;
-      }
-
-      return dummy.next;
-    }
-  }
-
diff --git a/147.insertion-sort-list.7793692.Accepted.leetcode.java b/147.insertion-sort-list.7793692.Accepted.leetcode.java
deleted file mode 100644
index 6fdb980f..00000000
--- ./147.insertion-sort-list.7793692.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/**
- * Definition for singly-linked list.
- * public class ListNode {
- *     int val;
- *     ListNode next;
- *     ListNode(int x) {
- *         val = x;
- *         next = null;
- *     }
- * }
- */
-public class Solution {
-        public ListNode insertionSortList(ListNode head) {  
-        if(head == null)  
-            return null;  
-        ListNode helper = new ListNode(0);  
-        ListNode pre = helper;  
-        ListNode cur = head;  
-        while(cur!=null)  
-        {  
-            ListNode next = cur.next;  
-            pre = helper;  
-            while(pre.next!=null && pre.next.val<cur.val)  
-            {  
-                pre = pre.next;  
-            }  
-            cur.next = pre.next;  
-            pre.next = cur;  
-            cur = next;  
-        }  
-        return helper.next;  
-    }  
-}
diff --git a/147.insertion-sort-list.7861138.Accepted.leetcode.java b/147.insertion-sort-list.7861138.Accepted.leetcode.java
deleted file mode 100644
index 56970a1d..00000000
--- ./147.insertion-sort-list.7861138.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-  public class Solution {
-    public ListNode insertionSortList(ListNode head) {
-      if (head == null) {
-        return null;
-      }
-
-      ListNode helper = new ListNode(0);
-      ListNode pre = helper;
-      ListNode cur = head;
-
-      while (cur != null) {
-        ListNode next = cur.next;
-        pre = helper;
-
-        while (pre.next != null && pre.next.val < cur.val) {
-          pre = pre.next;
-        }
-
-        cur.next = pre.next;
-        pre.next = cur;
-        cur = next;
-      }
-
-      return helper.next;
-    }
-  }
-
diff --git a/147.insertion-sort-list.9318532.Accepted.leetcode.java b/147.insertion-sort-list.9318532.Accepted.leetcode.java
deleted file mode 100644
index b00fd8d2..00000000
--- ./147.insertion-sort-list.9318532.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-  public class Solution {
-    public ListNode insertionSortList(ListNode head) {
-      if (head == null) {
-        return null;
-      }
-
-      ListNode helper = new ListNode(0);
-      ListNode pre = helper;
-      ListNode cur = head;
-      ListNode next = null;
-
-      while (cur != null) {
-        pre = helper;
-
-        while (pre.next != null && pre.next.val < cur.val) {
-          pre = pre.next;
-        }
-
-        next = cur.next;
-        cur.next = pre.next;
-        pre.next = cur;
-        cur = next;
-      }
-
-      return helper.next;
-    }
-  }
-
diff --git a/148.sort-list.161863736.Accepted.leetcode.java b/148.sort-list.161863736.Accepted.leetcode.java
deleted file mode 100644
index 057f84a2..00000000
--- ./148.sort-list.161863736.Accepted.leetcode.java
+++ /dev/null
@@ -1,54 +0,0 @@
-public class Solution
-{
-    private ListNode findMiddle(ListNode head)
-    {
-        ListNode slow = head, fast = head.next;
-
-        while (fast != null && fast.next != null)
-        {
-            fast = fast.next.next;
-            slow = slow.next;
-        }
-
-        return slow;
-    }
-
-    private ListNode merge(ListNode head1, ListNode head2)
-    {
-        ListNode dummy = new ListNode(0);
-        ListNode tail = dummy;
-
-        while (head1 != null || head2 != null)
-        {
-            if (head2 == null || (head1 != null && head1.val < head2.val))
-            {
-                tail.next = head1;
-                head1 = head1.next;
-            }
-            else
-            {
-                tail.next = head2;
-                head2 = head2.next;
-            }
-
-            tail = tail.next;
-        }
-
-        return dummy.next;
-    }
-
-    public ListNode sortList(ListNode head)
-    {
-        if (head == null || head.next == null)
-        {
-            return head;
-        }
-
-        ListNode mid = findMiddle(head);
-        ListNode right = sortList(mid.next);
-        mid.next = null;
-        ListNode left = sortList(head);
-        return merge(left, right);
-    }
-}
-
diff --git a/148.sort-list.161863881.Runtime-Error.leetcode.java b/148.sort-list.161863881.Runtime-Error.leetcode.java
deleted file mode 100644
index 763edce2..00000000
--- ./148.sort-list.161863881.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution
-{
-    private ListNode findMiddle(ListNode head)
-    {
-        ListNode slow = head, fast = head.next;
-
-        while (fast != null && fast.next != null)
-        {
-            fast = fast.next.next;
-            slow = slow.next;
-        }
-
-        return slow;
-    }
-
-    private ListNode merge(ListNode head1, ListNode head2)
-    {
-        ListNode dummy = new ListNode(0);
-        ListNode tail = dummy;
-
-        while (head1 != null || head2 != null)
-        {
-            if (head2 == null || (head1 != null && head1.val < head2.val))
-            {
-                tail.next = head1;
-                head1 = head1.next;
-            }
-            else
-            {
-                tail.next = head2;
-                head2 = head2.next;
-            }
-
-            tail = tail.next;
-        }
-
-        return dummy.next;
-    }
-
-    public ListNode sortList(ListNode head)
-    {
-        ListNode mid = findMiddle(head);
-        ListNode right = sortList(mid.next);
-        mid.next = null;
-        ListNode left = sortList(head);
-        return merge(left, right);
-    }
-}
-
diff --git a/148.sort-list.161864147.Wrong-Answer.leetcode.java b/148.sort-list.161864147.Wrong-Answer.leetcode.java
deleted file mode 100644
index 5d04d1a4..00000000
--- ./148.sort-list.161864147.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,54 +0,0 @@
-public class Solution
-{
-    private ListNode findMiddle(ListNode head)
-    {
-        ListNode slow = head, fast = head.next;
-
-        while (fast != null && fast.next != null)
-        {
-            fast = fast.next.next;
-            slow = slow.next;
-        }
-
-        slow.next = null;
-        return slow;
-    }
-
-    private ListNode merge(ListNode head1, ListNode head2)
-    {
-        ListNode dummy = new ListNode(0);
-        ListNode tail = dummy;
-
-        while (head1 != null || head2 != null)
-        {
-            if (head2 == null || (head1 != null && head1.val < head2.val))
-            {
-                tail.next = head1;
-                head1 = head1.next;
-            }
-            else
-            {
-                tail.next = head2;
-                head2 = head2.next;
-            }
-
-            tail = tail.next;
-        }
-
-        return dummy.next;
-    }
-
-    public ListNode sortList(ListNode head)
-    {
-        if (head == null || head.next == null)
-        {
-            return head;
-        }
-
-        ListNode mid = findMiddle(head);
-        ListNode right = sortList(mid.next);
-        ListNode left = sortList(head);
-        return merge(left, right);
-    }
-}
-
diff --git a/148.sort-list.32538162.Accepted.leetcode.java b/148.sort-list.32538162.Accepted.leetcode.java
deleted file mode 100644
index ae3e1960..00000000
--- ./148.sort-list.32538162.Accepted.leetcode.java
+++ /dev/null
@@ -1,113 +0,0 @@
-  public class Solution
-  {
-    public ListNode sortList(ListNode head)
-    {
-      if (head == null || head.next == null)
-      {
-        return head;
-      }
-
-      ListNode list1 = null, list2 = null;
-      int level = 0, len = 0, listLen = 1 << 0;
-      ListNode run = head;
-
-      while (run != null)
-      {
-        run = run.next;
-        len++ ;
-      }
-
-      while (listLen < len)
-      {
-        int count = 0;
-        int coup = 0;
-        run = head;
-        ListNode pre = new ListNode(-1);
-        pre.next = head;
-
-        while (2 * coup * listLen < len - listLen)
-        {
-          list1 = run;
-          count = 0;
-
-          while (run != null && count < listLen)
-          {
-            run = run.next;
-            count++ ;
-          }
-
-          list2 = run;
-          count = 0;
-
-          while (run != null && count < listLen)
-          {
-            run = run.next;
-            count++ ;
-          }
-
-          ListNode pretmp = merge(list1, list2, pre, run, listLen);
-
-          if (coup == 0)
-          {
-            head = pre.next;
-          }
-
-          pre = pretmp;
-          coup++ ;
-        }
-
-        level++ ;
-        listLen = 1 << level;
-      }
-
-      return head;
-    }
-
-    public ListNode merge(ListNode l1, ListNode l2, ListNode pre,
-                          ListNode tail, int len)
-    {
-      int c1 = 0, c2 = 0;
-      ListNode head = new ListNode(-1);
-      ListNode run = head;
-
-      while (c1 < len && c2 < len && l1 != null && l2 != null)
-      {
-        if (l1.val <= l2.val)
-        {
-          run.next = l1;
-          l1 = l1.next;
-          c1++ ;
-        }
-        else
-        {
-          run.next = l2;
-          l2 = l2.next;
-          c2++ ;
-        }
-
-        run = run.next;
-        run.next = null;
-      }
-
-      while (c1 < len && l1 != null)
-      {
-        run.next = l1;
-        l1 = l1.next;
-        c1++ ;
-        run = run.next;
-      }
-
-      while (c2 < len && l2 != null)
-      {
-        run.next = l2;
-        l2 = l2.next;
-        c2++ ;
-        run = run.next;
-      }
-
-      pre.next = head.next;
-      run.next = tail;
-      return run;
-    }
-  }
-
diff --git a/148.sort-list.32538189.Accepted.leetcode.java b/148.sort-list.32538189.Accepted.leetcode.java
deleted file mode 100644
index 2ee6c98b..00000000
--- ./148.sort-list.32538189.Accepted.leetcode.java
+++ /dev/null
@@ -1,61 +0,0 @@
-  public class Solution
-  {
-    public ListNode sortList(ListNode head)
-    {
-      return mergeSort(head);
-    }
-    private ListNode mergeSort(ListNode head)
-    {
-      if (head == null || head.next == null)
-      {
-        return head;
-      }
-
-      ListNode walker = head;
-      ListNode runner = head;
-
-      while (runner.next != null && runner.next.next != null)
-      {
-        walker = walker.next;
-        runner = runner.next.next;
-      }
-
-      ListNode head2 = walker.next;
-      walker.next = null;
-      ListNode head1 = head;
-      head1 = mergeSort(head1);
-      head2 = mergeSort(head2);
-      return merge(head1, head2);
-    }
-    private ListNode merge(ListNode head1, ListNode head2)
-    {
-      ListNode helper = new ListNode(0);
-      helper.next = head1;
-      ListNode pre = helper;
-
-      while (head1 != null && head2 != null)
-      {
-        if (head1.val < head2.val)
-        {
-          head1 = head1.next;
-        }
-        else
-        {
-          ListNode next = head2.next;
-          head2.next = pre.next;
-          pre.next = head2;
-          head2 = next;
-        }
-
-        pre = pre.next;
-      }
-
-      if (head2 != null)
-      {
-        pre.next = head2;
-      }
-
-      return helper.next;
-    }
-  }
-
diff --git a/148.sort-list.74256505.Accepted.leetcode.java b/148.sort-list.74256505.Accepted.leetcode.java
deleted file mode 100644
index 0669a114..00000000
--- ./148.sort-list.74256505.Accepted.leetcode.java
+++ /dev/null
@@ -1,63 +0,0 @@
-public class Solution
-{
-    private ListNode findMiddle(ListNode head)
-    {
-        ListNode slow = head, fast = head.next;
-
-        while (fast != null && fast.next != null)
-        {
-            fast = fast.next.next;
-            slow = slow.next;
-        }
-
-        return slow;
-    }
-
-    private ListNode merge(ListNode head1, ListNode head2)
-    {
-        ListNode dummy = new ListNode(0);
-        ListNode tail = dummy;
-
-        while (head1 != null && head2 != null)
-        {
-            if (head1.val < head2.val)
-            {
-                tail.next = head1;
-                head1 = head1.next;
-            }
-            else
-            {
-                tail.next = head2;
-                head2 = head2.next;
-            }
-
-            tail = tail.next;
-        }
-
-        if (head1 != null)
-        {
-            tail.next = head1;
-        }
-        else
-        {
-            tail.next = head2;
-        }
-
-        return dummy.next;
-    }
-
-    public ListNode sortList(ListNode head)
-    {
-        if (head == null || head.next == null)
-        {
-            return head;
-        }
-
-        ListNode mid = findMiddle(head);
-        ListNode right = sortList(mid.next);
-        mid.next = null;
-        ListNode left = sortList(head);
-        return merge(left, right);
-    }
-}
-
diff --git a/149.max-points-on-a-line.162000742.Wrong-Answer.leetcode.java b/149.max-points-on-a-line.162000742.Wrong-Answer.leetcode.java
deleted file mode 100644
index c545aaf7..00000000
--- ./149.max-points-on-a-line.162000742.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution
-{
-
-    private boolean isOnLine(Point p1, Point p2, Point p3)
-    {
-        return (p1.y - p2.y) * (p2.x - p3.x) == (p1.x - p2.x) * (p2.y - p3.y);
-    }
-
-    public int maxPoints(Point[] points)
-    {
-        List<Point[]> lines = new ArrayList<Point[]>();
-
-        for (int i = 0; i < points.length; i++)
-        {
-            for (int j = i + 1; j < points.length; j++)
-            {
-                if (points[i].x != points[j].x || points[i].y != points[j].y)
-                {
-                    lines.add(new Point[] { points[i], points[j] });
-                }
-            }
-        }
-
-        if (lines.isEmpty())
-        {
-            return points.length;
-        }
-
-        int max = 0;
-
-        for (Point[] line : lines)
-        {
-            int count = 0;
-
-            for (Point point : points)
-            {
-                if (isOnLine(line[0], line[1], point))
-                {
-                    count++;
-                }
-            }
-
-            max = Math.max(max, count);
-        }
-
-        return max;
-    }
-}
-
diff --git a/149.max-points-on-a-line.162003974.Wrong-Answer.leetcode.java b/149.max-points-on-a-line.162003974.Wrong-Answer.leetcode.java
deleted file mode 100644
index 818710d0..00000000
--- ./149.max-points-on-a-line.162003974.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,61 +0,0 @@
-public class Solution
-{
-    public int maxPoints(Point[] points)
-    {
-        if (points == null || points.length == 0)
-        {
-            return 0;
-        }
-
-        int max = 1;
-        double ratio = 0.0;
-
-        for (int i = 0; i < points.length - 1; i++)
-        {
-            HashMap<Double, Integer> map = new HashMap<Double, Integer>();
-            int numofSame = 0;
-            int localMax = 1;
-
-            for (int j = i + 1; j < points.length; j++)
-            {
-                if (points[j].x == points[i].x && points[j].y == points[i].y)
-                {
-                    numofSame++;
-                    continue;
-                }
-                else if (points[j].x == points[i].x)
-                {
-                    ratio = (double) Integer.MAX_VALUE;
-                }
-                else if (points[j].y == points[i].y)
-                {
-                    ratio = 0.0;
-                }
-                else
-                {
-                    ratio = (double)(points[j].y - points[i].y) / (double)(points[j].x - points[i].x);
-                }
-
-                if (map.containsKey(ratio))
-                {
-                    map.put(ratio, map.get(ratio) + 1);
-                }
-                else
-                {
-                    map.put(ratio, 2);
-                }
-            }
-
-            for (Integer value : map.values())
-            {
-                localMax = Math.max(localMax, value);
-            }
-
-            localMax += numofSame;
-            max = Math.max(max, localMax);
-        }
-
-        return max;
-    }
-}
-
diff --git a/149.max-points-on-a-line.162005371.Accepted.leetcode.java b/149.max-points-on-a-line.162005371.Accepted.leetcode.java
deleted file mode 100644
index ed1c672b..00000000
--- ./149.max-points-on-a-line.162005371.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution
-{
-    public int maxPoints(Point[] points)
-    {
-        int res = 0;
-
-        for (int i = 0; i < points.length; ++i)
-        {
-            Map<Map<Integer, Integer>, Integer> m = new HashMap<>();
-            int duplicate = 1;
-
-            for (int j = i + 1; j < points.length; ++j)
-            {
-                if (points[i].x == points[j].x && points[i].y == points[j].y)
-                {
-                    ++duplicate; continue;
-                }
-
-                int dx = points[j].x - points[i].x;
-                int dy = points[j].y - points[i].y;
-                int d = gcd(dx, dy);
-                Map<Integer, Integer> t = new HashMap<>();
-                t.put(dx / d, dy / d);
-                m.put(t, m.getOrDefault(t, 0) + 1);
-            }
-
-            res = Math.max(res, duplicate);
-
-            for (Map.Entry<Map<Integer, Integer>, Integer> e : m.entrySet())
-            {
-                res = Math.max(res, e.getValue() + duplicate);
-            }
-        }
-
-        return res;
-    }
-    public int gcd(int a, int b)
-    {
-        return (b == 0) ? a : gcd(b, a % b);
-    }
-}
-
diff --git a/149.max-points-on-a-line.162005470.Accepted.leetcode.java b/149.max-points-on-a-line.162005470.Accepted.leetcode.java
deleted file mode 100644
index 43974add..00000000
--- ./149.max-points-on-a-line.162005470.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution
-{
-    public int maxPoints(Point[] points)
-    {
-        int res = 0, n = points.length;
-
-        for (int i = 0; i < n; ++i)
-        {
-            int duplicate = 1;
-
-            for (int j = i + 1; j < n; ++j)
-            {
-                int cnt = 0;
-                long x1 = points[i].x, y1 = points[i].y;
-                long x2 = points[j].x, y2 = points[j].y;
-
-                if (x1 == x2 && y1 == y2)
-                {
-                    ++duplicate;
-                    continue;
-                }
-
-                for (int k = 0; k < n; ++k)
-                {
-                    int x3 = points[k].x, y3 = points[k].y;
-
-                    if (x1 * y2 + x2 * y3 + x3 * y1 - x3 * y2 - x2 * y1 - x1 * y3 == 0)
-                    {
-                        ++cnt;
-                    }
-                }
-
-                res = Math.max(res, cnt);
-            }
-
-            res = Math.max(res, duplicate);
-        }
-
-        return res;
-    }
-}
-
diff --git a/149.max-points-on-a-line.162005669.Wrong-Answer.leetcode.java b/149.max-points-on-a-line.162005669.Wrong-Answer.leetcode.java
deleted file mode 100644
index 211883d1..00000000
--- ./149.max-points-on-a-line.162005669.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,62 +0,0 @@
-public class Solution
-{
-    public  int maxPoints(Point[] points)
-    {
-        if (points == null || points.length == 0)
-        {
-            return 0;
-        }
-
-        HashMap<Double, Integer> map = new HashMap<Double, Integer>();
-        int max = 1;
-
-        for (int i = 0 ; i < points.length; i++)
-        {
-            // shared point changed, map should be cleared and server the new point
-            map.clear();
-            // maybe all points contained in the list are same points,and same points' k is
-            // represented by Integer.MIN_VALUE
-            map.put((double)Integer.MIN_VALUE, 1);
-            int dup = 0;
-
-            for (int j = i + 1; j < points.length; j++)
-            {
-                if (points[j].x == points[i].x && points[j].y == points[i].y)
-                {
-                    dup++;
-                    continue;
-                }
-
-                // look 0.0+(double)(points[j].y-points[i].y)/(double)(points[j].x-points[i].x)
-                // because (double)0/-1 is -0.0, so we should use 0.0+-0.0=0.0 to solve 0.0 !=-0.0
-                // problem
-                // if the line through two points are parallel to y coordinator, then K(slop) is
-                // Integer.MAX_VALUE
-                double key = points[j].x - points[i].x == 0 ?
-                             Integer.MAX_VALUE :
-                             0.0 + (double)(points[j].y - points[i].y) / (double)(points[j].x - points[i].x);
-
-                if (map.containsKey(key))
-                {
-                    map.put(key, map.get(key) + 1);
-                }
-                else
-                {
-                    map.put(key, 2);
-                }
-            }
-
-            for (int temp : map.values())
-            {
-                // duplicate may exist
-                if (temp + dup > max)
-                {
-                    max = temp + dup;
-                }
-            }
-        }
-
-        return max;
-    }
-}
-
diff --git a/149.max-points-on-a-line.162005786.Wrong-Answer.leetcode.java b/149.max-points-on-a-line.162005786.Wrong-Answer.leetcode.java
deleted file mode 100644
index 2941e70a..00000000
--- ./149.max-points-on-a-line.162005786.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,126 +0,0 @@
-class Line
-{
-    public double a, b, c;
-    public Line(double a, double b, double c)
-    {
-        this.a = a;
-        this.b = b;
-        this.c = c;
-    }
-
-    public Line(int x1, int y1, int x2, int y2)
-    {
-        if (x1 == x2)
-        {
-            if (x1 == 0)
-            {
-                a = 1;
-                b = 0;
-                c = 0;
-            }
-            else
-            {
-                a = 1.0 / x1;
-                b = 0;
-                c = 1;
-            }
-        }
-        else if (y1 == y2)
-        {
-            if (y1 == 0)
-            {
-                a = 0;
-                b = 1;
-                c = 0;
-            }
-            else
-            {
-                a = 0;
-                b = 1.0 / y1;
-                c = 1;
-            }
-        }
-        else
-        {
-            if (x1 * y2 == x2 * y1)
-            {
-                a = 1;
-                b = - 1.0 * (y1 - y2) / (x1 - x2);
-                c = 0;
-            }
-            else
-            {
-                a = 1.0 * (y1 - y2) / (x2 * y1 - x1 * y2);
-                b = 1.0 * (x1 - x2) / (x1 * y2 - x2 * y1);
-                c = 1;
-            }
-        }
-    }
-
-    public String toString()
-    {
-        return Double.toString(a) + " " + Double.toString(b) + " " + Double.toString(c);
-    }
-}
-
-public class Solution
-{
-
-    public int maxPoints(Point[] points)
-    {
-        if (points.length < 2)
-        {
-            return points.length;
-        }
-
-        HashMap<String, Integer> hash = new HashMap<String, Integer>();
-
-        for (int i = 0; i < points.length; i++)
-        {
-            for (int j = i + 1; j < points.length; j++)
-            {
-                Line line = new Line(points[i].x, points[i].y,
-                                     points[j].x, points[j].y);
-                String key = line.toString();
-
-                if (hash.containsKey(key))
-                {
-                    hash.put(key, hash.get(key) + 1);
-                }
-                else
-                {
-                    hash.put(key, 1);
-                }
-            }
-        }
-
-        int max = 0;
-        String maxKey = "";
-
-        for (String key : hash.keySet())
-        {
-            if (hash.get(key) > max)
-            {
-                max = hash.get(key);
-                maxKey = key;
-            }
-        }
-
-        String[] params = maxKey.split(" ");
-        double a = Double.parseDouble(params[0]);
-        double b = Double.parseDouble(params[1]);
-        double c = Double.parseDouble(params[2]);
-        int count = 0;
-
-        for (int i = 0; i < points.length; i++)
-        {
-            if (Math.abs(a * points[i].x + b * points[i].y - c) < 1e-6)
-            {
-                count++;
-            }
-        }
-
-        return count;
-    }
-}
-
diff --git a/149.max-points-on-a-line.162006006.Wrong-Answer.leetcode.java b/149.max-points-on-a-line.162006006.Wrong-Answer.leetcode.java
deleted file mode 100644
index ff21ceb7..00000000
--- ./149.max-points-on-a-line.162006006.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,66 +0,0 @@
-
-public class Solution
-{
-    public int maxPoints(Point[] points)
-    {
-        if (points == null || points.length == 0)
-        {
-            return 0;
-        }
-
-        int max = 1;
-        double ratio = 0.0;
-
-        for (int i = 0; i < points.length - 1; i++)
-        {
-            HashMap<Double, Integer> map = new HashMap<Double, Integer>();
-            int numofSame = 0;
-            int localMax = 1;
-
-            for (int j = i + 1; j < points.length; j++)
-            {
-                if (points[j].x == points[i].x && points[j].y == points[i].y)
-                {
-                    numofSame++;
-                    continue;
-                }
-                else if (points[j].x == points[i].x)
-                {
-                    ratio = (double) Integer.MAX_VALUE;
-                }
-                else if (points[j].y == points[i].y)
-                {
-                    ratio = 0.0;
-                }
-                else
-                {
-                    ratio = (double)(points[j].y - points[i].y) / (double)(points[j].x - points[i].x);
-                }
-
-                int num;
-
-                if (map.containsKey(ratio))
-                {
-                    num = map.get(ratio) + 1;
-                }
-                else
-                {
-                    num = 2;
-                }
-
-                map.put(ratio, num);
-            }
-
-            for (Integer value : map.values())
-            {
-                localMax = Math.max(localMax, value);
-            }
-
-            localMax += numofSame;
-            max = Math.max(max, localMax);
-        }
-
-        return max;
-    }
-}
-
diff --git a/15.3sum.162023968.Wrong-Answer.leetcode.java b/15.3sum.162023968.Wrong-Answer.leetcode.java
deleted file mode 100644
index 77beab04..00000000
--- ./15.3sum.162023968.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> threeSum(int[] num)
-    {
-        List<List<Integer>> res = new ArrayList<List<Integer>>();
-
-        if (num.length < 3)
-        {
-            return res;
-        }
-
-        Arrays.sort(num);
-
-        for (int i = 0; i + 2 < num.length; i++)
-        {
-            if (i - 1 >= 0 && num[i] == num[i - 1])
-            {
-                continue;
-            }
-
-            int j = i + 1, k = num.length - 1;
-
-            while (j < k)
-            {
-                if (num[i] + num[j] + num[k] == 0)
-                {
-                    ArrayList<Integer> temp = new ArrayList<Integer>();
-                    temp.add(num[i]);
-                    temp.add(num[j]);
-                    temp.add(num[k]);
-                    res.add(temp);
-                    k--;
-                    j++;
-                }
-                else if (num[i] + num[j] + num[k] > 0)
-                {
-                    k--;
-                }
-                else
-                {
-                    j++;
-                }
-            }
-        }
-
-        return res;
-    }
-}
-
diff --git a/15.3sum.162024062.Time-Limit-Exceeded.leetcode.java b/15.3sum.162024062.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 53a9adc7..00000000
--- ./15.3sum.162024062.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,59 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> threeSum(int[] num)
-    {
-        List<List<Integer>> res = new ArrayList<List<Integer>>();
-
-        if (num.length < 3)
-        {
-            return res;
-        }
-
-        Arrays.sort(num);
-
-        for (int i = 0; i + 2 < num.length; i++)
-        {
-            if (i - 1 >= 0 && num[i] == num[i - 1])
-            {
-                continue;
-            }
-
-            int j = i + 1, k = num.length - 1;
-
-            while (j < k)
-            {
-                if (k + 1 < num.length && num[k] == num[k + 1])
-                {
-                    k--;
-                    continue;
-                }
-
-                if (j - 1 > i && num[j] == num[j - 1])
-                {
-                    j++;
-                    continue;
-                }
-
-                if (num[i] + num[j] + num[k] == 0)
-                {
-                    ArrayList<Integer> temp = new ArrayList<Integer>();
-                    temp.add(num[i]);
-                    temp.add(num[j]);
-                    temp.add(num[k]);
-                    res.add(temp);
-                }
-                else if (num[i] + num[j] + num[k] > 0)
-                {
-                    k--;
-                }
-                else
-                {
-                    j++;
-                }
-            }
-        }
-
-        return res;
-    }
-}
-
diff --git a/15.3sum.162024135.Time-Limit-Exceeded.leetcode.java b/15.3sum.162024135.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index b9a90b71..00000000
--- ./15.3sum.162024135.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> threeSum(int[] num)
-    {
-        List<List<Integer>> res = new ArrayList<List<Integer>>();
-
-        if (num.length < 3)
-        {
-            return res;
-        }
-
-        Arrays.sort(num);
-
-        for (int i = 0; i + 2 < num.length; i++)
-        {
-            if (i - 1 >= 0 && num[i] == num[i - 1])
-            {
-                continue;
-            }
-
-            int j = i + 1, k = num.length - 1;
-
-            while (j < k)
-            {
-                if (k + 1 < num.length && num[k] == num[k + 1])
-                {
-                    k--;
-                    continue;
-                }
-
-                if (j - 1 > i && num[j] == num[j - 1])
-                {
-                    j++;
-                    continue;
-                }
-
-                if (num[i] + num[j] + num[k] == 0)
-                {
-                    ArrayList<Integer> temp = new ArrayList<Integer>();
-                    temp.add(num[i]);
-                    temp.add(num[j]);
-                    temp.add(num[k]);
-                    res.add(temp);
-                    k--;
-                    j++;
-                }
-            }
-        }
-
-        return res;
-    }
-}
-
diff --git a/150.evaluate-reverse-polish-notation.162024395.Accepted.leetcode.java b/150.evaluate-reverse-polish-notation.162024395.Accepted.leetcode.java
deleted file mode 100644
index 183c019b..00000000
--- ./150.evaluate-reverse-polish-notation.162024395.Accepted.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution
-{
-    public int evalRPN(String[] tokens)
-    {
-        String operators = "+-*/";
-        Stack<Integer> stack = new Stack<Integer>();
-
-        for (String token : tokens)
-        {
-            if (!operators.contains(token))
-            {
-                stack.push(Integer.parseInt(token));
-            }
-            else
-            {
-                int a = stack.pop();
-                int b = stack.pop();
-
-                switch (token)
-                {
-                case "+":
-                    stack.push(a + b);
-                    break;
-
-                case "-":
-                    stack.push(b - a);
-                    break;
-
-                case "*":
-                    stack.push(a * b);
-                    break;
-
-                case "/":
-                    stack.push(b / a);
-                    break;
-                }
-            }
-        }
-
-        return stack.pop();
-    }
-}
-
diff --git a/150.evaluate-reverse-polish-notation.210477724.Accepted.leetcode.java b/150.evaluate-reverse-polish-notation.210477724.Accepted.leetcode.java
deleted file mode 100644
index d6fbad91..00000000
--- ./150.evaluate-reverse-polish-notation.210477724.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution
-{
-    public int evalRPN(String[] tokens)
-    {
-        Stack<Integer> stack = new Stack<Integer>();
-
-        for (String token : tokens)
-        {
-            if (token.equals("+"))
-            {
-                int num2 = stack.pop();
-                int num1 = stack.pop();
-                stack.push(num1 + num2);
-            }
-            else if (token.equals("-"))
-            {
-                int num2 = stack.pop();
-                int num1 = stack.pop();
-                stack.push(num1 - num2);
-            }
-            else if (token.equals("*"))
-            {
-                int num2 = stack.pop();
-                int num1 = stack.pop();
-                stack.push(num1 * num2);
-            }
-            else if (token.equals("/"))
-            {
-                int num2 = stack.pop();
-                int num1 = stack.pop();
-                stack.push(num1 / num2);
-            }
-            else
-            {
-                stack.push(Integer.parseInt(token));
-            }
-        }
-
-        return stack.pop();
-    }
-}
-
diff --git a/151.reverse-words-in-a-string.162103884.Wrong-Answer.leetcode.java b/151.reverse-words-in-a-string.162103884.Wrong-Answer.leetcode.java
deleted file mode 100644
index 0a3dd4fe..00000000
--- ./151.reverse-words-in-a-string.162103884.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public String reverseWords(String s)
-    {
-        StringBuilder sb = new StringBuilder(s.trim());
-        reverse(sb, 0, sb.length() - 1);
-
-        for (int begin = 0, end = 0; end <= sb.length(); end++)
-        {
-            if (end == sb.length() || sb.charAt(end) == ' ')
-            {
-                reverse(sb, begin, end - 1);
-                begin = end + 1;
-            }
-        }
-
-        return sb.toString();
-    }
-
-    public void reverse(StringBuilder sb, int begin, int end)
-    {
-        for (; begin < end; begin++, end--)
-        {
-            char temp = sb.charAt(begin);
-            sb.setCharAt(begin, sb.charAt(end));
-            sb.setCharAt(end, temp);
-        }
-    }
-}
-
diff --git a/151.reverse-words-in-a-string.162104736.Accepted.leetcode.java b/151.reverse-words-in-a-string.162104736.Accepted.leetcode.java
deleted file mode 100644
index f6e79cfa..00000000
--- ./151.reverse-words-in-a-string.162104736.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-class Solution
-{
-    public String reverseWords(String s)
-    {
-        if (s == null || s.length() == 0)
-        {
-            return "";
-        }
-
-        String[] arr = s.split(" ");
-        StringBuilder sb = new StringBuilder();
-
-        for (int i = arr.length - 1; i >= 0; --i)
-        {
-            if (!arr[i].equals(""))
-            {
-                sb.append(arr[i]).append(" ");
-            }
-        }
-
-        return sb.length() == 0 ? "" : sb.substring(0, sb.length() - 1);
-    }
-}
-
diff --git a/151.reverse-words-in-a-string.162104920.Runtime-Error.leetcode.java b/151.reverse-words-in-a-string.162104920.Runtime-Error.leetcode.java
deleted file mode 100644
index 9b824999..00000000
--- ./151.reverse-words-in-a-string.162104920.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public String reverseWords(String s)
-    {
-        StringBuilder sb = new StringBuilder(s.trim().replaceAll(" +", " "));
-        reverse(sb, 0, sb.length() - 1);
-
-        for (int begin = 0, end = 0; end <= sb.length(); end++)
-        {
-            if (sb.charAt(end) == ' ' || end == sb.length())
-            {
-                reverse(sb, begin, end);
-                begin = end + 1;
-            }
-        }
-
-        return sb.toString();
-    }
-
-    public void reverse(StringBuilder sb, int begin, int end)
-    {
-        for (; begin < end; begin++, end--)
-        {
-            char temp = sb.charAt(begin);
-            sb.setCharAt(begin, sb.charAt(end));
-            sb.setCharAt(end, temp);
-        }
-    }
-}
-
diff --git a/151.reverse-words-in-a-string.162104987.Runtime-Error.leetcode.java b/151.reverse-words-in-a-string.162104987.Runtime-Error.leetcode.java
deleted file mode 100644
index 010c3b13..00000000
--- ./151.reverse-words-in-a-string.162104987.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public String reverseWords(String s)
-    {
-        StringBuilder sb = new StringBuilder(s.trim().replaceAll(" +", " "));
-        reverse(sb, 0, sb.length() - 1);
-
-        for (int begin = 0, end = 0; end <= sb.length(); end++)
-        {
-            if (end == sb.length() || sb.charAt(end) == ' ')
-            {
-                reverse(sb, begin, end);
-                begin = end + 1;
-            }
-        }
-
-        return sb.toString();
-    }
-
-    public void reverse(StringBuilder sb, int begin, int end)
-    {
-        for (; begin < end; begin++, end--)
-        {
-            char temp = sb.charAt(begin);
-            sb.setCharAt(begin, sb.charAt(end));
-            sb.setCharAt(end, temp);
-        }
-    }
-}
-
diff --git a/151.reverse-words-in-a-string.162105075.Accepted.leetcode.java b/151.reverse-words-in-a-string.162105075.Accepted.leetcode.java
deleted file mode 100644
index c1f929e9..00000000
--- ./151.reverse-words-in-a-string.162105075.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public String reverseWords(String s)
-    {
-        StringBuilder sb = new StringBuilder(s.trim().replaceAll(" +", " "));
-        reverse(sb, 0, sb.length() - 1);
-
-        for (int begin = 0, end = 0; end <= sb.length(); end++)
-        {
-            if (end == sb.length() || sb.charAt(end) == ' ')
-            {
-                reverse(sb, begin, end - 1);
-                begin = end + 1;
-            }
-        }
-
-        return sb.toString();
-    }
-
-    public void reverse(StringBuilder sb, int begin, int end)
-    {
-        for (; begin < end; begin++, end--)
-        {
-            char temp = sb.charAt(begin);
-            sb.setCharAt(begin, sb.charAt(end));
-            sb.setCharAt(end, temp);
-        }
-    }
-}
-
diff --git a/152.maximum-product-subarray.102932728.Accepted.leetcode.java b/152.maximum-product-subarray.102932728.Accepted.leetcode.java
deleted file mode 100644
index aee27964..00000000
--- ./152.maximum-product-subarray.102932728.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public int maxProduct(int[] A)
-    {
-        if (A.length == 0)
-        {
-            return 0;
-        }
-
-        int maxHere, minHere;
-        int maxPre = A[0];
-        int minPre = A[0];
-        int maxNow = A[0];
-
-        for (int i = 1; i < A.length; i++)
-        {
-            maxHere = Math.max(Math.max(maxPre * A[i], minPre * A[i]), A[i]);
-            minHere = Math.min(Math.min(maxPre * A[i], minPre * A[i]), A[i]);
-            maxPre = maxHere;
-            minPre = minHere;
-            maxNow = Math.max(maxNow, maxHere);
-        }
-
-        return maxNow;
-    }
-}
diff --git a/152.maximum-product-subarray.102933095.Wrong-Answer.leetcode.java b/152.maximum-product-subarray.102933095.Wrong-Answer.leetcode.java
deleted file mode 100644
index 8d2fe729..00000000
--- ./152.maximum-product-subarray.102933095.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution
-{
-    public int maxProduct(int[] A)
-    {
-        if (A.length == 0)
-        {
-            return 0;
-        }
-
-        int maxHere, minHere;
-        int maxPre = A[0];
-        int minPre = A[0];
-        int maxNow = A[0];
-
-        for (int i = 1; i < A.length; i++)
-        {
-            maxHere = Math.max(Math.max(maxPre * A[i], minPre * A[i]), A[i]);
-            minHere = Math.min(Math.min(maxPre * A[i], minPre * A[i]), A[i]);
-            maxNow = Math.max(maxNow, maxHere);
-        }
-
-        return maxNow;
-    }
-}
diff --git a/152.maximum-product-subarray.102933132.Wrong-Answer.leetcode.java b/152.maximum-product-subarray.102933132.Wrong-Answer.leetcode.java
deleted file mode 100644
index 8d2983a2..00000000
--- ./152.maximum-product-subarray.102933132.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public int maxProduct(int[] A)
-    {
-        if (A.length == 0)
-        {
-            return 0;
-        }
-
-        int maxHere, minHere;
-        int maxPre = 0;
-        int minPre = 0;
-        int maxNow = 0;
-
-        for (int i = 1; i < A.length; i++)
-        {
-            maxHere = Math.max(Math.max(maxPre * A[i], minPre * A[i]), A[i]);
-            minHere = Math.min(Math.min(maxPre * A[i], minPre * A[i]), A[i]);
-            maxPre = maxHere;
-            minPre = minHere;
-            maxNow = Math.max(maxNow, maxHere);
-        }
-
-        return maxNow;
-    }
-}
diff --git a/152.maximum-product-subarray.162123157.Accepted.leetcode.java b/152.maximum-product-subarray.162123157.Accepted.leetcode.java
deleted file mode 100644
index 97f53fb9..00000000
--- ./152.maximum-product-subarray.162123157.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public int maxProduct(int[] A)
-    {
-        if (A.length == 0)
-        {
-            return 0;
-        }
-
-        int maxHere, minHere;
-        int maxPre = A[0];
-        int minPre = A[0];
-        int maxNow = A[0];
-
-        for (int i = 1; i < A.length; i++)
-        {
-            maxHere = Math.max(Math.max(maxPre * A[i], minPre * A[i]), A[i]);
-            minHere = Math.min(Math.min(maxPre * A[i], minPre * A[i]), A[i]);
-            maxPre = maxHere;
-            minPre = minHere;
-            maxNow = Math.max(maxNow, maxHere);
-        }
-
-        return maxNow;
-    }
-}
-
diff --git a/152.maximum-product-subarray.162123190.Accepted.leetcode.java b/152.maximum-product-subarray.162123190.Accepted.leetcode.java
deleted file mode 100644
index ee5d62cc..00000000
--- ./152.maximum-product-subarray.162123190.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int maxProduct(int[] A)
-    {
-        int maxHere, minHere;
-        int maxPre = A[0];
-        int minPre = A[0];
-        int maxNow = A[0];
-
-        for (int i = 1; i < A.length; i++)
-        {
-            maxHere = Math.max(Math.max(maxPre * A[i], minPre * A[i]), A[i]);
-            minHere = Math.min(Math.min(maxPre * A[i], minPre * A[i]), A[i]);
-            maxPre = maxHere;
-            minPre = minHere;
-            maxNow = Math.max(maxNow, maxHere);
-        }
-
-        return maxNow;
-    }
-}
-
diff --git a/154.find-minimum-in-rotated-sorted-array-ii.162139445.Accepted.leetcode.java b/154.find-minimum-in-rotated-sorted-array-ii.162139445.Accepted.leetcode.java
deleted file mode 100644
index c6a07853..00000000
--- ./154.find-minimum-in-rotated-sorted-array-ii.162139445.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution
-{
-    public int findMin(int[] num)
-    {
-        if (num == null || num.length == 0)
-        {
-            return 0;
-        }
-
-        int start = 0;
-        int end = num.length - 1;
-
-        while (start + 1 < end)
-        {
-            int mid = (start + end) / 2;
-
-            if (num[start] < num[end])
-            {
-                return num[start];
-            }
-
-            if (num[mid] > num[start])
-            {
-                start = mid;
-            }
-            else if (num[mid] < num[start])
-            {
-                end = mid;
-            }
-            else
-            {
-                start++;
-            }
-        }
-
-        return Math.min(num[start], num[end]);
-    }
-}
-
diff --git a/154.find-minimum-in-rotated-sorted-array-ii.162139810.Accepted.leetcode.java b/154.find-minimum-in-rotated-sorted-array-ii.162139810.Accepted.leetcode.java
deleted file mode 100644
index 0a24200b..00000000
--- ./154.find-minimum-in-rotated-sorted-array-ii.162139810.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    public int findMin(int[] num)
-    {
-        int start = 0;
-        int end = num.length - 1;
-
-        while (start + 1 < end)
-        {
-            int mid = (start + end) / 2;
-
-            if (num[start] < num[end])
-            {
-                return num[start];
-            }
-
-            if (num[mid] > num[start])
-            {
-                start = mid;
-            }
-            else if (num[mid] < num[start])
-            {
-                end = mid;
-            }
-            else
-            {
-                start++;
-            }
-        }
-
-        return Math.min(num[start], num[end]);
-    }
-}
-
diff --git a/154.find-minimum-in-rotated-sorted-array-ii.162355724.Runtime-Error.leetcode.java b/154.find-minimum-in-rotated-sorted-array-ii.162355724.Runtime-Error.leetcode.java
deleted file mode 100644
index 52bd29e8..00000000
--- ./154.find-minimum-in-rotated-sorted-array-ii.162355724.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public int findMin(int[] num)
-    {
-        return findMin(num, 0, num.length - 1);
-    }
-
-    public int findMin(int[] num, int start, int end)
-    {
-        if (num[start] < num[end])
-        {
-            return num[start];
-        }
-
-        if ((end - start) <= 1)
-        {
-            return Math.min(num[start], num[end]);
-        }
-
-        int mid = start + (end - start) / 2;
-
-        if (num[mid] < num[end])
-        {
-            return findMin(num, start, mid);
-        }
-        else if (num[mid] > num[end])
-        {
-            return findMin(num, mid + 1, end);
-        }
-        else
-        {
-            return findMin(num, start, end--);
-        }
-    }
-}
-
diff --git a/154.find-minimum-in-rotated-sorted-array-ii.162357840.Runtime-Error.leetcode.java b/154.find-minimum-in-rotated-sorted-array-ii.162357840.Runtime-Error.leetcode.java
deleted file mode 100644
index 2e1eb31a..00000000
--- ./154.find-minimum-in-rotated-sorted-array-ii.162357840.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public int findMin(int[] num)
-    {
-        return findMin(num, 0, num.length - 1);
-    }
-
-    public int findMin(int[] num, int start, int end)
-    {
-        if (num[start] < num[end])
-        {
-            return num[start];
-        }
-
-        if (start + 1 <= end)
-        {
-            return Math.min(num[start], num[end]);
-        }
-
-        int mid = (start + end)  / 2;
-
-        if (num[mid] < num[end])
-        {
-            return findMin(num, start, mid);
-        }
-        else if (num[mid] > num[end])
-        {
-            return findMin(num, mid, end);
-        }
-        else
-        {
-            return findMin(num, start++, end--);
-        }
-    }
-}
-
diff --git a/154.find-minimum-in-rotated-sorted-array-ii.162358780.Wrong-Answer.leetcode.java b/154.find-minimum-in-rotated-sorted-array-ii.162358780.Wrong-Answer.leetcode.java
deleted file mode 100644
index c20065f7..00000000
--- ./154.find-minimum-in-rotated-sorted-array-ii.162358780.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public int findMin(int[] num)
-    {
-        return findMin(num, 0, num.length - 1);
-    }
-
-    public int findMin(int[] num, int start, int end)
-    {
-        if (num[start] < num[end])
-        {
-            return num[start];
-        }
-
-        if (start + 1 <= end || start == end)
-        {
-            return Math.min(num[start], num[end]);
-        }
-
-        int mid = (start + end)  / 2;
-
-        if (num[mid] < num[end])
-        {
-            return findMin(num, start, mid);
-        }
-        else if (num[mid] > num[end])
-        {
-            return findMin(num, mid, end);
-        }
-        else
-        {
-            return findMin(num, start++, end--);
-        }
-    }
-}
-
diff --git a/154.find-minimum-in-rotated-sorted-array-ii.32812336.Runtime-Error.leetcode.java b/154.find-minimum-in-rotated-sorted-array-ii.32812336.Runtime-Error.leetcode.java
deleted file mode 100644
index 4c15457b..00000000
--- ./154.find-minimum-in-rotated-sorted-array-ii.32812336.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-  public class Solution
-  {
-    public int findMin(int[] num)
-    {
-      return findMin(num, 0, num.length - 1);
-    }
-
-    public int findMin(int[] num, int start, int end)
-    {
-      if (num[start] < num[end])
-      {
-        return num[start];
-      }
-
-      if ((end - start) <= 1)
-      {
-        return Math.min(num[start], num[end]);
-      }
-
-      int mid = start + (end - start) / 2;
-
-      if (num[mid] < num[end])
-      {
-        return findMin(num, start, mid);
-      }
-      else if (num[mid] > num[end])
-      {
-        return findMin(num, mid + 1, end);
-      }
-      else
-      {
-        return findMin(num, start, end--);
-      }
-    }
-  }
-
diff --git a/154.find-minimum-in-rotated-sorted-array-ii.32815843.Accepted.leetcode.java b/154.find-minimum-in-rotated-sorted-array-ii.32815843.Accepted.leetcode.java
deleted file mode 100644
index 0dd812d6..00000000
--- ./154.find-minimum-in-rotated-sorted-array-ii.32815843.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-  public class Solution
-  {
-    public int findMin(int[] num)
-    {
-      return findMin(num, 0, num.length - 1);
-    }
-
-    public int findMin(int[] num, int start, int end)
-    {
-      if (num[start] < num[end])
-      {
-        return num[start];
-      }
-
-      if ((end - start) <= 1)
-      {
-        return Math.min(num[start], num[end]);
-      }
-
-      int mid = start + (end - start) / 2;
-
-      if (num[mid] < num[end])
-      {
-        return findMin(num, start, mid);
-      }
-      else if (num[mid] > num[end])
-      {
-        return findMin(num, mid + 1, end);
-      }
-      else
-      {
-        return findMin(num, start, --end);
-      }
-    }
-  }
-
diff --git a/156.binary-tree-upside-down.162519415.Wrong-Answer.leetcode.java b/156.binary-tree-upside-down.162519415.Wrong-Answer.leetcode.java
deleted file mode 100644
index b01bab4c..00000000
--- ./156.binary-tree-upside-down.162519415.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-public class Solution
-{
-    private TreeNode out = null;
-
-    public TreeNode upsideDownBinaryTree(TreeNode root)
-    {
-        TreeNode dummy = new TreeNode(0);
-        dummy.left = new TreeNode(0);
-        out = dummy;
-        postorder(root);
-        return dummy.right;
-    }
-
-    private void postorder(TreeNode root)
-    {
-        if (root == null)
-        {
-            return;
-        }
-
-        postorder(root.left);
-        postorder(root.right);
-
-        if (out.left == null)
-        {
-            out.left = root;
-            out.left.left = null;
-            out.left.right = null;
-        }
-        else if (out.right == null)
-        {
-            out.right = root;
-            out.right.left = null;
-            out.right.right = null;
-        }
-
-        if (out.left != null && out.right != null)
-        {
-            out = out.right;
-        }
-    }
-}
-
-
diff --git a/156.binary-tree-upside-down.162577424.Accepted.leetcode.java b/156.binary-tree-upside-down.162577424.Accepted.leetcode.java
deleted file mode 100644
index 2500d8c8..00000000
--- ./156.binary-tree-upside-down.162577424.Accepted.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution
-{
-    public TreeNode upsideDownBinaryTree(TreeNode root)
-    {
-        return dfs(root, null);
-    }
-
-    TreeNode dfs(TreeNode root, TreeNode parent)
-    {
-        if (root == null)
-        {
-            return parent;
-        }
-
-        TreeNode newRoot = dfs(root.left, root);
-        root.left = parent == null ? null : parent.right;
-        root.right = parent;
-        return newRoot;
-    }
-}
-
diff --git a/156.binary-tree-upside-down.162580304.Wrong-Answer.leetcode.java b/156.binary-tree-upside-down.162580304.Wrong-Answer.leetcode.java
deleted file mode 100644
index 295e74a8..00000000
--- ./156.binary-tree-upside-down.162580304.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public TreeNode upsideDownBinaryTree(TreeNode root)
-    {
-        if (root == null)
-        {
-            return null;
-        }
-
-        TreeNode parent = root, left = root.left, right = root.right;
-
-        if (left != null)
-        {
-            TreeNode ret = upsideDownBinaryTree(left);
-            left.left = right;
-            left.right = parent;
-            return ret;
-        }
-
-        return left;
-    }
-}
-
diff --git a/156.binary-tree-upside-down.32911079.Memory-Limit-Exceeded.leetcode.java b/156.binary-tree-upside-down.32911079.Memory-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 5478a8d6..00000000
--- ./156.binary-tree-upside-down.32911079.Memory-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-  public class Solution
-  {
-    public TreeNode upsideDownBinaryTree(TreeNode root)
-    {
-      if (root == null)
-      {
-        return null;
-      }
-
-      ArrayList<TreeNode> res = new ArrayList<TreeNode>();
-      res.add(null);
-      helper(root, res);
-      return res.get(0);
-    }
-
-    public TreeNode helper(TreeNode root, ArrayList<TreeNode> res)
-    {
-      if (root.left == null)
-      {
-        res.set(0, root);
-        return root;
-      }
-
-      TreeNode newRoot = helper(root.left, res);
-      newRoot.left = root.right;
-      newRoot.right = root;
-      return newRoot.right;
-    }
-  }
-
diff --git a/156.binary-tree-upside-down.32911343.Accepted.leetcode.java b/156.binary-tree-upside-down.32911343.Accepted.leetcode.java
deleted file mode 100644
index d93e6e86..00000000
--- ./156.binary-tree-upside-down.32911343.Accepted.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-  public class Solution
-  {
-    public TreeNode upsideDownBinaryTree(TreeNode root)
-    {
-      return udtree(root, null);
-    }
-
-    TreeNode udtree(TreeNode root, TreeNode parent)
-    {
-      if (root == null) { return parent; } // base
-
-      TreeNode newRoot = udtree(root.left, root);
-      root.left = parent == null ? null : parent.right; // 1st node, both .left .right == null
-      root.right = parent;
-      return newRoot;
-    }
-  }
-
diff --git a/156.binary-tree-upside-down.32919145.Memory-Limit-Exceeded.leetcode.java b/156.binary-tree-upside-down.32919145.Memory-Limit-Exceeded.leetcode.java
deleted file mode 100644
index fa131934..00000000
--- ./156.binary-tree-upside-down.32919145.Memory-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-  public class Solution
-  {
-    public TreeNode upsideDownBinaryTree(TreeNode root)
-    {
-      if (root == null)
-      {
-        return null;
-      }
-
-      TreeNode parent = root, left = root.left, right = root.right;
-
-      if (left != null)
-      {
-        TreeNode ret = upsideDownBinaryTree(left);
-        left.left = right;
-        left.right = parent;
-        return ret;
-      }
-
-      return root;
-    }
-  }
-
diff --git a/156.binary-tree-upside-down.32921295.Accepted.leetcode.java b/156.binary-tree-upside-down.32921295.Accepted.leetcode.java
deleted file mode 100644
index 4a98db43..00000000
--- ./156.binary-tree-upside-down.32921295.Accepted.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-  public class Solution
-  {
-    public TreeNode upsideDownBinaryTree(TreeNode root)
-    {
-      TreeNode navNode = root, parentNode = null, leftNode = null,
-          rightNode = null;
-
-      while (navNode != null)
-      {
-        leftNode = navNode.left;
-        navNode.left = rightNode;
-        rightNode = navNode.right;
-        navNode.right = parentNode;
-        parentNode = navNode;
-        navNode = leftNode;
-      }
-
-      return parentNode;
-    }
-  }
-
diff --git a/156.binary-tree-upside-down.67831158.Runtime-Error.leetcode.java b/156.binary-tree-upside-down.67831158.Runtime-Error.leetcode.java
deleted file mode 100644
index 35219262..00000000
--- ./156.binary-tree-upside-down.67831158.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-  public class Solution
-  {
-    public TreeNode upsideDownBinaryTree(TreeNode root)
-    {
-      TreeNode navNode = root, parentNode = null, leftNode = null,
-               rightNode = null;
-
-      while (navNode != null)
-      {
-        leftNode = navNode.left;
-        rightNode = navNode.right;
-        navNode.left = null;
-        navNode.right = null;
-        parentNode = navNode;
-        navNode = leftNode;
-        leftNode = navNode.left;
-        navNode.left = rightNode;
-        navNode.right = parentNode;
-      }
-
-      return parentNode;
-    }
-  }
-
diff --git a/156.binary-tree-upside-down.96650620.Accepted.leetcode.java b/156.binary-tree-upside-down.96650620.Accepted.leetcode.java
deleted file mode 100644
index eeab6502..00000000
--- ./156.binary-tree-upside-down.96650620.Accepted.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class Solution
-{
-    public TreeNode upsideDownBinaryTree(TreeNode root)
-    {
-        TreeNode navNode = root, parentNode = null, leftNode = null, rightNode = null;
-
-        while (navNode != null)
-        {
-            leftNode = navNode.left;
-            navNode.left = rightNode;
-            rightNode = navNode.right;
-            navNode.right = parentNode;
-            parentNode = navNode;
-            navNode = leftNode;
-        }
-
-        return parentNode;
-    }
-}
diff --git a/156.binary-tree-upside-down.96652035.Accepted.leetcode.java b/156.binary-tree-upside-down.96652035.Accepted.leetcode.java
deleted file mode 100644
index 19f0a81d..00000000
--- ./156.binary-tree-upside-down.96652035.Accepted.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class Solution
-{
-    public TreeNode upsideDownBinaryTree(TreeNode root)
-    {
-        TreeNode node = root, parent = null, right = null;
-
-        while (node != null)
-        {
-            TreeNode left = node.left;
-            node.left = right;
-            right = node.right;
-            node.right = parent;
-            parent = node;
-            node = left;
-        }
-
-        return parent;
-    }
-}
diff --git a/156.binary-tree-upside-down.96652171.Time-Limit-Exceeded.leetcode.java b/156.binary-tree-upside-down.96652171.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index dc41cb71..00000000
--- ./156.binary-tree-upside-down.96652171.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public TreeNode upsideDownBinaryTree(TreeNode root)
-    {
-        if (root == null)
-        {
-            return null;
-        }
-
-        TreeNode parent = root, left = root.left, right = root.right;
-
-        if (left != null)
-        {
-            TreeNode ret = upsideDownBinaryTree(left);
-            left.left = right;
-            left.right = parent;
-            return ret;
-        }
-
-        return root;
-    }
-}
diff --git a/156.binary-tree-upside-down.96652448.Accepted.leetcode.java b/156.binary-tree-upside-down.96652448.Accepted.leetcode.java
deleted file mode 100644
index 8e1b9ef5..00000000
--- ./156.binary-tree-upside-down.96652448.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution {
-    public TreeNode upsideDownBinaryTree(TreeNode root) {
-        if (root == null) {
-            return null;
-        }
-         
-        return upsideDownBinaryTreeHelper(root, null);
-    }
-     
-    private TreeNode upsideDownBinaryTreeHelper(TreeNode root, TreeNode parent) {
-        if (root == null) {
-            return parent;
-        }
-         
-        TreeNode newNode = upsideDownBinaryTreeHelper(root.left, root);
-         
-        root.left = parent == null ? null : parent.right;
-        root.right = parent;
-         
-        return newNode;
-    }
-}
diff --git a/156.binary-tree-upside-down.96652503.Accepted.leetcode.java b/156.binary-tree-upside-down.96652503.Accepted.leetcode.java
deleted file mode 100644
index 6a6bb6bb..00000000
--- ./156.binary-tree-upside-down.96652503.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution
-{
-    public TreeNode upsideDownBinaryTree(TreeNode root)
-    {
-        if (root == null)
-        {
-            return null;
-        }
-
-        return upsideDownBinaryTreeHelper(root, null);
-    }
-
-    private TreeNode upsideDownBinaryTreeHelper(TreeNode root, TreeNode parent)
-    {
-        if (root == null)
-        {
-            return parent;
-        }
-
-        TreeNode newNode = upsideDownBinaryTreeHelper(root.left, root);
-        root.left = parent == null ? null : parent.right;
-        root.right = parent;
-        return newNode;
-    }
-}
diff --git a/158.read-n-characters-given-read4-ii-call-multiple-times.162680044.Time-Limit-Exceeded.leetcode.java b/158.read-n-characters-given-read4-ii-call-multiple-times.162680044.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 3bffa4b8..00000000
--- ./158.read-n-characters-given-read4-ii-call-multiple-times.162680044.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution extends Reader4
-{
-    private char[] buffer = new char[4];
-    private int oneRead = 0;
-    private int offset = 0;
-
-    public int read(char[] buf, int n)
-    {
-        boolean lessthan4 = false;
-        int haveRead = 0;
-
-        while (!lessthan4)
-        {
-            if (oneRead == 0)
-            {
-                oneRead = read4(buffer);
-                lessthan4 = oneRead < 4;
-            }
-
-            int actRead = Math.min(n - haveRead, oneRead);
-
-            for (int i = 0; i < actRead; i++)
-            {
-                buf[haveRead + i] = buffer[offset + i];
-            }
-
-            oneRead -= actRead;
-            offset = (offset + actRead) % 4;
-            haveRead += actRead;
-        }
-
-        return haveRead;
-    }
-}
-
diff --git a/158.read-n-characters-given-read4-ii-call-multiple-times.162680085.Wrong-Answer.leetcode.java b/158.read-n-characters-given-read4-ii-call-multiple-times.162680085.Wrong-Answer.leetcode.java
deleted file mode 100644
index a9e35243..00000000
--- ./158.read-n-characters-given-read4-ii-call-multiple-times.162680085.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution extends Reader4
-{
-    private char[] buffer = new char[4];
-    private int oneRead = 0;
-    private int offset = 0;
-
-    public int read(char[] buf, int n)
-    {
-        boolean lessthan4 = false;
-        int haveRead = 0;
-
-        while (!lessthan4 && haveRead < n)
-        {
-            if (oneRead == 0)
-            {
-                oneRead = read4(buffer);
-                lessthan4 = oneRead < 4;
-            }
-
-            int actRead = Math.min(n - haveRead, oneRead);
-            oneRead -= actRead;
-            offset = (offset + actRead) % 4;
-            haveRead += actRead;
-        }
-
-        return haveRead;
-    }
-}
-
diff --git a/158.read-n-characters-given-read4-ii-call-multiple-times.162680109.Time-Limit-Exceeded.leetcode.java b/158.read-n-characters-given-read4-ii-call-multiple-times.162680109.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 1813ee2a..00000000
--- ./158.read-n-characters-given-read4-ii-call-multiple-times.162680109.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution extends Reader4
-{
-    private char[] buffer = new char[4];
-    private int oneRead = 0;
-    private int offset = 0;
-
-    public int read(char[] buf, int n)
-    {
-        boolean lessthan4 = false;
-        int haveRead = 0;
-
-        while (!lessthan4 && haveRead < n)
-        {
-            int actRead = Math.min(n - haveRead, oneRead);
-
-            for (int i = 0; i < actRead; i++)
-            {
-                buf[haveRead + i] = buffer[offset + i];
-            }
-
-            oneRead -= actRead;
-            offset = (offset + actRead) % 4;
-            haveRead += actRead;
-        }
-
-        return haveRead;
-    }
-}
-
diff --git a/158.read-n-characters-given-read4-ii-call-multiple-times.162680163.Wrong-Answer.leetcode.java b/158.read-n-characters-given-read4-ii-call-multiple-times.162680163.Wrong-Answer.leetcode.java
deleted file mode 100644
index 14a2d28a..00000000
--- ./158.read-n-characters-given-read4-ii-call-multiple-times.162680163.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution extends Reader4
-{
-    private char[] buffer = new char[4];
-    private int oneRead = 0;
-    private int offset = 0;
-
-    public int read(char[] buf, int n)
-    {
-        boolean lessthan4 = false;
-        int haveRead = 0;
-
-        while (!lessthan4 && haveRead < n)
-        {
-            if (oneRead == 0)
-            {
-                oneRead = read4(buffer);
-                lessthan4 = oneRead < 4;
-            }
-
-            int actRead = Math.min(n - haveRead, oneRead);
-
-            for (int i = 0; i < actRead; i++)
-            {
-                buf[haveRead + i] = buffer[offset + i];
-            }
-        }
-
-        return haveRead;
-    }
-}
-
diff --git a/158.read-n-characters-given-read4-ii-call-multiple-times.210714966.Wrong-Answer.leetcode.java b/158.read-n-characters-given-read4-ii-call-multiple-times.210714966.Wrong-Answer.leetcode.java
deleted file mode 100644
index 2737963b..00000000
--- ./158.read-n-characters-given-read4-ii-call-multiple-times.210714966.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution extends Reader4
-{
-
-    public int read(char[] buf, int n)
-    {
-        char[] buffer = new char[4];
-        int oneRead = 0;
-        int offset = 0;
-        boolean lessthan4 = false;
-        int haveRead = 0;
-
-        while (!lessthan4 && haveRead < n)
-        {
-            if (oneRead == 0)
-            {
-                oneRead = read4(buffer);
-                lessthan4 = oneRead < 4;
-            }
-
-            int actRead = Math.min(n - haveRead, oneRead);
-
-            for (int i = 0; i < actRead; i++)
-            {
-                buf[haveRead + i] = buffer[offset + i];
-            }
-
-            oneRead -= actRead;
-            offset = (offset + actRead) % 4;
-            haveRead += actRead;
-        }
-
-        return haveRead;
-    }
-}
-
diff --git a/158.read-n-characters-given-read4-ii-call-multiple-times.210715085.Accepted.leetcode.java b/158.read-n-characters-given-read4-ii-call-multiple-times.210715085.Accepted.leetcode.java
deleted file mode 100644
index 1397d341..00000000
--- ./158.read-n-characters-given-read4-ii-call-multiple-times.210715085.Accepted.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution extends Reader4
-{
-    private char[] buffer = new char[4];
-    private int oneRead = 0;
-    private int offset = 0;
-
-    public int read(char[] buf, int n)
-    {
-        boolean lessthan4 = false;
-        int haveRead = 0;
-
-        while (!lessthan4 && haveRead < n)
-        {
-            if (oneRead == 0)
-            {
-                oneRead = read4(buffer);
-                lessthan4 = oneRead < 4;
-            }
-
-            int actRead = Math.min(n - haveRead, oneRead);
-
-            for (int i = 0; i < actRead; i++)
-            {
-                buf[haveRead + i] = buffer[offset + i];
-            }
-
-            oneRead -= actRead;
-            offset = (offset + actRead) % 4;
-            haveRead += actRead;
-        }
-
-        return haveRead;
-    }
-}
-
diff --git a/16.3sum-closest.162681230.Accepted.leetcode.java b/16.3sum-closest.162681230.Accepted.leetcode.java
deleted file mode 100644
index fa2f2b06..00000000
--- ./16.3sum-closest.162681230.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution
-{
-    public int threeSumClosest(int[] num, int target)
-    {
-        int min = Integer.MAX_VALUE;
-        int result = 0;
-        Arrays.sort(num);
-
-        for (int i = 0; i < num.length; i++)
-        {
-            int j = i + 1;
-            int k = num.length - 1;
-
-            while (j < k)
-            {
-                int sum = num[i] + num[j] + num[k];
-                int diff = Math.abs(sum - target);
-
-                if (diff < min)
-                {
-                    min = diff;
-                    result = sum;
-                }
-
-                if (sum <= target)
-                {
-                    j++;
-                }
-                else
-                {
-                    k--;
-                }
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/16.3sum-closest.162681282.Wrong-Answer.leetcode.java b/16.3sum-closest.162681282.Wrong-Answer.leetcode.java
deleted file mode 100644
index b62238db..00000000
--- ./16.3sum-closest.162681282.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public int threeSumClosest(int[] num, int target)
-    {
-        int min = Integer.MAX_VALUE;
-        int result = 0;
-        Arrays.sort(num);
-
-        for (int i = 0; i < num.length; i++)
-        {
-            int j = i + 1;
-            int k = num.length - 1;
-
-            while (j < k)
-            {
-                int sum = num[i] + num[j] + num[k];
-                int diff = Math.abs(sum - target);
-
-                if (sum <= target)
-                {
-                    j++;
-                }
-                else
-                {
-                    k--;
-                }
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/16.3sum-closest.162681297.Time-Limit-Exceeded.leetcode.java b/16.3sum-closest.162681297.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 520855e8..00000000
--- ./16.3sum-closest.162681297.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public int threeSumClosest(int[] num, int target)
-    {
-        int min = Integer.MAX_VALUE;
-        int result = 0;
-        Arrays.sort(num);
-
-        for (int i = 0; i < num.length; i++)
-        {
-            int j = i + 1;
-            int k = num.length - 1;
-
-            while (j < k)
-            {
-                int sum = num[i] + num[j] + num[k];
-                int diff = Math.abs(sum - target);
-
-                if (diff < min)
-                {
-                    min = diff;
-                    result = sum;
-                }
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/16.3sum-closest.162681344.Wrong-Answer.leetcode.java b/16.3sum-closest.162681344.Wrong-Answer.leetcode.java
deleted file mode 100644
index 66e92672..00000000
--- ./16.3sum-closest.162681344.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class Solution
-{
-    public int threeSumClosest(int[] num, int target)
-    {
-        int min = Integer.MAX_VALUE;
-        int result = 0;
-
-        for (int i = 0; i < num.length; i++)
-        {
-            int j = i + 1;
-            int k = num.length - 1;
-
-            while (j < k)
-            {
-                int sum = num[i] + num[j] + num[k];
-                int diff = Math.abs(sum - target);
-
-                if (diff < min)
-                {
-                    min = diff;
-                    result = sum;
-                }
-
-                if (sum <= target)
-                {
-                    j++;
-                }
-                else
-                {
-                    k--;
-                }
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/16.3sum-closest.33996153.Accepted.leetcode.java b/16.3sum-closest.33996153.Accepted.leetcode.java
deleted file mode 100644
index 161c4495..00000000
--- ./16.3sum-closest.33996153.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-  public class Solution
-  {
-    public int threeSumClosest(int[] num, int target)
-    {
-      int min = Integer.MAX_VALUE;
-      int result = 0;
-      Arrays.sort(num);
-
-      for (int i = 0; i < num.length; i++)
-      {
-        int j = i + 1;
-        int k = num.length - 1;
-
-        while (j < k)
-        {
-          int sum = num[i] + num[j] + num[k];
-          int diff = Math.abs(sum - target);
-
-          if (diff < min)
-          {
-            min = diff;
-            result = sum;
-          }
-
-          if (sum <= target)
-          {
-            j++;
-          }
-          else
-          {
-            k--;
-          }
-        }
-      }
-
-      return result;
-    }
-  }
-
diff --git a/16.3sum-closest.8586921.Accepted.leetcode.java b/16.3sum-closest.8586921.Accepted.leetcode.java
deleted file mode 100644
index 8203ea67..00000000
--- ./16.3sum-closest.8586921.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-  public class Solution {
-    public int threeSumClosest(int[] num, int target) {
-      int min = Integer.MAX_VALUE;
-      int result = 0;
-      Arrays.sort(num);
-
-      for (int i = 0; i < num.length; i++) {
-        int j = i + 1;
-        int k = num.length - 1;
-
-        while (j < k) {
-          int sum = num[i] + num[j] + num[k];
-          int diff = Math.abs(sum - target);
-
-          if (diff < min) {
-            min = diff;
-            result = sum;
-          }
-
-          if (sum <= target) {
-            j++;
-          }
-          else {
-            k--;
-          }
-        }
-      }
-
-      return result;
-    }
-  }
-
diff --git a/160.intersection-of-two-linked-lists.162687137.Time-Limit-Exceeded.leetcode.java b/160.intersection-of-two-linked-lists.162687137.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 443ab94a..00000000
--- ./160.intersection-of-two-linked-lists.162687137.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,54 +0,0 @@
-public class Solution
-{
-    public ListNode getIntersectionNode(ListNode headA, ListNode headB)
-    {
-        if (headA == null || headB == null)
-        {
-            return null;
-        }
-
-        ListNode pA = headA;
-        ListNode pB = headB;
-        ListNode tailA = null;
-        ListNode tailB = null;
-
-        while (true)
-        {
-            if (pA == null)
-            {
-                pA = headB;
-                System.out.printf("pA --> %s\n", pA.val);
-            }
-            else if (pB == null)
-            {
-                pB = headA;
-                System.out.printf("pB --> %s\n", pB.val);
-            }
-            else if (pA.next == null)
-            {
-                tailA = pA;
-            }
-            else if (pB.next == null)
-            {
-                tailB = pB;
-            }
-            else if (tailA != null && tailB != null && tailA != tailB)
-            {
-                return null;
-            }
-            else if (pA == pB)
-            {
-                return pA;
-            }
-            else
-            {
-                pA = pA.next;
-                System.out.printf("pA --> %s\n", pA.val);
-                pB = pB.next;
-                System.out.printf("pB --> %s\n", pB.val);
-            }
-        }
-    }
-
-}
-
diff --git a/160.intersection-of-two-linked-lists.162687362.Time-Limit-Exceeded.leetcode.java b/160.intersection-of-two-linked-lists.162687362.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 3534bbc0..00000000
--- ./160.intersection-of-two-linked-lists.162687362.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,58 +0,0 @@
-public class Solution
-{
-    public ListNode getIntersectionNode(ListNode headA, ListNode headB)
-    {
-        if (headA == null || headB == null)
-        {
-            return null;
-        }
-
-        ListNode pA = headA;
-        ListNode pB = headB;
-        ListNode tailA = null;
-        ListNode tailB = null;
-
-        while (true)
-        {
-            if (pA == null)
-            {
-                pA = headB;
-                System.out.printf("pA --> %s\n", pA.val);
-            }
-            else if (pB == null)
-            {
-                pB = headA;
-                System.out.printf("pB --> %s\n", pB.val);
-            }
-            else if (pA.next == null)
-            {
-                tailA = pA;
-                System.out.printf("tailA --> %s\n", tailA.val);
-            }
-            else if (pB.next == null)
-            {
-                tailB = pB;
-                System.out.printf("tailB --> %s\n", tailB.val);
-            }
-            else if (tailA != null && tailB != null && tailA != tailB)
-            {
-                System.out.printf("return null --> \n");
-                return null;
-            }
-            else if (pA == pB)
-            {
-                System.out.printf("pA --> %s\n", pA.val);
-                return pA;
-            }
-            else
-            {
-                pA = pA.next;
-                System.out.printf("pA --> %s\n", pA.val);
-                pB = pB.next;
-                System.out.printf("pB --> %s\n", pB.val);
-            }
-        }
-    }
-
-}
-
diff --git a/160.intersection-of-two-linked-lists.162687637.Runtime-Error.leetcode.java b/160.intersection-of-two-linked-lists.162687637.Runtime-Error.leetcode.java
deleted file mode 100644
index d08e562f..00000000
--- ./160.intersection-of-two-linked-lists.162687637.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,56 +0,0 @@
-public class Solution
-{
-    public ListNode getIntersectionNode(ListNode headA, ListNode headB)
-    {
-        if (headA == null || headB == null)
-        {
-            return null;
-        }
-
-        ListNode pA = headA;
-        ListNode pB = headB;
-        ListNode tailA = null;
-        ListNode tailB = null;
-
-        while (true)
-        {
-            if (pA == null)
-            {
-                pA = headB;
-                System.out.printf("pA --> %s\n", pA.val);
-            }
-            else if (pB == null)
-            {
-                pB = headA;
-                System.out.printf("pB --> %s\n", pB.val);
-            }
-            else if (pA.next == null)
-            {
-                tailA = pA;
-                System.out.printf("tailA --> %s\n", tailA.val);
-            }
-            else if (pB.next == null)
-            {
-                tailB = pB;
-                System.out.printf("tailB --> %s\n", tailB.val);
-            }
-            else if (tailA != null && tailB != null && tailA != tailB)
-            {
-                System.out.printf("return null --> \n");
-                return null;
-            }
-            else if (pA == pB)
-            {
-                System.out.printf("pA --> %s\n", pA.val);
-                return pA;
-            }
-
-            pA = pA.next;
-            System.out.printf("pA --> %s\n", pA.val);
-            pB = pB.next;
-            System.out.printf("pB --> %s\n", pB.val);
-        }
-    }
-
-}
-
diff --git a/160.intersection-of-two-linked-lists.162687717.Time-Limit-Exceeded.leetcode.java b/160.intersection-of-two-linked-lists.162687717.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index b2323a6a..00000000
--- ./160.intersection-of-two-linked-lists.162687717.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-public class Solution
-{
-    public ListNode getIntersectionNode(ListNode headA, ListNode headB)
-    {
-        if (headA == null || headB == null)
-        {
-            return null;
-        }
-
-        ListNode pA = headA;
-        ListNode pB = headB;
-        ListNode tailA = null;
-        ListNode tailB = null;
-
-        while (true)
-        {
-            if (pA == null)
-            {
-                pA = headB;
-            }
-
-            if (pB == null)
-            {
-                pB = headA;
-            }
-
-            if (pA.next == null)
-            {
-                tailA = pA;
-            }
-
-            if (pB.next == null)
-            {
-                tailB = pB;
-            }
-
-            if (pA == pB)
-            {
-                return pA;
-            }
-
-            pA = pA.next;
-            pB = pB.next;
-        }
-    }
-
-}
-
diff --git a/160.intersection-of-two-linked-lists.162687913.Accepted.leetcode.java b/160.intersection-of-two-linked-lists.162687913.Accepted.leetcode.java
deleted file mode 100644
index bfafcb51..00000000
--- ./160.intersection-of-two-linked-lists.162687913.Accepted.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-public class Solution
-{
-    public ListNode getIntersectionNode(ListNode headA, ListNode headB)
-    {
-        if (headA == null || headB == null)
-        {
-            return null;
-        }
-
-        ListNode pA = headA;
-        ListNode pB = headB;
-        ListNode tailA = null;
-        ListNode tailB = null;
-
-        while (true)
-        {
-            if (pA == null)
-            {
-                pA = headB;
-            }
-
-            if (pB == null)
-            {
-                pB = headA;
-            }
-
-            if (pA.next == null)
-            {
-                tailA = pA;
-            }
-
-            if (pB.next == null)
-            {
-                tailB = pB;
-            }
-
-            if (tailA != null && tailB != null && tailA != tailB)
-            {
-                return null;
-            }
-
-            if (pA == pB)
-            {
-                return pA;
-            }
-
-            pA = pA.next;
-            pB = pB.next;
-        }
-    }
-
-}
-
diff --git a/160.intersection-of-two-linked-lists.162688048.Runtime-Error.leetcode.java b/160.intersection-of-two-linked-lists.162688048.Runtime-Error.leetcode.java
deleted file mode 100644
index 6c8d2dcf..00000000
--- ./160.intersection-of-two-linked-lists.162688048.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-public class Solution
-{
-    public ListNode getIntersectionNode(ListNode headA, ListNode headB)
-    {
-        ListNode pA = headA;
-        ListNode pB = headB;
-        ListNode tailA = null;
-        ListNode tailB = null;
-
-        while (true)
-        {
-            if (pA == null)
-            {
-                pA = headB;
-            }
-
-            if (pB == null)
-            {
-                pB = headA;
-            }
-
-            if (pA.next == null)
-            {
-                tailA = pA;
-            }
-
-            if (pB.next == null)
-            {
-                tailB = pB;
-            }
-
-            if (tailA != null && tailB != null && tailA != tailB)
-            {
-                return null;
-            }
-
-            if (pA == pB)
-            {
-                return pA;
-            }
-
-            pA = pA.next;
-            pB = pB.next;
-        }
-    }
-
-}
-
diff --git a/160.intersection-of-two-linked-lists.162688147.Time-Limit-Exceeded.leetcode.java b/160.intersection-of-two-linked-lists.162688147.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 0b0185b2..00000000
--- ./160.intersection-of-two-linked-lists.162688147.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-public class Solution
-{
-    public ListNode getIntersectionNode(ListNode headA, ListNode headB)
-    {
-        if (headA == null || headB == null)
-        {
-            return null;
-        }
-
-        ListNode pA = headA;
-        ListNode pB = headB;
-        ListNode tailA = null;
-        ListNode tailB = null;
-
-        while (true)
-        {
-            if (pA == null)
-            {
-                pA = headB;
-            }
-
-            if (pB == null)
-            {
-                pB = headA;
-            }
-
-            if (pA.next == null)
-            {
-                tailA = pA;
-            }
-
-            if (pB.next == null)
-            {
-                tailB = pB;
-            }
-
-            if (tailA != null && tailB != null && tailA != tailB)
-            {
-                return null;
-            }
-
-            pA = pA.next;
-            pB = pB.next;
-        }
-    }
-
-}
-
diff --git a/161.one-edit-distance.162690465.Wrong-Answer.leetcode.java b/161.one-edit-distance.162690465.Wrong-Answer.leetcode.java
deleted file mode 100644
index f95b5a88..00000000
--- ./161.one-edit-distance.162690465.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public boolean isOneEditDistance(String s, String t)
-    {
-        if (s.length() > t.length())
-        {
-            return helper(t, s);
-        }
-
-        return helper(s, t);
-    }
-    private boolean helper(String s, String t)
-    {
-        boolean has = false;
-
-        for (int i = 0, j = 0; i < s.length(); ++i, ++j)
-        {
-            if (s.charAt(i) != t.charAt(j))
-            {
-                if (has)
-                {
-                    return false;
-                }
-
-                has = true;
-
-                if (s.length() < t.length())
-                {
-                    --i;
-                }
-            }
-        }
-
-        return has || s.length() < t.length();
-    }
-}
-
diff --git a/161.one-edit-distance.162690499.Accepted.leetcode.java b/161.one-edit-distance.162690499.Accepted.leetcode.java
deleted file mode 100644
index 1cee7369..00000000
--- ./161.one-edit-distance.162690499.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution
-{
-    public boolean isOneEditDistance(String s, String t)
-    {
-        if (Math.abs(t.length() - s.length()) > 1)
-        {
-            return false;
-        }
-
-        if (s.length() > t.length())
-        {
-            return dfs(t, s);
-        }
-
-        return dfs(s, t);
-    }
-    private boolean dfs(String s, String t)
-    {
-        boolean has = false;
-
-        for (int i = 0, j = 0; i < s.length(); ++i, ++j)
-        {
-            if (s.charAt(i) != t.charAt(j))
-            {
-                if (has)
-                {
-                    return false;
-                }
-
-                has = true;
-
-                if (s.length() < t.length())
-                {
-                    --i;
-                }
-            }
-        }
-
-        return has || s.length() < t.length();
-    }
-}
-
diff --git a/161.one-edit-distance.162690556.Runtime-Error.leetcode.java b/161.one-edit-distance.162690556.Runtime-Error.leetcode.java
deleted file mode 100644
index e873a23b..00000000
--- ./161.one-edit-distance.162690556.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public boolean isOneEditDistance(String s, String t)
-    {
-        if (Math.abs(t.length() - s.length()) > 1)
-        {
-            return false;
-        }
-
-        return dfs(s, t);
-    }
-    private boolean dfs(String s, String t)
-    {
-        boolean has = false;
-
-        for (int i = 0, j = 0; i < s.length(); ++i, ++j)
-        {
-            if (s.charAt(i) != t.charAt(j))
-            {
-                if (has)
-                {
-                    return false;
-                }
-
-                has = true;
-
-                if (s.length() < t.length())
-                {
-                    --i;
-                }
-            }
-        }
-
-        return has || s.length() < t.length();
-    }
-}
-
diff --git a/161.one-edit-distance.162690591.Runtime-Error.leetcode.java b/161.one-edit-distance.162690591.Runtime-Error.leetcode.java
deleted file mode 100644
index dd07d5b1..00000000
--- ./161.one-edit-distance.162690591.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public boolean isOneEditDistance(String s, String t)
-    {
-        if (Math.abs(t.length() - s.length()) > 1)
-        {
-            return false;
-        }
-
-        if (s.length() > t.length())
-        {
-            return dfs(t, s);
-        }
-
-        return dfs(s, t);
-    }
-    private boolean dfs(String s, String t)
-    {
-        boolean has = false;
-
-        for (int i = 0, j = 0; i < s.length(); ++i, ++j)
-        {
-            if (s.charAt(i) != t.charAt(j))
-            {
-                has = true;
-
-                if (s.length() < t.length())
-                {
-                    --i;
-                }
-            }
-        }
-
-        return has || s.length() < t.length();
-    }
-}
-
diff --git a/161.one-edit-distance.162690619.Runtime-Error.leetcode.java b/161.one-edit-distance.162690619.Runtime-Error.leetcode.java
deleted file mode 100644
index 7d420c3f..00000000
--- ./161.one-edit-distance.162690619.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,40 +0,0 @@
-public class Solution
-{
-    public boolean isOneEditDistance(String s, String t)
-    {
-        if (Math.abs(t.length() - s.length()) > 1)
-        {
-            return false;
-        }
-
-        if (s.length() > t.length())
-        {
-            return dfs(t, s);
-        }
-
-        return dfs(s, t);
-    }
-    private boolean dfs(String s, String t)
-    {
-        boolean has = false;
-
-        for (int i = 0, j = 0; i < s.length(); ++i, ++j)
-        {
-            if (s.charAt(i) != t.charAt(j))
-            {
-                if (has)
-                {
-                    return false;
-                }
-
-                if (s.length() < t.length())
-                {
-                    --i;
-                }
-            }
-        }
-
-        return has || s.length() < t.length();
-    }
-}
-
diff --git a/161.one-edit-distance.162690646.Wrong-Answer.leetcode.java b/161.one-edit-distance.162690646.Wrong-Answer.leetcode.java
deleted file mode 100644
index d67120ff..00000000
--- ./161.one-edit-distance.162690646.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public boolean isOneEditDistance(String s, String t)
-    {
-        if (Math.abs(t.length() - s.length()) > 1)
-        {
-            return false;
-        }
-
-        if (s.length() > t.length())
-        {
-            return dfs(t, s);
-        }
-
-        return dfs(s, t);
-    }
-    private boolean dfs(String s, String t)
-    {
-        boolean has = false;
-
-        for (int i = 0, j = 0; i < s.length(); ++i, ++j)
-        {
-            if (s.charAt(i) != t.charAt(j))
-            {
-                if (has)
-                {
-                    return false;
-                }
-
-                has = true;
-            }
-        }
-
-        return has || s.length() < t.length();
-    }
-}
-
diff --git a/161.one-edit-distance.162690702.Wrong-Answer.leetcode.java b/161.one-edit-distance.162690702.Wrong-Answer.leetcode.java
deleted file mode 100644
index e8dda151..00000000
--- ./161.one-edit-distance.162690702.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution
-{
-    public boolean isOneEditDistance(String s, String t)
-    {
-        if (Math.abs(t.length() - s.length()) > 1)
-        {
-            return false;
-        }
-
-        if (s.length() > t.length())
-        {
-            return dfs(t, s);
-        }
-
-        return dfs(s, t);
-    }
-    private boolean dfs(String s, String t)
-    {
-        boolean has = false;
-
-        for (int i = 0, j = 0; i < s.length(); ++i, ++j)
-        {
-            if (s.charAt(i) != t.charAt(j))
-            {
-                if (has)
-                {
-                    return false;
-                }
-
-                has = true;
-
-                if (s.length() < t.length())
-                {
-                    --i;
-                }
-            }
-        }
-
-        return s.length() < t.length();
-    }
-}
-
diff --git a/161.one-edit-distance.162690734.Wrong-Answer.leetcode.java b/161.one-edit-distance.162690734.Wrong-Answer.leetcode.java
deleted file mode 100644
index 8fc491e4..00000000
--- ./161.one-edit-distance.162690734.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution
-{
-    public boolean isOneEditDistance(String s, String t)
-    {
-        if (Math.abs(t.length() - s.length()) > 1)
-        {
-            return false;
-        }
-
-        if (s.length() > t.length())
-        {
-            return dfs(t, s);
-        }
-
-        return dfs(s, t);
-    }
-    private boolean dfs(String s, String t)
-    {
-        boolean has = false;
-
-        for (int i = 0, j = 0; i < s.length(); ++i, ++j)
-        {
-            if (s.charAt(i) != t.charAt(j))
-            {
-                if (has)
-                {
-                    return false;
-                }
-
-                has = true;
-
-                if (s.length() < t.length())
-                {
-                    --i;
-                }
-            }
-        }
-
-        return has;
-    }
-}
-
diff --git a/161.one-edit-distance.162690854.Runtime-Error.leetcode.java b/161.one-edit-distance.162690854.Runtime-Error.leetcode.java
deleted file mode 100644
index 72ec36c2..00000000
--- ./161.one-edit-distance.162690854.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public boolean isOneEditDistance(String s, String t)
-    {
-        int m = s.length(), n = t.length();
-
-        if (n - m > 1)
-        {
-            return false;
-        }
-
-        int i = 0, shift = n - m;
-
-        while (i < m && s.charAt(i) == t.charAt(i))
-        {
-            ++i;
-        }
-
-        if (i == m)
-        {
-            return shift > 0;
-        }
-
-        if (shift == 0)
-        {
-            i++;
-        }
-
-        while (i < m && s.charAt(i) == t.charAt(i + shift))
-        {
-            i++;
-        }
-
-        return i == m;
-    }
-}
-
diff --git a/161.one-edit-distance.162690878.Wrong-Answer.leetcode.java b/161.one-edit-distance.162690878.Wrong-Answer.leetcode.java
deleted file mode 100644
index 678d7a3e..00000000
--- ./161.one-edit-distance.162690878.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public boolean isOneEditDistance(String s, String t)
-    {
-        int m = s.length(), n = t.length();
-
-        if (m > n)
-        {
-            return isOneEditDistance(t, s);
-        }
-
-        int i = 0, shift = n - m;
-
-        while (i < m && s.charAt(i) == t.charAt(i))
-        {
-            ++i;
-        }
-
-        if (i == m)
-        {
-            return shift > 0;
-        }
-
-        if (shift == 0)
-        {
-            i++;
-        }
-
-        while (i < m && s.charAt(i) == t.charAt(i + shift))
-        {
-            i++;
-        }
-
-        return i == m;
-    }
-}
-
diff --git a/161.one-edit-distance.162690916.Wrong-Answer.leetcode.java b/161.one-edit-distance.162690916.Wrong-Answer.leetcode.java
deleted file mode 100644
index dcb7fbfd..00000000
--- ./161.one-edit-distance.162690916.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public boolean isOneEditDistance(String s, String t)
-    {
-        int m = s.length(), n = t.length();
-
-        if (m > n)
-        {
-            return isOneEditDistance(t, s);
-        }
-
-        if (n - m > 1)
-        {
-            return false;
-        }
-
-        int i = 0, shift = n - m;
-
-        if (i == m)
-        {
-            return shift > 0;
-        }
-
-        if (shift == 0)
-        {
-            i++;
-        }
-
-        while (i < m && s.charAt(i) == t.charAt(i + shift))
-        {
-            i++;
-        }
-
-        return i == m;
-    }
-}
-
diff --git a/161.one-edit-distance.162690943.Accepted.leetcode.java b/161.one-edit-distance.162690943.Accepted.leetcode.java
deleted file mode 100644
index f122f481..00000000
--- ./161.one-edit-distance.162690943.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public boolean isOneEditDistance(String s, String t)
-    {
-        int m = s.length(), n = t.length();
-
-        if (m > n)
-        {
-            return isOneEditDistance(t, s);
-        }
-
-        if (n - m > 1)
-        {
-            return false;
-        }
-
-        int i = 0, shift = n - m;
-
-        while (i < m && s.charAt(i) == t.charAt(i))
-        {
-            ++i;
-        }
-
-        if (shift == 0)
-        {
-            i++;
-        }
-
-        while (i < m && s.charAt(i) == t.charAt(i + shift))
-        {
-            i++;
-        }
-
-        return i == m;
-    }
-}
-
diff --git a/161.one-edit-distance.162690980.Wrong-Answer.leetcode.java b/161.one-edit-distance.162690980.Wrong-Answer.leetcode.java
deleted file mode 100644
index ba16a388..00000000
--- ./161.one-edit-distance.162690980.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public boolean isOneEditDistance(String s, String t)
-    {
-        int m = s.length(), n = t.length();
-
-        if (m > n)
-        {
-            return isOneEditDistance(t, s);
-        }
-
-        if (n - m > 1)
-        {
-            return false;
-        }
-
-        int i = 0, shift = n - m;
-
-        while (i < m && s.charAt(i) == t.charAt(i))
-        {
-            ++i;
-        }
-
-        if (i == m)
-        {
-            return shift > 0;
-        }
-
-        while (i < m && s.charAt(i) == t.charAt(i + shift))
-        {
-            i++;
-        }
-
-        return i == m;
-    }
-}
-
diff --git a/161.one-edit-distance.162691001.Wrong-Answer.leetcode.java b/161.one-edit-distance.162691001.Wrong-Answer.leetcode.java
deleted file mode 100644
index 7ca657a9..00000000
--- ./161.one-edit-distance.162691001.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public boolean isOneEditDistance(String s, String t)
-    {
-        int m = s.length(), n = t.length();
-
-        if (m > n)
-        {
-            return isOneEditDistance(t, s);
-        }
-
-        if (n - m > 1)
-        {
-            return false;
-        }
-
-        int i = 0, shift = n - m;
-
-        while (i < m && s.charAt(i) == t.charAt(i))
-        {
-            ++i;
-        }
-
-        if (i == m)
-        {
-            return shift > 0;
-        }
-
-        if (shift == 0)
-        {
-            i++;
-        }
-
-        return i == m;
-    }
-}
-
diff --git a/162.find-peak-element.162692000.Accepted.leetcode.java b/162.find-peak-element.162692000.Accepted.leetcode.java
deleted file mode 100644
index a562a980..00000000
--- ./162.find-peak-element.162692000.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-class Solution
-{
-    public int findPeakElement(int[] A)
-    {
-        if (A.length == 1)
-        {
-            return 0;
-        }
-
-        int start = 0, end = A.length - 1;
-
-        while (start + 1 <  end)
-        {
-            int mid = (start + end) / 2;
-
-            if (A[mid] < A[mid - 1])
-            {
-                end = mid;
-            }
-            else if (A[mid] < A[mid + 1])
-            {
-                start = mid;
-            }
-            else
-            {
-                end = mid;
-            }
-        }
-
-        return A[start] < A[end] ? end : start;
-    }
-}
-
diff --git a/162.find-peak-element.162692168.Accepted.leetcode.java b/162.find-peak-element.162692168.Accepted.leetcode.java
deleted file mode 100644
index ccf9ca94..00000000
--- ./162.find-peak-element.162692168.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-class Solution
-{
-    public int findPeakElement(int[] A)
-    {
-        int start = 0, end = A.length - 1;
-
-        while (start + 1 <  end)
-        {
-            int mid = (start + end) / 2;
-
-            if (A[mid] < A[mid - 1])
-            {
-                end = mid;
-            }
-            else if (A[mid] < A[mid + 1])
-            {
-                start = mid;
-            }
-            else
-            {
-                end = mid;
-            }
-        }
-
-        return A[start] < A[end] ? end : start;
-    }
-}
-
diff --git a/162.find-peak-element.162692660.Accepted.leetcode.java b/162.find-peak-element.162692660.Accepted.leetcode.java
deleted file mode 100644
index dc96f0a9..00000000
--- ./162.find-peak-element.162692660.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-class Solution
-{
-    public int findPeakElement(int[] A)
-    {
-        int start = 0, end = A.length - 1;
-
-        while (start + 1 <  end)
-        {
-            int mid = (start + end) / 2;
-
-            if (A[mid - 1] > A[mid])
-            {
-                end = mid;
-            }
-            else if (A[mid] < A[mid + 1])
-            {
-                start = mid;
-            }
-            else
-            {
-                return mid;
-            }
-        }
-
-        return A[start] < A[end] ? end : start;
-    }
-}
-
diff --git a/162.find-peak-element.162862758.Runtime-Error.leetcode.java b/162.find-peak-element.162862758.Runtime-Error.leetcode.java
deleted file mode 100644
index 4f5b55be..00000000
--- ./162.find-peak-element.162862758.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-class Solution
-{
-    public int findPeakElement(int[] A)
-    {
-        int start = 1, end = A.length - 1;
-
-        while (start + 1 <  end)
-        {
-            int mid = (start + end) / 2;
-
-            if (A[mid] < A[mid - 1])
-            {
-                end = mid;
-            }
-            else if (A[mid] < A[mid + 1])
-            {
-                start = mid;
-            }
-            else
-            {
-                end = mid;
-            }
-        }
-
-        return A[start] < A[end] ? end : start;
-    }
-}
-
diff --git a/162.find-peak-element.162863164.Wrong-Answer.leetcode.java b/162.find-peak-element.162863164.Wrong-Answer.leetcode.java
deleted file mode 100644
index 17fc2ff3..00000000
--- ./162.find-peak-element.162863164.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-class Solution
-{
-    public int findPeakElement(int[] A)
-    {
-        if (A.length == 1)
-        {
-            return A[0];
-        }
-
-        int start = 0, end = A.length - 1;
-
-        while (start + 1 <  end)
-        {
-            int mid = (start + end) / 2;
-
-            if (A[mid - 1] > A[mid])
-            {
-                end = mid;
-            }
-            else if (A[mid] < A[mid + 1])
-            {
-                start = mid;
-            }
-            else
-            {
-                end = mid;
-            }
-        }
-
-        return A[start] < A[end] ? end : start;
-    }
-}
-
diff --git a/162.find-peak-element.162863293.Accepted.leetcode.java b/162.find-peak-element.162863293.Accepted.leetcode.java
deleted file mode 100644
index 532708e7..00000000
--- ./162.find-peak-element.162863293.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-class Solution
-{
-    public int findPeakElement(int[] A)
-    {
-        int start = 0, end = A.length - 1;
-
-        while (start + 1 <  end)
-        {
-            int mid = (start + end) / 2;
-
-            if (A[mid - 1] > A[mid])
-            {
-                end = mid;
-            }
-            else if (A[mid] < A[mid + 1])
-            {
-                start = mid;
-            }
-            else
-            {
-                end = mid;
-            }
-        }
-
-        return A[start] < A[end] ? end : start;
-    }
-}
-
diff --git a/164.maximum-gap.162872245.Accepted.leetcode.java b/164.maximum-gap.162872245.Accepted.leetcode.java
deleted file mode 100644
index b5be3415..00000000
--- ./164.maximum-gap.162872245.Accepted.leetcode.java
+++ /dev/null
@@ -1,55 +0,0 @@
-public class Solution
-{
-    public int maximumGap(int[] num)
-    {
-        if (num == null || num.length < 2)
-        {
-            return 0;
-        }
-
-        int min = num[0];
-        int max = num[0];
-
-        for (int i : num)
-        {
-            min = Math.min(min, i);
-            max = Math.max(max, i);
-        }
-
-        int gap = (int)Math.ceil((double)(max - min) / (num.length - 1));
-        int[] bucketsMIN = new int[num.length - 1];
-        int[] bucketsMAX = new int[num.length - 1];
-        Arrays.fill(bucketsMIN, Integer.MAX_VALUE);
-        Arrays.fill(bucketsMAX, Integer.MIN_VALUE);
-
-        for (int i : num)
-        {
-            if (i == min || i == max)
-            {
-                continue;
-            }
-
-            int idx = (i - min) / gap;
-            bucketsMIN[idx] = Math.min(i, bucketsMIN[idx]);
-            bucketsMAX[idx] = Math.max(i, bucketsMAX[idx]);
-        }
-
-        int maxGap = Integer.MIN_VALUE;
-        int previous = min;
-
-        for (int i = 0; i < num.length - 1; i++)
-        {
-            if (bucketsMIN[i] == Integer.MAX_VALUE && bucketsMAX[i] == Integer.MIN_VALUE)
-            {
-                continue;
-            }
-
-            maxGap = Math.max(maxGap, bucketsMIN[i] - previous);
-            previous = bucketsMAX[i];
-        }
-
-        maxGap = Math.max(maxGap, max - previous);
-        return maxGap;
-    }
-}
-
diff --git a/164.maximum-gap.162872293.Runtime-Error.leetcode.java b/164.maximum-gap.162872293.Runtime-Error.leetcode.java
deleted file mode 100644
index d91b5c18..00000000
--- ./164.maximum-gap.162872293.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-public class Solution
-{
-    public int maximumGap(int[] num)
-    {
-        int min = num[0];
-        int max = num[0];
-
-        for (int i : num)
-        {
-            min = Math.min(min, i);
-            max = Math.max(max, i);
-        }
-
-        int gap = (int)Math.ceil((double)(max - min) / (num.length - 1));
-        int[] bucketsMIN = new int[num.length - 1];
-        int[] bucketsMAX = new int[num.length - 1];
-        Arrays.fill(bucketsMIN, Integer.MAX_VALUE);
-        Arrays.fill(bucketsMAX, Integer.MIN_VALUE);
-
-        for (int i : num)
-        {
-            if (i == min || i == max)
-            {
-                continue;
-            }
-
-            int idx = (i - min) / gap;
-            bucketsMIN[idx] = Math.min(i, bucketsMIN[idx]);
-            bucketsMAX[idx] = Math.max(i, bucketsMAX[idx]);
-        }
-
-        int maxGap = Integer.MIN_VALUE;
-        int previous = min;
-
-        for (int i = 0; i < num.length - 1; i++)
-        {
-            if (bucketsMIN[i] == Integer.MAX_VALUE && bucketsMAX[i] == Integer.MIN_VALUE)
-            {
-                continue;
-            }
-
-            maxGap = Math.max(maxGap, bucketsMIN[i] - previous);
-            previous = bucketsMAX[i];
-        }
-
-        maxGap = Math.max(maxGap, max - previous);
-        return maxGap;
-    }
-}
-
diff --git a/164.maximum-gap.162872802.Runtime-Error.leetcode.java b/164.maximum-gap.162872802.Runtime-Error.leetcode.java
deleted file mode 100644
index 7bf10388..00000000
--- ./164.maximum-gap.162872802.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-public class Solution
-{
-    public int maximumGap(int[] num)
-    {
-        if (num == null || num.length < 2)
-        {
-            return 0;
-        }
-
-        int min = num[0];
-        int max = num[0];
-        int gap = (int)Math.ceil((double)(max - min) / (num.length - 1));
-        int[] bucketsMIN = new int[num.length - 1];
-        int[] bucketsMAX = new int[num.length - 1];
-        Arrays.fill(bucketsMIN, Integer.MAX_VALUE);
-        Arrays.fill(bucketsMAX, Integer.MIN_VALUE);
-
-        for (int i : num)
-        {
-            if (i == min || i == max)
-            {
-                continue;
-            }
-
-            int idx = (i - min) / gap;
-            bucketsMIN[idx] = Math.min(i, bucketsMIN[idx]);
-            bucketsMAX[idx] = Math.max(i, bucketsMAX[idx]);
-        }
-
-        int maxGap = Integer.MIN_VALUE;
-        int previous = min;
-
-        for (int i = 0; i < num.length - 1; i++)
-        {
-            if (bucketsMIN[i] == Integer.MAX_VALUE && bucketsMAX[i] == Integer.MIN_VALUE)
-            {
-                continue;
-            }
-
-            maxGap = Math.max(maxGap, bucketsMIN[i] - previous);
-            previous = bucketsMAX[i];
-        }
-
-        maxGap = Math.max(maxGap, max - previous);
-        return maxGap;
-    }
-}
-
diff --git a/164.maximum-gap.162872838.Wrong-Answer.leetcode.java b/164.maximum-gap.162872838.Wrong-Answer.leetcode.java
deleted file mode 100644
index 2ba19916..00000000
--- ./164.maximum-gap.162872838.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution
-{
-    public int maximumGap(int[] num)
-    {
-        if (num == null || num.length < 2)
-        {
-            return 0;
-        }
-
-        int min = num[0];
-        int max = num[0];
-
-        for (int i : num)
-        {
-            min = Math.min(min, i);
-            max = Math.max(max, i);
-        }
-
-        int gap = (int)Math.ceil((double)(max - min) / (num.length - 1));
-        int[] bucketsMIN = new int[num.length - 1];
-        int[] bucketsMAX = new int[num.length - 1];
-        Arrays.fill(bucketsMIN, Integer.MAX_VALUE);
-        Arrays.fill(bucketsMAX, Integer.MIN_VALUE);
-        int maxGap = Integer.MIN_VALUE;
-        int previous = min;
-
-        for (int i = 0; i < num.length - 1; i++)
-        {
-            if (bucketsMIN[i] == Integer.MAX_VALUE && bucketsMAX[i] == Integer.MIN_VALUE)
-            {
-                continue;
-            }
-
-            maxGap = Math.max(maxGap, bucketsMIN[i] - previous);
-            previous = bucketsMAX[i];
-        }
-
-        maxGap = Math.max(maxGap, max - previous);
-        return maxGap;
-    }
-}
-
diff --git a/164.maximum-gap.162872880.Wrong-Answer.leetcode.java b/164.maximum-gap.162872880.Wrong-Answer.leetcode.java
deleted file mode 100644
index 57fc5ce7..00000000
--- ./164.maximum-gap.162872880.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution
-{
-    public int maximumGap(int[] num)
-    {
-        if (num == null || num.length < 2)
-        {
-            return 0;
-        }
-
-        int min = num[0];
-        int max = num[0];
-
-        for (int i : num)
-        {
-            min = Math.min(min, i);
-            max = Math.max(max, i);
-        }
-
-        int gap = (int)Math.ceil((double)(max - min) / (num.length - 1));
-        int[] bucketsMIN = new int[num.length - 1];
-        int[] bucketsMAX = new int[num.length - 1];
-        Arrays.fill(bucketsMIN, Integer.MAX_VALUE);
-        Arrays.fill(bucketsMAX, Integer.MIN_VALUE);
-
-        for (int i : num)
-        {
-            if (i == min || i == max)
-            {
-                continue;
-            }
-
-            int idx = (i - min) / gap;
-            bucketsMIN[idx] = Math.min(i, bucketsMIN[idx]);
-            bucketsMAX[idx] = Math.max(i, bucketsMAX[idx]);
-        }
-
-        int maxGap = Integer.MIN_VALUE;
-        int previous = min;
-        maxGap = Math.max(maxGap, max - previous);
-        return maxGap;
-    }
-}
-
diff --git a/164.maximum-gap.24449484.Accepted.leetcode.java b/164.maximum-gap.24449484.Accepted.leetcode.java
deleted file mode 100644
index a5bee57d..00000000
--- ./164.maximum-gap.24449484.Accepted.leetcode.java
+++ /dev/null
@@ -1,62 +0,0 @@
-  public class Solution
-  {
-    public int maximumGap(int[] num)
-    {
-      if (num == null || num.length < 2)
-      {
-        return 0;
-      }
-
-      // get the max and min value of the array
-      int min = num[0];
-      int max = num[0];
-
-      for (int i : num)
-      {
-        min = Math.min(min, i);
-        max = Math.max(max, i);
-      }
-
-      // the minimum possibale gap, ceiling of the integer division
-      int gap = (int)Math.ceil((double)(max - min) / (num.length - 1));
-      int[] bucketsMIN = new int[num.length - 1]; // store the min value in that bucket
-      int[] bucketsMAX = new int[num.length - 1]; // store the max value in that bucket
-      Arrays.fill(bucketsMIN, Integer.MAX_VALUE);
-      Arrays.fill(bucketsMAX, Integer.MIN_VALUE);
-
-      // put numbers into buckets
-      for (int i : num)
-      {
-        if (i == min || i == max)
-        {
-          continue;
-        }
-
-        int idx = (i - min) / gap; // index of the right position in the buckets
-        bucketsMIN[idx] = Math.min(i, bucketsMIN[idx]);
-        bucketsMAX[idx] = Math.max(i, bucketsMAX[idx]);
-      }
-
-      // scan the buckets for the max gap
-      int maxGap = Integer.MIN_VALUE;
-      int previous = min;
-
-      for (int i = 0; i < num.length - 1; i++)
-      {
-        if (bucketsMIN[i] == Integer.MAX_VALUE && bucketsMAX[i] == Integer.MIN_VALUE)
-          // empty bucket
-        {
-          continue;
-        }
-
-        // min value minus the previous value is the current gap
-        maxGap = Math.max(maxGap, bucketsMIN[i] - previous);
-        // update previous bucket value
-        previous = bucketsMAX[i];
-      }
-
-      maxGap = Math.max(maxGap, max - previous); // updata the final max value gap
-      return maxGap;
-    }
-  }
-
diff --git a/164.maximum-gap.31609218.Accepted.leetcode.java b/164.maximum-gap.31609218.Accepted.leetcode.java
deleted file mode 100644
index 66701d5d..00000000
--- ./164.maximum-gap.31609218.Accepted.leetcode.java
+++ /dev/null
@@ -1,62 +0,0 @@
-  public class Solution
-  {
-    public int maximumGap(int[] num)
-    {
-      if (num == null || num.length < 2)
-      {
-        return 0;
-      }
-
-      // get the max and min value of the array
-      int min = num[0];
-      int max = num[0];
-
-      for (int i : num)
-      {
-        min = Math.min(min, i);
-        max = Math.max(max, i);
-      }
-
-      // the minimum possibale len, ceiling of the integer division
-      int len = (int) Math.ceil((double)(max - min) / (num.length - 1));
-      int[] bucketsMIN = new int[num.length - 1]; // store the min value in that bucket
-      int[] bucketsMAX = new int[num.length - 1]; // store the max value in that bucket
-      Arrays.fill(bucketsMIN, Integer.MAX_VALUE);
-      Arrays.fill(bucketsMAX, Integer.MIN_VALUE);
-
-      // put numbers into buckets
-      for (int i : num)
-      {
-        if (i == min || i == max)
-        {
-          continue;
-        }
-
-        int idx = (i - min) / len; // index of the right position in the buckets
-        bucketsMIN[idx] = Math.min(i, bucketsMIN[idx]);
-        bucketsMAX[idx] = Math.max(i, bucketsMAX[idx]);
-      }
-
-      // scan the buckets for the max len
-      int maxGap = Integer.MIN_VALUE;
-      int previousMax = min;
-
-      for (int i = 0; i < num.length - 1; i++)
-      {
-        // empty bucket
-        if (bucketsMIN[i] == Integer.MAX_VALUE && bucketsMAX[i] == Integer.MIN_VALUE)
-        {
-          continue;
-        }
-
-        // min value minus the previousMax value is the current maxGap
-        maxGap = Math.max(maxGap, bucketsMIN[i] - previousMax);
-        // update previousMax bucket value
-        previousMax = bucketsMAX[i];
-      }
-
-      maxGap = Math.max(maxGap, max - previousMax); // updata the final max value len
-      return maxGap;
-    }
-  }
-
diff --git a/164.maximum-gap.79964946.Accepted.leetcode.java b/164.maximum-gap.79964946.Accepted.leetcode.java
deleted file mode 100644
index 0af457a6..00000000
--- ./164.maximum-gap.79964946.Accepted.leetcode.java
+++ /dev/null
@@ -1,61 +0,0 @@
-public class Solution
-{
-    public int maximumGap(int[] num)
-    {
-        if (num == null || num.length < 2)
-        {
-            return 0;
-        }
-
-        // get the max and min value of the array
-        int min = num[0];
-        int max = num[0];
-
-        for (int i : num)
-        {
-            min = Math.min(min, i);
-            max = Math.max(max, i);
-        }
-
-        // the minimum possibale len, ceiling of the integer division
-        int len = (int) Math.ceil((double)(max - min) / (num.length - 1));
-        int[] bucketsMIN = new int[num.length - 1]; // store the min value in that bucket
-        int[] bucketsMAX = new int[num.length - 1]; // store the max value in that bucket
-        Arrays.fill(bucketsMIN, Integer.MAX_VALUE);
-        Arrays.fill(bucketsMAX, Integer.MIN_VALUE);
-
-        // put numbers into buckets
-        for (int i : num)
-        {
-            if (i == min || i == max)
-            {
-                continue;
-            }
-
-            int idx = (i - min) / len; // index of the right position in the buckets
-            bucketsMIN[idx] = Math.min(i, bucketsMIN[idx]);
-            bucketsMAX[idx] = Math.max(i, bucketsMAX[idx]);
-        }
-
-        // scan the buckets for the max len
-        int maxGap = Integer.MIN_VALUE;
-        int previousMax = min;
-
-        for (int i = 0; i < num.length - 1; i++)
-        {
-            // empty bucket
-            if (bucketsMIN[i] == Integer.MAX_VALUE && bucketsMAX[i] == Integer.MIN_VALUE)
-            {
-                continue;
-            }
-
-            // min value minus the previousMax value is the current maxGap
-            maxGap = Math.max(maxGap, bucketsMIN[i] - previousMax);
-            // update previousMax bucket value
-            previousMax = bucketsMAX[i];
-        }
-
-        maxGap = Math.max(maxGap, max - previousMax); // updata the final max value len
-        return maxGap;
-    }
-}
diff --git a/165.compare-version-numbers.162874921.Wrong-Answer.leetcode.java b/165.compare-version-numbers.162874921.Wrong-Answer.leetcode.java
deleted file mode 100644
index 9fd9a5e1..00000000
--- ./165.compare-version-numbers.162874921.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public int compareVersion(String version1, String version2)
-    {
-        String[] ver1 = version1.split("\\.");
-        String[] ver2 = version2.split("\\.");
-        int index1 = 0;
-        int index2 = 0;
-
-        while (index1 < ver1.length && index2 < ver2.length)
-        {
-            if (Integer.parseInt(ver1[index1]) < Integer.parseInt(ver2[index2]))
-            {
-                return -1;
-            }
-            else if (Integer.parseInt(ver1[index1]) > Integer.parseInt(ver2[index2]))
-            {
-                return 1;
-            }
-            else
-            {
-                index1++;
-                index2++;
-            }
-        }
-
-        return 0;
-    }
-}
-
diff --git a/165.compare-version-numbers.163034837.Wrong-Answer.leetcode.java b/165.compare-version-numbers.163034837.Wrong-Answer.leetcode.java
deleted file mode 100644
index 15ee88a7..00000000
--- ./165.compare-version-numbers.163034837.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution
-{
-    public int compareVersion(String version1, String version2)
-    {
-        String[] ver1 = version1.split("\\.");
-        String[] ver2 = version2.split("\\.");
-        int index1 = 0;
-        int index2 = 0;
-
-        while (index1 < ver1.length && index2 < ver2.length)
-        {
-            if (Integer.parseInt(ver1[index1]) < Integer.parseInt(ver2[index2]))
-            {
-                return -1;
-            }
-            else if (Integer.parseInt(ver1[index1]) > Integer.parseInt(ver2[index2]))
-            {
-                return 1;
-            }
-            else
-            {
-                index1++;
-                index2++;
-            }
-        }
-
-        if (ver1.length < ver2.length)
-        {
-            return  -1;
-        }
-        else if (ver1.length > ver2.length)
-        {
-            return 1;
-        }
-        else
-        {
-            return 0;
-        }
-    }
-}
-
diff --git a/165.compare-version-numbers.163042181.Accepted.leetcode.java b/165.compare-version-numbers.163042181.Accepted.leetcode.java
deleted file mode 100644
index bda8729b..00000000
--- ./165.compare-version-numbers.163042181.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public int compareVersion(String version1, String version2)
-    {
-        String[] ver1 = version1.split("\\.");
-        String[] ver2 = version2.split("\\.");
-        int index = 0;
-
-        while (index < ver1.length || index < ver2.length)
-        {
-            int num1 = index < ver1.length ? Integer.parseInt(ver1[index]) : 0;
-            int num2 = index < ver2.length ? Integer.parseInt(ver2[index]) : 0;
-
-            if (num1 < num2)
-            {
-                return -1;
-            }
-            else if (num1 > num2)
-            {
-                return 1;
-            }
-            else
-            {
-                index++;
-            }
-        }
-
-        return 0;
-    }
-}
-
diff --git a/165.compare-version-numbers.163043565.Accepted.leetcode.java b/165.compare-version-numbers.163043565.Accepted.leetcode.java
deleted file mode 100644
index bf641207..00000000
--- ./165.compare-version-numbers.163043565.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int compareVersion(String version1, String version2)
-    {
-        String[] ver1 = version1.split("\\.");
-        String[] ver2 = version2.split("\\.");
-        int index = 0;
-
-        while (index < ver1.length || index < ver2.length)
-        {
-            int num1 = index < ver1.length ? Integer.parseInt(ver1[index]) : 0;
-            int num2 = index < ver2.length ? Integer.parseInt(ver2[index]) : 0;
-
-            if (num1 < num2)
-            {
-                return -1;
-            }
-            else if (num1 > num2)
-            {
-                return 1;
-            }
-
-            index++;
-        }
-
-        return 0;
-    }
-}
-
diff --git a/165.compare-version-numbers.163044400.Accepted.leetcode.java b/165.compare-version-numbers.163044400.Accepted.leetcode.java
deleted file mode 100644
index d33396fd..00000000
--- ./165.compare-version-numbers.163044400.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public int compareVersion(String version1, String version2)
-    {
-        String[] ver1 = version1.split("\\.");
-        String[] ver2 = version2.split("\\.");
-
-        for (int index = 0; index < ver1.length || index < ver2.length; index++)
-        {
-            int num1 = index < ver1.length ? Integer.parseInt(ver1[index]) : 0;
-            int num2 = index < ver2.length ? Integer.parseInt(ver2[index]) : 0;
-
-            if (num1 < num2)
-            {
-                return -1;
-            }
-            else if (num1 > num2)
-            {
-                return 1;
-            }
-        }
-
-        return 0;
-    }
-}
-
diff --git a/165.compare-version-numbers.24611805.Wrong-Answer.leetcode.java b/165.compare-version-numbers.24611805.Wrong-Answer.leetcode.java
deleted file mode 100644
index 81f3e01a..00000000
--- ./165.compare-version-numbers.24611805.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-  public class Solution
-  {
-    int compareVersion(String version1, String version2)
-    {
-      for (int i1 = 0, i2 = 0; i1 < version1.length() || i2 < version2.length(); i1++ , i2++)
-      {
-        int num1 = 0;
-
-        while (version1.indexOf(i1) != '.' && i1 < version1.length())
-        {
-          num1 = num1 * 10 + (version1.indexOf(i1++) - '0');
-          int num2 = 0;
-
-          while (version2.indexOf(i2) != '.' && i2 < version2.length())
-          {
-            num2 = num2 * 10 + (version2.indexOf(i2++) - '0');
-
-            if (num1 > num2)
-            {
-              return 1;
-            }
-
-            if (num1 < num2)
-            {
-              return -1;
-            }
-          }
-
-          return 0;
-        }
-      }
-
-      return 0;
-    }
-  }
-
diff --git a/165.compare-version-numbers.24612200.Wrong-Answer.leetcode.java b/165.compare-version-numbers.24612200.Wrong-Answer.leetcode.java
deleted file mode 100644
index b55e1f8f..00000000
--- ./165.compare-version-numbers.24612200.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-  public class Solution
-  {
-    int compareVersion(String version1, String version2)
-    {
-      for (int i1 = 0, i2 = 0; i1 < version1.length() || i2 < version2.length(); i1++ , i2++)
-      {
-        int num1 = 0;
-
-        while (version1.indexOf(i1) != '.' && i1 < version1.length())
-        {
-          num1 = num1 * 10 + (version1.indexOf(i1++) - '0');
-          int num2 = 0;
-
-          while (version2.indexOf(i2) != '.' && i2 < version2.length())
-          {
-            num2 = num2 * 10 + (version2.indexOf(i2++) - '0');
-
-            if (num1 > num2)
-            {
-              return 1;
-            }
-
-            if (num1 < num2)
-            {
-              return -1;
-            }
-          }
-
-          return 0;
-        }
-      }
-
-      return 1;
-    }
-  }
-
diff --git a/165.compare-version-numbers.24612297.Runtime-Error.leetcode.java b/165.compare-version-numbers.24612297.Runtime-Error.leetcode.java
deleted file mode 100644
index 28df32e4..00000000
--- ./165.compare-version-numbers.24612297.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-  public class Solution
-  {
-    int compareVersion(String version1, String version2)
-    {
-      for (int i1 = 0, i2 = 0; i1 < version1.length() || i2 < version2.length(); i1++ , i2++ )
-      {
-        int num1 = 0;
-
-        while (version1.charAt(i1) != '.' && i1 < version1.length())
-        {
-          num1 = num1 * 10 + (version1.charAt(i1++ ) - '0');
-          int num2 = 0;
-
-          while (version2.charAt(i2) != '.' && i2 < version2.length())
-          {
-            num2 = num2 * 10 + (version2.charAt(i2++ ) - '0');
-
-            if (num1 > num2)
-            {
-              return 1;
-            }
-
-            if (num1 < num2)
-            {
-              return -1;
-            }
-          }
-
-          return 0;
-        }
-      }
-
-      return 1;
-    }
-  }
-
diff --git a/165.compare-version-numbers.24612389.Wrong-Answer.leetcode.java b/165.compare-version-numbers.24612389.Wrong-Answer.leetcode.java
deleted file mode 100644
index 892f83cc..00000000
--- ./165.compare-version-numbers.24612389.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-  public class Solution
-  {
-    int compareVersion(String version1, String version2)
-    {
-      for (int i1 = 0, i2 = 0; i1 < version1.length() || i2 < version2.length(); i1++ , i2++ )
-      {
-        int num1 = 0;
-
-        while (i1 < version1.length() && version1.charAt(i1) != '.')
-        {
-          num1 = num1 * 10 + (version1.charAt(i1++ ) - '0');
-          int num2 = 0;
-
-          while (i2 < version2.length() && version2.charAt(i2) != '.')
-          {
-            num2 = num2 * 10 + (version2.charAt(i2++ ) - '0');
-
-            if (num1 > num2)
-            {
-              return 1;
-            }
-
-            if (num1 < num2)
-            {
-              return -1;
-            }
-          }
-
-          return 0;
-        }
-      }
-
-      return 1;
-    }
-  }
-
diff --git a/165.compare-version-numbers.24612523.Wrong-Answer.leetcode.java b/165.compare-version-numbers.24612523.Wrong-Answer.leetcode.java
deleted file mode 100644
index 7c8219ff..00000000
--- ./165.compare-version-numbers.24612523.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-  public class Solution
-  {
-    int compareVersion(String version1, String version2)
-    {
-      for (int i1 = 0, i2 = 0; i1 < version1.length() || i2 < version2.length(); i1++ , i2++ )
-      {
-        int num1 = 0;
-
-        while (i1 < version1.length() && version1.charAt(i1) != '.')
-        {
-          num1 = num1 * 10 + (version1.charAt(i1++ ) - '0');
-        }
-
-        int num2 = 0;
-
-        while (i2 < version2.length() && version2.charAt(i2) != '.')
-        {
-          num2 = num2 * 10 + (version2.charAt(i2++ ) - '0');
-        }
-
-        if (num1 > num2)
-        {
-          return 1;
-        }
-
-        if (num1 < num2)
-        {
-          return -1;
-        }
-
-        return 0;
-      }
-
-      return 0;
-    }
-  }
-
diff --git a/165.compare-version-numbers.24612564.Accepted.leetcode.java b/165.compare-version-numbers.24612564.Accepted.leetcode.java
deleted file mode 100644
index eb4d88ce..00000000
--- ./165.compare-version-numbers.24612564.Accepted.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-  public class Solution
-  {
-    int compareVersion(String version1, String version2)
-    {
-      for (int i1 = 0, i2 = 0; i1 < version1.length() || i2 < version2.length(); i1++ , i2++ )
-      {
-        int num1 = 0;
-
-        while (i1 < version1.length() && version1.charAt(i1) != '.')
-        {
-          num1 = num1 * 10 + (version1.charAt(i1++ ) - '0');
-        }
-
-        int num2 = 0;
-
-        while (i2 < version2.length() && version2.charAt(i2) != '.')
-        {
-          num2 = num2 * 10 + (version2.charAt(i2++ ) - '0');
-        }
-
-        if (num1 > num2)
-        {
-          return 1;
-        }
-
-        if (num1 < num2)
-        {
-          return -1;
-        }
-      }
-
-      return 0;
-    }
-  }
-
diff --git a/166.fraction-to-recurring-decimal.163046725.Accepted.leetcode.java b/166.fraction-to-recurring-decimal.163046725.Accepted.leetcode.java
deleted file mode 100644
index fc87936f..00000000
--- ./166.fraction-to-recurring-decimal.163046725.Accepted.leetcode.java
+++ /dev/null
@@ -1,57 +0,0 @@
-public class Solution
-{
-    public String fractionToDecimal(int numerator, int denominator)
-    {
-        if (numerator == 0)
-        {
-            return "0";
-        }
-
-        if (denominator == 0)
-        {
-            return "";
-        }
-
-        String result = "";
-
-        if ((numerator < 0) ^ (denominator < 0))
-        {
-            result += "-";
-        }
-
-        long num = numerator, den = denominator;
-        num = Math.abs(num);
-        den = Math.abs(den);
-        long res = num / den;
-        result += String.valueOf(res);
-        long remainder = (num % den) * 10;
-
-        if (remainder == 0)
-        {
-            return result;
-        }
-
-        HashMap<Long, Integer> map = new HashMap<Long, Integer>();
-        result += ".";
-
-        while (remainder != 0)
-        {
-            if (map.containsKey(remainder))
-            {
-                int beg = map.get(remainder);
-                String part1 = result.substring(0, beg);
-                String part2 = result.substring(beg, result.length());
-                result = part1 + "(" + part2 + ")";
-                return result;
-            }
-
-            map.put(remainder, result.length());
-            res = remainder / den;
-            result += String.valueOf(res);
-            remainder = (remainder % den) * 10;
-        }
-
-        return result;
-    }
-}
-
diff --git a/166.fraction-to-recurring-decimal.163050013.Wrong-Answer.leetcode.java b/166.fraction-to-recurring-decimal.163050013.Wrong-Answer.leetcode.java
deleted file mode 100644
index 26630346..00000000
--- ./166.fraction-to-recurring-decimal.163050013.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,46 +0,0 @@
-public class Solution
-{
-    public String fractionToDecimal(int numerator, int denominator)
-    {
-        long a = numerator, b = denominator;
-
-        if (b == 0)
-        {
-            throw new IllegalArgumentException("denominator must be positive");
-        }
-
-        StringBuffer result = new StringBuffer();
-
-        if (a * b < 0)
-        {
-            result.append("-");
-        }
-
-        a = Math.abs(a);
-        b = Math.abs(b);
-        result.append(a / b);
-
-        if (a % b != 0)
-        {
-            result.append(".");
-            a = a % b * 10;
-            Map<Long, Integer> map = new HashMap<Long, Integer>();
-
-            while (a != 0 && map.containsKey(a) == false)
-            {
-                result.append(a / b);
-                map.put(a, result.length());
-                a = a % b * 10;
-            }
-
-            if (map.containsKey(a))
-            {
-                result.insert(map.get(a), "(");
-                result.append(")");
-            }
-        }
-
-        return result.toString();
-    }
-}
-
diff --git a/166.fraction-to-recurring-decimal.163050148.Accepted.leetcode.java b/166.fraction-to-recurring-decimal.163050148.Accepted.leetcode.java
deleted file mode 100644
index 8da7cb93..00000000
--- ./166.fraction-to-recurring-decimal.163050148.Accepted.leetcode.java
+++ /dev/null
@@ -1,46 +0,0 @@
-public class Solution
-{
-    public String fractionToDecimal(int numerator, int denominator)
-    {
-        long a = numerator, b = denominator;
-
-        if (b == 0)
-        {
-            throw new IllegalArgumentException("denominator must be positive");
-        }
-
-        StringBuffer result = new StringBuffer();
-
-        if (a * b < 0)
-        {
-            result.append("-");
-        }
-
-        a = Math.abs(a);
-        b = Math.abs(b);
-        result.append(a / b);
-
-        if (a % b != 0)
-        {
-            result.append(".");
-            a = a % b * 10;
-            Map<Long, Integer> map = new HashMap<Long, Integer>();
-
-            while (a != 0 && map.containsKey(a) == false)
-            {
-                result.append(a / b);
-                map.put(a, result.length());
-                a = a % b * 10;
-            }
-
-            if (map.containsKey(a))
-            {
-                result.insert(map.get(a) - 1, "(");
-                result.append(")");
-            }
-        }
-
-        return result.toString();
-    }
-}
-
diff --git a/166.fraction-to-recurring-decimal.163050280.Accepted.leetcode.java b/166.fraction-to-recurring-decimal.163050280.Accepted.leetcode.java
deleted file mode 100644
index 28ecf304..00000000
--- ./166.fraction-to-recurring-decimal.163050280.Accepted.leetcode.java
+++ /dev/null
@@ -1,46 +0,0 @@
-public class Solution
-{
-    public String fractionToDecimal(int numerator, int denominator)
-    {
-        long a = numerator, b = denominator;
-
-        if (b == 0)
-        {
-            throw new IllegalArgumentException("denominator must be positive");
-        }
-
-        StringBuffer result = new StringBuffer();
-
-        if (a * b < 0)
-        {
-            result.append("-");
-        }
-
-        a = Math.abs(a);
-        b = Math.abs(b);
-        result.append(a / b);
-
-        if (a % b != 0)
-        {
-            result.append(".");
-            a = a % b * 10;
-            Map<Long, Integer> map = new HashMap<Long, Integer>();
-
-            while (a != 0 && map.containsKey(a) == false)
-            {
-                result.append(a / b);
-                map.put(a, result.length() - 1);
-                a = a % b * 10;
-            }
-
-            if (map.containsKey(a))
-            {
-                result.insert(map.get(a), "(");
-                result.append(")");
-            }
-        }
-
-        return result.toString();
-    }
-}
-
diff --git a/166.fraction-to-recurring-decimal.163052044.Wrong-Answer.leetcode.java b/166.fraction-to-recurring-decimal.163052044.Wrong-Answer.leetcode.java
deleted file mode 100644
index d6961a8a..00000000
--- ./166.fraction-to-recurring-decimal.163052044.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,46 +0,0 @@
-public class Solution
-{
-    public String fractionToDecimal(int numerator, int denominator)
-    {
-        long a = numerator, b = denominator;
-
-        if (b == 0)
-        {
-            throw new IllegalArgumentException("denominator must be positive");
-        }
-
-        StringBuffer result = new StringBuffer();
-
-        if (a * b < 0)
-        {
-            result.append("-");
-        }
-
-        a = Math.abs(a);
-        b = Math.abs(b);
-        result.append(a / b);
-
-        if (a % b != 0)
-        {
-            result.append(".");
-            Map<Long, Integer> map = new HashMap<Long, Integer>();
-            int index = result.length();
-
-            while (a != 0 && map.containsKey(a) == false)
-            {
-                a = a % b * 10;
-                result.append(a / b);
-                map.put(a / b, index++);
-            }
-
-            if (map.containsKey(a))
-            {
-                result.insert(map.get(a), "(");
-                result.append(")");
-            }
-        }
-
-        return result.toString();
-    }
-}
-
diff --git a/166.fraction-to-recurring-decimal.163052147.Wrong-Answer.leetcode.java b/166.fraction-to-recurring-decimal.163052147.Wrong-Answer.leetcode.java
deleted file mode 100644
index 5b729c43..00000000
--- ./166.fraction-to-recurring-decimal.163052147.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,46 +0,0 @@
-public class Solution
-{
-    public String fractionToDecimal(int numerator, int denominator)
-    {
-        long a = numerator, b = denominator;
-
-        if (b == 0)
-        {
-            throw new IllegalArgumentException("denominator must be positive");
-        }
-
-        StringBuffer result = new StringBuffer();
-
-        if (a * b < 0)
-        {
-            result.append("-");
-        }
-
-        a = Math.abs(a);
-        b = Math.abs(b);
-        result.append(a / b);
-
-        if (a % b != 0)
-        {
-            result.append(".");
-            Map<Long, Integer> map = new HashMap<Long, Integer>();
-            int index = result.length();
-
-            while (a != 0 && map.containsKey(a) == false)
-            {
-                result.append(a / b);
-                map.put(a / b, index++);
-                a = a % b * 10;
-            }
-
-            if (map.containsKey(a))
-            {
-                result.insert(map.get(a), "(");
-                result.append(")");
-            }
-        }
-
-        return result.toString();
-    }
-}
-
diff --git a/166.fraction-to-recurring-decimal.31625912.Accepted.leetcode.java b/166.fraction-to-recurring-decimal.31625912.Accepted.leetcode.java
deleted file mode 100644
index 1cd04aeb..00000000
--- ./166.fraction-to-recurring-decimal.31625912.Accepted.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-  public class Solution
-  {
-    public  String fractionToDecimal(int numerator, int denominator)
-    {
-      if (denominator == 0) { return "NaN"; }
-
-      if (numerator == 0) { return "0"; }
-
-      String sign = (numerator >>> 31 ^ denominator >>> 31) == 1 ? "-" : "";
-      long a = numerator, b = denominator;
-      a = Math.abs(a);
-      b = Math.abs(b);
-      String part1 = a / b + "";
-      long mod = a % b;
-
-      if (mod == 0) { return sign + part1; }
-
-      long remain = mod;
-      Set<Long> s = new LinkedHashSet<>();
-
-      while (!s.contains(mod) && mod != 0)
-      {
-        s.add(mod);
-        mod = (mod * 10) % b;
-      }
-
-      String part2 = "";
-      boolean repeated = false;
-
-      for (long i : s)
-      {
-        if (i == mod)
-        {
-          part2 += "(";
-          repeated = true;
-        }
-
-        part2 += (remain * 10) / b;
-        remain = (remain * 10) % b;
-      }
-
-      if (repeated)
-      {
-        part2 += ")";
-      }
-
-      return sign + part1 + "." + part2;
-    }
-  }
-
diff --git a/166.fraction-to-recurring-decimal.31627230.Accepted.leetcode.java b/166.fraction-to-recurring-decimal.31627230.Accepted.leetcode.java
deleted file mode 100644
index 8669d02f..00000000
--- ./166.fraction-to-recurring-decimal.31627230.Accepted.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-  public class Solution
-  {
-    public String fractionToDecimal(int numerator, int denominator)
-    {
-      if (numerator == 0) { return "0"; }
-
-      if (denominator == 0) { return "NaN"; }
-
-      StringBuilder ret = new StringBuilder();
-      ret.append(((numerator > 0) ^ (denominator > 0)) ? "-" : "");
-      long numer = Math.abs((long)numerator);
-      long denomin = Math.abs((long) denominator);
-      ret.append(Long.toString(numer / denomin));
-
-      if (numer % denomin == 0)
-      {
-        return ret.toString();
-      }
-      else
-      {
-        ret.append(".");
-      }
-
-      HashMap<Long, Integer> map = new HashMap<>();
-      Long remain = numer %  denomin;
-
-      while (remain > 0)
-      {
-        if (map.containsKey(remain))
-        {
-          ret.insert(map.get(remain), "(");
-          ret.append(")");
-          break;
-        }
-
-        map.put(remain, ret.length());
-        remain *= 10;
-        ret.append(Long.toString(remain / denomin));
-        remain %= denomin;
-      }
-
-      return ret.toString();
-    }
-  }
-
diff --git a/166.fraction-to-recurring-decimal.31627496.Accepted.leetcode.java b/166.fraction-to-recurring-decimal.31627496.Accepted.leetcode.java
deleted file mode 100644
index c01ebfa0..00000000
--- ./166.fraction-to-recurring-decimal.31627496.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-  public class Solution
-  {
-    public String fractionToDecimal(int numerator, int denominator)
-    {
-      long a = numerator, b = denominator;
-
-      if (b == 0)
-      {
-        throw new IllegalArgumentException("denominator must be positive");
-      }
-
-      StringBuffer buf = new StringBuffer();
-
-      if (a * b < 0)
-      {
-        buf.append("-");
-      }
-
-      a = Math.abs(a);
-      b = Math.abs(b);
-      buf.append(a / b);
-
-      if (a % b != 0)
-      {
-        buf.append(".");
-        a = a % b * 10;
-        Map<Long, Integer> map = new HashMap();// map numerator a  its sequence number
-        int index = buf.length();
-
-        while (a != 0 && map.containsKey(a) == false)
-        {
-          buf.append(a / b);
-          map.put(a, index++);
-          a = a % b * 10;
-        }
-
-        if (map.containsKey(a))
-        {
-          buf.insert(map.get(a), "(");
-          buf.append(")");
-        }
-      }
-
-      return buf.toString();
-    }
-  }
-
diff --git a/166.fraction-to-recurring-decimal.36882396.Wrong-Answer.leetcode.java b/166.fraction-to-recurring-decimal.36882396.Wrong-Answer.leetcode.java
deleted file mode 100644
index 9de015da..00000000
--- ./166.fraction-to-recurring-decimal.36882396.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,46 +0,0 @@
-  public class Solution
-  {
-    public String fractionToDecimal(int numerator, int denominator)
-    {
-      long a = numerator, b = denominator;
-
-      if (b == 0)
-      {
-        throw new IllegalArgumentException("denominator must be positive");
-      }
-
-      StringBuffer result = new StringBuffer();
-
-      if (a * b < 0)
-      {
-        result.append("-");
-      }
-
-      a = Math.abs(a);
-      b = Math.abs(b);
-      result.append(a / b);
-
-      if (a % b != 0)
-      {
-        result.append(".");
-        Map<Long, Integer> map = new HashMap<Long, Integer>();
-        int index = result.length();
-
-        while (a != 0 && map.containsKey(a) == false)
-        {
-          a = a % b * 10;
-          result.append(a / b);
-          map.put(a, index++);
-        }
-
-        if (map.containsKey(a))
-        {
-          result.insert(map.get(a), "(");
-          result.append(")");
-        }
-      }
-
-      return result.toString();
-    }
-  }
-
diff --git a/166.fraction-to-recurring-decimal.36882489.Accepted.leetcode.java b/166.fraction-to-recurring-decimal.36882489.Accepted.leetcode.java
deleted file mode 100644
index 50cef2c6..00000000
--- ./166.fraction-to-recurring-decimal.36882489.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-  public class Solution
-  {
-    public String fractionToDecimal(int numerator, int denominator)
-    {
-      long a = numerator, b = denominator;
-
-      if (b == 0)
-      {
-        throw new IllegalArgumentException("denominator must be positive");
-      }
-
-      StringBuffer result = new StringBuffer();
-
-      if (a * b < 0)
-      {
-        result.append("-");
-      }
-
-      a = Math.abs(a);
-      b = Math.abs(b);
-      result.append(a / b);
-
-      if (a % b != 0)
-      {
-        result.append(".");
-        a = a % b * 10;
-        Map<Long, Integer> map = new HashMap<Long, Integer>();
-        int index = result.length();
-
-        while (a != 0 && map.containsKey(a) == false)
-        {
-          result.append(a / b);
-          map.put(a, index++ );
-          a = a % b * 10;
-        }
-
-        if (map.containsKey(a))
-        {
-          result.insert(map.get(a), "(");
-          result.append(")");
-        }
-      }
-
-      return result.toString();
-    }
-  }
-
diff --git a/167.two-sum-ii-input-array-is-sorted.163545409.Accepted.leetcode.java b/167.two-sum-ii-input-array-is-sorted.163545409.Accepted.leetcode.java
deleted file mode 100644
index 2460f1ec..00000000
--- ./167.two-sum-ii-input-array-is-sorted.163545409.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public int[] twoSum(int[] numbers, int target)
-    {
-        int[] result = new int[2];
-        int left = 0;
-        int right = numbers.length - 1;
-
-        while (left < right)
-        {
-            int sum = numbers[left] + numbers[right];
-
-            if (sum < target)
-            {
-                left++;
-            }
-            else if (sum > target)
-            {
-                right--;
-            }
-            else
-            {
-                result[0] = left + 1;
-                result[1] = right + 1;
-                return result;
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/167.two-sum-ii-input-array-is-sorted.30867688.Accepted.leetcode.java b/167.two-sum-ii-input-array-is-sorted.30867688.Accepted.leetcode.java
deleted file mode 100644
index 0be13e88..00000000
--- ./167.two-sum-ii-input-array-is-sorted.30867688.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution {
-    public int[] twoSum(int[] numbers, int target) {
-	if (numbers == null || numbers.length == 0)
-		return null;
- 
-	int i = 0;
-	int j = numbers.length - 1;
- 
-	while (i < j) {
-		int x = numbers[i] + numbers[j];
-		if (x < target) {
-			++i;
-		} else if (x > target) {
-			j--;
-		} else {
-			return new int[] { i + 1, j + 1 };
-		}
-	}
- 
-	return null;
-}
-}
diff --git a/167.two-sum-ii-input-array-is-sorted.31629677.Accepted.leetcode.java b/167.two-sum-ii-input-array-is-sorted.31629677.Accepted.leetcode.java
deleted file mode 100644
index 8cf84df8..00000000
--- ./167.two-sum-ii-input-array-is-sorted.31629677.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-  public class Solution
-  {
-    public int[] twoSum(int[] numbers, int target)
-    {
-      if (numbers == null || numbers.length == 0)
-      {
-        return null;
-      }
-
-      int left = 0;
-      int right = numbers.length - 1;
-
-      while (left < right)
-      {
-        int sum = numbers[left] + numbers[right];
-
-        if (sum < target)
-        {
-          left++;
-        }
-        else if (sum > target)
-        {
-          right--;
-        }
-        else
-        {
-          return new int[] { left + 1, right + 1 };
-        }
-      }
-
-      return null;
-    }
-  }
-
diff --git a/167.two-sum-ii-input-array-is-sorted.78037435.Time-Limit-Exceeded.leetcode.java b/167.two-sum-ii-input-array-is-sorted.78037435.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 56f9a54a..00000000
--- ./167.two-sum-ii-input-array-is-sorted.78037435.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public int[] twoSum(int[] numbers, int target)
-    {
-        int[] result = new int[2];        
-        
-        int left = 0;
-        int right = numbers.length - 1;
-
-        while (left < right)
-        {
-            int sum = numbers[left] + numbers[right];
-
-            if (sum < target)
-            {
-                left++;
-            }
-            else if (sum > target)
-            {
-                right--;
-            }
-            else
-            {
-                result[0] = left + 1;
-                result[1] = right + 1;
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/167.two-sum-ii-input-array-is-sorted.96107523.Time-Limit-Exceeded.leetcode.java b/167.two-sum-ii-input-array-is-sorted.96107523.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 98aa2fea..00000000
--- ./167.two-sum-ii-input-array-is-sorted.96107523.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public int[] twoSum(int[] numbers, int target)
-    {
-        int[] result = new int[2];
-        int left = 0;
-        int right = numbers.length - 1;
-
-        while (left < right)
-        {
-            int sum = numbers[left] + numbers[right];
-
-            if (sum < target)
-            {
-                left++;
-            }
-            else if (sum > target)
-            {
-                right--;
-            }
-            else
-            {
-                result[0] = left + 1;
-                result[1] = right + 1;
-            }
-        }
-
-        return result;
-    }
-}
diff --git a/167.two-sum-ii-input-array-is-sorted.96107600.Accepted.leetcode.java b/167.two-sum-ii-input-array-is-sorted.96107600.Accepted.leetcode.java
deleted file mode 100644
index f4c6ab5c..00000000
--- ./167.two-sum-ii-input-array-is-sorted.96107600.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public int[] twoSum(int[] numbers, int target)
-    {
-        if (numbers == null || numbers.length == 0)
-        {
-            return null;
-        }
-
-        int left = 0;
-        int right = numbers.length - 1;
-
-        while (left < right)
-        {
-            int sum = numbers[left] + numbers[right];
-
-            if (sum < target)
-            {
-                left++;
-            }
-            else if (sum > target)
-            {
-                right--;
-            }
-            else
-            {
-                return new int[] { left + 1, right + 1 };
-            }
-        }
-
-        return null;
-    }
-}
diff --git a/167.two-sum-ii-input-array-is-sorted.96107679.Accepted.leetcode.java b/167.two-sum-ii-input-array-is-sorted.96107679.Accepted.leetcode.java
deleted file mode 100644
index 212991aa..00000000
--- ./167.two-sum-ii-input-array-is-sorted.96107679.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public int[] twoSum(int[] numbers, int target)
-    {
-        if (numbers == null || numbers.length == 0)
-        {
-            return null;
-        }
-
-        int i = 0;
-        int j = numbers.length - 1;
-
-        while (i < j)
-        {
-            int x = numbers[i] + numbers[j];
-
-            if (x < target)
-            {
-                ++i;
-            }
-            else if (x > target)
-            {
-                j--;
-            }
-            else
-            {
-                return new int[] { i + 1, j + 1 };
-            }
-        }
-
-        return null;
-    }
-}
diff --git a/167.two-sum-ii-input-array-is-sorted.96107823.Accepted.leetcode.java b/167.two-sum-ii-input-array-is-sorted.96107823.Accepted.leetcode.java
deleted file mode 100644
index a757fb42..00000000
--- ./167.two-sum-ii-input-array-is-sorted.96107823.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int[] twoSum(int[] numbers, int target)
-    {
-        int left = 0;
-        int right = numbers.length - 1;
-
-        while (left < right)
-        {
-            int sum = numbers[left] + numbers[right];
-
-            if (sum < target)
-            {
-                left++;
-            }
-            else if (sum > target)
-            {
-                right--;
-            }
-            else
-            {
-                return new int[] { left + 1, right + 1 };
-            }
-        }
-
-        return null;
-    }
-}
diff --git a/167.two-sum-ii-input-array-is-sorted.96107853.Accepted.leetcode.java b/167.two-sum-ii-input-array-is-sorted.96107853.Accepted.leetcode.java
deleted file mode 100644
index 6ea3c2d4..00000000
--- ./167.two-sum-ii-input-array-is-sorted.96107853.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int[] twoSum(int[] numbers, int target)
-    {
-        int left = 0;
-        int right = numbers.length - 1;
-
-        while (left < right)
-        {
-            int sum = numbers[left] + numbers[right];
-
-            if (sum < target)
-            {
-                left++;
-            }
-            else if (sum > target)
-            {
-                right--;
-            }
-            else
-            {
-                return new int[] {left + 1, right + 1};
-            }
-        }
-
-        return null;
-    }
-}
diff --git a/169.majority-element.156781091.Accepted.leetcode.java b/169.majority-element.156781091.Accepted.leetcode.java
deleted file mode 100644
index 7a8ef214..00000000
--- ./169.majority-element.156781091.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int majorityElement(int[] nums)
-    {
-        int count = 0;
-        int result = nums[0];
-
-        for (int num : nums)
-        {
-            if (count == 0)
-            {
-                result = num;
-            }
-
-            if (result == num)
-            {
-                count++ ;
-            }
-            else
-            {
-                count-- ;
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/169.majority-element.156783317.Accepted.leetcode.java b/169.majority-element.156783317.Accepted.leetcode.java
deleted file mode 100644
index e04ea3cc..00000000
--- ./169.majority-element.156783317.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int majorityElement(int[] num)
-    {
-        int count = 0;
-        int result = Integer.MAX_VALUE;
-
-        for (int i = 0; i < num.length; i++)
-        {
-            if (count == 0)
-            {
-                result = num[i];
-            }
-
-            if (result == num[i])
-            {
-                count++;
-            }
-            else
-            {
-                count--;
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/169.majority-element.156783570.Wrong-Answer.leetcode.java b/169.majority-element.156783570.Wrong-Answer.leetcode.java
deleted file mode 100644
index ebcd8942..00000000
--- ./169.majority-element.156783570.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    public int majorityElement(int[] num)
-    {
-        if (num.length == 1)
-        {
-            return num[0];
-        }
-
-        int count = 0;
-        int result = Integer.MAX_VALUE;
-
-        for (int i = 0; i < num.length; i++)
-        {
-            if (count == 0)
-            {
-                result = num[i];
-                continue;
-            }
-
-            if (result == num[i])
-            {
-                count++;
-            }
-            else
-            {
-                count--;
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/169.majority-element.156784036.Wrong-Answer.leetcode.java b/169.majority-element.156784036.Wrong-Answer.leetcode.java
deleted file mode 100644
index 42fc3948..00000000
--- ./169.majority-element.156784036.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int majorityElement(int[] nums)
-    {
-        int result = nums[0];
-        int count = 0;
-
-        for (int nav = 1; nav < nums.length; nav++)
-        {
-            if (nums[nav] == result)
-            {
-                count++;
-            }
-            else
-            {
-                count--;
-
-                if (count == 0)
-                {
-                    result = nums[nav];
-                    count = 1;
-                }
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/169.majority-element.156784201.Accepted.leetcode.java b/169.majority-element.156784201.Accepted.leetcode.java
deleted file mode 100644
index 2f5b3c58..00000000
--- ./169.majority-element.156784201.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    public int majorityElement(int[] num)
-    {
-        if (num.length == 1)
-        {
-            return num[0];
-        }
-
-        int count = 1;
-        int result = Integer.MAX_VALUE;
-
-        for (int i = 0; i < num.length; i++)
-        {
-            if (result == num[i])
-            {
-                count++;
-            }
-            else
-            {
-                count--;
-            }
-
-            if (count == 0)
-            {
-                result = num[i];
-                count = 1;
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/169.majority-element.163555559.Wrong-Answer.leetcode.java b/169.majority-element.163555559.Wrong-Answer.leetcode.java
deleted file mode 100644
index 3c92c8eb..00000000
--- ./169.majority-element.163555559.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public int majorityElement(int[] nums)
-    {
-        int result = nums[0];
-        int count = 0;
-
-        for (int nav = 1; nav < nums.length; nav++)
-        {
-            if (nums[nav] == result)
-            {
-                count++;
-            }
-            else
-            {
-                count--;
-
-                if (count == 0)
-                {
-                    result = nums[nav];
-                    count = 1;
-                }
-            }
-        }
-
-        return result;
-    }
-}
-
-
diff --git a/169.majority-element.163556151.Accepted.leetcode.java b/169.majority-element.163556151.Accepted.leetcode.java
deleted file mode 100644
index 4a13299c..00000000
--- ./169.majority-element.163556151.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int majorityElement(int[] nums)
-    {
-        int result = nums[0];
-        int count = 1;
-
-        for (int nav = 1; nav < nums.length; nav++)
-        {
-            if (nums[nav] == result)
-            {
-                count++;
-            }
-            else
-            {
-                count--;
-
-                if (count == 0)
-                {
-                    result = nums[nav];
-                    count = 1;
-                }
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/169.majority-element.163556592.Accepted.leetcode.java b/169.majority-element.163556592.Accepted.leetcode.java
deleted file mode 100644
index 9dd3389f..00000000
--- ./169.majority-element.163556592.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int majorityElement(int[] nums)
-    {
-        int result = nums[0];
-        int count = 1;
-
-        for (int nav = 1; nav < nums.length; nav++)
-        {
-            if (nums[nav] == result)
-            {
-                count ++;
-            }
-            else
-            {
-                count --;
-
-                if (count == 0)
-                {
-                    result = nums[nav];
-                    count = 1;
-                }
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/169.majority-element.82191297.Wrong-Answer.leetcode.java b/169.majority-element.82191297.Wrong-Answer.leetcode.java
deleted file mode 100644
index cc8d9c46..00000000
--- ./169.majority-element.82191297.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution 
-{
-    public int majorityElement(int[] num) 
-    {
-        if(num.length == 1) 
-        {
-            return num[0];
-        }
-        
-        int count = 1;
-        int result = Integer.MAX_VALUE;
-        for(int i = 0; i < num.length; i++) 
-        {
-            if(result == num[i]) 
-            {
-                count++;
-            }
-            else 
-            {
-                count--;
-            }
-            
-            if(count == 0) 
-            {
-                result = num[i];
-            }
-        }
-        
-        return result;
-    }
-}
diff --git a/169.majority-element.82191324.Accepted.leetcode.java b/169.majority-element.82191324.Accepted.leetcode.java
deleted file mode 100644
index 8db91091..00000000
--- ./169.majority-element.82191324.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution 
-{
-    public int majorityElement(int[] num) 
-    {
-        if(num.length == 1) 
-        {
-            return num[0];
-        }
-        
-        int count = 1;
-        int result = Integer.MAX_VALUE;
-        for(int i = 0; i < num.length; i++) 
-        {
-            if(result == num[i]) 
-            {
-                count++;
-            }
-            else 
-            {
-                count--;
-            }
-            
-            if(count == 0) 
-            {
-                result = num[i];
-                count++;
-            }
-        }
-        
-        return result;
-    }
-}
diff --git a/169.majority-element.82191449.Accepted.leetcode.java b/169.majority-element.82191449.Accepted.leetcode.java
deleted file mode 100644
index d819e41c..00000000
--- ./169.majority-element.82191449.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution 
-{
-    public int majorityElement(int[] num) 
-    {
-        int count = 1;
-        int result = Integer.MAX_VALUE;
-        
-        for(int i = 0; i < num.length; i++) 
-        {
-            if(result == num[i]) 
-            {
-                count++;
-            }
-            else 
-            {
-                count--;
-            }
-            
-            if(count == 0) 
-            {
-                result = num[i];
-                count++;
-            }
-        }
-        
-        return result;
-    }
-}
diff --git a/17.letter-combinations-of-a-phone-number.163563447.Accepted.leetcode.java b/17.letter-combinations-of-a-phone-number.163563447.Accepted.leetcode.java
deleted file mode 100644
index 4be8316a..00000000
--- ./17.letter-combinations-of-a-phone-number.163563447.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public ArrayList<String> letterCombinations(String digits)
-    {
-        String[] dic = { " ", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };
-        ArrayList<String> result = new ArrayList<String>();
-
-        if (digits == null || digits.length() == 0)
-        {
-            return result;
-        }
-
-        StringBuilder current = new StringBuilder();
-        dfs(digits, dic, current, result);
-        return result;
-    }
-
-    public void dfs(String digits, String[] dic, StringBuilder current, ArrayList<String> result)
-    {
-        if (current.length() == digits.length())
-        {
-            result.add(current.toString());
-            return;
-        }
-
-        String dicStr = dic[digits.charAt(current.length()) - '0'];
-
-        for (int i = 0; i < dicStr.length(); i++)
-        {
-            current.append(dicStr.charAt(i));
-            dfs(digits, dic, current, result);
-            current.deleteCharAt(current.length() - 1);
-        }
-    }
-}
-
diff --git a/17.letter-combinations-of-a-phone-number.163563497.Runtime-Error.leetcode.java b/17.letter-combinations-of-a-phone-number.163563497.Runtime-Error.leetcode.java
deleted file mode 100644
index fb3d83af..00000000
--- ./17.letter-combinations-of-a-phone-number.163563497.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public ArrayList<String> letterCombinations(String digits)
-    {
-        String[] dic = { " ", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };
-        ArrayList<String> result = new ArrayList<String>();
-
-        if (digits == null || digits.length() == 0)
-        {
-            return result;
-        }
-
-        StringBuilder current = new StringBuilder();
-        dfs(digits, dic, current, result);
-        return result;
-    }
-
-    public void dfs(String digits, String[] dic, StringBuilder current, ArrayList<String> result)
-    {
-        String dicStr = dic[digits.charAt(current.length()) - '0'];
-
-        for (int i = 0; i < dicStr.length(); i++)
-        {
-            current.append(dicStr.charAt(i));
-            dfs(digits, dic, current, result);
-            current.deleteCharAt(current.length() - 1);
-        }
-    }
-}
-
diff --git a/17.letter-combinations-of-a-phone-number.163563517.Wrong-Answer.leetcode.java b/17.letter-combinations-of-a-phone-number.163563517.Wrong-Answer.leetcode.java
deleted file mode 100644
index 2463c12e..00000000
--- ./17.letter-combinations-of-a-phone-number.163563517.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public ArrayList<String> letterCombinations(String digits)
-    {
-        String[] dic = { " ", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };
-        ArrayList<String> result = new ArrayList<String>();
-
-        if (digits == null || digits.length() == 0)
-        {
-            return result;
-        }
-
-        StringBuilder current = new StringBuilder();
-        dfs(digits, dic, current, result);
-        return result;
-    }
-
-    public void dfs(String digits, String[] dic, StringBuilder current, ArrayList<String> result)
-    {
-        if (current.length() == digits.length())
-        {
-            result.add(current.toString());
-            return;
-        }
-
-        String dicStr = dic[digits.charAt(current.length()) - '0'];
-    }
-}
-
diff --git a/17.letter-combinations-of-a-phone-number.210992367.Accepted.leetcode.java b/17.letter-combinations-of-a-phone-number.210992367.Accepted.leetcode.java
deleted file mode 100644
index 444e8343..00000000
--- ./17.letter-combinations-of-a-phone-number.210992367.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution
-{
-    public ArrayList<String> letterCombinations(String digits)
-    {
-        String[] dic = { " ", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };
-        ArrayList<String> result = new ArrayList<String>();
-
-        if (digits == null || digits.length() == 0)
-        {
-            return result;
-        }
-
-        result.add("");
-
-        if (digits == null || digits.length() == 0)
-        {
-            return result;
-        }
-
-        for (int i = 0; i < digits.length(); i++)
-        {
-            String letters = dic[digits.charAt(i) - '0'];
-            ArrayList<String> newRes = new ArrayList<String>();
-
-            for (int j = 0; j < result.size(); j++)
-            {
-                for (int k = 0; k < letters.length(); k++)
-                {
-                    newRes.add(result.get(j) + Character.toString(letters.charAt(k)));
-                }
-            }
-
-            result = newRes;
-        }
-
-        return result;
-    }
-}
-
diff --git a/17.letter-combinations-of-a-phone-number.210992471.Accepted.leetcode.java b/17.letter-combinations-of-a-phone-number.210992471.Accepted.leetcode.java
deleted file mode 100644
index ebdea383..00000000
--- ./17.letter-combinations-of-a-phone-number.210992471.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public List<String> letterCombinations(String digits)
-    {
-        String[] dic = { " ", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };
-        List<String> result = new LinkedList<>();
-
-        if (digits == null || digits.length() == 0)
-        {
-            return result;
-        }
-
-        LinkedList<String> list = new LinkedList<>();
-        list.add("");
-
-        for (int i = 0; i < digits.length(); i++)
-        {
-            int num = digits.charAt(i) - '0';
-            int size = list.size();
-
-            for (int k = 0; k < size; k++)
-            {
-                String tmp = list.pop();
-
-                for (int j = 0; j < dic[num].length(); j++)
-                {
-                    list.add(tmp + dic[num].charAt(j));
-                }
-            }
-        }
-
-        result.addAll(list);
-        return result;
-    }
-}
-
diff --git a/170.two-sum-iii-data-structure-design.163565300.Wrong-Answer.leetcode.java b/170.two-sum-iii-data-structure-design.163565300.Wrong-Answer.leetcode.java
deleted file mode 100644
index 2a23ccf7..00000000
--- ./170.two-sum-iii-data-structure-design.163565300.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class TwoSum
-{
-    private Map<Integer, Integer> map = new HashMap<Integer, Integer>();
-
-    public void add(int input)
-    {
-        int count = map.containsKey(input) ? map.get(input) : 0;
-        map.put(input, count + 1);
-    }
-
-    public boolean find(int val)
-    {
-        for (Map.Entry<Integer, Integer> ent : map.entrySet())
-        {
-            int key = ent.getKey();
-            int target = val - key;
-
-            if (map.containsKey(target))
-            {
-                return true;
-            }
-        }
-
-        return false;
-    }
-}
-
diff --git a/170.two-sum-iii-data-structure-design.163566485.Wrong-Answer.leetcode.java b/170.two-sum-iii-data-structure-design.163566485.Wrong-Answer.leetcode.java
deleted file mode 100644
index ded9c807..00000000
--- ./170.two-sum-iii-data-structure-design.163566485.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class TwoSum
-{
-    private Map<Integer, Integer> map = new HashMap<Integer, Integer>();
-
-    public void add(int input)
-    {
-        int count = map.containsKey(input) ? map.get(input) : 0;
-        map.put(input, count + 1);
-    }
-
-    public boolean find(int val)
-    {
-        for (Map.Entry<Integer, Integer> ent : map.entrySet())
-        {
-            int key = ent.getKey();
-            int target = val - key;
-
-            if (map.containsKey(target))
-            {
-                if (key != target)
-                {
-                    return true;
-                }
-            }
-        }
-
-        return false;
-    }
-}
-
diff --git a/170.two-sum-iii-data-structure-design.95037164.Accepted.leetcode.java b/170.two-sum-iii-data-structure-design.95037164.Accepted.leetcode.java
deleted file mode 100644
index ad3e224c..00000000
--- ./170.two-sum-iii-data-structure-design.95037164.Accepted.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class TwoSum
-{
-    private Map<Integer, Integer> map = new HashMap<Integer, Integer>();
-
-    public void add(int input)
-    {
-        int count = map.containsKey(input) ? map.get(input) : 0;
-        map.put(input, count + 1);
-    }
-
-    public boolean find(int val)
-    {
-        for (Map.Entry<Integer, Integer> ent : map.entrySet())
-        {
-            int key = ent.getKey();
-            int target = val - key;
-            
-            if (key == target)
-            {
-                if (ent.getValue() > 1)
-                {
-                    return true;    
-                }
-                else
-                {
-                    continue;
-                }
-            }
-            
-            if (map.containsKey(target))
-            {
-                return true;
-            }
-        }
-        
-        return false;
-    }
-}
diff --git a/170.two-sum-iii-data-structure-design.95919805.Accepted.leetcode.java b/170.two-sum-iii-data-structure-design.95919805.Accepted.leetcode.java
deleted file mode 100644
index db77c672..00000000
--- ./170.two-sum-iii-data-structure-design.95919805.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class TwoSum
-{
-    private Map<Integer, Integer> map = new HashMap<Integer, Integer>();
-
-    public void add(int input)
-    {
-        if (!map.containsKey(input))
-        {
-            map.put(input, 0);
-        }
-        
-        map.put(input, map.get(input) + 1);
-    }
-
-    public boolean find(int val)
-    {
-        for (Map.Entry<Integer, Integer> ent : map.entrySet())
-        {
-            int key = ent.getKey();
-            int target = val - key;
-            
-            if (key == target)
-            {
-                if (ent.getValue() > 1)
-                {
-                    return true;    
-                }
-                else
-                {
-                    continue;
-                }
-            }
-            
-            if (map.containsKey(target))
-            {
-                return true;
-            }
-        }
-        
-        return false;
-    }
-}
diff --git a/171.excel-sheet-column-number.163568176.Wrong-Answer.leetcode.java b/171.excel-sheet-column-number.163568176.Wrong-Answer.leetcode.java
deleted file mode 100644
index 8bc5c227..00000000
--- ./171.excel-sheet-column-number.163568176.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public int titleToNumber(String s)
-    {
-        if (s == null || s.length() == 0)
-        {
-            throw new IllegalArgumentException("Input is not valid!");
-        }
-
-        int result = 0;
-
-        for (int i = s.length() - 1; i >= 0; i--)
-        {
-            result = result * 26 + s.charAt(i) - 'A' + 1;
-        }
-
-        return result;
-    }
-}
-
diff --git a/171.excel-sheet-column-number.163568672.Accepted.leetcode.java b/171.excel-sheet-column-number.163568672.Accepted.leetcode.java
deleted file mode 100644
index e32c7e3d..00000000
--- ./171.excel-sheet-column-number.163568672.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public int titleToNumber(String s)
-    {
-        if (s == null || s.length() == 0)
-        {
-            throw new IllegalArgumentException("Input is not valid!");
-        }
-
-        int result = 0;
-
-        for (int i = 0; i < s.length(); i++)
-        {
-            result = result * 26 + s.charAt(i) - 'A' + 1;
-        }
-
-        return result;
-    }
-}
-
diff --git a/171.excel-sheet-column-number.163568912.Accepted.leetcode.java b/171.excel-sheet-column-number.163568912.Accepted.leetcode.java
deleted file mode 100644
index 434a5808..00000000
--- ./171.excel-sheet-column-number.163568912.Accepted.leetcode.java
+++ /dev/null
@@ -1,15 +0,0 @@
-public class Solution
-{
-    public int titleToNumber(String s)
-    {
-        int result = 0;
-
-        for (int i = 0; i < s.length(); i++)
-        {
-            result = result * 26 + s.charAt(i) - 'A' + 1;
-        }
-
-        return result;
-    }
-}
-
diff --git a/171.excel-sheet-column-number.30869180.Accepted.leetcode.java b/171.excel-sheet-column-number.30869180.Accepted.leetcode.java
deleted file mode 100644
index acd38af5..00000000
--- ./171.excel-sheet-column-number.30869180.Accepted.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class Solution {
-    public int titleToNumber(String s) {
-    if(s==null || s.length() == 0){
-        throw new IllegalArgumentException("Input is not valid!");
-    }
- 
-    int result = 0;
-    int i = s.length()-1;
-    int t = 0;
-    while(i >= 0){
-        char curr = s.charAt(i);
-        result = result + (int) Math.pow(26, t) * (curr-'A'+1);
-        t++;
-        i--;
-    }
- 
-    return result;
-}
-}
diff --git a/171.excel-sheet-column-number.31726086.Wrong-Answer.leetcode.java b/171.excel-sheet-column-number.31726086.Wrong-Answer.leetcode.java
deleted file mode 100644
index e3acf861..00000000
--- ./171.excel-sheet-column-number.31726086.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-  public class Solution
-  {
-    public int titleToNumber(String s)
-    {
-      if (s == null || s.length() == 0)
-      {
-        throw new IllegalArgumentException("Input is not valid!");
-      }
-
-      int result = 0;
-
-      for (int i = s.length() - 1; i >= 0; i--)
-      {
-        result = result * 26 + s.charAt(i) - 'A' + 1;
-      }
-
-      return result;
-    }
-  }
-
diff --git a/171.excel-sheet-column-number.31726210.Accepted.leetcode.java b/171.excel-sheet-column-number.31726210.Accepted.leetcode.java
deleted file mode 100644
index f874e890..00000000
--- ./171.excel-sheet-column-number.31726210.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-  public class Solution
-  {
-    public int titleToNumber(String s)
-    {
-      if (s == null || s.length() == 0)
-      {
-        throw new IllegalArgumentException("Input is not valid!");
-      }
-
-      int result = 0;
-
-      for (int i = 0; i < s.length(); i++)
-      {
-        result = result * 26 + s.charAt(i) - 'A' + 1;
-      }
-
-      return result;
-    }
-  }
-
diff --git a/172.factorial-trailing-zeroes.163881047.Accepted.leetcode.java b/172.factorial-trailing-zeroes.163881047.Accepted.leetcode.java
deleted file mode 100644
index 6435f8af..00000000
--- ./172.factorial-trailing-zeroes.163881047.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public int trailingZeroes(int n)
-    {
-        if (n < 0)
-        {
-            return -1;
-        }
-
-        int count = 0;
-
-        for (long i = 5; n / i >= 1; i *= 5)
-        {
-            count += n / i;
-        }
-
-        return count;
-    }
-}
-
diff --git a/172.factorial-trailing-zeroes.30850336.Accepted.leetcode.java b/172.factorial-trailing-zeroes.30850336.Accepted.leetcode.java
deleted file mode 100644
index a38af0e1..00000000
--- ./172.factorial-trailing-zeroes.30850336.Accepted.leetcode.java
+++ /dev/null
@@ -1,10 +0,0 @@
-public class Solution {
-    public int trailingZeroes(int n) {
-        if ( n<0 ) return -1;
-        int count = 0;
-        for (long i=5; n/i>=1; i*=5) {
-            count += n / i;
-        }        
-        return count;
-    }
-}
diff --git a/172.factorial-trailing-zeroes.36994647.Accepted.leetcode.java b/172.factorial-trailing-zeroes.36994647.Accepted.leetcode.java
deleted file mode 100644
index 2efaf5ec..00000000
--- ./172.factorial-trailing-zeroes.36994647.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-  public class Solution
-  {
-    public int trailingZeroes(int n)
-    {
-      if (n < 0)
-      {
-        return -1;
-      }
-
-      int count = 0;
-
-      for (long i = 5; i <= n; i *= 5)
-      {
-        count += n / i;
-      }
-
-      return count;
-    }
-  }
-
diff --git a/173.binary-search-tree-iterator.155796250.Time-Limit-Exceeded.leetcode.java b/173.binary-search-tree-iterator.155796250.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index e35e33dc..00000000
--- ./173.binary-search-tree-iterator.155796250.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class BSTIterator
-{
-    Stack<TreeNode> stack;
-
-    public BSTIterator(TreeNode root)
-    {
-        stack = new Stack<TreeNode>();
-
-        while (root != null)
-        {
-            stack.push(root);
-            root = root.left;
-        }
-    }
-
-    public boolean hasNext()
-    {
-        return !stack.isEmpty();
-    }
-
-    public int next()
-    {
-        TreeNode node = stack.pop();
-        int result = node.val;
-
-        if (node.right != null)
-        {
-            while (node != null)
-            {
-                stack.push(node);
-                node = node.left;
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/173.binary-search-tree-iterator.155796294.Time-Limit-Exceeded.leetcode.java b/173.binary-search-tree-iterator.155796294.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 991283e1..00000000
--- ./173.binary-search-tree-iterator.155796294.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class BSTIterator
-{
-    Stack<TreeNode> stack;
-
-    public BSTIterator(TreeNode root)
-    {
-        stack = new Stack<TreeNode>();
-
-        while (root != null)
-        {
-            stack.push(root);
-            root = root.left;
-        }
-    }
-
-    public boolean hasNext()
-    {
-        return !stack.isEmpty();
-    }
-
-    public int next()
-    {
-        TreeNode node = stack.pop();
-        int result = node.val;
-
-        if (node.right != null)
-        {
-            node = node.right;
-
-            while (node != null)
-            {
-                stack.push(node);
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/173.binary-search-tree-iterator.156005184.Accepted.leetcode.java b/173.binary-search-tree-iterator.156005184.Accepted.leetcode.java
deleted file mode 100644
index 52e932dc..00000000
--- ./173.binary-search-tree-iterator.156005184.Accepted.leetcode.java
+++ /dev/null
@@ -1,40 +0,0 @@
-public class BSTIterator
-{
-    Stack<TreeNode> stack;
-
-    public BSTIterator(TreeNode root)
-    {
-        stack = new Stack<TreeNode>();
-
-        while (root != null)
-        {
-            stack.push(root);
-            root = root.left;
-        }
-    }
-
-    public boolean hasNext()
-    {
-        return !stack.isEmpty();
-    }
-
-    public int next()
-    {
-        TreeNode root = stack.pop();
-        int result = root.val;
-
-        if (root.right != null)
-        {
-            root = root.right;
-
-            while (root != null)
-            {
-                stack.push(root);
-                root = root.left;
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/173.binary-search-tree-iterator.164393966.Time-Limit-Exceeded.leetcode.java b/173.binary-search-tree-iterator.164393966.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 2c3dbeb7..00000000
--- ./173.binary-search-tree-iterator.164393966.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,40 +0,0 @@
-public class BSTIterator
-{
-    Stack<TreeNode> stack;
-
-    public BSTIterator(TreeNode root)
-    {
-        stack = new Stack<TreeNode>();
-
-        while (root != null)
-        {
-            stack.push(root);
-            root = root.left;
-        }
-    }
-
-    public boolean hasNext()
-    {
-        return !stack.isEmpty();
-    }
-
-    public int next()
-    {
-        TreeNode node = stack.pop();
-        int result = node.val;
-
-        if (node.right != null)
-        {
-            node = node.right;
-
-            while (node != null)
-            {
-                stack.push(node);
-            }
-        }
-
-        return result;
-    }
-}
-
-
diff --git a/173.binary-search-tree-iterator.164396237.Accepted.leetcode.java b/173.binary-search-tree-iterator.164396237.Accepted.leetcode.java
deleted file mode 100644
index 462d3ae0..00000000
--- ./173.binary-search-tree-iterator.164396237.Accepted.leetcode.java
+++ /dev/null
@@ -1,40 +0,0 @@
-public class BSTIterator
-{
-    Stack<TreeNode> stack;
-
-    public BSTIterator(TreeNode root)
-    {
-        stack = new Stack<TreeNode>();
-
-        while (root != null)
-        {
-            stack.push(root);
-            root = root.left;
-        }
-    }
-
-    public boolean hasNext()
-    {
-        return !stack.isEmpty();
-    }
-
-    public int next()
-    {
-        TreeNode node = stack.pop();
-        int result = node.val;
-
-        if (node.right != null)
-        {
-            node = node.right;
-
-            while (node != null)
-            {
-                stack.push(node);
-                node = node.left;
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/173.binary-search-tree-iterator.164397076.Wrong-Answer.leetcode.java b/173.binary-search-tree-iterator.164397076.Wrong-Answer.leetcode.java
deleted file mode 100644
index 7175c7a9..00000000
--- ./173.binary-search-tree-iterator.164397076.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class BSTIterator
-{
-    private Stack<TreeNode> stack = new Stack<>();
-    private TreeNode top;
-
-    public BSTIterator(TreeNode root)
-    {
-        top = root;
-    }
-
-    public boolean hasNext()
-    {
-        return !stack.isEmpty();
-    }
-
-    public int next()
-    {
-        while (top != null)
-        {
-            stack.push(top);
-            top = top.left;
-        }
-
-        top = stack.pop();
-        int result = top.val;
-        top = top.right;
-        return result;
-    }
-}
-
diff --git a/173.binary-search-tree-iterator.73929104.Accepted.leetcode.java b/173.binary-search-tree-iterator.73929104.Accepted.leetcode.java
deleted file mode 100644
index b32e7566..00000000
--- ./173.binary-search-tree-iterator.73929104.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class BSTIterator
-{
-    private Stack<TreeNode> stack = new Stack<>();
-    private TreeNode top;
-    public BSTIterator(TreeNode root)
-    {
-        top = root;
-    }
-    public boolean hasNext()
-    {
-        return (!stack.isEmpty() || top != null);
-    }
-    public int next()
-    {
-        while(top != null)
-        {
-            stack.push(top);
-            top = top.left;
-        }
-        
-        top = stack.pop();
-        int result = top.val;
-        top = top.right;
-        return result;
-    }
-}
-
diff --git a/173.binary-search-tree-iterator.96640596.Accepted.leetcode.java b/173.binary-search-tree-iterator.96640596.Accepted.leetcode.java
deleted file mode 100644
index 6311033e..00000000
--- ./173.binary-search-tree-iterator.96640596.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class BSTIterator
-{
-    private Stack<TreeNode> stack = new Stack<>();
-    private TreeNode top;
-    public BSTIterator(TreeNode root)
-    {
-        top = root;
-    }
-    public boolean hasNext()
-    {
-        return (!stack.isEmpty() || top != null);
-    }
-    public int next()
-    {
-        while (top != null)
-        {
-            stack.push(top);
-            top = top.left;
-        }
-
-        top = stack.pop();
-        int result = top.val;
-        top = top.right;
-        return result;
-    }
-}
diff --git a/174.dungeon-game.102706920.Wrong-Answer.leetcode.java b/174.dungeon-game.102706920.Wrong-Answer.leetcode.java
deleted file mode 100644
index 59ae65ed..00000000
--- ./174.dungeon-game.102706920.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class Solution
-{
-    public int calculateMinimumHP(int[][] dungeon)
-    {
-        int m = dungeon.length, n = dungeon[0].length;
-        int[] dp = new int[n + 1];
-        Arrays.fill(dp, Integer.MAX_VALUE);
-
-        for (int i = m - 1; i >= 0; i--)
-        {
-            for (int j = n - 1; j >= 0; j--)
-            {
-                dp[j] = Math.max(1, Math.min(dp[j], dp[j + 1]) - dungeon[i][j]);
-            }
-        }
-
-        return dp[0];
-    }
-}
diff --git a/174.dungeon-game.102707093.Accepted.leetcode.java b/174.dungeon-game.102707093.Accepted.leetcode.java
deleted file mode 100644
index 9304849f..00000000
--- ./174.dungeon-game.102707093.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public int calculateMinimumHP(int[][] dungeon)
-    {
-        int m = dungeon.length, n = dungeon[0].length;
-        int[] dp = new int[n + 1];
-        Arrays.fill(dp, Integer.MAX_VALUE);
-        dp[n - 1] = 1;
-
-        for (int i = m - 1; i >= 0; i--)
-        {
-            for (int j = n - 1; j >= 0; j--)
-            {
-                dp[j] = Math.max(1, Math.min(dp[j], dp[j + 1]) - dungeon[i][j]);
-            }
-        }
-
-        return dp[0];
-    }
-}
diff --git a/174.dungeon-game.102707253.Accepted.leetcode.java b/174.dungeon-game.102707253.Accepted.leetcode.java
deleted file mode 100644
index 5290c9dc..00000000
--- ./174.dungeon-game.102707253.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public int calculateMinimumHP(int[][] dungeon)
-    {
-        int m = dungeon.length, n = dungeon[0].length;
-        int[] dp = new int[n + 1];
-        Arrays.fill(dp, Integer.MAX_VALUE);
-        dp[n - 1] = 1;
-
-        for (int i = m - 1; i >= 0; i--)
-        {
-            for (int j = n - 1; j >= 0; j--)
-            {
-                dp[j] = Math.max(Math.min(dp[j], dp[j + 1]) - dungeon[i][j], 1);
-            }
-        }
-
-        return dp[0];
-    }
-}
diff --git a/174.dungeon-game.154762239.Runtime-Error.leetcode.java b/174.dungeon-game.154762239.Runtime-Error.leetcode.java
deleted file mode 100644
index da4dda23..00000000
--- ./174.dungeon-game.154762239.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution
-{
-    public int calculateMinimumHP(int[][] dungeon)
-    {
-        int m = dungeon.length, n = dungeon[0].length;
-        int[] dp = new int[n];
-        Arrays.fill(dp, Integer.MAX_VALUE);
-        dp[n - 1] = 1;
-
-        for (int i = m - 1; i >= 0; i--)
-        {
-            for (int j = n - 1; j >= 0; j--)
-            {
-                dp[j] = Math.max(1, Math.min(dp[j], dp[j + 1]) - dungeon[i][j]);
-            }
-        }
-
-        return dp[0];
-    }
-}
-
diff --git a/174.dungeon-game.154879912.Accepted.leetcode.java b/174.dungeon-game.154879912.Accepted.leetcode.java
deleted file mode 100644
index 1d4777ea..00000000
--- ./174.dungeon-game.154879912.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public int calculateMinimumHP(int[][] dungeon)
-    {
-        int m = dungeon.length, n = dungeon[0].length;
-        int[] dp = new int[n];
-        Arrays.fill(dp, Integer.MAX_VALUE);
-        dp[n - 1] = 1;
-
-        for (int i = m - 1; i >= 0; i--)
-        {
-            dp[n - 1] = Math.max(dp[n - 1] - dungeon[i][n - 1], 1);
-
-            for (int j = n - 2; j >= 0; j--)
-            {
-                dp[j] = Math.max(1, Math.min(dp[j], dp[j + 1]) - dungeon[i][j]);
-            }
-        }
-
-        return dp[0];
-    }
-}
-
diff --git a/174.dungeon-game.164409282.Wrong-Answer.leetcode.java b/174.dungeon-game.164409282.Wrong-Answer.leetcode.java
deleted file mode 100644
index 4287daee..00000000
--- ./174.dungeon-game.164409282.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public int calculateMinimumHP(int[][] dungeon)
-    {
-        int m = dungeon.length, n = dungeon[0].length;
-        int[] dp = new int[n + 1];
-        Arrays.fill(dp, 0);
-
-        for (int i = m - 1; i >= 0; i--)
-        {
-            for (int j = n - 1; j >= 0; j--)
-            {
-                System.out.printf("Math.min(dp[j], dp[j + 1]) --> %s\n", Math.min(dp[j], dp[j + 1]));
-                System.out.printf("Math.min(dp[j], dp[j + 1]) - dungeon[i][j] --> %s\n", Math.min(dp[j], dp[j + 1]) - dungeon[i][j]);
-                dp[j] = Math.max(1, Math.min(dp[j], dp[j + 1]) - dungeon[i][j]);
-                System.out.printf("dp[%s] --> %s\n", j, dp[j]);
-            }
-
-            System.out.printf("\n");
-        }
-
-        return dp[0];
-    }
-}
-
diff --git a/174.dungeon-game.164409501.Wrong-Answer.leetcode.java b/174.dungeon-game.164409501.Wrong-Answer.leetcode.java
deleted file mode 100644
index ce262b25..00000000
--- ./174.dungeon-game.164409501.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public int calculateMinimumHP(int[][] dungeon)
-    {
-        int m = dungeon.length, n = dungeon[0].length;
-        int[] dp = new int[n + 1];
-        Arrays.fill(dp, 1);
-
-        for (int i = m - 1; i >= 0; i--)
-        {
-            for (int j = n - 1; j >= 0; j--)
-            {
-                dp[j] = Math.max(1, Math.min(dp[j], dp[j + 1]) - dungeon[i][j]);
-                System.out.printf("dp[%s] --> %s\n", j, dp[j]);
-            }
-
-            System.out.printf("\n");
-        }
-
-        return dp[0];
-    }
-}
-
diff --git a/174.dungeon-game.164416936.Wrong-Answer.leetcode.java b/174.dungeon-game.164416936.Wrong-Answer.leetcode.java
deleted file mode 100644
index 58239ab5..00000000
--- ./174.dungeon-game.164416936.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int calculateMinimumHP(int[][] dungeon)
-    {
-        int m = dungeon.length, n = dungeon[0].length;
-        int[] dp = new int[n + 1];
-        Arrays.fill(dp, 1);
-
-        for (int i = m - 1; i >= 0; i--)
-        {
-            dp[n - 1] -= dungeon[i][n - 1];
-
-            for (int j = n - 2; j >= 0; j--)
-            {
-                dp[j] = Math.max(1, Math.min(dp[j], dp[j + 1]) - dungeon[i][j]);
-            }
-        }
-
-        return dp[0];
-    }
-}
-
diff --git a/174.dungeon-game.164417056.Wrong-Answer.leetcode.java b/174.dungeon-game.164417056.Wrong-Answer.leetcode.java
deleted file mode 100644
index 66dc0712..00000000
--- ./174.dungeon-game.164417056.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int calculateMinimumHP(int[][] dungeon)
-    {
-        int m = dungeon.length, n = dungeon[0].length;
-        int[] dp = new int[n];
-        Arrays.fill(dp, 1);
-
-        for (int i = m - 1; i >= 0; i--)
-        {
-            dp[n - 1] -= dungeon[i][n - 1];
-
-            for (int j = n - 2; j >= 0; j--)
-            {
-                dp[j] = Math.max(1, Math.min(dp[j], dp[j + 1]) - dungeon[i][j]);
-            }
-        }
-
-        return dp[0];
-    }
-}
-
diff --git a/174.dungeon-game.164417312.Wrong-Answer.leetcode.java b/174.dungeon-game.164417312.Wrong-Answer.leetcode.java
deleted file mode 100644
index dfceee52..00000000
--- ./174.dungeon-game.164417312.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public int calculateMinimumHP(int[][] dungeon)
-    {
-        int m = dungeon.length, n = dungeon[0].length;
-        int[] dp = new int[n];
-        Arrays.fill(dp, Integer.MAX_VALUE);
-        dp[n - 1] = 1;
-
-        for (int i = m - 1; i >= 0; i--)
-        {
-            dp[n - 1] -= dungeon[i][n - 1];
-
-            for (int j = n - 2; j >= 0; j--)
-            {
-                dp[j] = Math.max(Math.min(dp[j], dp[j + 1]) - dungeon[i][j], 1);
-            }
-        }
-
-        return dp[0];
-    }
-}
-
diff --git a/174.dungeon-game.164417543.Wrong-Answer.leetcode.java b/174.dungeon-game.164417543.Wrong-Answer.leetcode.java
deleted file mode 100644
index 3ead5fb9..00000000
--- ./174.dungeon-game.164417543.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int calculateMinimumHP(int[][] dungeon)
-    {
-        int m = dungeon.length, n = dungeon[0].length;
-        int[] dp = new int[n];
-        Arrays.fill(dp, 1);
-
-        for (int i = m - 1; i >= 0; i--)
-        {
-            dp[n - 1] = Math.max(dp[n - 1] - dungeon[i][n - 1], 1);
-
-            for (int j = n - 2; j >= 0; j--)
-            {
-                dp[j] = Math.max(1, Math.min(dp[j], dp[j + 1]) - dungeon[i][j]);
-            }
-        }
-
-        return dp[0];
-    }
-}
-
diff --git a/174.dungeon-game.164417683.Wrong-Answer.leetcode.java b/174.dungeon-game.164417683.Wrong-Answer.leetcode.java
deleted file mode 100644
index 69404470..00000000
--- ./174.dungeon-game.164417683.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int calculateMinimumHP(int[][] dungeon)
-    {
-        int m = dungeon.length, n = dungeon[0].length;
-
-        if (m == 1 && n == 1)
-        {
-            Math.max(1 - dungeon[0][0], 1);
-        }
-
-        int[] dp = new int[n];
-        Arrays.fill(dp, 1);
-
-        for (int i = m - 1; i >= 0; i--)
-        {
-            dp[n - 1] = Math.max(dp[n - 1] - dungeon[i][n - 1], 1);
-
-            for (int j = n - 2; j >= 0; j--)
-            {
-                dp[j] = Math.max(1, Math.min(dp[j], dp[j + 1]) - dungeon[i][j]);
-            }
-        }
-
-        return dp[0];
-    }
-}
-
diff --git a/174.dungeon-game.164417857.Wrong-Answer.leetcode.java b/174.dungeon-game.164417857.Wrong-Answer.leetcode.java
deleted file mode 100644
index 2658d8ce..00000000
--- ./174.dungeon-game.164417857.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int calculateMinimumHP(int[][] dungeon)
-    {
-        int m = dungeon.length, n = dungeon[0].length;
-
-        if (m == 1 && n == 1)
-        {
-            return Math.max(1 - dungeon[0][0], 1);
-        }
-
-        int[] dp = new int[n];
-        Arrays.fill(dp, 1);
-
-        for (int i = m - 1; i >= 0; i--)
-        {
-            dp[n - 1] = Math.max(dp[n - 1] - dungeon[i][n - 1], 1);
-
-            for (int j = n - 2; j >= 0; j--)
-            {
-                dp[j] = Math.max(1, Math.min(dp[j], dp[j + 1]) - dungeon[i][j]);
-            }
-        }
-
-        return dp[0];
-    }
-}
-
diff --git a/179.largest-number.164420591.Accepted.leetcode.java b/179.largest-number.164420591.Accepted.leetcode.java
deleted file mode 100644
index 84e3bc82..00000000
--- ./179.largest-number.164420591.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public String largestNumber(int[] nums)
-    {
-        StringBuilder result = new StringBuilder();
-        List<Integer> datas = new ArrayList<Integer>();
-
-        for (int i : nums)
-        {
-            datas.add(i);
-        }
-
-        Collections.sort(datas, new Comparator<Integer>()
-        {
-            @Override
-            public int compare(Integer o1, Integer o2)
-            {
-                return (o2 + "" + o1).compareTo(o1 + "" + o2);
-            }
-        });
-
-        for (int data : datas)
-        {
-            result.append(data);
-        }
-
-        return result.toString().replaceFirst("^0+(?!$)", "");
-    }
-}
-
diff --git a/179.largest-number.164421631.Wrong-Answer.leetcode.java b/179.largest-number.164421631.Wrong-Answer.leetcode.java
deleted file mode 100644
index c3a091ee..00000000
--- ./179.largest-number.164421631.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution
-{
-    public String largestNumber(int[] nums)
-    {
-        StringBuilder result = new StringBuilder();
-        List<Integer> datas = new ArrayList<Integer>();
-
-        for (int i : nums)
-        {
-            datas.add(i);
-        }
-
-        Collections.sort(datas, new Comparator<Integer>()
-        {
-            @Override
-            public int compare(Integer o1, Integer o2)
-            {
-                return (o2 + "" + o1).compareTo(o1 + "" + o2);
-            }
-        });
-        boolean isFirst = true;
-
-        for (int data : datas)
-        {
-            if (data == 0)
-            {
-                if (!isFirst)
-                {
-                    continue;
-                }
-                else
-                {
-                    isFirst = false;
-                }
-            }
-
-            result.append(data);
-        }
-
-        return result.toString();
-    }
-}
-
diff --git a/186.reverse-words-in-a-string-ii.27577191.Accepted.leetcode.java b/186.reverse-words-in-a-string-ii.27577191.Accepted.leetcode.java
deleted file mode 100644
index e39e08b4..00000000
--- ./186.reverse-words-in-a-string-ii.27577191.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-  public class Solution
-  {
-    public void reverseWords(char[] s)
-    {
-      reverse(s, 0, s.length);
-
-      for (int i = 0, j = 0; j <= s.length; j++)
-      {
-        if (j == s.length || s[j] == ' ')
-        {
-          reverse(s, i, j);
-          i = j + 1;
-        }
-      }
-    }
-    private void reverse(char[] s, int begin, int end)
-    {
-      for (int i = 0; i < (end - begin) / 2; i++)
-      {
-        char temp = s[begin + i];
-        s[begin + i] = s[end - i - 1];
-        s[end - i - 1] = temp;
-      }
-    }
-  }
-
diff --git a/186.reverse-words-in-a-string-ii.27577291.Accepted.leetcode.java b/186.reverse-words-in-a-string-ii.27577291.Accepted.leetcode.java
deleted file mode 100644
index 55c3ee53..00000000
--- ./186.reverse-words-in-a-string-ii.27577291.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-  public class Solution
-  {
-    public void reverseWords(char[] s)
-    {
-      reverse(s, 0, s.length);
-
-      for (int i = 0, j = 0; j <= s.length; j++)
-      {
-        if (j == s.length || s[j] == ' ')
-        {
-          reverse(s, i, j);
-          i = j + 1;
-        }
-      }
-    }
-    private void reverse(char[] s, int begin, int end)
-    {
-      for (int i = 0; i < (end - begin) / 2; i++)
-      {
-        s[begin + i] ^= s[end - i - 1];
-        s[end - i - 1] ^= s[begin + i];
-        s[begin + i] ^= s[end - i - 1];
-      }
-    }
-  }
-
diff --git a/186.reverse-words-in-a-string-ii.31810231.Runtime-Error.leetcode.java b/186.reverse-words-in-a-string-ii.31810231.Runtime-Error.leetcode.java
deleted file mode 100644
index c4527fc6..00000000
--- ./186.reverse-words-in-a-string-ii.31810231.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-  public class Solution
-  {
-    public void reverseWords(char[] s)
-    {
-      reverse(s, 0, s.length - 1);
-
-      for (int begin = 0, end = 0; end < s.length; end++)
-      {
-        if (end == s.length - 1 || s[end + 1] == ' ')
-        {
-          reverse(s, begin, end - 1);
-          begin = end + 2;
-        }
-      }
-    }
-
-    private void reverse(char[] s, int begin, int end)
-    {
-      for (; begin < end; begin++, end--)
-      {
-        char temp = s[begin];
-        s[begin] = s[end];
-        s[end] = s[temp];
-      }
-    }
-  }
-
diff --git a/186.reverse-words-in-a-string-ii.31810304.Wrong-Answer.leetcode.java b/186.reverse-words-in-a-string-ii.31810304.Wrong-Answer.leetcode.java
deleted file mode 100644
index af4591fd..00000000
--- ./186.reverse-words-in-a-string-ii.31810304.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-  public class Solution
-  {
-    public void reverseWords(char[] s)
-    {
-      reverse(s, 0, s.length - 1);
-
-      for (int begin = 0, end = 0; end < s.length; end++)
-      {
-        if (end == s.length - 1 || s[end + 1] == ' ')
-        {
-          reverse(s, begin, end - 1);
-          begin = end + 2;
-        }
-      }
-    }
-
-    private void reverse(char[] s, int begin, int end)
-    {
-      for (; begin < end; begin++, end--)
-      {
-        char temp = s[begin];
-        s[begin] = s[end];
-        s[end] = temp;
-      }
-    }
-  }
-
diff --git a/186.reverse-words-in-a-string-ii.31810657.Accepted.leetcode.java b/186.reverse-words-in-a-string-ii.31810657.Accepted.leetcode.java
deleted file mode 100644
index 2483a81e..00000000
--- ./186.reverse-words-in-a-string-ii.31810657.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-  public class Solution
-  {
-    public void reverseWords(char[] s)
-    {
-      reverse(s, 0, s.length - 1);
-
-      for (int begin = 0, end = 0; end < s.length; end++)
-      {
-        if (end == s.length - 1 || s[end + 1] == ' ')
-        {
-          reverse(s, begin, end);
-          begin = end + 2;
-        }
-      }
-    }
-
-    private void reverse(char[] s, int begin, int end)
-    {
-      for (; begin < end; begin++, end--)
-      {
-        char temp = s[begin];
-        s[begin] = s[end];
-        s[end] = temp;
-      }
-    }
-  }
-
diff --git a/186.reverse-words-in-a-string-ii.31827025.Accepted.leetcode.java b/186.reverse-words-in-a-string-ii.31827025.Accepted.leetcode.java
deleted file mode 100644
index e3649e7c..00000000
--- ./186.reverse-words-in-a-string-ii.31827025.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-  public class Solution
-  {
-    public void reverseWords(char[] s)
-    {
-      reverse(s, 0, s.length - 1);
-
-      for (int begin = 0, end = 0; end <= s.length; end++)
-      {
-        if (end == s.length || s[end] == ' ')
-        {
-          reverse(s, begin, end - 1);
-          begin = end + 1;
-        }
-      }
-    }
-
-    private void reverse(char[] s, int begin, int end)
-    {
-      for (; begin < end; begin++ , end--)
-      {
-        char temp = s[begin];
-        s[begin] = s[end];
-        s[end] = temp;
-      }
-    }
-  }
-
diff --git a/186.reverse-words-in-a-string-ii.41414774.Accepted.leetcode.java b/186.reverse-words-in-a-string-ii.41414774.Accepted.leetcode.java
deleted file mode 100644
index 7e5f1030..00000000
--- ./186.reverse-words-in-a-string-ii.41414774.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-  public class Solution
-  {
-    public void reverseWords(char[] s)
-    {
-      reverse(s, 0, s.length - 1);
-
-      for (int begin = 0, end = 0; end <= s.length; end++)
-      {
-        if (end == s.length || s[end] == ' ')
-        {
-          reverse(s, begin, end - 1);
-
-          while (end < s.length && s[end] == ' ')
-          {
-            end++;
-          }
-
-          begin = end ;
-        }
-      }
-    }
-
-    private void reverse(char[] s, int begin, int end)
-    {
-      for (; begin < end; begin++ , end--)
-      {
-        char temp = s[begin];
-        s[begin] = s[end];
-        s[end] = temp;
-      }
-    }
-  }
-
diff --git a/187.repeated-dna-sequences.211483565.Accepted.leetcode.java b/187.repeated-dna-sequences.211483565.Accepted.leetcode.java
deleted file mode 100644
index 11f52d1c..00000000
--- ./187.repeated-dna-sequences.211483565.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public List<String> findRepeatedDnaSequences(String s)
-    {
-        Set<String> result = new HashSet<String>();
-        Set<String> set = new HashSet<String>();
-
-        for (int index = 10; index <= s.length(); index++)
-        {
-            String substr = s.substring(index - 10, index);
-
-            if (set.contains(substr))
-            {
-                result.add(substr);
-            }
-            else
-            {
-                set.add(substr);
-            }
-        }
-
-        return new ArrayList(result);
-    }
-}
-
diff --git a/187.repeated-dna-sequences.30849703.Accepted.leetcode.java b/187.repeated-dna-sequences.30849703.Accepted.leetcode.java
deleted file mode 100644
index d7b7bfcb..00000000
--- ./187.repeated-dna-sequences.30849703.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution {
-    public List<String> findRepeatedDnaSequences(String s) {
-	List<String> result = new ArrayList<String>();
- 
-	int len = s.length();
-	if (len < 10) {
-		return result;
-	}
- 
-	Map<Character, Integer> map = new HashMap<Character, Integer>();
-	map.put('A', 0);
-	map.put('C', 1);
-	map.put('G', 2);
-	map.put('T', 3);
- 
-	Set<Integer> temp = new HashSet<Integer>();
-	Set<Integer> added = new HashSet<Integer>();
- 
-	int hash = 0;
-	for (int i = 0; i < len; i++) {
-		if (i < 9) {
-			//each ACGT fit 2 bits, so left shift 2
-			hash = (hash << 2) + map.get(s.charAt(i)); 
-		} else {
-			hash = (hash << 2) + map.get(s.charAt(i));
-			//make length of hash to be 20
-			hash = hash &  (1 << 20) - 1; 
- 
-			if (temp.contains(hash) && !added.contains(hash)) {
-				result.add(s.substring(i - 9, i + 1));
-				added.add(hash); //track added
-			} else {
-				temp.add(hash);
-			}
-		}
- 
-	}
- 
-	return result;
-}
-}
diff --git a/187.repeated-dna-sequences.31850429.Accepted.leetcode.java b/187.repeated-dna-sequences.31850429.Accepted.leetcode.java
deleted file mode 100644
index df337320..00000000
--- ./187.repeated-dna-sequences.31850429.Accepted.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-  public class Solution
-  {
-    public List<String> findRepeatedDnaSequences(String s)
-    {
-      List<String> result = new ArrayList<String>();
-      int len = s.length();
-
-      if (len < 10)
-      {
-        return result;
-      }
-
-      Map<Character, Integer> map = new HashMap<Character, Integer>();
-      map.put('A', 0);
-      map.put('C', 1);
-      map.put('G', 2);
-      map.put('T', 3);
-      Set<Integer> visited = new HashSet<Integer>();
-      Set<Integer> added = new HashSet<Integer>();
-      int hash = 0;
-
-      for (int i = 0; i < len; i++)
-      {
-        if (i < 9)
-        {
-          // each ACGT fit 2 bits, so left shift 2
-          hash = (hash << 2) + map.get(s.charAt(i));
-        }
-        else
-        {
-          hash = (hash << 2) + map.get(s.charAt(i));
-          // make length of hash to be 20
-          hash = hash & (1 << 20) - 1;
-
-          if (visited.contains(hash) && !added.contains(hash))
-          {
-            result.add(s.substring(i - 9, i + 1));
-            added.add(hash); // track added
-          }
-          else
-          {
-            visited.add(hash);
-          }
-        }
-      }
-
-      return result;
-    }
-  }
-
diff --git a/187.repeated-dna-sequences.96611711.Accepted.leetcode.java b/187.repeated-dna-sequences.96611711.Accepted.leetcode.java
deleted file mode 100644
index 47094670..00000000
--- ./187.repeated-dna-sequences.96611711.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public List<String> findRepeatedDnaSequences(String s)
-    {
-        List<String> res = new LinkedList<String>();
-        HashMap<String, Integer> map = new HashMap<String, Integer>();
-
-        for (int index = 10; index <= s.length(); index++)
-        {
-            // 从第10位开始作为结尾，位移一位，比较一次子串
-            String substr = s.substring(index - 10, index);
-
-            if (map.containsKey(substr))
-            {
-                // 如果是第一次遇到，则加入结果
-                if (map.get(substr) == 1)
-                {
-                    res.add(substr);
-                }
-
-                // 标记为已经遇到过一次了
-                map.put(substr, 2);
-            }
-            else
-            {
-                // 如果不存在，则加入表中
-                map.put(substr, 1);
-            }
-        }
-
-        return res;
-    }
-}
diff --git a/187.repeated-dna-sequences.96612457.Accepted.leetcode.java b/187.repeated-dna-sequences.96612457.Accepted.leetcode.java
deleted file mode 100644
index 227fa2ff..00000000
--- ./187.repeated-dna-sequences.96612457.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution
-{
-    public List<String> findRepeatedDnaSequences(String s)
-    {
-        Set<String> res = new HashSet<String>();
-        Set<String> set = new HashSet<String>();
-
-        for (int index = 10; index <= s.length(); index++)
-        {
-            String substr = s.substring(index - 10, index);
-
-            if (set.contains(substr))
-            {
-                res.add(substr);
-            }
-            else
-            {
-                set.add(substr);
-            }
-        }
-
-        return new ArrayList(res);
-    }
-}
diff --git a/188.best-time-to-buy-and-sell-stock-iv.30849445.Accepted.leetcode.java b/188.best-time-to-buy-and-sell-stock-iv.30849445.Accepted.leetcode.java
deleted file mode 100644
index 56be591f..00000000
--- ./188.best-time-to-buy-and-sell-stock-iv.30849445.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution {
-    public int maxProfit(int k, int[] prices) {
-	if (prices.length < 2 || k <= 0)
-		return 0;
- 
-	//pass leetcode online judge (can be ignored)
-	if (k == 1000000000)
-		return 1648961;
- 
-	int[] local = new int[k + 1];
-	int[] global = new int[k + 1];
- 
-	for (int i = 0; i < prices.length - 1; i++) {
-		int diff = prices[i + 1] - prices[i];
-		for (int j = k; j >= 1; j--) {
-			local[j] = Math.max(global[j - 1] + Math.max(diff, 0), local[j] + diff);
-			global[j] = Math.max(local[j], global[j]);
-		}
-	}
- 
-	return global[k];
-}
-}
diff --git a/188.best-time-to-buy-and-sell-stock-iv.31994815.Accepted.leetcode.java b/188.best-time-to-buy-and-sell-stock-iv.31994815.Accepted.leetcode.java
deleted file mode 100644
index b1a787b0..00000000
--- ./188.best-time-to-buy-and-sell-stock-iv.31994815.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-  public class Solution
-  {
-    public int maxProfit(int k, int[] prices)
-    {
-      if (prices.length < 2) { return 0; }
-
-      if (k >= prices.length) { return maxProfit2(prices); }
-
-      int[] local = new int[k + 1];
-      int[] global = new int[k + 1];
-
-      for (int i = 1; i < prices.length ; i++)
-      {
-        int diff = prices[i] - prices[i - 1];
-
-        for (int j = k; j > 0; j--)
-        {
-          local[j] = Math.max(global[j - 1] + Math.max(diff, 0), local[j] + diff);
-          global[j] = Math.max(global[j], local[j]);
-        }
-      }
-
-      return global[k];
-    }
-
-
-    public int maxProfit2(int[] prices)
-    {
-      int maxProfit = 0;
-
-      for (int i = 1; i < prices.length; i++)
-      {
-        if (prices[i] > prices[i - 1])
-        {
-          maxProfit += prices[i] - prices[i - 1];
-        }
-      }
-
-      return maxProfit;
-    }
-  }
-
diff --git a/188.best-time-to-buy-and-sell-stock-iv.31994909.Accepted.leetcode.java b/188.best-time-to-buy-and-sell-stock-iv.31994909.Accepted.leetcode.java
deleted file mode 100644
index c5bc60ae..00000000
--- ./188.best-time-to-buy-and-sell-stock-iv.31994909.Accepted.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-  public class Solution
-  {
-    public int maxProfit(int k, int[] prices)
-    {
-      if (prices.length < 2)
-      {
-        return 0;
-      }
-
-      if (k >= prices.length / 2)
-      {
-        return maxProfit2(prices);
-      }
-
-      int[] local = new int[k + 1];
-      int[] global = new int[k + 1];
-
-      for (int i = 1; i < prices.length; i++)
-      {
-        int diff = prices[i] - prices[i - 1];
-
-        for (int j = k; j > 0; j--)
-        {
-          local[j] =
-            Math.max(global[j - 1] + Math.max(diff, 0), local[j] + diff);
-          global[j] = Math.max(global[j], local[j]);
-        }
-      }
-
-      return global[k];
-    }
-
-    public int maxProfit2(int[] prices)
-    {
-      int maxProfit = 0;
-
-      for (int i = 1; i < prices.length; i++)
-      {
-        if (prices[i] > prices[i - 1])
-        {
-          maxProfit += prices[i] - prices[i - 1];
-        }
-      }
-
-      return maxProfit;
-    }
-  }
-
diff --git a/188.best-time-to-buy-and-sell-stock-iv.37355209.Wrong-Answer.leetcode.java b/188.best-time-to-buy-and-sell-stock-iv.37355209.Wrong-Answer.leetcode.java
deleted file mode 100644
index cbb42240..00000000
--- ./188.best-time-to-buy-and-sell-stock-iv.37355209.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-  public class Solution
-  {
-    public int maxProfit(int k, int[] prices)
-    {
-      if (prices.length < 2)
-      {
-        return 0;
-      }
-
-      if (k >= prices.length / 2)
-      {
-        return maxProfit2(prices);
-      }
-
-      int[] local = new int[k + 1];
-      int[] global = new int[k + 1];
-
-      for (int i = 1; i < prices.length; i++)
-      {
-        int diff = prices[i] - prices[i - 1];
-
-        for (int j = k; j > 0; j--)
-        {
-          global[j] = Math.max(global[j], local[j]);
-          local[j] =
-            Math.max(global[j - 1] + Math.max(diff, 0), local[j] + diff);
-        }
-      }
-
-      return global[k];
-    }
-
-    public int maxProfit2(int[] prices)
-    {
-      int maxProfit = 0;
-
-      for (int i = 1; i < prices.length; i++)
-      {
-        if (prices[i] > prices[i - 1])
-        {
-          maxProfit += prices[i] - prices[i - 1];
-        }
-      }
-
-      return maxProfit;
-    }
-  }
-
diff --git a/189.rotate-array.164938042.Time-Limit-Exceeded.leetcode.java b/189.rotate-array.164938042.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 1f2e9a2f..00000000
--- ./189.rotate-array.164938042.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public void rotate(int[] nums, int k)
-    {
-        k %= nums.length;
-
-        for (int i = 0; i < k; i++)
-        {
-            for (int j = nums.length - 1; j > 0; j--)
-            {
-                int temp = nums[j];
-                nums[j] = nums[j - 1];
-                nums[j - 1] = temp;
-            }
-
-            System.out.printf("nums --> %s\n", nums);
-        }
-    }
-}
-
diff --git a/189.rotate-array.164938162.Time-Limit-Exceeded.leetcode.java b/189.rotate-array.164938162.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 388206b3..00000000
--- ./189.rotate-array.164938162.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public void rotate(int[] nums, int k)
-    {
-        k %= nums.length;
-
-        for (int i = 0; i < k; i++)
-        {
-            for (int j = nums.length - 1; j > 0; j--)
-            {
-                int temp = nums[j];
-                nums[j] = nums[j - 1];
-                nums[j - 1] = temp;
-            }
-
-            System.out.printf("nums --> %s\n", Arrays.toString(nums));
-        }
-    }
-}
-
diff --git a/19.remove-nth-node-from-end-of-list.165039148.Accepted.leetcode.java b/19.remove-nth-node-from-end-of-list.165039148.Accepted.leetcode.java
deleted file mode 100644
index 45eca269..00000000
--- ./19.remove-nth-node-from-end-of-list.165039148.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public ListNode removeNthFromEnd(ListNode head, int n)
-    {
-        ListNode fast = head;
-        ListNode slow = head;
-
-        while (n > 0)
-        {
-            fast = fast.next;
-            n--;
-        }
-
-        if (fast == null)
-        {
-            return head.next;
-        }
-
-        while (fast.next != null)
-        {
-            slow = slow.next;
-            fast = fast.next;
-        }
-
-        slow.next = slow.next.next;
-        return head;
-    }
-}
-
diff --git a/190.reverse-bits.27416439.Accepted.leetcode.java b/190.reverse-bits.27416439.Accepted.leetcode.java
deleted file mode 100644
index dc3b5674..00000000
--- ./190.reverse-bits.27416439.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-  public class Solution
-  {
-    public int reverseBits(int n)
-    {
-      String nStr = Long.toBinaryString(n);
-      char[] nChar = nStr.toCharArray();
-      int len = nStr.length();
-      long x = 0;
-      int j = len - 1;
-
-      for (int i = 31; i > -1; i--)
-      {
-        if (j > -1)
-        {
-          x = x * 2 + (nChar[j] == '1' ? 1 : 0);
-          j--;
-        }
-        else
-        {
-          x = x * 2;
-        }
-      }
-
-      return (int)x;
-    }
-  }
-
diff --git a/190.reverse-bits.32057127.Accepted.leetcode.java b/190.reverse-bits.32057127.Accepted.leetcode.java
deleted file mode 100644
index db971bab..00000000
--- ./190.reverse-bits.32057127.Accepted.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-  public class Solution
-  {
-    public int reverseBits(int n)
-    {
-      int res = 0;
-
-      for (int i = 0; i < 32; i++)
-      {
-        int bit = (n >> i) & 1;
-        res |= bit << (31 - i);
-      }
-
-      return res;
-    }
-  }
-
diff --git a/190.reverse-bits.32058400.Accepted.leetcode.java b/190.reverse-bits.32058400.Accepted.leetcode.java
deleted file mode 100644
index 15f28ab8..00000000
--- ./190.reverse-bits.32058400.Accepted.leetcode.java
+++ /dev/null
@@ -1,15 +0,0 @@
-  public class Solution
-  {
-    public int reverseBits(int n)
-    {
-      int res = 0;
-
-      for (int i = 0; i < 32; i++)
-      {
-        res |= ((n >> i) & 1) << (31 - i);
-      }
-
-      return res;
-    }
-  }
-
diff --git a/191.number-of-1-bits.26070119.Wrong-Answer.leetcode.java b/191.number-of-1-bits.26070119.Wrong-Answer.leetcode.java
deleted file mode 100644
index 36c0c096..00000000
--- ./191.number-of-1-bits.26070119.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,15 +0,0 @@
-public class Solution {
-    // you need to treat n as an unsigned value
-    public int hammingWeight(int n) {
-        int count=0;
-        while(n!=0) 
-        {
-            if(n%2 !=0)
-            {
-                count++;
-            }
-            n/=2;    
-        }
-        return count;
-    }
-}
diff --git a/191.number-of-1-bits.26070316.Wrong-Answer.leetcode.java b/191.number-of-1-bits.26070316.Wrong-Answer.leetcode.java
deleted file mode 100644
index edaa23b7..00000000
--- ./191.number-of-1-bits.26070316.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,15 +0,0 @@
-public class Solution {
-    // you need to treat n as an unsigned value
-    public int hammingWeight(int n) {
-        int count=0;
-        while(n!=0) 
-        {
-            if(n%2 !=0)
-            {
-                count++;
-            }
-            n=n/2;    
-        }
-        return count;
-    }
-}
diff --git a/191.number-of-1-bits.26073910.Accepted.leetcode.java b/191.number-of-1-bits.26073910.Accepted.leetcode.java
deleted file mode 100644
index 3ce2b312..00000000
--- ./191.number-of-1-bits.26073910.Accepted.leetcode.java
+++ /dev/null
@@ -1,17 +0,0 @@
-  public class Solution
-  {
-    // you need to treat n as an unsigned value
-    public int hammingWeight(int n)
-    {
-      int re = 0;
-
-      while (n != 0)
-      {
-        n &= (n - 1);
-        re++;
-      }
-
-      return re;
-    }
-  }
-
diff --git a/191.number-of-1-bits.26074398.Accepted.leetcode.java b/191.number-of-1-bits.26074398.Accepted.leetcode.java
deleted file mode 100644
index 3a667638..00000000
--- ./191.number-of-1-bits.26074398.Accepted.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-  public class Solution
-  {
-    public int hammingWeight(int n)
-    {
-      int count = 0;
-
-      while (n != 0)
-      {
-        n &= (n - 1);
-        count++;
-      }
-
-      return count;
-    }
-  }
-
diff --git a/199.binary-tree-right-side-view.165119781.Runtime-Error.leetcode.java b/199.binary-tree-right-side-view.165119781.Runtime-Error.leetcode.java
deleted file mode 100644
index c564068b..00000000
--- ./199.binary-tree-right-side-view.165119781.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public List<Integer> rightSideView(TreeNode root)
-    {
-        Map<Integer, Integer> treeMap = new TreeMap<Integer, Integer>();
-        inorderTraversal(treeMap, root, 0);
-        return (List<Integer>) treeMap.values();
-    }
-
-    public void inorderTraversal(Map<Integer, Integer> treeMap, TreeNode root, int level)
-    {
-        if (root == null)
-        {
-            return;
-        }
-
-        inorderTraversal(treeMap, root.left, level + 1);
-        treeMap.put(level, root.val);
-        inorderTraversal(treeMap, root.right, level + 1);
-    }
-}
-
diff --git a/199.binary-tree-right-side-view.165120022.Accepted.leetcode.java b/199.binary-tree-right-side-view.165120022.Accepted.leetcode.java
deleted file mode 100644
index c00604e3..00000000
--- ./199.binary-tree-right-side-view.165120022.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public List<Integer> rightSideView(TreeNode root)
-    {
-        Map<Integer, Integer> treeMap = new TreeMap<Integer, Integer>();
-        inorderTraversal(treeMap, root, 0);
-        return new ArrayList<Integer>(treeMap.values());
-    }
-
-    public void inorderTraversal(Map<Integer, Integer> treeMap, TreeNode root, int level)
-    {
-        if (root == null)
-        {
-            return;
-        }
-
-        inorderTraversal(treeMap, root.left, level + 1);
-        treeMap.put(level, root.val);
-        inorderTraversal(treeMap, root.right, level + 1);
-    }
-}
-
diff --git a/199.binary-tree-right-side-view.165120190.Wrong-Answer.leetcode.java b/199.binary-tree-right-side-view.165120190.Wrong-Answer.leetcode.java
deleted file mode 100644
index 8876b012..00000000
--- ./199.binary-tree-right-side-view.165120190.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public List<Integer> rightSideView(TreeNode root)
-    {
-        if (root == null)
-        {
-            return null;
-        }
-
-        Map<Integer, Integer> treeMap = new TreeMap<Integer, Integer>();
-        traversal(treeMap, root, 0);
-        return new ArrayList<Integer>(treeMap.values());
-    }
-
-    public void traversal(Map<Integer, Integer> treeMap, TreeNode root, int level)
-    {
-        if (root == null)
-        {
-            return;
-        }
-
-        traversal(treeMap, root.left, level + 1);
-        treeMap.put(level, root.val);
-        traversal(treeMap, root.right, level + 1);
-    }
-}
-
diff --git a/199.binary-tree-right-side-view.165120215.Accepted.leetcode.java b/199.binary-tree-right-side-view.165120215.Accepted.leetcode.java
deleted file mode 100644
index 13da182f..00000000
--- ./199.binary-tree-right-side-view.165120215.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public List<Integer> rightSideView(TreeNode root)
-    {
-        Map<Integer, Integer> treeMap = new TreeMap<Integer, Integer>();
-        traversal(treeMap, root, 0);
-        return new ArrayList<Integer>(treeMap.values());
-    }
-
-    public void traversal(Map<Integer, Integer> treeMap, TreeNode root, int level)
-    {
-        if (root == null)
-        {
-            return;
-        }
-
-        traversal(treeMap, root.left, level + 1);
-        treeMap.put(level, root.val);
-        traversal(treeMap, root.right, level + 1);
-    }
-}
-
diff --git a/2.add-two-numbers.165306136.Wrong-Answer.leetcode.java b/2.add-two-numbers.165306136.Wrong-Answer.leetcode.java
deleted file mode 100644
index 59e0f55d..00000000
--- ./2.add-two-numbers.165306136.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public ListNode addTwoNumbers(ListNode l1, ListNode l2)
-    {
-        int carry = 0;
-        ListNode head = new ListNode(-1);
-        ListNode current = head;
-
-        while (l1 != null | l2 != null)
-        {
-            if (l1 != null)
-            {
-                carry += l1.val;
-                l1 = l1.next;
-            }
-
-            if (l2 != null)
-            {
-                carry += l2.val;
-                l2 = l2.next;
-            }
-
-            System.out.printf("carry --> %s\n", carry);
-            current.next = new ListNode(carry % 10);
-            current = current.next;
-            System.out.printf("current --> %s\n", current.val);
-            carry /= 10;
-        }
-
-        return head.next;
-    }
-}
-
diff --git a/2.add-two-numbers.165306234.Wrong-Answer.leetcode.java b/2.add-two-numbers.165306234.Wrong-Answer.leetcode.java
deleted file mode 100644
index 6cac2ad3..00000000
--- ./2.add-two-numbers.165306234.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public ListNode addTwoNumbers(ListNode l1, ListNode l2)
-    {
-        int carry = 0;
-        ListNode head = new ListNode(-1);
-        ListNode current = head;
-
-        while (l1 != null || l2 != null)
-        {
-            if (l1 != null)
-            {
-                carry += l1.val;
-                l1 = l1.next;
-            }
-
-            if (l2 != null)
-            {
-                carry += l2.val;
-                l2 = l2.next;
-            }
-
-            System.out.printf("carry --> %s\n", carry);
-            current.next = new ListNode(carry % 10);
-            current = current.next;
-            System.out.printf("current --> %s\n", current.val);
-            carry /= 10;
-        }
-
-        return head.next;
-    }
-}
-
diff --git a/2.add-two-numbers.165306271.Wrong-Answer.leetcode.java b/2.add-two-numbers.165306271.Wrong-Answer.leetcode.java
deleted file mode 100644
index 12134654..00000000
--- ./2.add-two-numbers.165306271.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public ListNode addTwoNumbers(ListNode l1, ListNode l2)
-    {
-        int carry = 0;
-        ListNode head = new ListNode(-1);
-        ListNode current = head;
-
-        while (l1 != null || l2 != null)
-        {
-            if (l1 != null)
-            {
-                carry += l1.val;
-                l1 = l1.next;
-            }
-
-            if (l2 != null)
-            {
-                carry += l2.val;
-                l2 = l2.next;
-            }
-
-            current.next = new ListNode(carry % 10);
-            current = current.next;
-            System.out.printf("current --> %s\n", current.val);
-            carry /= 10;
-            System.out.printf("carry --> %s\n", carry);
-        }
-
-        return head.next;
-    }
-}
-
diff --git a/2.add-two-numbers.165306379.Accepted.leetcode.java b/2.add-two-numbers.165306379.Accepted.leetcode.java
deleted file mode 100644
index ec580b45..00000000
--- ./2.add-two-numbers.165306379.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public ListNode addTwoNumbers(ListNode l1, ListNode l2)
-    {
-        int carry = 0;
-        ListNode head = new ListNode(-1);
-        ListNode current = head;
-
-        while (l1 != null || l2 != null || carry != 0)
-        {
-            if (l1 != null)
-            {
-                carry += l1.val;
-                l1 = l1.next;
-            }
-
-            if (l2 != null)
-            {
-                carry += l2.val;
-                l2 = l2.next;
-            }
-
-            current.next = new ListNode(carry % 10);
-            current = current.next;
-            System.out.printf("current --> %s\n", current.val);
-            carry /= 10;
-            System.out.printf("carry --> %s\n", carry);
-        }
-
-        return head.next;
-    }
-}
-
diff --git a/2.add-two-numbers.165306438.Accepted.leetcode.java b/2.add-two-numbers.165306438.Accepted.leetcode.java
deleted file mode 100644
index bc4f47e6..00000000
--- ./2.add-two-numbers.165306438.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public ListNode addTwoNumbers(ListNode l1, ListNode l2)
-    {
-        int carry = 0;
-        ListNode head = new ListNode(-1);
-        ListNode current = head;
-
-        while (l1 != null || l2 != null || carry != 0)
-        {
-            if (l1 != null)
-            {
-                carry += l1.val;
-                l1 = l1.next;
-            }
-
-            if (l2 != null)
-            {
-                carry += l2.val;
-                l2 = l2.next;
-            }
-
-            current.next = new ListNode(carry % 10);
-            current = current.next;
-            carry /= 10;
-        }
-
-        return head.next;
-    }
-}
-
diff --git a/20.valid-parentheses.165308983.Runtime-Error.leetcode.java b/20.valid-parentheses.165308983.Runtime-Error.leetcode.java
deleted file mode 100644
index f4830a41..00000000
--- ./20.valid-parentheses.165308983.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public boolean isValid(String s)
-    {
-        char[] charArray = s.toCharArray();
-        HashMap<Character, Character> map = new HashMap<Character, Character>();
-        map.put('(', ')');
-        map.put('[', ']');
-        map.put('{', '}');
-        Stack<Character> stack = new Stack<Character>();
-
-        for (char c : charArray)
-        {
-            if (map.containsKey(c))
-            {
-                stack.push(c);
-            }
-            else
-            {
-                if (map.get(stack.pop()) != c)
-                {
-                    return false;
-                }
-            }
-        }
-
-        return stack.isEmpty();
-    }
-}
-
diff --git a/20.valid-parentheses.165313788.Accepted.leetcode.java b/20.valid-parentheses.165313788.Accepted.leetcode.java
deleted file mode 100644
index 7ee4656a..00000000
--- ./20.valid-parentheses.165313788.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public boolean isValid(String s)
-    {
-        char[] charArray = s.toCharArray();
-        HashMap<Character, Character> map = new HashMap<Character, Character>();
-        map.put('(', ')');
-        map.put('[', ']');
-        map.put('{', '}');
-        Stack<Character> stack = new Stack<Character>();
-
-        for (char c : charArray)
-        {
-            if (map.containsKey(c))
-            {
-                stack.push(c);
-            }
-            else
-            {
-                if (stack.isEmpty() || map.get(stack.pop()) != c)
-                {
-                    return false;
-                }
-            }
-        }
-
-        return stack.isEmpty();
-    }
-}
-
diff --git a/20.valid-parentheses.165313889.Accepted.leetcode.java b/20.valid-parentheses.165313889.Accepted.leetcode.java
deleted file mode 100644
index 92e9e169..00000000
--- ./20.valid-parentheses.165313889.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public boolean isValid(String s)
-    {
-        char[] charArray = s.toCharArray();
-        HashMap<Character, Character> map = new HashMap<Character, Character>();
-        map.put('(', ')');
-        map.put('[', ']');
-        map.put('{', '}');
-        Stack<Character> stack = new Stack<Character>();
-
-        for (char c : charArray)
-        {
-            if (map.containsKey(c))
-            {
-                stack.push(c);
-            }
-            else if (stack.isEmpty() || map.get(stack.pop()) != c)
-            {
-                return false;
-            }
-        }
-
-        return stack.isEmpty();
-    }
-}
-
diff --git a/20.valid-parentheses.86818237.Accepted.leetcode.java b/20.valid-parentheses.86818237.Accepted.leetcode.java
deleted file mode 100644
index 7be60c82..00000000
--- ./20.valid-parentheses.86818237.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public boolean isValid(String s)
-    {
-        char[] charArray = s.toCharArray();
-        HashMap<Character, Character> map = new HashMap<Character, Character>();
-        map.put('(', ')');
-        map.put('[', ']');
-        map.put('{', '}');
-        Stack<Character> stack = new Stack<Character>();
-
-        for (char c : charArray)
-        {
-            if (map.containsKey(c))
-            {
-                stack.push(c);
-            }
-            else
-            {
-                if (stack.isEmpty())
-                {
-                    return false;
-                }
-                else
-                {
-                    if (c != map.get(stack.pop()))
-                    {
-                        return false;                        
-                    }
-                }
-            }
-        }
-        
-        return stack.isEmpty();
-    }
-}
diff --git a/20.valid-parentheses.86818323.Accepted.leetcode.java b/20.valid-parentheses.86818323.Accepted.leetcode.java
deleted file mode 100644
index aea80553..00000000
--- ./20.valid-parentheses.86818323.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public boolean isValid(String s)
-    {
-        char[] charArray = s.toCharArray();
-        HashMap<Character, Character> map = new HashMap<Character, Character>();
-        map.put('(', ')');
-        map.put('[', ']');
-        map.put('{', '}');
-        Stack<Character> stack = new Stack<Character>();
-
-        for (char c : charArray)
-        {
-            if (map.containsKey(c))
-            {
-                stack.push(c);
-            }
-            else
-            {
-                if (stack.isEmpty() || c != map.get(stack.pop()))
-                {
-                    return false;                        
-                }
-            }
-        }
-        
-        return stack.isEmpty();
-    }
-}
diff --git a/20.valid-parentheses.96042316.Runtime-Error.leetcode.java b/20.valid-parentheses.96042316.Runtime-Error.leetcode.java
deleted file mode 100644
index f8806102..00000000
--- ./20.valid-parentheses.96042316.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public boolean isValid(String s)
-    {
-        char[] charArray = s.toCharArray();
-        HashMap<Character, Character> map = new HashMap<Character, Character>();
-        map.put('(', ')');
-        map.put('[', ']');
-        map.put('{', '}');
-        Stack<Character> stack = new Stack<Character>();
-
-        for (char c : charArray)
-        {
-            if (map.containsKey(c))
-            {
-                stack.push(c);
-            }
-            else
-            {
-                if (map.isEmpty() || map.get(stack.pop()) != c)
-                {
-                    return false;
-                }
-            }
-        }
-
-        return stack.isEmpty();
-    }
-}
diff --git a/20.valid-parentheses.96048880.Accepted.leetcode.java b/20.valid-parentheses.96048880.Accepted.leetcode.java
deleted file mode 100644
index 6c43afba..00000000
--- ./20.valid-parentheses.96048880.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public boolean isValid(String s)
-    {
-        char[] charArray = s.toCharArray();
-        HashMap<Character, Character> map = new HashMap<Character, Character>();
-        map.put('(', ')');
-        map.put('[', ']');
-        map.put('{', '}');
-        Stack<Character> stack = new Stack<Character>();
-
-        for (char c : charArray)
-        {
-            if (map.containsKey(c))
-            {
-                stack.push(c);
-            }
-            else
-            {
-                if (stack.isEmpty() || map.get(stack.pop()) != c)
-                {
-                    return false;
-                }
-            }
-        }
-
-        return stack.isEmpty();
-    }
-}
diff --git a/200.number-of-islands.102835606.Accepted.leetcode.java b/200.number-of-islands.102835606.Accepted.leetcode.java
deleted file mode 100644
index 78577bf7..00000000
--- ./200.number-of-islands.102835606.Accepted.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-public class Solution
-{
-    private int m, n;
-    public int numIslands(char[][] grid)
-    {
-        if (grid == null || grid.length == 0)
-        {
-            return 0;
-        }
-        
-        m = grid.length;
-        n = grid[0].length;
-        int result = 0;
-
-        for (int i = 0; i < m; i++)
-        {
-            for (int j = 0; j < n; j++)
-            {
-                if (grid[i][j] != '1')
-                {
-                    continue;
-                }
-
-                result++ ;
-                dfs(grid, i, j);
-            }
-        }
-
-        return result;
-    }
-
-    public void dfs(char[][] grid, int i, int j)
-    {
-        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == '0')
-        {
-            return;
-        }
-
-        grid[i][j] = '0';
-        dfs(grid, i - 1, j);
-        dfs(grid, i + 1, j);
-        dfs(grid, i, j - 1);
-        dfs(grid, i, j + 1);
-    }
-}
diff --git a/200.number-of-islands.102835809.Accepted.leetcode.java b/200.number-of-islands.102835809.Accepted.leetcode.java
deleted file mode 100644
index 75cb4daa..00000000
--- ./200.number-of-islands.102835809.Accepted.leetcode.java
+++ /dev/null
@@ -1,46 +0,0 @@
-public class Solution
-{
-    private int m, n;
-    
-    public int numIslands(char[][] grid)
-    {
-        if (grid == null || grid.length == 0)
-        {
-            return 0;
-        }
-        
-        m = grid.length;
-        n = grid[0].length;
-        int result = 0;
-
-        for (int i = 0; i < m; i++)
-        {
-            for (int j = 0; j < n; j++)
-            {
-                if (grid[i][j] != '1')
-                {
-                    continue;
-                }
-
-                result++ ;
-                dfs(grid, i, j);
-            }
-        }
-
-        return result;
-    }
-
-    public void dfs(char[][] grid, int i, int j)
-    {
-        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == '0')
-        {
-            return;
-        }
-
-        grid[i][j] = '0';
-        dfs(grid, i - 1, j);
-        dfs(grid, i + 1, j);
-        dfs(grid, i, j - 1);
-        dfs(grid, i, j + 1);
-    }
-}
diff --git a/200.number-of-islands.102835982.Accepted.leetcode.java b/200.number-of-islands.102835982.Accepted.leetcode.java
deleted file mode 100644
index 3fb53bff..00000000
--- ./200.number-of-islands.102835982.Accepted.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-public class Solution
-{
-    private int m, n;
-    public int numIslands(char[][] grid)
-    {
-        if(grid == null || grid.length == 0)
-        {
-            return 0;    
-        }
-        
-        m = grid.length;
-        n = grid[0].length;
-        int result = 0;
-        
-        for (int i = 0; i < m; i++)
-        {
-            for (int j = 0; j < n; j++)
-            {
-                if (grid[i][j] == '0')
-                {
-                    continue;
-                }
-                
-                result++;
-                dfs(grid, i, j);
-            }
-        }
-        
-        return result;
-    }
-    
-    public void dfs(char[][] grid, int i, int j)
-    {
-        if(i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == '0')
-        {
-            return;    
-        }
-        
-        grid[i][j] = '0';
-        dfs(grid, i - 1, j);
-        dfs(grid, i + 1, j);
-        dfs(grid, i, j - 1);
-        dfs(grid, i, j + 1);
-    }
-}
diff --git a/200.number-of-islands.102836490.Accepted.leetcode.java b/200.number-of-islands.102836490.Accepted.leetcode.java
deleted file mode 100644
index ad3fcb5a..00000000
--- ./200.number-of-islands.102836490.Accepted.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-public class Solution
-{
-    private int m, n;
-    public int numIslands(char[][] grid)
-    {
-        if(grid == null || grid.length == 0)
-        {
-            return 0;    
-        }
-        
-        m = grid.length;
-        n = grid[0].length;
-        int result = 0;
-
-        for (int i = 0; i < m; i++)
-        {
-            for (int j = 0; j < n; j++)
-            {
-                if (grid[i][j] != '1')
-                {
-                    continue;
-                }
-
-                result++ ;
-                dfs(grid, i, j);
-            }
-        }
-
-        return result;
-    }
-    
-    public void dfs(char[][] grid, int i, int j)
-    {
-        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == '0')
-        {
-            return;
-        }
-        
-        grid[i][j] = '0';
-        dfs(grid, i - 1, j);
-        dfs(grid, i + 1, j);
-        dfs(grid, i, j - 1);
-        dfs(grid, i, j + 1);
-    }
-}
diff --git a/200.number-of-islands.102836539.Accepted.leetcode.java b/200.number-of-islands.102836539.Accepted.leetcode.java
deleted file mode 100644
index ada184f8..00000000
--- ./200.number-of-islands.102836539.Accepted.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-public class Solution
-{
-    private int m, n;
-    public int numIslands(char[][] grid)
-    {
-        if(grid == null || grid.length == 0)
-        {
-            return 0;    
-        }
-        
-        m = grid.length;
-        n = grid[0].length;
-        int result = 0;
-
-        for (int i = 0; i < m; i++)
-        {
-            for (int j = 0; j < n; j++)
-            {
-                if (grid[i][j] == '1')
-                {
-                    result++;
-                }
-                
-                dfs(grid, i, j);
-            }
-        }
-
-        return result;
-    }
-    
-    public void dfs(char[][] grid, int i, int j)
-    {
-        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == '0')
-        {
-            return;
-        }
-        
-        grid[i][j] = '0';
-        dfs(grid, i - 1, j);
-        dfs(grid, i + 1, j);
-        dfs(grid, i, j - 1);
-        dfs(grid, i, j + 1);
-    }
-}
diff --git a/200.number-of-islands.165322905.Runtime-Error.leetcode.java b/200.number-of-islands.165322905.Runtime-Error.leetcode.java
deleted file mode 100644
index bf8e61c7..00000000
--- ./200.number-of-islands.165322905.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution
-{
-    private int m, n;
-    public int numIslands(char[][] grid)
-    {
-        m = grid.length;
-        n = grid[0].length;
-        int result = 0;
-
-        for (int i = 0; i < m; i++)
-        {
-            for (int j = 0; j < n; j++)
-            {
-                if (grid[i][j] != '1')
-                {
-                    continue;
-                }
-
-                result++;
-                dfs(grid, i, j);
-            }
-        }
-
-        return result;
-    }
-
-    public void dfs(char[][] grid, int i, int j)
-    {
-        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == '0')
-        {
-            return;
-        }
-
-        grid[i][j] = '0';
-        dfs(grid, i - 1, j);
-        dfs(grid, i + 1, j);
-        dfs(grid, i, j - 1);
-        dfs(grid, i, j + 1);
-    }
-}
-
diff --git a/200.number-of-islands.165323063.Accepted.leetcode.java b/200.number-of-islands.165323063.Accepted.leetcode.java
deleted file mode 100644
index 7a431784..00000000
--- ./200.number-of-islands.165323063.Accepted.leetcode.java
+++ /dev/null
@@ -1,46 +0,0 @@
-public class Solution
-{
-    private int m, n;
-    public int numIslands(char[][] grid)
-    {
-        if (grid == null || grid.length == 0)
-        {
-            return 0;
-        }
-
-        m = grid.length;
-        n = grid[0].length;
-        int result = 0;
-
-        for (int i = 0; i < m; i++)
-        {
-            for (int j = 0; j < n; j++)
-            {
-                if (grid[i][j] != '1')
-                {
-                    continue;
-                }
-
-                result++;
-                dfs(grid, i, j);
-            }
-        }
-
-        return result;
-    }
-
-    public void dfs(char[][] grid, int i, int j)
-    {
-        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == '0')
-        {
-            return;
-        }
-
-        grid[i][j] = '0';
-        dfs(grid, i - 1, j);
-        dfs(grid, i + 1, j);
-        dfs(grid, i, j - 1);
-        dfs(grid, i, j + 1);
-    }
-}
-
diff --git a/201.bitwise-and-of-numbers-range.30848407.Accepted.leetcode.java b/201.bitwise-and-of-numbers-range.30848407.Accepted.leetcode.java
deleted file mode 100644
index 2d3de3ac..00000000
--- ./201.bitwise-and-of-numbers-range.30848407.Accepted.leetcode.java
+++ /dev/null
@@ -1,12 +0,0 @@
-public class Solution {
-    public int rangeBitwiseAnd(int m, int n) {
-        int i = 0;
-        while (m != n) {
-            m >>= 1;
-            n >>= 1;
-            ++i;
-        }
-        return (m << i);
-    
-    }
-}
diff --git a/203.remove-linked-list-elements.165501954.Wrong-Answer.leetcode.java b/203.remove-linked-list-elements.165501954.Wrong-Answer.leetcode.java
deleted file mode 100644
index 63a8d014..00000000
--- ./203.remove-linked-list-elements.165501954.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public ListNode removeElements(ListNode head, int val)
-    {
-        ListNode dummy = new ListNode(0);
-        dummy.next = head;
-        ListNode p = dummy;
-
-        while (p != null)
-        {
-            if (p.next != null && p.next.val == val)
-            {
-                p.next = p.next.next;
-            }
-
-            p = p.next;
-            System.out.printf("p --> %s\n", p != null ? p.val : "null");
-        }
-
-        return dummy.next;
-    }
-}
-
diff --git a/203.remove-linked-list-elements.165502248.Wrong-Answer.leetcode.java b/203.remove-linked-list-elements.165502248.Wrong-Answer.leetcode.java
deleted file mode 100644
index 5ab9e06c..00000000
--- ./203.remove-linked-list-elements.165502248.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution
-{
-    public ListNode removeElements(ListNode head, int val)
-    {
-        ListNode dummy = new ListNode(0);
-        dummy.next = head;
-        ListNode p = dummy;
-
-        while (p != null)
-        {
-            if (p.next != null && p.next.val == val)
-            {
-                p.next = p.next.next;
-                System.out.printf("p.next --> %s\n", p.next != null ? p.next.val : "null");
-            }
-
-            p = p.next;
-            System.out.printf("p --> %s\n", p != null ? p.val : "null");
-        }
-
-        return dummy.next;
-    }
-}
-
diff --git a/203.remove-linked-list-elements.165502700.Wrong-Answer.leetcode.java b/203.remove-linked-list-elements.165502700.Wrong-Answer.leetcode.java
deleted file mode 100644
index 6a7b4c03..00000000
--- ./203.remove-linked-list-elements.165502700.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public ListNode removeElements(ListNode head, int val)
-    {
-        ListNode dummy = new ListNode(0);
-        dummy.next = head;
-        ListNode p = dummy;
-
-        while (p != null)
-        {
-            if (p.next != null && p.next.val == val)
-            {
-                System.out.printf("p.next.next --> %s\n", p.next.next != null ? p.next.next.val : "null");
-                p.next = p.next.next;
-                System.out.printf("p.next --> %s\n", p.next != null ? p.next.val : "null");
-            }
-
-            p = p.next;
-            System.out.printf("p --> %s\n", p != null ? p.val : "null");
-        }
-
-        return dummy.next;
-    }
-}
-
diff --git a/203.remove-linked-list-elements.165503946.Runtime-Error.leetcode.java b/203.remove-linked-list-elements.165503946.Runtime-Error.leetcode.java
deleted file mode 100644
index e6871f50..00000000
--- ./203.remove-linked-list-elements.165503946.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public ListNode removeElements(ListNode head, int val)
-    {
-        ListNode dummy = new ListNode(0);
-        dummy.next = head;
-        ListNode p = dummy;
-
-        while (p.next != null)
-        {
-            if (p.next.val == val)
-            {
-                System.out.printf("p.next.next --> %s\n", p.next.next != null ? p.next.next.val : "null");
-                p.next = p.next.next;
-                System.out.printf("p.next --> %s\n", p.next != null ? p.next.val : "null");
-            }
-
-            p = p.next;
-            System.out.printf("p --> %s\n", p != null ? p.val : "null");
-        }
-
-        return dummy.next;
-    }
-}
-
diff --git a/205.isomorphic-strings.165639483.Runtime-Error.leetcode.java b/205.isomorphic-strings.165639483.Runtime-Error.leetcode.java
deleted file mode 100644
index 238e7262..00000000
--- ./205.isomorphic-strings.165639483.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public boolean isIsomorphic(String s, String t)
-    {
-        HashMap<Character, Character> sourceMap = new HashMap<Character, Character>();
-        HashMap<Character, Character> targetMap = new HashMap<Character, Character>();
-
-        for (int i = 0; i < s.length(); i++)
-        {
-            Character source = sourceMap.get(t.charAt(i));
-            Character target = targetMap.get(s.charAt(i));
-
-            if (source != null && target != null)
-            {
-                sourceMap.put(t.charAt(i), s.charAt(i));
-                targetMap.put(s.charAt(i), t.charAt(i));
-            }
-            else if (target != t.charAt(i) || source != s.charAt(i))
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-}
-
diff --git a/205.isomorphic-strings.165639692.Runtime-Error.leetcode.java b/205.isomorphic-strings.165639692.Runtime-Error.leetcode.java
deleted file mode 100644
index dfbf85f6..00000000
--- ./205.isomorphic-strings.165639692.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public boolean isIsomorphic(String s, String t)
-    {
-        HashMap<Character, Character> sourceMap = new HashMap<Character, Character>();
-        HashMap<Character, Character> targetMap = new HashMap<Character, Character>();
-
-        for (int i = 0; i < s.length(); i++)
-        {
-            Character source = sourceMap.get(t.charAt(i));
-            Character target = targetMap.get(s.charAt(i));
-
-            if (source == null && target == null)
-            {
-                sourceMap.put(t.charAt(i), s.charAt(i));
-                targetMap.put(s.charAt(i), t.charAt(i));
-            }
-            else if (target != t.charAt(i) || source != s.charAt(i))
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-}
-
diff --git a/205.isomorphic-strings.165639869.Runtime-Error.leetcode.java b/205.isomorphic-strings.165639869.Runtime-Error.leetcode.java
deleted file mode 100644
index 40b045f8..00000000
--- ./205.isomorphic-strings.165639869.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public boolean isIsomorphic(String s, String t)
-    {
-        HashMap<Character, Character> sourceMap = new HashMap<Character, Character>();
-        HashMap<Character, Character> targetMap = new HashMap<Character, Character>();
-
-        for (int i = 0; i < s.length(); i++)
-        {
-            Character source = sourceMap.get(t.charAt(i));
-            Character target = targetMap.get(s.charAt(i));
-            System.out.printf("source --> %s\n", source);
-            System.out.printf("target --> %s\n", target);
-
-            if (source == null && target == null)
-            {
-                sourceMap.put(t.charAt(i), s.charAt(i));
-                targetMap.put(s.charAt(i), t.charAt(i));
-            }
-            else if (target != t.charAt(i) || source != s.charAt(i))
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-}
-
diff --git a/205.isomorphic-strings.165640189.Runtime-Error.leetcode.java b/205.isomorphic-strings.165640189.Runtime-Error.leetcode.java
deleted file mode 100644
index ba8f2e2f..00000000
--- ./205.isomorphic-strings.165640189.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public boolean isIsomorphic(String s, String t)
-    {
-        HashMap<Character, Character> sourceMap = new HashMap<Character, Character>();
-        HashMap<Character, Character> targetMap = new HashMap<Character, Character>();
-
-        for (int i = 0; i < s.length(); i++)
-        {
-            Character source = sourceMap.get(t.charAt(i));
-            Character target = targetMap.get(s.charAt(i));
-
-            if (source == null && target == null)
-            {
-                sourceMap.put(t.charAt(i), s.charAt(i));
-                targetMap.put(s.charAt(i), t.charAt(i));
-            }
-            else if (t.charAt(i) != target || s.charAt(i) != source)
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-}
-
diff --git a/208.implement-trie-prefix-tree.31072963.Accepted.leetcode.java b/208.implement-trie-prefix-tree.31072963.Accepted.leetcode.java
deleted file mode 100644
index 0fb01e3f..00000000
--- ./208.implement-trie-prefix-tree.31072963.Accepted.leetcode.java
+++ /dev/null
@@ -1,116 +0,0 @@
-class TrieNode
-{
-  char content;
-  boolean isEnd;
-  LinkedList<TrieNode> childNode;
-
-  public TrieNode()
-  {
-    this.content = ' ';
-    this.isEnd = false;
-    this.childNode = new LinkedList<TrieNode>();
-  }
-
-  public TrieNode(char content)
-  {
-    this.content = content;
-    this.isEnd = false;
-    this.childNode = new LinkedList<TrieNode>();
-  }
-
-  public TrieNode subNode(char content)
-  {
-    if (childNode != null)
-    {
-      for (TrieNode node : childNode)
-      {
-        if (node.content == content)
-        {
-          return node;
-        }
-      }
-    }
-
-    return null;
-  }
-
-}
-
-public class Trie
-{
-  private TrieNode root;
-
-  public Trie()
-  {
-    root = new TrieNode();
-  }
-
-  // Inserts a word into the trie.
-  public void insert(String word)
-  {
-    if (search(word) == true)
-    {
-      return;
-    }
-
-    TrieNode current = root;
-
-    for (int i = 0; i < word.length(); i++ )
-    {
-      char c = word.charAt(i);
-      TrieNode node = current.subNode(c);
-
-      if (node == null)
-      {
-        current.childNode.add(new TrieNode(c));
-        node = current.subNode(c);
-      }
-
-      current = node;
-    }
-
-    current.isEnd = true;
-  }
-
-  // Returns if the word is in the trie.
-  public boolean search(String word)
-  {
-    TrieNode current = root;
-
-    for (int i = 0; i < word.length(); i++ )
-    {
-      TrieNode node = current.subNode(word.charAt(i));
-
-      if (node == null)
-      {
-        return false;
-      }
-
-      current = node;
-    }
-
-    return current.isEnd;
-  }
-
-  // Returns if there is any word in the trie
-  // that starts with the given prefix.
-  public boolean startsWith(String prefix)
-  {
-    TrieNode current = root;
-
-    for (int i = 0; i < prefix.length(); i++ )
-    {
-      TrieNode node = current.subNode(prefix.charAt(i));
-
-      if (node == null)
-      {
-        return false;
-      }
-
-      current = node;
-    }
-
-    return true;
-  }
-}
-
diff --git a/208.implement-trie-prefix-tree.31141095.Accepted.leetcode.java b/208.implement-trie-prefix-tree.31141095.Accepted.leetcode.java
deleted file mode 100644
index 173bed57..00000000
--- ./208.implement-trie-prefix-tree.31141095.Accepted.leetcode.java
+++ /dev/null
@@ -1,99 +0,0 @@
-class TrieNode
-{
-  char content;
-  boolean isWord;
-  Map<Character, TrieNode> nexts;
-
-  public TrieNode()
-  {
-    this.content = ' ';
-    this.isWord = false;
-    this.nexts = new HashMap<Character, TrieNode>();
-  }
-
-  public TrieNode(char content)
-  {
-    this.content = content;
-    this.isWord = false;
-    this.nexts = new HashMap<Character, TrieNode>();
-  }
-}
-
-public class Trie
-{
-  private TrieNode root;
-
-  public Trie()
-  {
-    root = new TrieNode();
-  }
-
-  // Inserts a word into the trie.
-  public void insert(String word)
-  {
-    if (search(word) == true)
-    {
-      return;
-    }
-
-    TrieNode current = root;
-
-    for (int i = 0; i < word.length(); i++ )
-    {
-      char c = word.charAt(i);
-      TrieNode node = current.nexts.get(c);
-
-      if (node == null)
-      {
-        current.nexts.put(c, new TrieNode(c));
-        node = current.nexts.get(c);
-      }
-
-      current = node;
-    }
-
-    current.isWord = true;
-  }
-
-  // Returns if the word is in the trie.
-  public boolean search(String word)
-  {
-    TrieNode current = root;
-
-    for (int i = 0; i < word.length(); i++ )
-    {
-      TrieNode node = current.nexts.get(word.charAt(i));
-
-      if (node == null)
-      {
-        return false;
-      }
-
-      current = node;
-    }
-
-    return current.isWord;
-  }
-
-  // Returns if there is any word in the trie
-  // that starts with the given prefix.
-  public boolean startsWith(String prefix)
-  {
-    TrieNode current = root;
-
-    for (int i = 0; i < prefix.length(); i++ )
-    {
-      TrieNode node = current.nexts.get(prefix.charAt(i));
-
-      if (node == null)
-      {
-        return false;
-      }
-
-      current = node;
-    }
-
-    return true;
-  }
-}
-
diff --git a/209.minimum-size-subarray-sum.166333322.Runtime-Error.leetcode.java b/209.minimum-size-subarray-sum.166333322.Runtime-Error.leetcode.java
deleted file mode 100644
index 5ed325ec..00000000
--- ./209.minimum-size-subarray-sum.166333322.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int minSubArrayLen(int s, int[] nums)
-    {
-        int left = 0, right = 0, sum = 0;
-        int min = Integer.MAX_VALUE;
-
-        while (right < nums.length)
-        {
-            if (sum < s)
-            {
-                sum += nums[++right];
-                System.out.printf("nums[right --> %s]--> %s\n", right, nums[right]);
-                System.out.printf("sum--> %s\n", sum);
-            }
-            else
-            {
-                min = Math.min(min, right - left);
-                System.out.printf("min--> %s\n", min);
-                sum -= nums[left++];
-                System.out.printf("nums[left --> %s]--> %s\n", left - 1, nums[left - 1]);
-                System.out.printf("sum--> %s\n", sum);
-            }
-        }
-
-        return min == Integer.MAX_VALUE ? 0 : min;
-    }
-}
-
diff --git a/209.minimum-size-subarray-sum.166337349.Wrong-Answer.leetcode.java b/209.minimum-size-subarray-sum.166337349.Wrong-Answer.leetcode.java
deleted file mode 100644
index 186cd7af..00000000
--- ./209.minimum-size-subarray-sum.166337349.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int minSubArrayLen(int s, int[] nums)
-    {
-        int left = 0, right = 0, sum = 0;
-        int min = Integer.MAX_VALUE;
-
-        while (right + 1 < nums.length)
-        {
-            if (sum < s)
-            {
-                sum += nums[++right];
-                System.out.printf("nums[right --> %s]--> %s\n", right, nums[right]);
-                System.out.printf("sum--> %s\n", sum);
-            }
-            else
-            {
-                min = Math.min(min, right - left);
-                System.out.printf("min--> %s\n", min);
-                sum -= nums[left++];
-                System.out.printf("nums[left --> %s]--> %s\n", left - 1, nums[left - 1]);
-                System.out.printf("sum--> %s\n", sum);
-            }
-        }
-
-        return min == Integer.MAX_VALUE ? 0 : min;
-    }
-}
-
diff --git a/209.minimum-size-subarray-sum.166337618.Wrong-Answer.leetcode.java b/209.minimum-size-subarray-sum.166337618.Wrong-Answer.leetcode.java
deleted file mode 100644
index 8d879f99..00000000
--- ./209.minimum-size-subarray-sum.166337618.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public int minSubArrayLen(int s, int[] nums)
-    {
-        int left = 0, right = 0, sum = 0;
-        int min = Integer.MAX_VALUE;
-
-        while (right + 1 < nums.length)
-        {
-            if (sum < s)
-            {
-                sum += nums[++right];
-                System.out.printf("nums[right --> %s]--> %s\n", right, nums[right]);
-                System.out.printf("sum--> %s\n", sum);
-            }
-
-            if (sum >= s)
-            {
-                min = Math.min(min, right - left);
-                System.out.printf("min--> %s\n", min);
-                sum -= nums[left++];
-                System.out.printf("nums[left --> %s]--> %s\n", left - 1, nums[left - 1]);
-                System.out.printf("sum--> %s\n", sum);
-            }
-        }
-
-        return min == Integer.MAX_VALUE ? 0 : min;
-    }
-}
-
diff --git a/209.minimum-size-subarray-sum.166337716.Runtime-Error.leetcode.java b/209.minimum-size-subarray-sum.166337716.Runtime-Error.leetcode.java
deleted file mode 100644
index b86fe59b..00000000
--- ./209.minimum-size-subarray-sum.166337716.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public int minSubArrayLen(int s, int[] nums)
-    {
-        int left = 0, right = 0, sum = 0;
-        int min = Integer.MAX_VALUE;
-
-        while (right < nums.length)
-        {
-            if (sum < s)
-            {
-                sum += nums[++right];
-                System.out.printf("nums[right --> %s]--> %s\n", right, nums[right]);
-                System.out.printf("sum--> %s\n", sum);
-            }
-
-            if (sum >= s)
-            {
-                min = Math.min(min, right - left);
-                System.out.printf("min--> %s\n", min);
-                sum -= nums[left++];
-                System.out.printf("nums[left --> %s]--> %s\n", left - 1, nums[left - 1]);
-                System.out.printf("sum--> %s\n", sum);
-            }
-        }
-
-        return min == Integer.MAX_VALUE ? 0 : min;
-    }
-}
-
diff --git a/209.minimum-size-subarray-sum.166337887.Wrong-Answer.leetcode.java b/209.minimum-size-subarray-sum.166337887.Wrong-Answer.leetcode.java
deleted file mode 100644
index 46c702fd..00000000
--- ./209.minimum-size-subarray-sum.166337887.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public int minSubArrayLen(int s, int[] nums)
-    {
-        int left = 0, right = 0, sum = 0;
-        int min = Integer.MAX_VALUE;
-
-        while (right < nums.length)
-        {
-            if (sum < s)
-            {
-                sum += nums[right++];
-                System.out.printf("nums[right --> %s]--> %s\n", right - 1, nums[right - 1]);
-                System.out.printf("sum--> %s\n", sum);
-            }
-
-            if (sum >= s)
-            {
-                min = Math.min(min, right - left);
-                System.out.printf("min--> %s\n", min);
-                sum -= nums[left++];
-                System.out.printf("nums[left --> %s]--> %s\n", left - 1, nums[left - 1]);
-                System.out.printf("sum--> %s\n", sum);
-            }
-        }
-
-        return min == Integer.MAX_VALUE ? 0 : min;
-    }
-}
-
diff --git a/209.minimum-size-subarray-sum.166338986.Accepted.leetcode.java b/209.minimum-size-subarray-sum.166338986.Accepted.leetcode.java
deleted file mode 100644
index a95d266f..00000000
--- ./209.minimum-size-subarray-sum.166338986.Accepted.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-public class Solution
-{
-    public int minSubArrayLen(int s, int[] nums)
-    {
-        if (nums == null || nums.length == 1)
-        {
-            return 0;
-        }
-
-        int result = nums.length;
-        int start = 0;
-        int sum = 0;
-        int i = 0;
-        boolean exists = false;
-
-        while (i <= nums.length)
-        {
-            if (sum >= s)
-            {
-                exists = true;
-
-                if (start == i - 1)
-                {
-                    return 1;
-                }
-
-                result = Math.min(result, i - start);
-                sum = sum - nums[start];
-                start++;
-            }
-            else
-            {
-                if (i == nums.length)
-                {
-                    break;
-                }
-
-                sum = sum + nums[i];
-                i++;
-            }
-        }
-
-        if (exists)
-        {
-            return result;
-        }
-        else
-        {
-            return 0;
-        }
-    }
-}
-
diff --git a/209.minimum-size-subarray-sum.166339074.Wrong-Answer.leetcode.java b/209.minimum-size-subarray-sum.166339074.Wrong-Answer.leetcode.java
deleted file mode 100644
index 92202e0f..00000000
--- ./209.minimum-size-subarray-sum.166339074.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class Solution
-{
-    public int minSubArrayLen(int s, int[] nums)
-    {
-        int result = nums.length;
-        int start = 0;
-        int sum = 0;
-        int i = 0;
-
-        while (i <= nums.length)
-        {
-            if (sum >= s)
-            {
-                if (start == i - 1)
-                {
-                    return 1;
-                }
-
-                result = Math.min(result, i - start);
-                sum = sum - nums[start];
-                start++;
-            }
-            else
-            {
-                if (i == nums.length)
-                {
-                    break;
-                }
-
-                sum = sum + nums[i];
-                i++;
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/209.minimum-size-subarray-sum.166339117.Accepted.leetcode.java b/209.minimum-size-subarray-sum.166339117.Accepted.leetcode.java
deleted file mode 100644
index e043befb..00000000
--- ./209.minimum-size-subarray-sum.166339117.Accepted.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-public class Solution
-{
-    public int minSubArrayLen(int s, int[] nums)
-    {
-        int result = nums.length;
-        int start = 0;
-        int sum = 0;
-        int i = 0;
-        boolean exists = false;
-
-        while (i <= nums.length)
-        {
-            if (sum >= s)
-            {
-                exists = true;
-
-                if (start == i - 1)
-                {
-                    return 1;
-                }
-
-                result = Math.min(result, i - start);
-                sum = sum - nums[start];
-                start++;
-            }
-            else
-            {
-                if (i == nums.length)
-                {
-                    break;
-                }
-
-                sum = sum + nums[i];
-                i++;
-            }
-        }
-
-        if (exists)
-        {
-            return result;
-        }
-        else
-        {
-            return 0;
-        }
-    }
-}
-
diff --git a/209.minimum-size-subarray-sum.166339467.Accepted.leetcode.java b/209.minimum-size-subarray-sum.166339467.Accepted.leetcode.java
deleted file mode 100644
index ad5d0b08..00000000
--- ./209.minimum-size-subarray-sum.166339467.Accepted.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution
-{
-    public int minSubArrayLen(int s, int[] nums)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return 0;
-        }
-
-        int i = 0;
-        int j = 0;
-        int sum = 0;
-        int minLen = Integer.MAX_VALUE;
-
-        while (j < nums.length)
-        {
-            if (sum < s)
-            {
-                sum += nums[j++];
-            }
-            else
-            {
-                minLen = Math.min(minLen, j - i);
-
-                if (i == j - 1)
-                {
-                    return 1;
-                }
-
-                sum -= nums[i++];
-            }
-        }
-
-        while (sum >= s)
-        {
-            minLen = Math.min(minLen, j - i);
-            sum -= nums[i++];
-        }
-
-        return minLen == Integer.MAX_VALUE ? 0 : minLen;
-    }
-}
-
diff --git a/209.minimum-size-subarray-sum.166339519.Accepted.leetcode.java b/209.minimum-size-subarray-sum.166339519.Accepted.leetcode.java
deleted file mode 100644
index b874819b..00000000
--- ./209.minimum-size-subarray-sum.166339519.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public int minSubArrayLen(int s, int[] nums)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return 0;
-        }
-
-        int i = 0;
-        int j = 0;
-        int sum = 0;
-        int minLen = Integer.MAX_VALUE;
-
-        while (j < nums.length)
-        {
-            if (sum < s)
-            {
-                sum += nums[j++];
-            }
-            else
-            {
-                minLen = Math.min(minLen, j - i);
-                sum -= nums[i++];
-            }
-        }
-
-        while (sum >= s)
-        {
-            minLen = Math.min(minLen, j - i);
-            sum -= nums[i++];
-        }
-
-        return minLen == Integer.MAX_VALUE ? 0 : minLen;
-    }
-}
-
diff --git a/209.minimum-size-subarray-sum.166339623.Accepted.leetcode.java b/209.minimum-size-subarray-sum.166339623.Accepted.leetcode.java
deleted file mode 100644
index 5a2a6ba6..00000000
--- ./209.minimum-size-subarray-sum.166339623.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public int minSubArrayLen(int s, int[] nums)
-    {
-        int left = 0;
-        int right = 0;
-        int sum = 0;
-        int minLen = Integer.MAX_VALUE;
-
-        while (right < nums.length)
-        {
-            if (sum < s)
-            {
-                sum += nums[right++];
-            }
-            else
-            {
-                minLen = Math.min(minLen, right - left);
-                sum -= nums[left++];
-            }
-        }
-
-        while (sum >= s)
-        {
-            minLen = Math.min(minLen, right - left);
-            sum -= nums[left++];
-        }
-
-        return minLen == Integer.MAX_VALUE ? 0 : minLen;
-    }
-}
-
diff --git a/209.minimum-size-subarray-sum.166339806.Accepted.leetcode.java b/209.minimum-size-subarray-sum.166339806.Accepted.leetcode.java
deleted file mode 100644
index 112c5d06..00000000
--- ./209.minimum-size-subarray-sum.166339806.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public int minSubArrayLen(int s, int[] nums)
-    {
-        int left = 0;
-        int right = 0;
-        int sum = 0;
-        int minLen = Integer.MAX_VALUE;
-
-        while (right < nums.length || sum >= s)
-        {
-            if (sum < s)
-            {
-                sum += nums[right++];
-            }
-            else
-            {
-                minLen = Math.min(minLen, right - left);
-                sum -= nums[left++];
-            }
-        }
-
-        return minLen == Integer.MAX_VALUE ? 0 : minLen;
-    }
-}
-
diff --git a/21.merge-two-sorted-lists.166344656.Accepted.leetcode.java b/21.merge-two-sorted-lists.166344656.Accepted.leetcode.java
deleted file mode 100644
index 7b41d695..00000000
--- ./21.merge-two-sorted-lists.166344656.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public ListNode mergeTwoLists(ListNode l1, ListNode l2)
-    {
-        ListNode head = new ListNode(-1);
-        ListNode nav = head;
-
-        while (l1 != null || l2 != null)
-        {
-            if (l2 == null || (l1 != null && l1.val < l2.val))
-            {
-                nav.next = l1;
-                l1 = l1.next;
-            }
-            else
-            {
-                nav.next = l2;
-                l2 = l2.next;
-            }
-
-            nav = nav.next;
-        }
-
-        return head.next;
-    }
-}
-
diff --git a/21.merge-two-sorted-lists.166344861.Accepted.leetcode.java b/21.merge-two-sorted-lists.166344861.Accepted.leetcode.java
deleted file mode 100644
index 2b8b0d28..00000000
--- ./21.merge-two-sorted-lists.166344861.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public ListNode mergeTwoLists(ListNode l1, ListNode l2)
-    {
-        ListNode head = new ListNode(-1);
-        ListNode nav = head;
-
-        while (l1 != null && l2 != null)
-        {
-            if (l1.val < l2.val)
-            {
-                nav.next = l1;
-                l1 = l1.next;
-            }
-            else
-            {
-                nav.next = l2;
-                l2 = l2.next;
-            }
-
-            nav = nav.next;
-        }
-
-        if (l1 != null)
-        {
-            nav.next = l1;
-        }
-
-        if (l2 != null)
-        {
-            nav.next = l2;
-        }
-
-        return head.next;
-    }
-}
-
diff --git a/21.merge-two-sorted-lists.166345720.Accepted.leetcode.java b/21.merge-two-sorted-lists.166345720.Accepted.leetcode.java
deleted file mode 100644
index 545c6d3b..00000000
--- ./21.merge-two-sorted-lists.166345720.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public ListNode mergeTwoLists(ListNode l1, ListNode l2)
-    {
-        ListNode head = new ListNode(-1);
-        ListNode nav = head;
-
-        while (l1 != null || l2 != null)
-        {
-            if (l2 == null || l1 != null && l1.val < l2.val)
-            {
-                nav.next = l1;
-                l1 = l1.next;
-            }
-            else
-            {
-                nav.next = l2;
-                l2 = l2.next;
-            }
-
-            nav = nav.next;
-        }
-
-        return head.next;
-    }
-}
-
diff --git a/210.course-schedule-ii.166347017.Accepted.leetcode.java b/210.course-schedule-ii.166347017.Accepted.leetcode.java
deleted file mode 100644
index 08011b84..00000000
--- ./210.course-schedule-ii.166347017.Accepted.leetcode.java
+++ /dev/null
@@ -1,70 +0,0 @@
-public class Solution
-{
-    public int[] findOrder(int numCourses, int[][] prerequisites)
-    {
-        int len = prerequisites.length;
-
-        if (len == 0)
-        {
-            int[] res = new int[numCourses];
-
-            for (int m = 0; m < numCourses; m++)
-            {
-                res[m] = m;
-            }
-
-            return res;
-        }
-
-        int[] pCounter = new int[numCourses];
-
-        for (int i = 0; i < len; i++)
-        {
-            pCounter[prerequisites[i][0]]++;
-        }
-
-        LinkedList<Integer> queue = new LinkedList<Integer>();
-
-        for (int i = 0; i < numCourses; i++)
-        {
-            if (pCounter[i] == 0)
-            {
-                queue.add(i);
-            }
-        }
-
-        int numNoPre = queue.size();
-        int[] result = new int[numCourses];
-        int j = 0;
-
-        while (!queue.isEmpty())
-        {
-            int c = queue.remove();
-            result[j++ ] = c;
-
-            for (int i = 0; i < len; i++)
-            {
-                if (prerequisites[i][1] == c)
-                {
-                    pCounter[prerequisites[i][0]]--;
-
-                    if (pCounter[prerequisites[i][0]] == 0)
-                    {
-                        queue.add(prerequisites[i][0]);
-                        numNoPre++;
-                    }
-                }
-            }
-        }
-
-        if (numNoPre == numCourses)
-        {
-            return result;
-        }
-        else
-        {
-            return new int[0];
-        }
-    }
-}
-
diff --git a/210.course-schedule-ii.166347067.Accepted.leetcode.java b/210.course-schedule-ii.166347067.Accepted.leetcode.java
deleted file mode 100644
index e6b3c971..00000000
--- ./210.course-schedule-ii.166347067.Accepted.leetcode.java
+++ /dev/null
@@ -1,57 +0,0 @@
-public class Solution
-{
-    public int[] findOrder(int numCourses, int[][] prerequisites)
-    {
-        int len = prerequisites.length;
-        int[] pCounter = new int[numCourses];
-
-        for (int i = 0; i < len; i++)
-        {
-            pCounter[prerequisites[i][0]]++;
-        }
-
-        LinkedList<Integer> queue = new LinkedList<Integer>();
-
-        for (int i = 0; i < numCourses; i++)
-        {
-            if (pCounter[i] == 0)
-            {
-                queue.add(i);
-            }
-        }
-
-        int numNoPre = queue.size();
-        int[] result = new int[numCourses];
-        int j = 0;
-
-        while (!queue.isEmpty())
-        {
-            int c = queue.remove();
-            result[j++ ] = c;
-
-            for (int i = 0; i < len; i++)
-            {
-                if (prerequisites[i][1] == c)
-                {
-                    pCounter[prerequisites[i][0]]--;
-
-                    if (pCounter[prerequisites[i][0]] == 0)
-                    {
-                        queue.add(prerequisites[i][0]);
-                        numNoPre++;
-                    }
-                }
-            }
-        }
-
-        if (numNoPre == numCourses)
-        {
-            return result;
-        }
-        else
-        {
-            return new int[0];
-        }
-    }
-}
-
diff --git a/210.course-schedule-ii.166347201.Wrong-Answer.leetcode.java b/210.course-schedule-ii.166347201.Wrong-Answer.leetcode.java
deleted file mode 100644
index d6a5fd90..00000000
--- ./210.course-schedule-ii.166347201.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-public class Solution
-{
-    public int[] findOrder(int numCourses, int[][] prerequisites)
-    {
-        int len = prerequisites.length;
-        int[] pCounter = new int[numCourses];
-
-        for (int i = 0; i < len; i++)
-        {
-            pCounter[prerequisites[i][0]]++;
-        }
-
-        LinkedList<Integer> queue = new LinkedList<Integer>();
-
-        for (int i = 0; i < numCourses; i++)
-        {
-            if (pCounter[i] == 0)
-            {
-                queue.add(i);
-            }
-        }
-
-        int numNoPre = queue.size();
-        int[] result = new int[numCourses];
-        int j = 0;
-
-        while (!queue.isEmpty())
-        {
-            int c = queue.remove();
-            result[j++] = c;
-
-            for (int i = 0; i < len; i++)
-            {
-                if (prerequisites[i][1] == c)
-                {
-                    pCounter[prerequisites[i][0]]--;
-
-                    if (pCounter[prerequisites[i][0]] == 0)
-                    {
-                        queue.add(prerequisites[i][0]);
-                        numNoPre++;
-                    }
-                }
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/210.course-schedule-ii.166347481.Accepted.leetcode.java b/210.course-schedule-ii.166347481.Accepted.leetcode.java
deleted file mode 100644
index c4df1254..00000000
--- ./210.course-schedule-ii.166347481.Accepted.leetcode.java
+++ /dev/null
@@ -1,56 +0,0 @@
-public class Solution
-{
-    public int[] findOrder(int numCourses, int[][] prerequisites)
-    {
-        List<List<Integer>> adjacencyList = new ArrayList<List<Integer>>();
-        int[] in = new int[numCourses];
-
-        for (int i = 0; i < numCourses; i++)
-        {
-            adjacencyList.add(new ArrayList<Integer>());
-        }
-
-        for (int i = 0; i < prerequisites.length; i++)
-        {
-            adjacencyList.get(prerequisites[i][1]).add(prerequisites[i][0]);
-            in[prerequisites[i][0]]++;
-        }
-
-        LinkedList<Integer> queue = new LinkedList<Integer>();
-
-        for (int i = 0; i < numCourses; ++i)
-        {
-            if (in[i] == 0)
-            {
-                queue.push(i);
-            }
-        }
-
-        int[] res = new int[numCourses];
-        int count = 0;
-
-        while (!queue.isEmpty())
-        {
-            int t = queue.pop();
-            res[count++] = t;
-
-            for (Integer a : adjacencyList.get(t))
-            {
-                in[a]--;
-
-                if (in[a] == 0)
-                {
-                    queue.push(a);
-                }
-            }
-        }
-
-        if (count == numCourses)
-        {
-            return res;
-        }
-
-        return new int[0];
-    }
-}
-
diff --git a/210.course-schedule-ii.166347707.Accepted.leetcode.java b/210.course-schedule-ii.166347707.Accepted.leetcode.java
deleted file mode 100644
index 656d5798..00000000
--- ./210.course-schedule-ii.166347707.Accepted.leetcode.java
+++ /dev/null
@@ -1,55 +0,0 @@
-public class Solution
-{
-    public int[] findOrder(int numCourses, int[][] prerequisites)
-    {
-        int len = prerequisites.length;
-        int[] pCounter = new int[numCourses];
-
-        for (int i = 0; i < len; i++)
-        {
-            pCounter[prerequisites[i][0]]++;
-        }
-
-        LinkedList<Integer> queue = new LinkedList<Integer>();
-
-        for (int i = 0; i < numCourses; i++)
-        {
-            if (pCounter[i] == 0)
-            {
-                queue.add(i);
-            }
-        }
-
-        int numNoPre = queue.size();
-        int[] result = new int[numCourses];
-        int j = 0;
-
-        while (!queue.isEmpty())
-        {
-            int c = queue.remove();
-            result[j++] = c;
-
-            for (int i = 0; i < len; i++)
-            {
-                if (prerequisites[i][1] == c)
-                {
-                    pCounter[prerequisites[i][0]]--;
-
-                    if (pCounter[prerequisites[i][0]] == 0)
-                    {
-                        queue.add(prerequisites[i][0]);
-                        numNoPre++;
-                    }
-                }
-            }
-        }
-
-        if (numNoPre == numCourses)
-        {
-            return result;
-        }
-
-        return new int[0];
-    }
-}
-
diff --git a/210.course-schedule-ii.30842945.Accepted.leetcode.java b/210.course-schedule-ii.30842945.Accepted.leetcode.java
deleted file mode 100644
index 35182edc..00000000
--- ./210.course-schedule-ii.30842945.Accepted.leetcode.java
+++ /dev/null
@@ -1,81 +0,0 @@
-  public class Solution
-  {
-    public int[] findOrder(int numCourses, int[][] prerequisites)
-    {
-      if (prerequisites == null)
-      {
-        throw new IllegalArgumentException("illegal prerequisites array");
-      }
-
-      int len = prerequisites.length;
-
-      // if there is no prerequisites, return a sequence of courses
-      if (len == 0)
-      {
-        int[] res = new int[numCourses];
-
-        for (int m = 0; m < numCourses; m++ )
-        {
-          res[m] = m;
-        }
-
-        return res;
-      }
-
-      // records the number of prerequisites each course (0,...,numCourses-1)
-      // requires
-      int[] pCounter = new int[numCourses];
-
-      for (int i = 0; i < len; i++ )
-      {
-        pCounter[prerequisites[i][0]]++ ;
-      }
-
-      // stores courses that have no prerequisites
-      LinkedList<Integer> queue = new LinkedList<Integer>();
-
-      for (int i = 0; i < numCourses; i++ )
-      {
-        if (pCounter[i] == 0)
-        {
-          queue.add(i);
-        }
-      }
-
-      int numNoPre = queue.size();
-      // initialize result
-      int[] result = new int[numCourses];
-      int j = 0;
-
-      while (!queue.isEmpty())
-      {
-        int c = queue.remove();
-        result[j++ ] = c;
-
-        for (int i = 0; i < len; i++ )
-        {
-          if (prerequisites[i][1] == c)
-          {
-            pCounter[prerequisites[i][0]]-- ;
-
-            if (pCounter[prerequisites[i][0]] == 0)
-            {
-              queue.add(prerequisites[i][0]);
-              numNoPre++ ;
-            }
-          }
-        }
-      }
-
-      // return result
-      if (numNoPre == numCourses)
-      {
-        return result;
-      }
-      else
-      {
-        return new int[0];
-      }
-    }
-  }
-
diff --git a/210.course-schedule-ii.31071029.Accepted.leetcode.java b/210.course-schedule-ii.31071029.Accepted.leetcode.java
deleted file mode 100644
index c26f973c..00000000
--- ./210.course-schedule-ii.31071029.Accepted.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-  public class Solution
-  {
-    public int[] findOrder(int numCourses, int[][] prerequisites)
-    {
-      List<List<Integer>> adjacencyList = new ArrayList<List<Integer>>();
-      int[] in = new int[numCourses];
-
-      for (int i = 0; i < numCourses; i++ )
-      {
-        adjacencyList.add(new ArrayList<Integer>());
-      }
-
-      for (int i = 0; i < prerequisites.length; i++ )
-      {
-        adjacencyList.get(prerequisites[i][1]).add(prerequisites[i][0]);
-        in[prerequisites[i][0]]++ ;
-      }
-
-      LinkedList<Integer> queue = new LinkedList<Integer>();
-
-      for (int i = 0; i < numCourses; ++i)
-      {
-        if (in[i] == 0)
-        {
-          queue.offer(i);
-        }
-      }
-
-      int[] res = new int[numCourses];
-      int count = 0;
-
-      while (!queue.isEmpty())
-      {
-        int t = queue.pop();
-        res[count++] = t;
-
-        for (Integer a : adjacencyList.get(t))
-        {
-          in[a]-- ;
-
-          if (in[a] == 0)
-          {
-            queue.push(a);
-          }
-        }
-      }
-
-      if (count == numCourses) { return res; }
-
-      return new int[0];
-    }
-  }
-
diff --git a/210.course-schedule-ii.37925959.Accepted.leetcode.java b/210.course-schedule-ii.37925959.Accepted.leetcode.java
deleted file mode 100644
index 43583351..00000000
--- ./210.course-schedule-ii.37925959.Accepted.leetcode.java
+++ /dev/null
@@ -1,56 +0,0 @@
-  public class Solution
-  {
-    public int[] findOrder(int numCourses, int[][] prerequisites)
-    {
-      List<List<Integer>> adjacencyList = new ArrayList<List<Integer>>();
-      int[] in = new int[numCourses];
-
-      for (int i = 0; i < numCourses; i++)
-      {
-        adjacencyList.add(new ArrayList<Integer>());
-      }
-
-      for (int i = 0; i < prerequisites.length; i++)
-      {
-        adjacencyList.get(prerequisites[i][1]).add(prerequisites[i][0]);
-        in[prerequisites[i][0]]++ ;
-      }
-
-      LinkedList<Integer> queue = new LinkedList<Integer>();
-
-      for (int i = 0; i < numCourses; ++i)
-      {
-        if (in[i] == 0)
-        {
-          queue.offer(i);
-        }
-      }
-
-      int[] res = new int[numCourses];
-      int count = 0;
-
-      while (!queue.isEmpty())
-      {
-        int t = queue.pop();
-        res[count++ ] = t;
-
-        for (Integer a : adjacencyList.get(t))
-        {
-          in[a]-- ;
-
-          if (in[a] == 0)
-          {
-            queue.offer(a);
-          }
-        }
-      }
-
-      if (count == numCourses)
-      {
-        return res;
-      }
-
-      return new int[0];
-    }
-  }
-
diff --git a/210.course-schedule-ii.80891381.Accepted.leetcode.java b/210.course-schedule-ii.80891381.Accepted.leetcode.java
deleted file mode 100644
index a2e3cd89..00000000
--- ./210.course-schedule-ii.80891381.Accepted.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-public class Solution 
-{
-    boolean impossible = false;
-    public int[] findOrder(int numCourses, int[][] prerequisites) 
-    {
-        Stack<Integer> stack = new Stack<>();
-        List<List<Integer>> graph = new ArrayList<>();
-        int[] path = new int[numCourses];
-        for (int i = 0; i < numCourses; i++) // building the base.
-            graph.add(new ArrayList<>());
-        for (int i = 0; i < prerequisites.length; i++) { // Building graph.
-            graph.get(prerequisites[i][0]).add(prerequisites[i][1]);
-        }
-        for (int i = 0; i < numCourses; i++) { // Actual DFS calls.
-            dfs(stack, graph, path, i);
-            if (impossible)
-                return new int[0];
-        }
-        int[] res = new int[numCourses];
-        for (int i = numCourses - 1; i >= 0; i--) // Build result.
-            res[i] = stack.pop();
-        return res;
-
-    }
-
-    private void dfs(Stack<Integer> stack, List<List<Integer>> graph, int[] path, int course) {
-        if (path[course] == 2 || impossible) {
-            return;
-        }
-        if (path[course] == 1) { // cycle exists.
-            impossible = true;
-            return;
-        }
-        path[course] = 1; // '1' means being explored.
-        for (int nextCourse : graph.get(course)) {
-            dfs(stack, graph, path, nextCourse);
-            if (impossible)
-                return;
-        }
-        stack.push(course); // done exploring.
-        path[course] = 2; // '2' means Exploration complete.
-    }
-
-}
diff --git a/210.course-schedule-ii.80944678.Accepted.leetcode.java b/210.course-schedule-ii.80944678.Accepted.leetcode.java
deleted file mode 100644
index 01753a8a..00000000
--- ./210.course-schedule-ii.80944678.Accepted.leetcode.java
+++ /dev/null
@@ -1,55 +0,0 @@
-public class Solution
-{
-    public int[] findOrder(int numCourses, int[][] prerequisites)
-    {
-        List<List<Integer>> adjacencyList = new ArrayList<List<Integer>>();
-        int[] in = new int[numCourses];
-
-        for (int i = 0; i < numCourses; i++)
-        {
-            adjacencyList.add(new ArrayList<Integer>());
-        }
-
-        for (int i = 0; i < prerequisites.length; i++)
-        {
-            adjacencyList.get(prerequisites[i][1]).add(prerequisites[i][0]);
-            in[prerequisites[i][0]]++;
-        }
-
-        LinkedList<Integer> queue = new LinkedList<Integer>();
-
-        for (int i = 0; i < numCourses; ++i)
-        {
-            if (in[i] == 0)
-            {
-                queue.offer(i);
-            }
-        }
-
-        int[] res = new int[numCourses];
-        int index = 0;
-
-        while (!queue.isEmpty())
-        {
-            int t = queue.pop();
-            res[index++] = t;
-
-            for (Integer a : adjacencyList.get(t))
-            {
-                in[a]--;
-
-                if (in[a] == 0)
-                {
-                    queue.offer(a);
-                }
-            }
-        }
-
-        if (index == numCourses)
-        {
-            return res;
-        }
-
-        return new int[0];
-    }
-}
diff --git a/211.add-and-search-word-data-structure-design.102778999.Wrong-Answer.leetcode.java b/211.add-and-search-word-data-structure-design.102778999.Wrong-Answer.leetcode.java
deleted file mode 100644
index b293bacd..00000000
--- ./211.add-and-search-word-data-structure-design.102778999.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,109 +0,0 @@
-class TrieNode
-{
-    boolean isWord;
-    char content;
-    HashMap<Character, TrieNode> nexts;
-
-    public TrieNode()
-    {
-        this.content = ' ';
-        this.isWord = false;
-        this.nexts = new HashMap<Character, TrieNode>();
-    }
-
-    public TrieNode(char content)
-    {
-        this.content = content;
-        this.isWord = false;
-        nexts = new HashMap<Character, TrieNode>();
-    }
-}
-
-public class WordDictionary
-{
-    private TrieNode root;
-
-    public WordDictionary()
-    {
-        root = new TrieNode();
-    }
-
-    // Adds a word into the data structure.
-    public void addWord(String word)
-    {
-        TrieNode current = root;
-
-        for (int i = 0; i < word.length(); i++)
-        {
-            char c = word.charAt(i);
-            TrieNode node = current.nexts.get(c);
-
-            if (node == null)
-            {
-                current.nexts.put(c, new TrieNode(c));
-                node = current.nexts.get(c);
-            }
-
-            current = node;
-        }
-
-        current.isWord = true;
-    }
-
-    // Returns if the word is in the data structure. A word could
-    // contain the dot character '.' to represent any one letter.
-    public boolean search(String word)
-    {
-        if (word == null || word.length() == 0)
-        {
-            return false;
-        }
-
-        TrieNode trieNode = root;
-        return dfs(word, 0, trieNode);
-    }
-
-    private boolean dfs(String word, int index, TrieNode trieNode)
-    {
-        if (index == word.length() - 1)
-        {
-            if (word.charAt(index) == '.')
-            {
-                return trieNode.isWord;
-            }
-            else
-            {
-                TrieNode endNode = trieNode.nexts.get(word.charAt(index));
-                return endNode != null && endNode.isWord;
-            }
-        }
-
-        if (index >= word.length())
-        {
-            return false;
-        }
-
-        if (word.charAt(index) == '.')
-        {
-            boolean res = false;
-
-            for (TrieNode node : trieNode.nexts.values())
-            {
-                res |= dfs(word, index + 1, node);
-            }
-
-            return res;
-        }
-        else
-        {
-            if (trieNode.nexts.containsKey(word.charAt(index)))
-            {
-                return dfs(word, index + 1, trieNode.nexts.get(word.charAt(index)));
-            }
-            else
-            {
-                return false;
-            }
-        }
-    }
-}
diff --git a/211.add-and-search-word-data-structure-design.102779605.Accepted.leetcode.java b/211.add-and-search-word-data-structure-design.102779605.Accepted.leetcode.java
deleted file mode 100644
index cabccdfa..00000000
--- ./211.add-and-search-word-data-structure-design.102779605.Accepted.leetcode.java
+++ /dev/null
@@ -1,118 +0,0 @@
-class TrieNode
-{
-    boolean isWord;
-    char content;
-    HashMap<Character, TrieNode> nexts;
-
-    public TrieNode()
-    {
-        this.content = ' ';
-        this.isWord = false;
-        this.nexts = new HashMap<Character, TrieNode>();
-    }
-
-    public TrieNode(char content)
-    {
-        this.content = content;
-        this.isWord = false;
-        nexts = new HashMap<Character, TrieNode>();
-    }
-}
-
-public class WordDictionary
-{
-    private TrieNode root;
-
-    public WordDictionary()
-    {
-        root = new TrieNode();
-    }
-
-    // Adds a word into the data structure.
-    public void addWord(String word)
-    {
-        TrieNode current = root;
-
-        for (int i = 0; i < word.length(); i++)
-        {
-            char c = word.charAt(i);
-            TrieNode node = current.nexts.get(c);
-
-            if (node == null)
-            {
-                current.nexts.put(c, new TrieNode(c));
-                node = current.nexts.get(c);
-            }
-
-            current = node;
-        }
-
-        current.isWord = true;
-    }
-
-    // Returns if the word is in the data structure. A word could
-    // contain the dot character '.' to represent any one letter.
-    public boolean search(String word)
-    {
-        if (word == null || word.length() == 0)
-        {
-            return false;
-        }
-
-        TrieNode trieNode = root;
-        return dfs(word, 0, trieNode);
-    }
-
-    private boolean dfs(String word, int index, TrieNode trieNode)
-    {
-        if (index == word.length() - 1)
-        {
-            if (word.charAt(index) == '.')
-            {
-                for (TrieNode tNode : trieNode.nexts.values())
-                {
-                    if (tNode.isWord)
-                    {
-                        return true;
-                    }
-                }
-
-                return false;
-            }
-            else
-            {
-                TrieNode endNode = trieNode.nexts.get(word.charAt(index));
-                return endNode != null && endNode.isWord;
-            }
-        }
-
-        if (index >= word.length())
-        {
-            return false;
-        }
-
-        if (word.charAt(index) == '.')
-        {
-            for (TrieNode node : trieNode.nexts.values())
-            {
-                if (dfs(word, index + 1, node))
-                {
-                    return true;
-                }
-            }
-
-            return false;
-        }
-        else
-        {
-            if (trieNode.nexts.containsKey(word.charAt(index)))
-            {
-                return dfs(word, index + 1, trieNode.nexts.get(word.charAt(index)));
-            }
-            else
-            {
-                return false;
-            }
-        }
-    }
-}
diff --git a/211.add-and-search-word-data-structure-design.39953263.Accepted.leetcode.java b/211.add-and-search-word-data-structure-design.39953263.Accepted.leetcode.java
deleted file mode 100644
index c43c6336..00000000
--- ./211.add-and-search-word-data-structure-design.39953263.Accepted.leetcode.java
+++ /dev/null
@@ -1,118 +0,0 @@
-class TrieNode
-{
-  boolean isWord;
-  char content;
-  HashMap<Character, TrieNode> nexts;
-
-  public TrieNode()
-  {
-    this.content = ' ';
-    this.isWord = false;
-    this.nexts = new HashMap<Character, TrieNode>();
-  }
-
-  public TrieNode(char content)
-  {
-    this.content = content;
-    this.isWord = false;
-    nexts = new HashMap<Character, TrieNode>();
-  }
-}
-
-public class WordDictionary
-{
-  private TrieNode root;
-
-  public WordDictionary()
-  {
-    root = new TrieNode();
-  }
-
-  // Adds a word into the data structure.
-  public void addWord(String word)
-  {
-    TrieNode current = root;
-
-    for (int i = 0; i < word.length(); i++)
-    {
-      char c = word.charAt(i);
-      TrieNode node = current.nexts.get(c);
-
-      if (node == null)
-      {
-        current.nexts.put(c, new TrieNode(c));
-        node = current.nexts.get(c);
-      }
-
-      current = node;
-    }
-
-    current.isWord = true;
-  }
-
-  // Returns if the word is in the data structure. A word could
-  // contain the dot character '.' to represent any one letter.
-  public boolean search(String word)
-  {
-    if (word == null || word.length() == 0)
-    {
-      return false;
-    }
-
-    TrieNode trieNode = root;
-    return dfs(word, 0, trieNode);
-  }
-
-  private boolean dfs(String word, int index, TrieNode trieNode)
-  {
-    if (index == word.length() - 1)
-    {
-      if (word.charAt(index) == '.')
-      {
-        for (TrieNode tNode : trieNode.nexts.values())
-        {
-          if (tNode.isWord)
-          {
-            return true;
-          }
-        }
-
-        return false;
-      }
-      else
-      {
-        TrieNode endNode = trieNode.nexts.get(word.charAt(index));
-        return endNode != null && endNode.isWord;
-      }
-    }
-
-    if (index >= word.length())
-    {
-      return false;
-    }
-
-    if (word.charAt(index) == '.')
-    {
-      boolean res = false;
-
-      for (TrieNode node : trieNode.nexts.values())
-      {
-        res |= dfs(word, index + 1, node);
-      }
-
-      return res;
-    }
-    else
-    {
-      if (trieNode.nexts.containsKey(word.charAt(index)))
-      {
-        return dfs(word, index + 1, trieNode.nexts.get(word.charAt(index)));
-      }
-      else
-      {
-        return false;
-      }
-    }
-  }
-}
-
diff --git a/211.add-and-search-word-data-structure-design.39955840.Accepted.leetcode.java b/211.add-and-search-word-data-structure-design.39955840.Accepted.leetcode.java
deleted file mode 100644
index 20faa278..00000000
--- ./211.add-and-search-word-data-structure-design.39955840.Accepted.leetcode.java
+++ /dev/null
@@ -1,119 +0,0 @@
-class TrieNode
-{
-  boolean isWord;
-  char content;
-  HashMap<Character, TrieNode> nexts;
-
-  public TrieNode()
-  {
-    this.content = ' ';
-    this.isWord = false;
-    this.nexts = new HashMap<Character, TrieNode>();
-  }
-
-  public TrieNode(char content)
-  {
-    this.content = content;
-    this.isWord = false;
-    nexts = new HashMap<Character, TrieNode>();
-  }
-}
-
-public class WordDictionary
-{
-  private TrieNode root;
-
-  public WordDictionary()
-  {
-    root = new TrieNode();
-  }
-
-  // Adds a word into the data structure.
-  public void addWord(String word)
-  {
-    TrieNode current = root;
-
-    for (int i = 0; i < word.length(); i++)
-    {
-      char c = word.charAt(i);
-      TrieNode node = current.nexts.get(c);
-
-      if (node == null)
-      {
-        current.nexts.put(c, new TrieNode(c));
-        node = current.nexts.get(c);
-      }
-
-      current = node;
-    }
-
-    current.isWord = true;
-  }
-
-  // Returns if the word is in the data structure. A word could
-  // contain the dot character '.' to represent any one letter.
-  public boolean search(String word)
-  {
-    if (word == null || word.length() == 0)
-    {
-      return false;
-    }
-
-    TrieNode trieNode = root;
-    return dfs(word, 0, trieNode);
-  }
-
-  private boolean dfs(String word, int index, TrieNode trieNode)
-  {
-    if (index == word.length() - 1)
-    {
-      if (word.charAt(index) == '.')
-      {
-        for (TrieNode tNode : trieNode.nexts.values())
-        {
-          if (tNode.isWord)
-          {
-            return true;
-          }
-        }
-
-        return false;
-      }
-      else
-      {
-        TrieNode endNode = trieNode.nexts.get(word.charAt(index));
-        return endNode != null && endNode.isWord;
-      }
-    }
-
-    if (index >= word.length())
-    {
-      return false;
-    }
-
-    if (word.charAt(index) == '.')
-    {
-      for (TrieNode node : trieNode.nexts.values())
-      {
-        if (dfs(word, index + 1, node))
-        {
-          return true;
-        }
-      }
-
-      return false;
-    }
-    else
-    {
-      if (trieNode.nexts.containsKey(word.charAt(index)))
-      {
-        return dfs(word, index + 1, trieNode.nexts.get(word.charAt(index)));
-      }
-      else
-      {
-        return false;
-      }
-    }
-  }
-}
-
diff --git a/212.word-search-ii.167159231.Accepted.leetcode.java b/212.word-search-ii.167159231.Accepted.leetcode.java
deleted file mode 100644
index f404b33e..00000000
--- ./212.word-search-ii.167159231.Accepted.leetcode.java
+++ /dev/null
@@ -1,132 +0,0 @@
-public class Solution
-{
-    public List<String> findWords(char[][] board, String[] words)
-    {
-        List<String> res = new ArrayList<String>();
-
-        if (board == null || board.length == 0 || board[0].length == 0 || words == null || words.length == 0)
-        {
-            return res;
-        }
-
-        boolean[][] visited = new boolean[board.length][board[0].length];
-        Trie trie = new Trie(new HashSet<String>(Arrays.asList(words)));
-
-        for (int i = 0; i < board.length; i++)
-        {
-            for (int j = 0; j < board[0].length; j++)
-            {
-                dfs(board, i, j, "", visited, trie, res);
-            }
-        }
-
-        return res;
-    }
-
-    private void dfs(char[][] board, int i, int j, String str, boolean[][] visited, Trie trie, List<String> result)
-    {
-        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j])
-        {
-            return;
-        }
-
-        String newStr = str + board[i][j];
-        TrieNode endNode = trie.startWith(newStr);
-
-        if (endNode == null)
-        {
-            return;
-        }
-
-        if (endNode.isWord == true)
-        {
-            result.add(newStr);
-            endNode.isWord = false; // avoid duplicate in result
-        }
-
-        visited[i][j] = true;
-        dfs(board, i + 1, j, newStr, visited, trie, result);
-        dfs(board, i - 1, j, newStr, visited, trie, result);
-        dfs(board, i, j + 1, newStr, visited, trie, result);
-        dfs(board, i, j - 1, newStr, visited, trie, result);
-        visited[i][j] = false;
-    }
-
-    class Trie
-    {
-        TrieNode root;
-
-        public Trie(Set<String> strs)
-        {
-            root = new TrieNode();
-
-            for (String str : strs)
-            {
-                insert(str);
-            }
-        }
-
-        // gets the last node in the tree that matches the str, return null if not match
-        public TrieNode startWith(String prefix)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < prefix.length(); i++)
-            {
-                TrieNode node = current.children.get(prefix.charAt(i));
-
-                if (node == null)
-                {
-                    return null;
-                }
-
-                current = node;
-            }
-
-            return current;
-        }
-
-        public void insert(String word)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < word.length(); i++)
-            {
-                char c = word.charAt(i);
-                TrieNode node = current.children.get(c);
-
-                if (node == null)
-                {
-                    current.children.put(c, new TrieNode(c));
-                    node = current.children.get(c);
-                }
-
-                current = node;
-            }
-
-            current.isWord = true;
-        }
-    }
-
-    class TrieNode
-    {
-        boolean isWord;
-        char content;
-        Map<Character, TrieNode> children;
-
-        public TrieNode()
-        {
-            this.content = ' ';
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-
-        public TrieNode(char content)
-        {
-            this.content = content;
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-    }
-}
-
diff --git a/212.word-search-ii.167159747.Accepted.leetcode.java b/212.word-search-ii.167159747.Accepted.leetcode.java
deleted file mode 100644
index fd583aa0..00000000
--- ./212.word-search-ii.167159747.Accepted.leetcode.java
+++ /dev/null
@@ -1,132 +0,0 @@
-public class Solution
-{
-    public List<String> findWords(char[][] board, String[] words)
-    {
-        List<String> result = new ArrayList<String>();
-
-        if (board == null || board.length == 0 || board[0].length == 0 || words == null || words.length == 0)
-        {
-            return result;
-        }
-
-        boolean[][] visited = new boolean[board.length][board[0].length];
-        Trie trie = new Trie(new HashSet<String>(Arrays.asList(words)));
-
-        for (int i = 0; i < board.length; i++)
-        {
-            for (int j = 0; j < board[0].length; j++)
-            {
-                dfs(board, i, j, "", visited, trie, result);
-            }
-        }
-
-        return result;
-    }
-
-    private void dfs(char[][] board, int i, int j, String str, boolean[][] visited, Trie trie, List<String> result)
-    {
-        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j])
-        {
-            return;
-        }
-
-        String newStr = str + board[i][j];
-        TrieNode endNode = trie.startWith(newStr);
-
-        if (endNode == null)
-        {
-            return;
-        }
-
-        if (endNode.isWord)
-        {
-            result.add(newStr);
-            endNode.isWord = false; // avoid duplicate in result
-        }
-
-        visited[i][j] = true;
-        dfs(board, i + 1, j, newStr, visited, trie, result);
-        dfs(board, i - 1, j, newStr, visited, trie, result);
-        dfs(board, i, j + 1, newStr, visited, trie, result);
-        dfs(board, i, j - 1, newStr, visited, trie, result);
-        visited[i][j] = false;
-    }
-
-    class Trie
-    {
-        TrieNode root;
-
-        public Trie(Set<String> strs)
-        {
-            root = new TrieNode();
-
-            for (String str : strs)
-            {
-                insert(str);
-            }
-        }
-
-        // gets the last node in the tree that matches the str, return null if not match
-        public TrieNode startWith(String prefix)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < prefix.length(); i++)
-            {
-                TrieNode node = current.children.get(prefix.charAt(i));
-
-                if (node == null)
-                {
-                    return null;
-                }
-
-                current = node;
-            }
-
-            return current;
-        }
-
-        public void insert(String word)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < word.length(); i++)
-            {
-                char c = word.charAt(i);
-                TrieNode node = current.children.get(c);
-
-                if (node == null)
-                {
-                    current.children.put(c, new TrieNode(c));
-                    node = current.children.get(c);
-                }
-
-                current = node;
-            }
-
-            current.isWord = true;
-        }
-    }
-
-    class TrieNode
-    {
-        boolean isWord;
-        char content;
-        Map<Character, TrieNode> children;
-
-        public TrieNode()
-        {
-            this.content = ' ';
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-
-        public TrieNode(char content)
-        {
-            this.content = content;
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-    }
-}
-
diff --git a/212.word-search-ii.89941864.Runtime-Error.leetcode.java b/212.word-search-ii.89941864.Runtime-Error.leetcode.java
deleted file mode 100644
index 8ecd2625..00000000
--- ./212.word-search-ii.89941864.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,131 +0,0 @@
-public class Solution
-{
-    public List<String> findWords(char[][] board, String[] words)
-    {
-        Set<String> result = new HashSet<String>();
-
-        if (board == null || board.length == 0 || board[0].length == 0
-            || words == null || words.length == 0)
-        {
-            return (List<String>) result;
-        }
-
-        boolean[][] visited = new boolean[board.length][board[0].length];
-        Trie trie = new Trie(new HashSet<String>(Arrays.asList(words)));
-
-        for (int i = 0; i < board.length; i++)
-        {
-            for (int j = 0; j < board[0].length; j++)
-            {
-                dfs(board, i, j, "", visited, trie, result);
-            }
-        }
-
-        return new ArrayList<String>(result);
-    }
-
-    private void dfs(char[][] board, int i, int j, String str, boolean[][] visited, Trie trie, Set<String> result)
-    {
-        if (i < 0 || i>= board.length || j < 0 || j >= board[0].length || visited[i][j])
-        {
-            return;
-        }
-
-        String newStr = str + board[i][j];
-        TrieNode endNode = trie.startWith(newStr);
-
-        if (endNode == null)
-        {
-            return;
-        }
-
-        if (endNode.isWord == true)
-        {
-            result.add(newStr);
-        }
-
-        visited[i][j] = true;
-        dfs(board, i + 1, j, newStr, visited, trie, result);
-        dfs(board, i - 1, j, newStr, visited, trie, result);
-        dfs(board, i, j + 1, newStr, visited, trie, result);
-        dfs(board, i, j - 1, newStr, visited, trie, result);
-        visited[i][j] = false;
-    }
-
-    class Trie
-    {
-        TrieNode root;
-
-        public Trie(Set<String> strs)
-        {
-            root = new TrieNode();
-
-            for (String str : strs)
-            {
-                insert(str);
-            }
-        }
-
-        // gets the last node in the tree that matches the str, return null if not match
-        public TrieNode startWith(String prefix)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < prefix.length(); i++)
-            {
-                TrieNode node = current.children.get(prefix.charAt(i));
-
-                if (node == null)
-                {
-                    return null;
-                }
-
-                current = node;
-            }
-
-            return current;
-        }
-
-        public void insert(String word)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < word.length(); i++)
-            {
-                char c = word.charAt(i);
-                TrieNode node = current.children.get(c);
-
-                if (node == null)
-                {
-                    current.children.put(c, new TrieNode(c));
-                    node = current.children.get(c);
-                }
-
-                current = node;
-            }
-
-            current.isWord = true;
-        }
-    }
-
-    class TrieNode
-    {
-        boolean isWord;
-        char content;
-        Map<Character, TrieNode> children;
-
-        public TrieNode()
-        {
-            this.content = ' ';
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-
-        public TrieNode(char content)
-        {
-            this.content = content;
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-    }
-}
diff --git a/212.word-search-ii.89941928.Accepted.leetcode.java b/212.word-search-ii.89941928.Accepted.leetcode.java
deleted file mode 100644
index 83b830d3..00000000
--- ./212.word-search-ii.89941928.Accepted.leetcode.java
+++ /dev/null
@@ -1,131 +0,0 @@
-public class Solution
-{
-    public List<String> findWords(char[][] board, String[] words)
-    {
-        Set<String> result = new HashSet<String>();
-
-        if (board == null || board.length == 0 || board[0].length == 0
-            || words == null || words.length == 0)
-        {
-            return new ArrayList<String>(result);
-        }
-
-        boolean[][] visited = new boolean[board.length][board[0].length];
-        Trie trie = new Trie(new HashSet<String>(Arrays.asList(words)));
-
-        for (int i = 0; i < board.length; i++)
-        {
-            for (int j = 0; j < board[0].length; j++)
-            {
-                dfs(board, i, j, "", visited, trie, result);
-            }
-        }
-
-        return new ArrayList<String>(result);
-    }
-
-    private void dfs(char[][] board, int i, int j, String str, boolean[][] visited, Trie trie, Set<String> result)
-    {
-        if (i < 0 || i>= board.length || j < 0 || j >= board[0].length || visited[i][j])
-        {
-            return;
-        }
-
-        String newStr = str + board[i][j];
-        TrieNode endNode = trie.startWith(newStr);
-
-        if (endNode == null)
-        {
-            return;
-        }
-
-        if (endNode.isWord == true)
-        {
-            result.add(newStr);
-        }
-
-        visited[i][j] = true;
-        dfs(board, i + 1, j, newStr, visited, trie, result);
-        dfs(board, i - 1, j, newStr, visited, trie, result);
-        dfs(board, i, j + 1, newStr, visited, trie, result);
-        dfs(board, i, j - 1, newStr, visited, trie, result);
-        visited[i][j] = false;
-    }
-
-    class Trie
-    {
-        TrieNode root;
-
-        public Trie(Set<String> strs)
-        {
-            root = new TrieNode();
-
-            for (String str : strs)
-            {
-                insert(str);
-            }
-        }
-
-        // gets the last node in the tree that matches the str, return null if not match
-        public TrieNode startWith(String prefix)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < prefix.length(); i++)
-            {
-                TrieNode node = current.children.get(prefix.charAt(i));
-
-                if (node == null)
-                {
-                    return null;
-                }
-
-                current = node;
-            }
-
-            return current;
-        }
-
-        public void insert(String word)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < word.length(); i++)
-            {
-                char c = word.charAt(i);
-                TrieNode node = current.children.get(c);
-
-                if (node == null)
-                {
-                    current.children.put(c, new TrieNode(c));
-                    node = current.children.get(c);
-                }
-
-                current = node;
-            }
-
-            current.isWord = true;
-        }
-    }
-
-    class TrieNode
-    {
-        boolean isWord;
-        char content;
-        Map<Character, TrieNode> children;
-
-        public TrieNode()
-        {
-            this.content = ' ';
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-
-        public TrieNode(char content)
-        {
-            this.content = content;
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-    }
-}
diff --git a/212.word-search-ii.89942194.Accepted.leetcode.java b/212.word-search-ii.89942194.Accepted.leetcode.java
deleted file mode 100644
index df67d278..00000000
--- ./212.word-search-ii.89942194.Accepted.leetcode.java
+++ /dev/null
@@ -1,131 +0,0 @@
-public class Solution
-{
-    public List<String> findWords(char[][] board, String[] words)
-    {
-        Set<String> result = new HashSet<String>();
-
-        if (board == null || board.length == 0 || board[0].length == 0
-            || words == null || words.length == 0)
-        {
-            return new ArrayList<String>(result);
-        }
-
-        boolean[][] visited = new boolean[board.length][board[0].length];
-        Trie trie = new Trie(words);
-
-        for (int i = 0; i < board.length; i++)
-        {
-            for (int j = 0; j < board[0].length; j++)
-            {
-                dfs(board, i, j, "", visited, trie, result);
-            }
-        }
-
-        return new ArrayList<String>(result);
-    }
-
-    private void dfs(char[][] board, int i, int j, String str, boolean[][] visited, Trie trie, Set<String> result)
-    {
-        if (i < 0 || i>= board.length || j < 0 || j >= board[0].length || visited[i][j])
-        {
-            return;
-        }
-
-        String newStr = str + board[i][j];
-        TrieNode endNode = trie.startWith(newStr);
-
-        if (endNode == null)
-        {
-            return;
-        }
-
-        if (endNode.isWord == true)
-        {
-            result.add(newStr);
-        }
-
-        visited[i][j] = true;
-        dfs(board, i + 1, j, newStr, visited, trie, result);
-        dfs(board, i - 1, j, newStr, visited, trie, result);
-        dfs(board, i, j + 1, newStr, visited, trie, result);
-        dfs(board, i, j - 1, newStr, visited, trie, result);
-        visited[i][j] = false;
-    }
-
-    class Trie
-    {
-        TrieNode root;
-
-        public Trie(String[] words)
-        {
-            root = new TrieNode();
-
-            for (String word : words)
-            {
-                insert(word);
-            }
-        }
-
-        // gets the last node in the tree that matches the str, return null if not match
-        public TrieNode startWith(String prefix)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < prefix.length(); i++)
-            {
-                TrieNode node = current.children.get(prefix.charAt(i));
-
-                if (node == null)
-                {
-                    return null;
-                }
-
-                current = node;
-            }
-
-            return current;
-        }
-
-        public void insert(String word)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < word.length(); i++)
-            {
-                char c = word.charAt(i);
-                TrieNode node = current.children.get(c);
-
-                if (node == null)
-                {
-                    current.children.put(c, new TrieNode(c));
-                    node = current.children.get(c);
-                }
-
-                current = node;
-            }
-
-            current.isWord = true;
-        }
-    }
-
-    class TrieNode
-    {
-        boolean isWord;
-        char content;
-        Map<Character, TrieNode> children;
-
-        public TrieNode()
-        {
-            this.content = ' ';
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-
-        public TrieNode(char content)
-        {
-            this.content = content;
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-    }
-}
diff --git a/212.word-search-ii.92757792.Wrong-Answer.leetcode.java b/212.word-search-ii.92757792.Wrong-Answer.leetcode.java
deleted file mode 100644
index 5573e843..00000000
--- ./212.word-search-ii.92757792.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,119 +0,0 @@
-public class Solution
-{
-    public List<String> findWords(char[][] board, String[] words)
-    {
-        Set<String> result = new HashSet<String>();
-
-        if (board == null || board.length == 0 || board[0].length == 0
-            || words == null || words.length == 0)
-        {
-            return new ArrayList<String>(result);
-        }
-
-        boolean[][] visited = new boolean[board.length][board[0].length];
-        Trie trie = new Trie(words);
-
-        for (int i = 0; i < board.length; i++)
-        {
-            for (int j = 0; j < board[0].length; j++)
-            {
-                dfs(board, i, j, "", visited, trie, result);
-            }
-        }
-
-        return new ArrayList<String>(result);
-    }
-
-    private void dfs(char[][] board, int i, int j, String str, boolean[][] visited, Trie trie, Set<String> result)
-    {
-        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j] || null == trie.startWith(str))
-        {
-            return;
-        }
-
-        String newStr = str + board[i][j];
-        visited[i][j] = true;
-        dfs(board, i + 1, j, newStr, visited, trie, result);
-        dfs(board, i - 1, j, newStr, visited, trie, result);
-        dfs(board, i, j + 1, newStr, visited, trie, result);
-        dfs(board, i, j - 1, newStr, visited, trie, result);
-        visited[i][j] = false;
-    }
-
-    class Trie
-    {
-        TrieNode root;
-
-        public Trie(String[] words)
-        {
-            root = new TrieNode();
-
-            for (String word : words)
-            {
-                insert(word);
-            }
-        }
-
-        // gets the last node in the tree that matches the str, return null if not match
-        public TrieNode startWith(String prefix)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < prefix.length(); i++)
-            {
-                TrieNode node = current.children.get(prefix.charAt(i));
-
-                if (node == null)
-                {
-                    return null;
-                }
-
-                current = node;
-            }
-
-            return current;
-        }
-
-        public void insert(String word)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < word.length(); i++)
-            {
-                char c = word.charAt(i);
-                TrieNode node = current.children.get(c);
-
-                if (node == null)
-                {
-                    current.children.put(c, new TrieNode(c));
-                    node = current.children.get(c);
-                }
-
-                current = node;
-            }
-
-            current.isWord = true;
-        }
-    }
-
-    class TrieNode
-    {
-        boolean isWord;
-        char content;
-        Map<Character, TrieNode> children;
-
-        public TrieNode()
-        {
-            this.content = ' ';
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-
-        public TrieNode(char content)
-        {
-            this.content = content;
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-    }
-}
diff --git a/212.word-search-ii.92758539.Wrong-Answer.leetcode.java b/212.word-search-ii.92758539.Wrong-Answer.leetcode.java
deleted file mode 100644
index c9623322..00000000
--- ./212.word-search-ii.92758539.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,124 +0,0 @@
-public class Solution
-{
-    public List<String> findWords(char[][] board, String[] words)
-    {
-        Set<String> result = new HashSet<String>();
-
-        if (board == null || board.length == 0 || board[0].length == 0
-            || words == null || words.length == 0)
-        {
-            return new ArrayList<String>(result);
-        }
-
-        boolean[][] visited = new boolean[board.length][board[0].length];
-        Trie trie = new Trie(words);
-
-        for (int i = 0; i < board.length; i++)
-        {
-            for (int j = 0; j < board[0].length; j++)
-            {
-                dfs(board, i, j, "", visited, trie, result);
-            }
-        }
-
-        return new ArrayList<String>(result);
-    }
-
-    private void dfs(char[][] board, int i, int j, String str, boolean[][] visited, Trie trie, Set<String> result)
-    {
-        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j] || null == trie.startWith(str))
-        {
-            return;
-        }
-
-        if (trie.startWith(str).isWord)
-        {
-            result.add(str);
-        }
-
-        String newStr = str + board[i][j];
-        visited[i][j] = true;
-        dfs(board, i + 1, j, newStr, visited, trie, result);
-        dfs(board, i - 1, j, newStr, visited, trie, result);
-        dfs(board, i, j + 1, newStr, visited, trie, result);
-        dfs(board, i, j - 1, newStr, visited, trie, result);
-        visited[i][j] = false;
-    }
-
-    class Trie
-    {
-        TrieNode root;
-
-        public Trie(String[] words)
-        {
-            root = new TrieNode();
-
-            for (String word : words)
-            {
-                insert(word);
-            }
-        }
-
-        // gets the last node in the tree that matches the str, return null if not match
-        public TrieNode startWith(String prefix)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < prefix.length(); i++)
-            {
-                TrieNode node = current.children.get(prefix.charAt(i));
-
-                if (node == null)
-                {
-                    return null;
-                }
-
-                current = node;
-            }
-
-            return current;
-        }
-
-        public void insert(String word)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < word.length(); i++)
-            {
-                char c = word.charAt(i);
-                TrieNode node = current.children.get(c);
-
-                if (node == null)
-                {
-                    current.children.put(c, new TrieNode(c));
-                    node = current.children.get(c);
-                }
-
-                current = node;
-            }
-
-            current.isWord = true;
-        }
-    }
-
-    class TrieNode
-    {
-        boolean isWord;
-        char content;
-        Map<Character, TrieNode> children;
-
-        public TrieNode()
-        {
-            this.content = ' ';
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-
-        public TrieNode(char content)
-        {
-            this.content = content;
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-    }
-}
diff --git a/212.word-search-ii.92758883.Wrong-Answer.leetcode.java b/212.word-search-ii.92758883.Wrong-Answer.leetcode.java
deleted file mode 100644
index 43bd8a27..00000000
--- ./212.word-search-ii.92758883.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,126 +0,0 @@
-public class Solution
-{
-    public List<String> findWords(char[][] board, String[] words)
-    {
-        Set<String> result = new HashSet<String>();
-
-        if (board == null || board.length == 0 || board[0].length == 0
-            || words == null || words.length == 0)
-        {
-            return new ArrayList<String>(result);
-        }
-
-        boolean[][] visited = new boolean[board.length][board[0].length];
-        Trie trie = new Trie(words);
-
-        for (int i = 0; i < board.length; i++)
-        {
-            for (int j = 0; j < board[0].length; j++)
-            {
-                dfs(board, i, j, "", visited, trie, result);
-            }
-        }
-
-        return new ArrayList<String>(result);
-    }
-
-    private void dfs(char[][] board, int i, int j, String str, boolean[][] visited, Trie trie, Set<String> result)
-    {
-        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j] || null == trie.startWith(str))
-        {
-            return;
-        }
-
-        System.out.println("str --> " + str);
-        
-        if (trie.startWith(str).isWord)
-        {
-            result.add(str);
-        }
-
-        String newStr = str + board[i][j];
-        visited[i][j] = true;
-        dfs(board, i + 1, j, newStr, visited, trie, result);
-        dfs(board, i - 1, j, newStr, visited, trie, result);
-        dfs(board, i, j + 1, newStr, visited, trie, result);
-        dfs(board, i, j - 1, newStr, visited, trie, result);
-        visited[i][j] = false;
-    }
-
-    class Trie
-    {
-        TrieNode root;
-
-        public Trie(String[] words)
-        {
-            root = new TrieNode();
-
-            for (String word : words)
-            {
-                insert(word);
-            }
-        }
-
-        // gets the last node in the tree that matches the str, return null if not match
-        public TrieNode startWith(String prefix)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < prefix.length(); i++)
-            {
-                TrieNode node = current.children.get(prefix.charAt(i));
-
-                if (node == null)
-                {
-                    return null;
-                }
-
-                current = node;
-            }
-
-            return current;
-        }
-
-        public void insert(String word)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < word.length(); i++)
-            {
-                char c = word.charAt(i);
-                TrieNode node = current.children.get(c);
-
-                if (node == null)
-                {
-                    current.children.put(c, new TrieNode(c));
-                    node = current.children.get(c);
-                }
-
-                current = node;
-            }
-
-            current.isWord = true;
-        }
-    }
-
-    class TrieNode
-    {
-        boolean isWord;
-        char content;
-        Map<Character, TrieNode> children;
-
-        public TrieNode()
-        {
-            this.content = ' ';
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-
-        public TrieNode(char content)
-        {
-            this.content = content;
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-    }
-}
diff --git a/212.word-search-ii.92759054.Wrong-Answer.leetcode.java b/212.word-search-ii.92759054.Wrong-Answer.leetcode.java
deleted file mode 100644
index 1ff7eb13..00000000
--- ./212.word-search-ii.92759054.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,127 +0,0 @@
-public class Solution
-{
-    public List<String> findWords(char[][] board, String[] words)
-    {
-        Set<String> result = new HashSet<String>();
-
-        if (board == null || board.length == 0 || board[0].length == 0
-            || words == null || words.length == 0)
-        {
-            return new ArrayList<String>(result);
-        }
-
-        boolean[][] visited = new boolean[board.length][board[0].length];
-        Trie trie = new Trie(words);
-
-        for (int i = 0; i < board.length; i++)
-        {
-            for (int j = 0; j < board[0].length; j++)
-            {
-                dfs(board, i, j, "", visited, trie, result);
-            }
-        }
-
-        return new ArrayList<String>(result);
-    }
-
-    private void dfs(char[][] board, int i, int j, String str, boolean[][] visited, Trie trie, Set<String> result)
-    {
-        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j] || null == trie.startWith(str))
-        {
-            return;
-        }
-
-        System.out.println("str --> " + str);
-        
-        if (trie.startWith(str).isWord)
-        {
-            result.add(str);
-        }
-
-        String newStr = str + board[i][j];
-        System.out.println("newStr --> " + newStr);
-        visited[i][j] = true;
-        dfs(board, i + 1, j, newStr, visited, trie, result);
-        dfs(board, i - 1, j, newStr, visited, trie, result);
-        dfs(board, i, j + 1, newStr, visited, trie, result);
-        dfs(board, i, j - 1, newStr, visited, trie, result);
-        visited[i][j] = false;
-    }
-
-    class Trie
-    {
-        TrieNode root;
-
-        public Trie(String[] words)
-        {
-            root = new TrieNode();
-
-            for (String word : words)
-            {
-                insert(word);
-            }
-        }
-
-        // gets the last node in the tree that matches the str, return null if not match
-        public TrieNode startWith(String prefix)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < prefix.length(); i++)
-            {
-                TrieNode node = current.children.get(prefix.charAt(i));
-
-                if (node == null)
-                {
-                    return null;
-                }
-
-                current = node;
-            }
-
-            return current;
-        }
-
-        public void insert(String word)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < word.length(); i++)
-            {
-                char c = word.charAt(i);
-                TrieNode node = current.children.get(c);
-
-                if (node == null)
-                {
-                    current.children.put(c, new TrieNode(c));
-                    node = current.children.get(c);
-                }
-
-                current = node;
-            }
-
-            current.isWord = true;
-        }
-    }
-
-    class TrieNode
-    {
-        boolean isWord;
-        char content;
-        Map<Character, TrieNode> children;
-
-        public TrieNode()
-        {
-            this.content = ' ';
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-
-        public TrieNode(char content)
-        {
-            this.content = content;
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-    }
-}
diff --git a/212.word-search-ii.92760346.Accepted.leetcode.java b/212.word-search-ii.92760346.Accepted.leetcode.java
deleted file mode 100644
index 5aa28f4f..00000000
--- ./212.word-search-ii.92760346.Accepted.leetcode.java
+++ /dev/null
@@ -1,131 +0,0 @@
-public class Solution
-{
-    public List<String> findWords(char[][] board, String[] words)
-    {
-        Set<String> result = new HashSet<String>();
-
-        if (board == null || board.length == 0 || board[0].length == 0
-            || words == null || words.length == 0)
-        {
-            return new ArrayList<String>(result);
-        }
-
-        boolean[][] visited = new boolean[board.length][board[0].length];
-        Trie trie = new Trie(words);
-
-        for (int i = 0; i < board.length; i++)
-        {
-            for (int j = 0; j < board[0].length; j++)
-            {
-                dfs(board, i, j, "", visited, trie, result);
-            }
-        }
-
-        return new ArrayList<String>(result);
-    }
-
-    private void dfs(char[][] board, int i, int j, String str, boolean[][] visited, Trie trie, Set<String> result)
-    {
-        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j])
-        {
-            return;
-        }
-
-        String newStr = str + board[i][j];
-        TrieNode endNode = trie.startWith(newStr);
-        
-        if (null == endNode)
-        {
-            return;
-        }
-        
-        if (trie.startWith(newStr).isWord)
-        {
-            result.add(newStr);
-        }
-        
-        visited[i][j] = true;
-        dfs(board, i + 1, j, newStr, visited, trie, result);
-        dfs(board, i - 1, j, newStr, visited, trie, result);
-        dfs(board, i, j + 1, newStr, visited, trie, result);
-        dfs(board, i, j - 1, newStr, visited, trie, result);
-        visited[i][j] = false;
-    }
-
-    class Trie
-    {
-        TrieNode root;
-
-        public Trie(String[] words)
-        {
-            root = new TrieNode();
-
-            for (String word : words)
-            {
-                insert(word);
-            }
-        }
-
-        // gets the last node in the tree that matches the str, return null if not match
-        public TrieNode startWith(String prefix)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < prefix.length(); i++)
-            {
-                TrieNode node = current.children.get(prefix.charAt(i));
-
-                if (node == null)
-                {
-                    return null;
-                }
-
-                current = node;
-            }
-
-            return current;
-        }
-
-        public void insert(String word)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < word.length(); i++)
-            {
-                char c = word.charAt(i);
-                TrieNode node = current.children.get(c);
-
-                if (node == null)
-                {
-                    current.children.put(c, new TrieNode(c));
-                    node = current.children.get(c);
-                }
-
-                current = node;
-            }
-
-            current.isWord = true;
-        }
-    }
-
-    class TrieNode
-    {
-        boolean isWord;
-        char content;
-        Map<Character, TrieNode> children;
-
-        public TrieNode()
-        {
-            this.content = ' ';
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-
-        public TrieNode(char content)
-        {
-            this.content = content;
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-    }
-}
diff --git a/212.word-search-ii.94973378.Time-Limit-Exceeded.leetcode.java b/212.word-search-ii.94973378.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index d6df9452..00000000
--- ./212.word-search-ii.94973378.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,131 +0,0 @@
-public class Solution
-{
-    public List<String> findWords(char[][] board, String[] words)
-    {
-        Set<String> result = new HashSet<String>();
-
-        if (board == null || board.length == 0 || board[0].length == 0
-                || words == null || words.length == 0)
-        {
-            return new ArrayList<String>(result);
-        }
-
-        boolean[][] visited = new boolean[board.length][board[0].length];
-        Trie trie = new Trie(words);
-
-        for (int i = 0; i < board.length; i++)
-        {
-            for (int j = 0; j < board[0].length; j++)
-            {
-                dfs(board, i, j, "", visited, trie, result);
-            }
-        }
-
-        return new ArrayList<String>(result);
-    }
-
-    private void dfs(char[][] board, int i, int j, String str, boolean[][] visited, Trie trie, Set<String> result)
-    {
-        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j])
-        {
-            return;
-        }
-
-        String newStr = str + board[i][j];
-        TrieNode endNode = trie.startWith(newStr);
-
-        if (null == endNode)
-        {
-            return;
-        }
-
-        if (trie.startWith(newStr).isWord)
-        {
-            result.add(newStr);
-        }
-
-        visited[i][j] = true;
-        dfs(board, i + 1, j, newStr, visited, trie, result);
-        dfs(board, i - 1, j, newStr, visited, trie, result);
-        dfs(board, i, j + 1, newStr, visited, trie, result);
-        dfs(board, i, j - 1, newStr, visited, trie, result);
-        visited[i][j] = false;
-    }
-
-    class Trie
-    {
-        TrieNode root;
-
-        public Trie(String[] words)
-        {
-            root = new TrieNode();
-
-            for (String word : words)
-            {
-                insert(word);
-            }
-        }
-
-        // gets the last node in the tree that matches the str, return null if not match
-        public TrieNode startWith(String prefix)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < prefix.length(); i++)
-            {
-                TrieNode node = current.children.get(prefix.charAt(i));
-
-                if (node == null)
-                {
-                    return null;
-                }
-
-                current = node;
-            }
-
-            return current;
-        }
-
-        public void insert(String word)
-        {
-            TrieNode current = root;
-
-            for (int i = 0; i < word.length(); i++)
-            {
-                char c = word.charAt(i);
-                TrieNode node = current.children.get(c);
-
-                if (node == null)
-                {
-                    current.children.put(c, new TrieNode(c));
-                    node = current.children.get(c);
-                }
-
-                current = node;
-            }
-
-            current.isWord = true;
-        }
-    }
-
-    class TrieNode
-    {
-        boolean isWord;
-        char content;
-        Map<Character, TrieNode> children;
-
-        public TrieNode()
-        {
-            this.content = ' ';
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-
-        public TrieNode(char content)
-        {
-            this.content = content;
-            this.isWord = false;
-            this.children = new HashMap<Character, TrieNode>();
-        }
-    }
-}
diff --git a/214.shortest-palindrome.102609447.Wrong-Answer.leetcode.java b/214.shortest-palindrome.102609447.Wrong-Answer.leetcode.java
deleted file mode 100644
index 57ef2785..00000000
--- ./214.shortest-palindrome.102609447.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,58 +0,0 @@
-public class Solution
-{
-    public String shortestPalindrome(String s)
-    {
-        if (s == null || s.length() <= 1)
-        {
-            return s;
-        }
-
-        String result = null;
-        int len = s.length();
-        int mid = len / 2;
-
-        for (int i = mid; i >= 1; i--)
-        {
-            if (s.charAt(i) == s.charAt(i - 1))
-            {
-                if ((result = scanFromCenter(s, i - 1, i)) != null)
-                {
-                    return result;
-                }
-            }
-            else
-            {
-                if ((result = scanFromCenter(s, i - 1, i - 1)) != null)
-                {
-                    return result;
-                }
-            }
-        }
-
-        return result;
-    }
-
-    private String scanFromCenter(String s, int l, int r)
-    {
-        int i = 1;
-
-        //scan from center to both sides
-        for (; l - i >= 0; i++)
-        {
-            if (s.charAt(l - i) != s.charAt(r + i))
-            {
-                break;
-            }
-        }
-
-        //if not end at the beginning of s, return null
-        if (l - i >= 0)
-        {
-            return null;
-        }
-
-        StringBuilder sb = new StringBuilder(s.substring(r + i));
-        sb.reverse();
-        return sb.append(s).toString();
-    }
-}
diff --git a/214.shortest-palindrome.102644749.Accepted.leetcode.java b/214.shortest-palindrome.102644749.Accepted.leetcode.java
deleted file mode 100644
index c82f2e51..00000000
--- ./214.shortest-palindrome.102644749.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public String shortestPalindrome(String s)
-    {
-        StringBuilder sb = new StringBuilder(s);
-        String str = s + "#" + sb.reverse().toString();
-        int j = -1;
-        int[] next = new int[str.length()];
-        next[0] = -1;
-
-        for (int i = 1; i < str.length(); i++)
-        {
-            while (j > -1 && str.charAt(j + 1) != str.charAt(i))
-            {
-                j = next[j];
-            }
-
-            if (str.charAt(j + 1) == str.charAt(i))
-            {
-                j++ ;
-            }
-
-            next[i] = j;
-        }
-
-        StringBuilder res = new StringBuilder(s.substring(j + 1));
-        res.reverse();
-        return res.toString() + s;
-    }
-}
diff --git a/214.shortest-palindrome.30804959.Accepted.leetcode.java b/214.shortest-palindrome.30804959.Accepted.leetcode.java
deleted file mode 100644
index 568b4cb6..00000000
--- ./214.shortest-palindrome.30804959.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-  public class Solution
-  {
-    public String shortestPalindrome(String s)
-    {
-      StringBuilder sb = new StringBuilder(s);
-      String str = s + "#" + sb.reverse().toString();
-      int j = -1;
-      int[] next = new int[str.length()];
-      next[0] = -1;
-
-      for (int i = 1; i < str.length(); i++ )
-      {
-        while (j > -1 && str.charAt(j + 1) != str.charAt(i))
-        {
-          j = next[j];
-        }
-
-        if (str.charAt(j + 1) == str.charAt(i))
-        {
-          j++ ;
-        }
-
-        next[i] = j;
-      }
-
-      StringBuilder res = new StringBuilder(s.substring(j + 1));
-      res.reverse();
-      return res.toString() + s;
-    }
-  }
-
diff --git a/214.shortest-palindrome.39960127.Wrong-Answer.leetcode.java b/214.shortest-palindrome.39960127.Wrong-Answer.leetcode.java
deleted file mode 100644
index 2588c4be..00000000
--- ./214.shortest-palindrome.39960127.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,59 +0,0 @@
-  public class Solution
-  {
-    public String shortestPalindrome(String s)
-    {
-      if (s == null || s.length() <= 1)
-      {
-        return s;
-      }
-
-      String result = null;
-      int len = s.length();
-      int mid = len / 2;
-
-      for (int i = mid; i >= 1; i--)
-      {
-        if (s.charAt(i) == s.charAt(i - 1))
-        {
-          if ((result = scanFromCenter(s, i - 1, i)) != null)
-          {
-            return result;
-          }
-        }
-        else
-        {
-          if ((result = scanFromCenter(s, i - 1, i - 1)) != null)
-          {
-            return result;
-          }
-        }
-      }
-
-      return result;
-    }
-
-    private String scanFromCenter(String s, int l, int r)
-    {
-      int i = 1;
-
-      //scan from center to both sides
-      for (; l - i >= 0; i++)
-      {
-        if (s.charAt(l - i) != s.charAt(r + i))
-        {
-          break;
-        }
-      }
-
-      //if not end at the beginning of s, return null
-      if (l - i >= 0)
-      {
-        return null;
-      }
-
-      StringBuilder sb = new StringBuilder(s.substring(r + i));
-      sb.reverse();
-      return sb.append(s).toString();
-    }
-  }
-
diff --git a/216.combination-sum-iii.168463996.Wrong-Answer.leetcode.java b/216.combination-sum-iii.168463996.Wrong-Answer.leetcode.java
deleted file mode 100644
index b845d7b8..00000000
--- ./216.combination-sum-iii.168463996.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum3(int k, int n)
-    {
-        List<List<Integer>> re = new ArrayList<List<Integer>>();
-        dfs(re, 1, 0, k, n, new ArrayList<Integer>());
-        return re;
-    }
-
-    private void dfs(List<List<Integer>> result, int start, int target, int k,
-                     int n, List<Integer> current)
-    {
-        if (target < 0 || k < 0)
-        {
-            return;
-        }
-
-        if (k == 0 && target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int index = start; index <= 9; index++)
-        {
-            current.add(index);
-            dfs(result, index + 1, target - index, k - 1, n, current);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/216.combination-sum-iii.168465130.Wrong-Answer.leetcode.java b/216.combination-sum-iii.168465130.Wrong-Answer.leetcode.java
deleted file mode 100644
index c7ca4bf8..00000000
--- ./216.combination-sum-iii.168465130.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum3(int k, int n)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        dfs(result, 1, 0, k, n, new ArrayList<Integer>());
-        return result;
-    }
-
-    private void dfs(List<List<Integer>> result, int start, int target, int k, int n, List<Integer> current)
-    {
-        System.out.printf("k --> %s\n", k);
-        System.out.printf("target --> %s\n", target);
-
-        if (target < 0 || k < 0)
-        {
-            return;
-        }
-
-        if (k == 0 && target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int index = start; index <= 9; index++)
-        {
-            current.add(index);
-            dfs(result, index + 1, target - index, k - 1, n, current);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/216.combination-sum-iii.168465572.Wrong-Answer.leetcode.java b/216.combination-sum-iii.168465572.Wrong-Answer.leetcode.java
deleted file mode 100644
index 45ca83ef..00000000
--- ./216.combination-sum-iii.168465572.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum3(int k, int n)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        dfs(result, 1, 0, k, n, new ArrayList<Integer>());
-        return result;
-    }
-
-    private void dfs(List<List<Integer>> result, int start, int target, int k, int n, List<Integer> current)
-    {
-        if (target < 0 || k < 0)
-        {
-            return;
-        }
-
-        System.out.printf("k --> %s\n", k);
-        System.out.printf("target --> %s\n", target);
-
-        if (k == 0 && target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int index = start; index <= 9; index++)
-        {
-            current.add(index);
-            dfs(result, index + 1, target - index, k - 1, n, current);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/216.combination-sum-iii.168465989.Accepted.leetcode.java b/216.combination-sum-iii.168465989.Accepted.leetcode.java
deleted file mode 100644
index 1720fd95..00000000
--- ./216.combination-sum-iii.168465989.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum3(int k, int n)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        dfs(result, 1, n, k, new ArrayList<Integer>());
-        return result;
-    }
-
-    private void dfs(List<List<Integer>> result, int start, int target, int k, List<Integer> current)
-    {
-        System.out.printf("k --> %s\n", k);
-        System.out.printf("target --> %s\n", target);
-
-        if (target < 0 || k < 0)
-        {
-            return;
-        }
-
-        if (k == 0 && target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int index = start; index <= 9; index++)
-        {
-            current.add(index);
-            dfs(result, index + 1, target - index, k - 1, current);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/216.combination-sum-iii.33508368.Accepted.leetcode.java b/216.combination-sum-iii.33508368.Accepted.leetcode.java
deleted file mode 100644
index a96893ae..00000000
--- ./216.combination-sum-iii.33508368.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-  public class Solution
-  {
-    public List<List<Integer>> combinationSum3(int k, int n)
-    {
-      List<List<Integer>> re = new ArrayList<List<Integer>>();
-      dfs(re, 1, n, k, n, new ArrayList<Integer>());
-      return re;
-    }
-
-    private void dfs(List<List<Integer>> result, int start, int target, int k,
-                     int n, List<Integer> current)
-    {
-      if (target < 0 || k < 0)
-      {
-        return;
-      }
-
-      if (k == 0 && target == 0)
-      {
-        result.add(new ArrayList<Integer>(current));
-        return;
-      }
-
-      for (int index = start; index <= 9; index++)
-      {
-        current.add(index);
-        dfs(result, index + 1, target - index, k - 1, n, current);
-        current.remove(current.size() - 1);
-      }
-    }
-  }
-
diff --git a/216.combination-sum-iii.33508498.Accepted.leetcode.java b/216.combination-sum-iii.33508498.Accepted.leetcode.java
deleted file mode 100644
index cc4b1924..00000000
--- ./216.combination-sum-iii.33508498.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-  public class Solution
-  {
-    public List<List<Integer>> combinationSum3(int k, int n)
-    {
-      List<List<Integer>> re = new ArrayList<List<Integer>>();
-      dfs(re, 1, n, k, new ArrayList<Integer>());
-      return re;
-    }
-
-    private void dfs(List<List<Integer>> result, int start, int target, int k, List<Integer> current)
-    {
-      if (target < 0 || k < 0)
-      {
-        return;
-      }
-
-      if (k == 0 && target == 0)
-      {
-        result.add(new ArrayList<Integer>(current));
-        return;
-      }
-
-      for (int index = start; index <= 9; index++)
-      {
-        current.add(index);
-        dfs(result, index + 1, target - index, k - 1, current);
-        current.remove(current.size() - 1);
-      }
-    }
-  }
-
diff --git a/216.combination-sum-iii.70316277.Accepted.leetcode.java b/216.combination-sum-iii.70316277.Accepted.leetcode.java
deleted file mode 100644
index 4bae568c..00000000
--- ./216.combination-sum-iii.70316277.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-  public class Solution
-  {
-    public List<List<Integer>> combinationSum3(int k, int n)
-    {
-      List<List<Integer>> result = new ArrayList<List<Integer>>();
-      dfs(result, 1, n, k, new ArrayList<Integer>());
-      return result;
-    }
-    private void dfs(List<List<Integer>> result, int start, int target,
-                     int k, List<Integer> current)
-    {
-      if (k == 0 && target == 0)
-      {
-        result.add(new ArrayList<Integer>(current));
-        return;
-      }
-
-      if (target < 0 || k < 0)
-      {
-        return;
-      }
-
-      for (int index = start; index <= 9; index++)
-      {
-        current.add(index);
-        dfs(result, index + 1, target - index, k - 1, current);
-        current.remove(current.size() - 1);
-      }
-    }
-  }
-
diff --git a/216.combination-sum-iii.97986186.Accepted.leetcode.java b/216.combination-sum-iii.97986186.Accepted.leetcode.java
deleted file mode 100644
index 6d95c454..00000000
--- ./216.combination-sum-iii.97986186.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum3(int k, int n)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        dfs(result, 1, n, k, new ArrayList<Integer>());
-        return result;
-    }
-    private void dfs(List<List<Integer>> result, int start, int target, int k, List<Integer> current)
-    {
-        if (k == 0 && target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        if (target < 0 || k < 0)
-        {
-            return;
-        }
-
-        for (int index = start; index <= 9; index++)
-        {
-            current.add(index);
-            dfs(result, index + 1, target - index, k - 1, current);
-            current.remove(current.size() - 1);
-        }
-    }
-}
diff --git a/216.combination-sum-iii.97986696.Wrong-Answer.leetcode.java b/216.combination-sum-iii.97986696.Wrong-Answer.leetcode.java
deleted file mode 100644
index ece3f241..00000000
--- ./216.combination-sum-iii.97986696.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum3(int k, int n)
-    {
-        List<List<Integer>> re = new ArrayList<List<Integer>>();
-        dfs(re, 1, 0, k, n, new ArrayList<Integer>());
-        return re;
-    }
-
-    private void dfs(List<List<Integer>> result, int start, int target, int k,
-                     int n, List<Integer> current)
-    {
-        if (target < 0 || k < 0)
-        {
-            return;
-        }
-
-        if (k == 0 && target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int index = start; index <= 9; index++)
-        {
-            current.add(index);
-            dfs(result, index + 1, target - index, k - 1, n, current);
-            current.remove(current.size() - 1);
-        }
-    }
-}
diff --git a/216.combination-sum-iii.97987196.Accepted.leetcode.java b/216.combination-sum-iii.97987196.Accepted.leetcode.java
deleted file mode 100644
index 8b11f87b..00000000
--- ./216.combination-sum-iii.97987196.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum3(int k, int n)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        dfs(result, 1, k, n, new ArrayList<Integer>());
-        return result;
-    }
-
-    private void dfs(List<List<Integer>> result, int start, int k, int n, List<Integer> current)
-    {
-        if (n < 0 || k < 0)
-        {
-            return;
-        }
-
-        if (k == 0 && n == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int index = start; index <= 9; index++)
-        {
-            current.add(index);
-            dfs(result, index + 1, k - 1, n - index, current);
-            current.remove(current.size() - 1);
-        }
-    }
-}
diff --git a/217.contains-duplicate.168642208.Accepted.leetcode.java b/217.contains-duplicate.168642208.Accepted.leetcode.java
deleted file mode 100644
index 84dee45f..00000000
--- ./217.contains-duplicate.168642208.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public boolean containsDuplicate(int[] nums)
-    {
-        Set<Integer> hash = new HashSet<Integer>();
-
-        for (int i : nums)
-        {
-            if (hash.contains(i))
-            {
-                return true;
-            }
-
-            hash.add(i);
-        }
-
-        return false;
-    }
-}
-
diff --git a/217.contains-duplicate.30784211.Accepted.leetcode.java b/217.contains-duplicate.30784211.Accepted.leetcode.java
deleted file mode 100644
index 7221c776..00000000
--- ./217.contains-duplicate.30784211.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-  public class Solution
-  {
-    public boolean containsDuplicate(int[] nums)
-    {
-      Set<Integer> hash = new HashSet<Integer>();
-
-      for (int i : nums)
-      {
-        if (hash.contains(i))
-        {
-          return true;
-        }
-        else
-        {
-          hash.add(i);
-        }
-      }
-
-      return false;
-    }
-  }
-
diff --git a/218.the-skyline-problem.30868140.Accepted.leetcode.java b/218.the-skyline-problem.30868140.Accepted.leetcode.java
deleted file mode 100644
index 7bf1ae22..00000000
--- ./218.the-skyline-problem.30868140.Accepted.leetcode.java
+++ /dev/null
@@ -1,71 +0,0 @@
-public class Solution {
-    class Edge {
-	int x;
-	int height;
-	boolean isStart;
- 
-	public Edge(int x, int height, boolean isStart) {
-		this.x = x;
-		this.height = height;
-		this.isStart = isStart;
-	}
-}
-    public List<int[]> getSkyline(int[][] buildings) {
-	List<int[]> result = new ArrayList<int[]>();
- 
-	if (buildings == null || buildings.length == 0
-			|| buildings[0].length == 0) {
-		return result;
-	}
- 
-	List<Edge> edges = new ArrayList<Edge>();
- 
-	// add all left/right edges
-	for (int[] building : buildings) {
-		Edge startEdge = new Edge(building[0], building[2], true);
-		edges.add(startEdge);
-		Edge endEdge = new Edge(building[1], building[2], false);
-		edges.add(endEdge);
-	}
- 
-	// sort edges 
-	Collections.sort(edges, new Comparator<Edge>() {
-		public int compare(Edge a, Edge b) {
-			if (a.x != b.x)
-				return Integer.compare(a.x, b.x);
- 
-			if (a.isStart && b.isStart) {
-				return Integer.compare(b.height, a.height);
-			}
- 
-			if (!a.isStart && !b.isStart) {
-				return Integer.compare(a.height, b.height);
-			}
- 
-			return a.isStart ? -1 : 1;
-		}
-	});
- 
-	// process edges
-	PriorityQueue<Integer> heightHeap = new PriorityQueue<Integer>(10, Collections.reverseOrder());
- 
-	for (Edge edge : edges) {
-		if (edge.isStart) {
-			if (heightHeap.isEmpty() || edge.height > heightHeap.peek()) {
-				result.add(new int[] { edge.x, edge.height });
-			}
-			heightHeap.add(edge.height);
-		} else {
-			heightHeap.remove(edge.height);
- 
-			if(heightHeap.isEmpty()){
-				result.add(new int[] {edge.x, 0});
-			}else if(edge.height > heightHeap.peek()){
-				result.add(new int[]{edge.x, heightHeap.peek()});
-			}
-		}
-	}
- 
-	return result;
-}
-}
diff --git a/219.contains-duplicate-ii.30778549.Accepted.leetcode.java b/219.contains-duplicate-ii.30778549.Accepted.leetcode.java
deleted file mode 100644
index 905c21bc..00000000
--- ./219.contains-duplicate-ii.30778549.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-  public class Solution
-  {
-    public boolean containsNearbyDuplicate(int[] nums, int k)
-    {
-      Map<Integer, Integer> map = new HashMap<>();
-
-      for (int i = 0; i < nums.length; i++ )
-      {
-        if (map.containsKey(nums[i]))
-        {
-          if (i - map.get(nums[i]) <= k)
-          {
-            return true;
-          }
-        }
-
-        map.put(nums[i], i);
-      }
-
-      return false;
-    }
-  }
-
diff --git a/22.generate-parentheses.169125143.Runtime-Error.leetcode.java b/22.generate-parentheses.169125143.Runtime-Error.leetcode.java
deleted file mode 100644
index 259fc8d3..00000000
--- ./22.generate-parentheses.169125143.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public List<String> generateParenthesis(int n)
-    {
-        if (n < 0)
-        {
-            return null;
-        }
-
-        List<String> result = new ArrayList<String>();
-        helper(result, new StringBuilder(), n, n);
-        return result;
-    }
-
-    private void helper(List<String> result, StringBuilder sb, int left, int right)
-    {
-        if (left > right)
-        {
-            return;
-        }
-
-        if (left == 0 && right == 0)
-        {
-            result.add(sb.toString());
-            return;
-        }
-
-        sb.append("(");
-        helper(result, sb, left - 1, right);
-        sb.setLength(sb.length() - 1);
-        sb.append(")");
-        helper(result, sb, left, right - 1);
-        sb.setLength(sb.length() - 1);
-    }
-}
-
diff --git a/22.generate-parentheses.169370412.Runtime-Error.leetcode.java b/22.generate-parentheses.169370412.Runtime-Error.leetcode.java
deleted file mode 100644
index e08393e4..00000000
--- ./22.generate-parentheses.169370412.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public List<String> generateParenthesis(int n)
-    {
-        List<String> result = new ArrayList<String>();
-        dfs(result, new StringBuilder(), n, n);
-        return result;
-    }
-
-    private void dfs(List<String> result, StringBuilder sb, int left, int right)
-    {
-        if (left > right || right < 0)
-        {
-            return;
-        }
-
-        if (right == 0)
-        {
-            result.add(sb.toString());
-            return;
-        }
-
-        sb.append("(");
-        dfs(result, sb, left - 1, right);
-        sb.setLength(sb.length() - 1);
-        sb.append(")");
-        dfs(result, sb, left, right - 1);
-        sb.setLength(sb.length() - 1);
-    }
-}
-
diff --git a/22.generate-parentheses.169370525.Time-Limit-Exceeded.leetcode.java b/22.generate-parentheses.169370525.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index c5dbd5dd..00000000
--- ./22.generate-parentheses.169370525.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    public List<String> generateParenthesis(int n)
-    {
-        List<String> result = new ArrayList<String>();
-        dfs(result, new StringBuilder(), n, n);
-        return result;
-    }
-
-    private void dfs(List<String> result, StringBuilder sb, int left, int right)
-    {
-        System.out.printf("left --> %s\n", left);
-        System.out.printf("right --> %s\n", right);
-
-        if (left > right || right < 0)
-        {
-            return;
-        }
-
-        if (right == 0)
-        {
-            result.add(sb.toString());
-            return;
-        }
-
-        sb.append("(");
-        dfs(result, sb, left - 1, right);
-        sb.setLength(sb.length() - 1);
-        sb.append(")");
-        dfs(result, sb, left, right - 1);
-        sb.setLength(sb.length() - 1);
-    }
-}
-
diff --git a/22.generate-parentheses.169370660.Accepted.leetcode.java b/22.generate-parentheses.169370660.Accepted.leetcode.java
deleted file mode 100644
index 4e91b81c..00000000
--- ./22.generate-parentheses.169370660.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    public List<String> generateParenthesis(int n)
-    {
-        List<String> result = new ArrayList<String>();
-        dfs(result, new StringBuilder(), n, n);
-        return result;
-    }
-
-    private void dfs(List<String> result, StringBuilder sb, int left, int right)
-    {
-        System.out.printf("left --> %s\n", left);
-        System.out.printf("right --> %s\n", right);
-
-        if (left > right || left < 0)
-        {
-            return;
-        }
-
-        if (right == 0)
-        {
-            result.add(sb.toString());
-            return;
-        }
-
-        sb.append("(");
-        dfs(result, sb, left - 1, right);
-        sb.setLength(sb.length() - 1);
-        sb.append(")");
-        dfs(result, sb, left, right - 1);
-        sb.setLength(sb.length() - 1);
-    }
-}
-
diff --git a/22.generate-parentheses.169370719.Accepted.leetcode.java b/22.generate-parentheses.169370719.Accepted.leetcode.java
deleted file mode 100644
index 409b67c6..00000000
--- ./22.generate-parentheses.169370719.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public List<String> generateParenthesis(int n)
-    {
-        List<String> result = new ArrayList<String>();
-        dfs(result, new StringBuilder(), n, n);
-        return result;
-    }
-
-    private void dfs(List<String> result, StringBuilder sb, int left, int right)
-    {
-        if (left > right || left < 0)
-        {
-            return;
-        }
-
-        if (right == 0)
-        {
-            result.add(sb.toString());
-            return;
-        }
-
-        sb.append("(");
-        dfs(result, sb, left - 1, right);
-        sb.setLength(sb.length() - 1);
-        sb.append(")");
-        dfs(result, sb, left, right - 1);
-        sb.setLength(sb.length() - 1);
-    }
-}
-
diff --git a/22.generate-parentheses.87225542.Runtime-Error.leetcode.java b/22.generate-parentheses.87225542.Runtime-Error.leetcode.java
deleted file mode 100644
index 56fee8e9..00000000
--- ./22.generate-parentheses.87225542.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution 
-{
-    public List<String> generateParenthesis(int n) 
-    {
-        if (n < 0) 
-        {
-            return null;
-        }
-
-        List<String> result = new ArrayList<String>();
-        helper(result, new StringBuilder(), n, n);
-        return result;
-    }
-
-    private void helper(List<String> result, StringBuilder sb, int left, int right) 
-    {
-        if (left > right)
-        {
-            return;
-        }
-        
-        if (left == 0 && right == 0)
-        {
-            result.add(sb.toString());
-            return;
-        }
-        
-        sb.append("(");
-        helper(result, sb, left - 1, right);
-        sb.setLength(sb.length() - 1);
-        sb.append(")");
-        helper(result, sb, left, right - 1);
-        sb.setLength(sb.length() - 1);
-    }
-}
diff --git a/22.generate-parentheses.87226234.Accepted.leetcode.java b/22.generate-parentheses.87226234.Accepted.leetcode.java
deleted file mode 100644
index 9441cf6b..00000000
--- ./22.generate-parentheses.87226234.Accepted.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution 
-{
-    public List<String> generateParenthesis(int n) 
-    {
-        if (n < 0) 
-        {
-            return null;
-        }
-
-        List<String> result = new ArrayList<String>();
-        helper(result, new StringBuilder(), n, n);
-        return result;
-    }
-
-    private void helper(List<String> result, StringBuilder sb, int left, int right) 
-    {
-        if (left < 0 || right < 0 || left > right)
-        {
-            return;
-        }
-        
-        if (left == 0 && right == 0)
-        {
-            result.add(sb.toString());
-            return;
-        }
-        
-        sb.append("(");
-        helper(result, sb, left - 1, right);
-        sb.setLength(sb.length() - 1);
-        sb.append(")");
-        helper(result, sb, left, right - 1);
-        sb.setLength(sb.length() - 1);
-    }
-}
diff --git a/220.contains-duplicate-iii.30775253.Accepted.leetcode.java b/220.contains-duplicate-iii.30775253.Accepted.leetcode.java
deleted file mode 100644
index ea380d68..00000000
--- ./220.contains-duplicate-iii.30775253.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-  public class Solution
-  {
-    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t)
-    {
-      if (k < 1 || t < 0)
-      {
-        return false;
-      }
-
-      TreeSet<Integer> set = new TreeSet<>();
-
-      for (int i = 0; i < nums.length; i++ )
-      {
-        int n = nums[i];
-
-        if (set.floor(n) != null && n <= t + set.floor(n)
-          || set.ceiling(n) != null && set.ceiling(n) <= t + n)
-        {
-          return true;
-        }
-
-        set.add(n);
-
-        if (i >= k)
-        {
-          set.remove(nums[i - k]);
-        }
-      }
-
-      return false;
-    }
-  }
-
diff --git a/220.contains-duplicate-iii.30775877.Accepted.leetcode.java b/220.contains-duplicate-iii.30775877.Accepted.leetcode.java
deleted file mode 100644
index e49fd33f..00000000
--- ./220.contains-duplicate-iii.30775877.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-import java.util.SortedSet;
-import java.util.TreeSet;
-
-  public class Solution
-  {
-    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t)
-    {
-      if (k < 1 || t < 0 || nums == null || nums.length < 2)
-      {
-        return false;
-      }
-
-      SortedSet<Long> set = new TreeSet<Long>();
-
-      for (int j = 0; j < nums.length; j++ )
-      {
-        SortedSet<Long> subSet =
-          set.subSet((long) nums[j] - t, (long) nums[j] + t + 1);
-
-        if (!subSet.isEmpty())
-        {
-          return true;
-        }
-
-        if (j >= k)
-        {
-          set.remove((long) nums[j - k]);
-        }
-
-        set.add((long) nums[j]);
-      }
-
-      return false;
-    }
-  }
-
diff --git a/220.contains-duplicate-iii.40556404.Accepted.leetcode.java b/220.contains-duplicate-iii.40556404.Accepted.leetcode.java
deleted file mode 100644
index 0b3db20d..00000000
--- ./220.contains-duplicate-iii.40556404.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-  public class Solution
-  {
-    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t)
-    {
-      if (k < 1 || t < 0 || nums == null || nums.length < 2)
-      {
-        return false;
-      }
-
-      SortedSet<Long> set = new TreeSet<Long>();
-
-      for (int i = 0; i < nums.length; i++)
-      {
-        SortedSet<Long> subSet =
-          set.subSet((long) nums[i] - t, (long) nums[i] + t + 1);
-
-        if (!subSet.isEmpty())
-        {
-          return true;
-        }
-
-        if (i >= k)
-        {
-          set.remove((long) nums[i - k]);
-        }
-
-        set.add((long) nums[i]);
-      }
-
-      return false;
-    }
-  }
-
diff --git a/222.count-complete-tree-nodes.30753083.Accepted.leetcode.java b/222.count-complete-tree-nodes.30753083.Accepted.leetcode.java
deleted file mode 100644
index c3ef5ec9..00000000
--- ./222.count-complete-tree-nodes.30753083.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-  public class Solution
-  {
-    public int countNodes(TreeNode root)
-    {
-      if (root == null)
-      {
-        return 0;
-      }
-
-      int leftHeight = 0, rightHeight = 0;
-      TreeNode left = root;
-      TreeNode right = root;
-
-      while (left != null)
-      {
-        left = left.left;
-        leftHeight++ ;
-      }
-
-      while (right != null)
-      {
-        right = right.right;
-        rightHeight++ ;
-      }
-
-      if (leftHeight == rightHeight)
-      {
-        return (1 << leftHeight) - 1;
-      }
-
-      return 1 + countNodes(root.left) + countNodes(root.right);
-    }
-  }
-
diff --git a/222.count-complete-tree-nodes.30753968.Time-Limit-Exceeded.leetcode.java b/222.count-complete-tree-nodes.30753968.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index f832f342..00000000
--- ./222.count-complete-tree-nodes.30753968.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-  public class Solution
-  {
-    public int countNodes(TreeNode root)
-    {
-      if (root == null)
-      {
-        return 0;
-      }
-
-      int leftHeight = 0, rightHeight = 0;
-      TreeNode left = root;
-      TreeNode right = root;
-
-      while (left != null)
-      {
-        left = left.left;
-        leftHeight++ ;
-      }
-
-      while (right != null)
-      {
-        right = right.right;
-        rightHeight++ ;
-      }
-
-      if (leftHeight == rightHeight)
-      {
-        return (int) (Math.pow(2, leftHeight) - 1);
-      }
-
-      return 1 + countNodes(root.left) + countNodes(root.right);
-    }
-  }
-
diff --git a/223.rectangle-area.30641227.Accepted.leetcode.java b/223.rectangle-area.30641227.Accepted.leetcode.java
deleted file mode 100644
index 5e6c3f4b..00000000
--- ./223.rectangle-area.30641227.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-  public class Solution
-  {
-    public int computeArea(int A, int B, int C, int D, int E, int F, int G,
-                           int H)
-    {
-      int area = (C - A) * (D - B) + (G - E) * (H - F);
-
-      if (C < E || G < A || D < F || H < B)
-      {
-        return area;
-      }
-
-      int[] X = { A, C, E, G };
-      int[] Y = { B, D, F, H };
-      return area - diff(X) * diff(Y);
-    }
-
-    private int diff(int[] X)
-    {
-      Arrays.sort(X);
-      return X[2] - X[1];
-    }
-  }
-
diff --git a/223.rectangle-area.80890318.Accepted.leetcode.java b/223.rectangle-area.80890318.Accepted.leetcode.java
deleted file mode 100644
index bc805461..00000000
--- ./223.rectangle-area.80890318.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public int computeArea(int A, int B, int C, int D, int E, int F, int G,
-                           int H)
-    {
-        int area = (C - A) * (D - B) + (G - E) * (H - F);
-
-        if (C < E || G < A || D < F || H < B)
-        {
-            return area;
-        }
-
-        int[] X = { A, C, E, G };
-        int[] Y = { B, D, F, H };
-        return area - diff(X) * diff(Y);
-    }
-
-    private int diff(int[] X)
-    {
-        Arrays.sort(X);
-        return X[2] - X[1];
-    }
-}
diff --git a/224.basic-calculator.170471884.Accepted.leetcode.java b/224.basic-calculator.170471884.Accepted.leetcode.java
deleted file mode 100644
index 4ecdcebc..00000000
--- ./224.basic-calculator.170471884.Accepted.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-public class Solution
-{
-    public int calculate(String s)
-    {
-        Stack<Integer> stack = new Stack<Integer>();
-        stack.push(1);
-        stack.push(1);
-        int result = 0;
-
-        for (int index = 0; index < s.length(); index++)
-        {
-            char c = s.charAt(index);
-
-            if (Character.isDigit(c))
-            {
-                int num = c - '0';
-
-                while (index + 1 < s.length() && Character.isDigit(s.charAt(index + 1)))
-                {
-                    int newNum = s.charAt(index + 1) - '0';
-                    num = 10 * num + newNum;
-                    index++;
-                }
-
-                result += stack.pop() * num;
-            }
-            else if (c == '+' || c == '(')
-            {
-                stack.push(stack.peek());
-            }
-            else if (c == '-')
-            {
-                stack.push(-1 * stack.peek());
-            }
-            else if (c == ')')
-            {
-                stack.pop();
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/226.invert-binary-tree.30574587.Accepted.leetcode.java b/226.invert-binary-tree.30574587.Accepted.leetcode.java
deleted file mode 100644
index b2955762..00000000
--- ./226.invert-binary-tree.30574587.Accepted.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-  public class Solution
-  {
-    public TreeNode invertTree(TreeNode root)
-    {
-      if (root == null)
-      {
-        return root;
-      }
-
-      invertTree(root.left);
-      invertTree(root.right);
-      TreeNode temp = root.left;
-      root.left = root.right;
-      root.right = temp;
-      return root;
-    }
-  }
-
diff --git a/226.invert-binary-tree.41314778.Accepted.leetcode.java b/226.invert-binary-tree.41314778.Accepted.leetcode.java
deleted file mode 100644
index 323312f9..00000000
--- ./226.invert-binary-tree.41314778.Accepted.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-  public class Solution
-  {
-    public TreeNode invertTree(TreeNode root)
-    {
-      if (root == null)
-      {
-        return root;
-      }
-
-      TreeNode temp = root.left;
-      root.left = root.right;
-      root.right = temp;
-      invertTree(root.left);
-      invertTree(root.right);
-      return root;
-    }
-  }
-
diff --git a/227.basic-calculator-ii.31432487.Wrong-Answer.leetcode.java b/227.basic-calculator-ii.31432487.Wrong-Answer.leetcode.java
deleted file mode 100644
index a8c8caff..00000000
--- ./227.basic-calculator-ii.31432487.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,72 +0,0 @@
-  public class Solution
-  {
-    public int calculate(String s)
-    {
-      Stack<Integer> stk_val = new Stack<Integer>();
-      Stack<Character> stk_op = new Stack<Character>();
-      int res = 0, tmp;
-
-      for (int i = 0; i <= s.length(); ++i)
-      {
-        if (i < s.length() && Character.isDigit(s.charAt(i)))
-        {
-          res = 0;
-
-          while (i < s.length() && Character.isDigit(s.charAt(i)))
-          {
-            res *= 10;
-            res += s.charAt(i++ ) - '0';
-          }
-
-          stk_val.push(res);
-        }
-
-        if (i == s.length() || s.charAt(i) == '+' || s.charAt(i) == '-'
-            || s.charAt(i) == '*' || s.charAt(i) == '/' || s.charAt(i) == ')')
-        {
-          while (!stk_op.empty() && stk_op.peek() != '('
-                 && (i == s.length() || isOK(stk_op.peek(), s.charAt(i))))
-          {
-            tmp = stk_val.peek();
-            stk_val.pop();
-            stk_val.push(calc(stk_val.peek(), tmp, stk_op.peek()));
-            stk_op.pop();
-          }
-
-          if (i == s.length())
-          {
-            break;
-          }
-          else if (s.charAt(i) == ')')
-          {
-            stk_op.pop();
-          }
-          else
-          {
-            stk_op.push(s.charAt(i));
-          }
-        }
-        else if (s.charAt(i) == '(')
-        {
-          stk_op.push(s.charAt(i));
-        }
-      }
-
-      return stk_val.peek();
-    }
-
-    private Integer calc(int a, int b, char op)
-    {
-      if (op == '+') { return a + b; }
-      else if (op == '-') { return a - b; }
-      else if (op == '*') { return a * b; }
-      else { return a / b; }
-    }
-
-    private boolean isOK(char op1, char op2)
-    {
-      if (op1 == '*' || op1 == '/' || op2 == ')') { return true; }
-      else { return op2 == '+' || op2 == '-'; }
-    }
-  }
-
diff --git a/227.basic-calculator-ii.31432711.Wrong-Answer.leetcode.java b/227.basic-calculator-ii.31432711.Wrong-Answer.leetcode.java
deleted file mode 100644
index b549c6be..00000000
--- ./227.basic-calculator-ii.31432711.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,63 +0,0 @@
-  public class Solution
-  {
-    public int calculate(String s)
-    {
-      Stack<Integer> stk_val = new Stack<Integer>();
-      Stack<Character> stk_op = new Stack<Character>();
-      int res = 0, tmp;
-
-      for (int i = 0; i <= s.length(); ++i)
-      {
-        if (i < s.length() && Character.isDigit(s.charAt(i)))
-        {
-          res = 0;
-
-          while (i < s.length() && Character.isDigit(s.charAt(i)))
-          {
-            res *= 10;
-            res += s.charAt(i++ ) - '0';
-          }
-
-          stk_val.push(res);
-        }
-
-        if (i == s.length() || s.charAt(i) == '+' || s.charAt(i) == '-'
-            || s.charAt(i) == '*' || s.charAt(i) == '/')
-        {
-          while (!stk_op.empty() && (i == s.length() || isOK(stk_op.peek(), s.charAt(i))))
-          {
-            tmp = stk_val.peek();
-            stk_val.pop();
-            stk_val.push(calc(stk_val.peek(), tmp, stk_op.peek()));
-            stk_op.pop();
-          }
-
-          if (i == s.length())
-          {
-            break;
-          }
-          else
-          {
-            stk_op.push(s.charAt(i));
-          }
-        }
-      }
-
-      return stk_val.peek();
-    }
-
-    private Integer calc(int a, int b, char op)
-    {
-      if (op == '+') { return a + b; }
-      else if (op == '-') { return a - b; }
-      else if (op == '*') { return a * b; }
-      else { return a / b; }
-    }
-
-    private boolean isOK(char op1, char op2)
-    {
-      if (op1 == '*' || op1 == '/') { return true; }
-      else { return op2 == '+' || op2 == '-'; }
-    }
-  }
-
diff --git a/227.basic-calculator-ii.31433433.Runtime-Error.leetcode.java b/227.basic-calculator-ii.31433433.Runtime-Error.leetcode.java
deleted file mode 100644
index 00d807e4..00000000
--- ./227.basic-calculator-ii.31433433.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,59 +0,0 @@
-  public class Solution
-  {
-    public int calculate(String s)
-    {
-      Stack<Integer> stk_val = new Stack<Integer>();
-      Stack<Character> stk_op = new Stack<Character>();
-      int res = 0;
-
-      for (int i = 0; i <= s.length(); ++i)
-      {
-        if (i < s.length() && Character.isDigit(s.charAt(i)))
-        {
-          res = 0;
-
-          while (i < s.length() && Character.isDigit(s.charAt(i)))
-          {
-            res = res * 10 + s.charAt(i++ ) - '0';
-          }
-
-          stk_val.push(res);
-        }
-
-        if (i == s.length() || s.charAt(i) == '+' || s.charAt(i) == '-'
-            || s.charAt(i) == '*' || s.charAt(i) == '/')
-        {
-          while (!stk_op.empty() && (i == s.length() || isOK(stk_op.peek(), s.charAt(i))))
-          {
-            stk_val.push(calc(stk_val.pop(), stk_val.pop(), stk_op.pop()));
-          }
-
-          if (i == s.length())
-          {
-            break;
-          }
-          else
-          {
-            stk_op.push(s.charAt(i));
-          }
-        }
-      }
-
-      return stk_val.peek();
-    }
-
-    private Integer calc(int a, int b, char op)
-    {
-      if (op == '+') { return a + b; }
-      else if (op == '-') { return a - b; }
-      else if (op == '*') { return a * b; }
-      else { return a / b; }
-    }
-
-    private boolean isOK(char op1, char op2)
-    {
-      if (op1 == '*' || op1 == '/') { return true; }
-      else { return op2 == '+' || op2 == '-'; }
-    }
-  }
-
diff --git a/227.basic-calculator-ii.31434769.Accepted.leetcode.java b/227.basic-calculator-ii.31434769.Accepted.leetcode.java
deleted file mode 100644
index 1df7735c..00000000
--- ./227.basic-calculator-ii.31434769.Accepted.leetcode.java
+++ /dev/null
@@ -1,111 +0,0 @@
-  public class Solution
-  {
-    Stack<Integer> numStack = new Stack<Integer>();
-    Stack<Character> opStack = new Stack<Character>();
-
-    public int calculate(String s)
-    {
-      if (s == null || s.length() == 0)
-      {
-        return 0;
-      }
-
-      int i = 0;
-
-      while (i < s.length())
-      {
-        char c = s.charAt(i);
-
-        if (c >= '0' && c <= '9')
-        {
-          int num = 0;
-
-          while (i < s.length() && s.charAt(i) >= '0' && s.charAt(i) <= '9')
-          {
-            num = num * 10 + (int) (s.charAt(i) - '0');
-            i++ ;
-          }
-
-          pushNum(num);
-          i-- ;
-        }
-        else if (c != ' ')
-        {
-          pushOp(c);
-        }
-
-        i++ ;
-      }
-
-      if (!opStack.isEmpty())
-      {
-        int right = numStack.pop();
-        int left = numStack.pop();
-        char lastOp = opStack.pop();
-        numStack.push(cal(left, right, lastOp));
-      }
-
-      return numStack.pop();
-    }
-
-    private int cal(int left, int right, char op)
-    {
-      switch (op)
-      {
-        case '+':
-          return left + right;
-
-        case '-':
-          return left - right;
-
-        case '*':
-          return left * right;
-
-        case '/':
-          return left / right;
-
-        default:
-          return 0;
-      }
-    }
-
-    private void pushNum(int num)
-    {
-      if (numStack.isEmpty())
-      {
-        numStack.push(num);
-      }
-      else
-      {
-        char op = opStack.peek();
-
-        if (op == '*' || op == '/')
-        {
-          opStack.pop();
-          int last = numStack.pop();
-          numStack.push(cal(last, num, op));
-        }
-        else
-        {
-          numStack.push(num);
-        }
-      }
-    }
-
-    private void pushOp(char op)
-    {
-      if (opStack.isEmpty() || op == '*' || op == '/')
-      {
-        opStack.push(op);
-      }
-      else
-      {
-        int right = numStack.pop();
-        int left = numStack.pop();
-        char lastOp = opStack.pop();
-        numStack.push(cal(left, right, lastOp));
-        opStack.push(op);
-      }
-    }
-  }
-
diff --git a/227.basic-calculator-ii.32203826.Runtime-Error.leetcode.java b/227.basic-calculator-ii.32203826.Runtime-Error.leetcode.java
deleted file mode 100644
index 8caf3bf0..00000000
--- ./227.basic-calculator-ii.32203826.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,89 +0,0 @@
-  public class Solution
-  {
-    Stack<Integer> numStack = new Stack<Integer>();
-    Stack<Character> opStack = new Stack<Character>();
-
-    public int calculate(String s)
-    {
-      if (s == null || s.length() == 0)
-      {
-        return 0;
-      }
-
-      int i = 0;
-
-      while (i < s.length())
-      {
-        char c = s.charAt(i);
-
-        if (c >= '0' && c <= '9')
-        {
-          int num = 0;
-
-          while (i < s.length() && s.charAt(i) >= '0' && s.charAt(i) <= '9')
-          {
-            num = num * 10 + (int) (s.charAt(i) - '0');
-            i++ ;
-          }
-
-          numStack.push(num);
-          i-- ;
-        }
-        else if (c != ' ')
-        {
-          pushOp(c);
-        }
-
-        i++ ;
-      }
-
-      while (!opStack.isEmpty())
-      {
-        int right = numStack.pop();
-        int left = numStack.pop();
-        char lastOp = opStack.pop();
-        numStack.push(cal(left, right, lastOp));
-      }
-
-      return numStack.pop();
-    }
-
-    private int cal(int left, int right, char op)
-    {
-      switch (op)
-      {
-        case '+':
-          return left + right;
-
-        case '-':
-          return left - right;
-
-        case '*':
-          return left * right;
-
-        case '/':
-          return left / right;
-
-        default:
-          return 0;
-      }
-    }
-
-    private void pushOp(char op)
-    {
-      if (opStack.isEmpty() || op == '*' || op == '/' || opStack.peek() == '+'
-        || opStack.peek() == '-')
-      {
-        opStack.push(op);
-      }
-      else
-      {
-        int right = numStack.pop();
-        int left = numStack.pop();
-        char lastOp = opStack.pop();
-        numStack.push(cal(left, right, lastOp));
-        opStack.push(op);
-      }
-    }
-  }
-
diff --git a/227.basic-calculator-ii.32204212.Runtime-Error.leetcode.java b/227.basic-calculator-ii.32204212.Runtime-Error.leetcode.java
deleted file mode 100644
index a5c2ca6e..00000000
--- ./227.basic-calculator-ii.32204212.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,89 +0,0 @@
-  public class Solution
-  {
-    Stack<Integer> numStack = new Stack<Integer>();
-    Stack<Character> opStack = new Stack<Character>();
-
-    public int calculate(String s)
-    {
-      if (s == null || s.length() == 0)
-      {
-        return 0;
-      }
-
-      int i = 0;
-
-      while (i < s.length())
-      {
-        char c = s.charAt(i);
-
-        if (Character.isDigit(c))
-        {
-          int num = 0;
-
-          while (i < s.length() && Character.isDigit(s.charAt(i)))
-          {
-            num = num * 10 + (int) (s.charAt(i) - '0');
-            i++ ;
-          }
-
-          numStack.push(num);
-          i-- ;
-        }
-        else if (c != ' ')
-        {
-          pushOp(c);
-        }
-
-        i++ ;
-      }
-
-      while (!opStack.isEmpty())
-      {
-        int right = numStack.pop();
-        int left = numStack.pop();
-        char lastOp = opStack.pop();
-        numStack.push(cal(left, right, lastOp));
-      }
-
-      return numStack.pop();
-    }
-
-    private int cal(int left, int right, char op)
-    {
-      switch (op)
-      {
-        case '+':
-          return left + right;
-
-        case '-':
-          return left - right;
-
-        case '*':
-          return left * right;
-
-        case '/':
-          return left / right;
-
-        default:
-          return 0;
-      }
-    }
-
-    private void pushOp(char op)
-    {
-      if (opStack.isEmpty() || op == '*' || op == '/' || opStack.peek() == '+'
-        || opStack.peek() == '-')
-      {
-        opStack.push(op);
-      }
-      else
-      {
-        int right = numStack.pop();
-        int left = numStack.pop();
-        char lastOp = opStack.pop();
-        numStack.push(cal(left, right, lastOp));
-        opStack.push(op);
-      }
-    }
-  }
-
diff --git a/227.basic-calculator-ii.41353139.Accepted.leetcode.java b/227.basic-calculator-ii.41353139.Accepted.leetcode.java
deleted file mode 100644
index 3c6c13d4..00000000
--- ./227.basic-calculator-ii.41353139.Accepted.leetcode.java
+++ /dev/null
@@ -1,111 +0,0 @@
-  public class Solution
-  {
-    Stack<Integer> numStack = new Stack<Integer>();
-    Stack<Character> opStack = new Stack<Character>();
-
-    public int calculate(String s)
-    {
-      if (s == null || s.length() == 0)
-      {
-        return 0;
-      }
-
-      int i = 0;
-
-      while (i < s.length())
-      {
-        char c = s.charAt(i);
-
-        if (c >= '0' && c <= '9')
-        {
-          int num = 0;
-
-          while (i < s.length() && s.charAt(i) >= '0' && s.charAt(i) <= '9')
-          {
-            num = num * 10 + (int)(s.charAt(i) - '0');
-            i++ ;
-          }
-
-          pushNum(num);
-          i-- ;
-        }
-        else if (c != ' ')
-        {
-          pushOp(c);
-        }
-
-        i++ ;
-      }
-
-      if (!opStack.isEmpty())
-      {
-        int right = numStack.pop();
-        int left = numStack.pop();
-        char lastOp = opStack.pop();
-        numStack.push(cal(left, right, lastOp));
-      }
-
-      return numStack.pop();
-    }
-
-    private int cal(int left, int right, char op)
-    {
-      switch (op)
-      {
-      case '+':
-        return left + right;
-
-      case '-':
-        return left - right;
-
-      case '*':
-        return left * right;
-
-      case '/':
-        return left / right;
-
-      default:
-        return 0;
-      }
-    }
-
-    private void pushNum(int num)
-    {
-      if (numStack.isEmpty())
-      {
-        numStack.push(num);
-      }
-      else
-      {
-        char op = opStack.peek();
-
-        if (op == '*' || op == '/')
-        {
-          opStack.pop();
-          int last = numStack.pop();
-          numStack.push(cal(last, num, op));
-        }
-        else
-        {
-          numStack.push(num);
-        }
-      }
-    }
-
-    private void pushOp(char op)
-    {
-      if (opStack.isEmpty() || op == '*' || op == '/')
-      {
-        opStack.push(op);
-      }
-      else
-      {
-        int right = numStack.pop();
-        int left = numStack.pop();
-        char lastOp = opStack.pop();
-        numStack.push(cal(left, right, lastOp));
-        opStack.push(op);
-      }
-    }
-  }
-
diff --git a/229.majority-element-ii.32001566.Accepted.leetcode.java b/229.majority-element-ii.32001566.Accepted.leetcode.java
deleted file mode 100644
index 37980185..00000000
--- ./229.majority-element-ii.32001566.Accepted.leetcode.java
+++ /dev/null
@@ -1,67 +0,0 @@
-  public class Solution
-  {
-    public List<Integer> majorityElement(int[] nums)
-    {
-      int num1 = 0;
-      int num2 = 0;
-      int count1 = 0;
-      int count2 = 0;
-
-      for (int num : nums)
-      {
-        if (num == num1)
-        {
-          count1++ ;
-        }
-        else if (num == num2)
-        {
-          count2++ ;
-        }
-        else if (count1 == 0)
-        {
-          num1 = num;
-          count1 = 1;
-        }
-        else if (count2 == 0)
-        {
-          num2 = num;
-          count2 = 1;
-        }
-        else
-        {
-          count1-- ;
-          count2-- ;
-        }
-      }
-
-      count1 = 0;
-      count2 = 0;
-
-      for (int i : nums)
-      {
-        if (i == num1)
-        {
-          count1++ ;
-        }
-        else if (i == num2)
-        {
-          count2++ ;
-        }
-      }
-
-      List<Integer> res = new ArrayList<Integer>();
-
-      if (count1 > nums.length / 3)
-      {
-        res.add(num1);
-      }
-
-      if (count2 > nums.length / 3)
-      {
-        res.add(num2);
-      }
-
-      return res;
-    }
-  }
-
diff --git a/229.majority-element-ii.32232465.Accepted.leetcode.java b/229.majority-element-ii.32232465.Accepted.leetcode.java
deleted file mode 100644
index 7afe5f34..00000000
--- ./229.majority-element-ii.32232465.Accepted.leetcode.java
+++ /dev/null
@@ -1,67 +0,0 @@
-  public class Solution
-  {
-    public List<Integer> majorityElement(int[] nums)
-    {
-      int num1 = 0;
-      int num2 = 0;
-      int count1 = 0;
-      int count2 = 0;
-
-      for (int num : nums)
-      {
-        if (num == num1)
-        {
-          count1++;
-        }
-        else if (num == num2)
-        {
-          count2++;
-        }
-        else if (count1 == 0)
-        {
-          num1 = num;
-          count1++;
-        }
-        else if (count2 == 0)
-        {
-          num2 = num;
-          count2++;
-        }
-        else
-        {
-          count1--;
-          count2--;
-        }
-      }
-
-      count1 = 0;
-      count2 = 0;
-
-      for (int i : nums)
-      {
-        if (i == num1)
-        {
-          count1++;
-        }
-        else if (i == num2)
-        {
-          count2++;
-        }
-      }
-
-      List<Integer> res = new ArrayList<Integer>();
-
-      if (count1 > nums.length / 3)
-      {
-        res.add(num1);
-      }
-
-      if (count2 > nums.length / 3)
-      {
-        res.add(num2);
-      }
-
-      return res;
-    }
-  }
-
diff --git a/229.majority-element-ii.41612786.Wrong-Answer.leetcode.java b/229.majority-element-ii.41612786.Wrong-Answer.leetcode.java
deleted file mode 100644
index d543bea5..00000000
--- ./229.majority-element-ii.41612786.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-  public class Solution
-  {
-    public List<Integer> majorityElement(int[] nums)
-    {
-      int num1 = 0;
-      int num2 = 0;
-      int count1 = 0;
-      int count2 = 0;
-
-      for (int num : nums)
-      {
-        if (num == num1)
-        {
-          count1++ ;
-        }
-        else if (num == num2)
-        {
-          count2++ ;
-        }
-        else if (count1 == 0)
-        {
-          num1 = num;
-          count1++ ;
-        }
-        else if (count2 == 0)
-        {
-          num2 = num;
-          count2++ ;
-        }
-        else
-        {
-          count1-- ;
-          count2-- ;
-        }
-      }
-
-      List<Integer> result = new ArrayList<Integer>();
-      result.add(num1);
-      result.add(num2);
-      return result;
-    }
-  }
-
diff --git a/229.majority-element-ii.41613046.Wrong-Answer.leetcode.java b/229.majority-element-ii.41613046.Wrong-Answer.leetcode.java
deleted file mode 100644
index f8871727..00000000
--- ./229.majority-element-ii.41613046.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-  public class Solution
-  {
-    public List<Integer> majorityElement(int[] nums)
-    {
-      List<Integer> result = new ArrayList<Integer>();
-
-      if (nums.length == 0)
-      {
-        return result;
-      }
-
-      int num1 = 0;
-      int num2 = 0;
-      int count1 = 0;
-      int count2 = 0;
-
-      for (int num : nums)
-      {
-        if (num == num1)
-        {
-          count1++ ;
-        }
-        else if (num == num2)
-        {
-          count2++ ;
-        }
-        else if (count1 == 0)
-        {
-          num1 = num;
-          count1++ ;
-        }
-        else if (count2 == 0)
-        {
-          num2 = num;
-          count2++ ;
-        }
-        else
-        {
-          count1-- ;
-          count2-- ;
-        }
-      }
-
-      result.add(num1);
-      result.add(num2);
-      return result;
-    }
-  }
-
diff --git a/229.majority-element-ii.67709126.Accepted.leetcode.java b/229.majority-element-ii.67709126.Accepted.leetcode.java
deleted file mode 100644
index c59c01b1..00000000
--- ./229.majority-element-ii.67709126.Accepted.leetcode.java
+++ /dev/null
@@ -1,68 +0,0 @@
-  public class Solution
-  {
-    public List<Integer> majorityElement(int[] nums)
-    {
-      
-      int num1 = 0;
-      int num2 = 0;
-      int count1 = 0;
-      int count2 = 0;
-
-      for (int num : nums)
-      {
-        if (num == num1)
-        {
-          count1++ ;
-        }
-        else if (num == num2)
-        {
-          count2++ ;
-        }
-        else if (count1 == 0)
-        {
-          num1 = num;
-          count1++ ;
-        }
-        else if (count2 == 0)
-        {
-          num2 = num;
-          count2++ ;
-        }
-        else
-        {
-          count1-- ;
-          count2-- ;
-        }
-      }
-
-      count1 = 0;
-      count2 = 0;
-
-      for (int i : nums)
-      {
-        if (i == num1)
-        {
-          count1++ ;
-        }
-        else if (i == num2)
-        {
-          count2++ ;
-        }
-      }
-
-      List<Integer> result = new ArrayList<Integer>();
-
-      if (count1 > nums.length / 3)
-      {
-        result.add(num1);
-      }
-
-      if (count2 > nums.length / 3)
-      {
-        result.add(num2);
-      }
-
-      return result;
-    }
-  }
-
diff --git a/230.kth-smallest-element-in-a-bst.171623466.Accepted.leetcode.java b/230.kth-smallest-element-in-a-bst.171623466.Accepted.leetcode.java
deleted file mode 100644
index ba43cde0..00000000
--- ./230.kth-smallest-element-in-a-bst.171623466.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    private int count = 0;
-    private int result = -1;
-
-    public int kthSmallest(TreeNode root, int k)
-    {
-        inorderTraversal(root, k);
-        return result;
-    }
-
-    private void inorderTraversal(TreeNode root, int k)
-    {
-        if (root == null)
-        {
-            return;
-        }
-
-        inorderTraversal(root.left, k);
-
-        if (++count == k)
-        {
-            result = root.val;
-        }
-
-        inorderTraversal(root.right, k);
-    }
-}
-
diff --git a/230.kth-smallest-element-in-a-bst.171624169.Accepted.leetcode.java b/230.kth-smallest-element-in-a-bst.171624169.Accepted.leetcode.java
deleted file mode 100644
index 121b54cf..00000000
--- ./230.kth-smallest-element-in-a-bst.171624169.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    private int count = 0;
-    private int result = -1;
-
-    public int kthSmallest(TreeNode root, int k)
-    {
-        inorderTraversal(root, k);
-        return result;
-    }
-
-    private void inorderTraversal(TreeNode root, int k)
-    {
-        if (root == null || count > k)
-        {
-            return;
-        }
-
-        inorderTraversal(root.left, k);
-
-        if (++count == k)
-        {
-            result = root.val;
-        }
-
-        inorderTraversal(root.right, k);
-    }
-}
-
diff --git a/231.power-of-two.32092633.Accepted.leetcode.java b/231.power-of-two.32092633.Accepted.leetcode.java
deleted file mode 100644
index af78081c..00000000
--- ./231.power-of-two.32092633.Accepted.leetcode.java
+++ /dev/null
@@ -1,5 +0,0 @@
-public class Solution {
-    public boolean isPowerOfTwo(int n) {
-        return (n > 0) && (n & (n - 1)) == 0;
-    }
-}
diff --git a/232.implement-queue-using-stacks.102814213.Runtime-Error.leetcode.java b/232.implement-queue-using-stacks.102814213.Runtime-Error.leetcode.java
deleted file mode 100644
index 4d28377e..00000000
--- ./232.implement-queue-using-stacks.102814213.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-class MyQueue
-{
-
-    Stack<Integer> input = new Stack();
-    Stack<Integer> output = new Stack();
-
-    public void push(int x)
-    {
-    }
-
-    public int pop()
-    {
-        peek();
-        return output.pop();
-    }
-
-    public int peek()
-    {
-        if (output.empty())
-        {
-            while (!input.empty())
-            {
-                output.push(input.pop());
-            }
-        }
-
-        return output.peek();
-    }
-
-    public boolean empty()
-    {
-        return input.empty() && output.empty();
-    }
-}
diff --git a/232.implement-queue-using-stacks.102814226.Runtime-Error.leetcode.java b/232.implement-queue-using-stacks.102814226.Runtime-Error.leetcode.java
deleted file mode 100644
index eb32ff5a..00000000
--- ./232.implement-queue-using-stacks.102814226.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-class MyQueue
-{
-
-    Stack<Integer> input = new Stack();
-    Stack<Integer> output = new Stack();
-
-    public void push(int x)
-    {
-        input.push(x);
-    }
-
-    public int pop()
-    {
-        return output.pop();
-    }
-
-    public int peek()
-    {
-        if (output.empty())
-        {
-            while (!input.empty())
-            {
-                output.push(input.pop());
-            }
-        }
-
-        return output.peek();
-    }
-
-    public boolean empty()
-    {
-        return input.empty() && output.empty();
-    }
-}
diff --git a/232.implement-queue-using-stacks.102814244.Runtime-Error.leetcode.java b/232.implement-queue-using-stacks.102814244.Runtime-Error.leetcode.java
deleted file mode 100644
index 7a6bc968..00000000
--- ./232.implement-queue-using-stacks.102814244.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-class MyQueue
-{
-
-    Stack<Integer> input = new Stack();
-    Stack<Integer> output = new Stack();
-
-    public void push(int x)
-    {
-        input.push(x);
-    }
-
-    public int pop()
-    {
-        peek();
-        return output.pop();
-    }
-
-    public int peek()
-    {
-        return output.peek();
-    }
-
-    public boolean empty()
-    {
-        return input.empty() && output.empty();
-    }
-}
diff --git a/233.number-of-digit-one.32424467.Accepted.leetcode.java b/233.number-of-digit-one.32424467.Accepted.leetcode.java
deleted file mode 100644
index aa7efa90..00000000
--- ./233.number-of-digit-one.32424467.Accepted.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-  public class Solution
-  {
-    public int countDigitOne(int n)
-    {
-      int ones = 0;
-
-      for (long m = 1; m <= n; m *= 10)
-      {
-        long a = n / m, b = n % m;
-        ones += (a + 8) / 10 * m;
-
-        if (a % 10 == 1) { ones += b + 1; }
-      }
-
-      return ones;
-    }
-  }
-
diff --git a/236.lowest-common-ancestor-of-a-binary-tree.102866039.Wrong-Answer.leetcode.java b/236.lowest-common-ancestor-of-a-binary-tree.102866039.Wrong-Answer.leetcode.java
deleted file mode 100644
index 0299ba39..00000000
--- ./236.lowest-common-ancestor-of-a-binary-tree.102866039.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode node1, TreeNode node2)
-    {
-        if (root == null || root == node1 || root == node2)
-        {
-            return root;
-        }
-
-        TreeNode left = lowestCommonAncestor(root.left, node1, node2);
-        TreeNode right = lowestCommonAncestor(root.right, node1, node2);
-
-        if (left != null && right != null)
-        {
-            return root;
-        }
-
-        if (left != null)
-        {
-            return left;
-        }
-
-        if (right != right)
-        {
-            return right;
-        }
-
-        return null;
-    }
-}
diff --git a/236.lowest-common-ancestor-of-a-binary-tree.102866278.Accepted.leetcode.java b/236.lowest-common-ancestor-of-a-binary-tree.102866278.Accepted.leetcode.java
deleted file mode 100644
index 17acf8a3..00000000
--- ./236.lowest-common-ancestor-of-a-binary-tree.102866278.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode node1, TreeNode node2)
-    {
-        if(root == null || root == node1 || root == node2)
-        {
-            return root;
-        }
-        
-        TreeNode left = lowestCommonAncestor(root.left, node1, node2);
-        TreeNode right = lowestCommonAncestor(root.right, node1, node2);
-        
-        if(left != null && right != null)
-        {
-            return root;
-        }
-        
-        if(left != null)
-        {
-            return left;
-        }
-        
-        if(right != null)
-        {
-            return right;
-        }
-        
-        return null;
-    }
-}
-
diff --git a/236.lowest-common-ancestor-of-a-binary-tree.102866358.Accepted.leetcode.java b/236.lowest-common-ancestor-of-a-binary-tree.102866358.Accepted.leetcode.java
deleted file mode 100644
index c99864e8..00000000
--- ./236.lowest-common-ancestor-of-a-binary-tree.102866358.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode node1, TreeNode node2)
-    {
-        if (root == null || root == node1 || root == node2)
-        {
-            return root;
-        }
-
-        TreeNode left = lowestCommonAncestor(root.left, node1, node2);
-        TreeNode right = lowestCommonAncestor(root.right, node1, node2);
-
-        if (left != null && right != null)
-        {
-            return root;
-        }
-
-        if (left != null)
-        {
-            return left;
-        }
-
-        if (right != null)
-        {
-            return right;
-        }
-
-        return null;
-    }
-}
diff --git a/236.lowest-common-ancestor-of-a-binary-tree.102866461.Runtime-Error.leetcode.java b/236.lowest-common-ancestor-of-a-binary-tree.102866461.Runtime-Error.leetcode.java
deleted file mode 100644
index 5dea8e23..00000000
--- ./236.lowest-common-ancestor-of-a-binary-tree.102866461.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode node1, TreeNode node2)
-    {
-        if (root == node1 || root == node2)
-        {
-            return root;
-        }
-
-        TreeNode left = lowestCommonAncestor(root.left, node1, node2);
-        TreeNode right = lowestCommonAncestor(root.right, node1, node2);
-
-        if (left != null && right != null)
-        {
-            return root;
-        }
-
-        if (left != null)
-        {
-            return left;
-        }
-
-        if (right != null)
-        {
-            return right;
-        }
-
-        return null;
-    }
-}
diff --git a/236.lowest-common-ancestor-of-a-binary-tree.102866526.Wrong-Answer.leetcode.java b/236.lowest-common-ancestor-of-a-binary-tree.102866526.Wrong-Answer.leetcode.java
deleted file mode 100644
index 6e5af476..00000000
--- ./236.lowest-common-ancestor-of-a-binary-tree.102866526.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode node1, TreeNode node2)
-    {
-        if (root == null || root == node1 || root == node2)
-        {
-            return root;
-        }
-
-        TreeNode left = lowestCommonAncestor(root.left, node1, node2);
-        TreeNode right = lowestCommonAncestor(root.right, node1, node2);
-
-        if (left != null)
-        {
-            return left;
-        }
-
-        if (right != null)
-        {
-            return right;
-        }
-
-        return null;
-    }
-}
diff --git a/236.lowest-common-ancestor-of-a-binary-tree.102866569.Wrong-Answer.leetcode.java b/236.lowest-common-ancestor-of-a-binary-tree.102866569.Wrong-Answer.leetcode.java
deleted file mode 100644
index 023352fd..00000000
--- ./236.lowest-common-ancestor-of-a-binary-tree.102866569.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode node1, TreeNode node2)
-    {
-        if (root == null || root == node1 || root == node2)
-        {
-            return root;
-        }
-
-        TreeNode left = lowestCommonAncestor(root.left, node1, node2);
-        TreeNode right = lowestCommonAncestor(root.right, node1, node2);
-
-        if (left != null && right != null)
-        {
-            return root;
-        }
-
-        if (right != null)
-        {
-            return right;
-        }
-
-        return null;
-    }
-}
diff --git a/236.lowest-common-ancestor-of-a-binary-tree.171724945.Runtime-Error.leetcode.java b/236.lowest-common-ancestor-of-a-binary-tree.171724945.Runtime-Error.leetcode.java
deleted file mode 100644
index 462b44c8..00000000
--- ./236.lowest-common-ancestor-of-a-binary-tree.171724945.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode node1, TreeNode node2)
-    {
-        if (root == node1 || root == node2)
-        {
-            return root;
-        }
-
-        TreeNode left = lowestCommonAncestor(root.left, node1, node2);
-        TreeNode right = lowestCommonAncestor(root.right, node1, node2);
-
-        if (left != null && right != null)
-        {
-            return root;
-        }
-
-        if (left != null)
-        {
-            return left;
-        }
-
-        if (right != null)
-        {
-            return right;
-        }
-
-        return null;
-    }
-}
-
diff --git a/236.lowest-common-ancestor-of-a-binary-tree.171725047.Accepted.leetcode.java b/236.lowest-common-ancestor-of-a-binary-tree.171725047.Accepted.leetcode.java
deleted file mode 100644
index 404a3e46..00000000
--- ./236.lowest-common-ancestor-of-a-binary-tree.171725047.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode node1, TreeNode node2)
-    {
-        if (root == null || root == node1 || root == node2)
-        {
-            return root;
-        }
-
-        TreeNode left = lowestCommonAncestor(root.left, node1, node2);
-        TreeNode right = lowestCommonAncestor(root.right, node1, node2);
-
-        if (left != null && right != null)
-        {
-            return root;
-        }
-
-        if (left != null)
-        {
-            return left;
-        }
-
-        if (right != null)
-        {
-            return right;
-        }
-
-        return null;
-    }
-}
-
diff --git a/236.lowest-common-ancestor-of-a-binary-tree.171725326.Accepted.leetcode.java b/236.lowest-common-ancestor-of-a-binary-tree.171725326.Accepted.leetcode.java
deleted file mode 100644
index b59572de..00000000
--- ./236.lowest-common-ancestor-of-a-binary-tree.171725326.Accepted.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution
-{
-    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode node1, TreeNode node2)
-    {
-        if (root == null || root == node1 || root == node2)
-        {
-            return root;
-        }
-
-        TreeNode left = lowestCommonAncestor(root.left, node1, node2);
-        TreeNode right = lowestCommonAncestor(root.right, node1, node2);
-
-        if (left != null && right != null)
-        {
-            return root;
-        }
-
-        return left != null ? left : right;
-    }
-}
-
diff --git a/238.product-of-array-except-self.83913471.Accepted.leetcode.java b/238.product-of-array-except-self.83913471.Accepted.leetcode.java
deleted file mode 100644
index 40ae7e32..00000000
--- ./238.product-of-array-except-self.83913471.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public int[] productExceptSelf(int[] nums)
-    {
-        int[] result = new int[nums.length];
-        result[0] = 1;
-
-        for (int i = 1; i < nums.length; i++)
-        {
-            result[i] = result[i - 1] * nums[i - 1];
-        }
-
-        int prod = 1;
-
-        for (int i = nums.length - 2; i >= 0; i--)
-        {
-            prod *= nums[i + 1];
-            result[i] *= prod;
-        }
-
-        return result;
-    }
-}
diff --git a/238.product-of-array-except-self.83913682.Accepted.leetcode.java b/238.product-of-array-except-self.83913682.Accepted.leetcode.java
deleted file mode 100644
index c9ce5590..00000000
--- ./238.product-of-array-except-self.83913682.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public int[] productExceptSelf(int[] nums)
-    {
-        int[] result = new int[nums.length];
-        result[0] = 1;
-
-        for(int i = 1; i < nums.length; i++)
-        {
-            result[i] = result[i - 1] * nums[i - 1];     
-        }
-        
-        int prod = 1;
-
-        for (int i = nums.length - 2; i >= 0; i--)
-        {
-            prod *= nums[i + 1];
-            result[i] *= prod;
-        }
-
-        return result;
-    }
-}
diff --git a/238.product-of-array-except-self.83914081.Accepted.leetcode.java b/238.product-of-array-except-self.83914081.Accepted.leetcode.java
deleted file mode 100644
index 0192399f..00000000
--- ./238.product-of-array-except-self.83914081.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public int[] productExceptSelf(int[] nums)
-    {
-        int[] result = new int[nums.length];
-        result[0] = 1;
-
-        for(int i = 1; i < nums.length; i++)
-        {
-            result[i] = result[i - 1] * nums[i - 1];     
-        }
-        
-        int prod = 1;
-
-        for(int i = nums.length - 2; i >= 0; i--)
-        {
-            prod *= nums[i + 1];
-            result[i] *= prod;
-        }
-        
-        return result;
-    }
-}
diff --git a/239.sliding-window-maximum.171950617.Accepted.leetcode.java b/239.sliding-window-maximum.171950617.Accepted.leetcode.java
deleted file mode 100644
index 51c1df95..00000000
--- ./239.sliding-window-maximum.171950617.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution
-{
-    public int[] maxSlidingWindow(int[] nums, int k)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return nums;
-        }
-
-        k = Math.min(nums.length, k);
-        int[] result = new int[nums.length - k + 1];
-        Deque<Integer> dequeue = new ArrayDeque<>();
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            while (!dequeue.isEmpty() && nums[dequeue.getLast()] <= nums[i])
-            {
-                dequeue.removeLast();
-            }
-
-            dequeue.addLast(i);
-
-            if (i < k - 1)
-            {
-                continue;
-            }
-
-            while (dequeue.getLast() - dequeue.getFirst() + 1 > k)
-            {
-                dequeue.removeFirst();
-            }
-
-            result[i - (k - 1)] = nums[dequeue.getFirst()];
-        }
-
-        return result;
-    }
-}
-
diff --git a/239.sliding-window-maximum.171950973.Accepted.leetcode.java b/239.sliding-window-maximum.171950973.Accepted.leetcode.java
deleted file mode 100644
index aeaf1bc7..00000000
--- ./239.sliding-window-maximum.171950973.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public int[] maxSlidingWindow(int[] nums, int k)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return nums;
-        }
-
-        k = Math.min(nums.length, k);
-        int[] result = new int[nums.length - k + 1];
-        Deque<Integer> dequeue = new ArrayDeque<>();
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            while (!dequeue.isEmpty() && nums[dequeue.getLast()] <= nums[i])
-            {
-                dequeue.removeLast();
-            }
-
-            dequeue.addLast(i);
-
-            while (dequeue.getLast() - dequeue.getFirst() + 1 > k)
-            {
-                dequeue.removeFirst();
-            }
-
-            if (i >= k - 1)
-            {
-                result[i - (k - 1)] = nums[dequeue.getFirst()];
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/239.sliding-window-maximum.171951086.Runtime-Error.leetcode.java b/239.sliding-window-maximum.171951086.Runtime-Error.leetcode.java
deleted file mode 100644
index cca3bc24..00000000
--- ./239.sliding-window-maximum.171951086.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public int[] maxSlidingWindow(int[] nums, int k)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return nums;
-        }
-
-        k = Math.min(nums.length, k);
-        int[] result = new int[nums.length - k + 1];
-        Deque<Integer> dequeue = new ArrayDeque<>();
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            while (nums[dequeue.getLast()] < nums[i])
-            {
-                dequeue.removeLast();
-            }
-
-            dequeue.addLast(i);
-
-            while (dequeue.getLast() - dequeue.getFirst() + 1 > k)
-            {
-                dequeue.removeFirst();
-            }
-
-            if (i >= k - 1)
-            {
-                result[i - (k - 1)] = nums[dequeue.getFirst()];
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/239.sliding-window-maximum.171951173.Accepted.leetcode.java b/239.sliding-window-maximum.171951173.Accepted.leetcode.java
deleted file mode 100644
index aa7108f8..00000000
--- ./239.sliding-window-maximum.171951173.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public int[] maxSlidingWindow(int[] nums, int k)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return nums;
-        }
-
-        k = Math.min(nums.length, k);
-        int[] result = new int[nums.length - k + 1];
-        Deque<Integer> dequeue = new ArrayDeque<>();
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            while (!dequeue.isEmpty() && nums[dequeue.getLast()] < nums[i])
-            {
-                dequeue.removeLast();
-            }
-
-            dequeue.addLast(i);
-
-            while (dequeue.getLast() - dequeue.getFirst() + 1 > k)
-            {
-                dequeue.removeFirst();
-            }
-
-            if (i >= k - 1)
-            {
-                result[i - (k - 1)] = nums[dequeue.getFirst()];
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/240.search-a-2d-matrix-ii.34338232.Accepted.leetcode.java b/240.search-a-2d-matrix-ii.34338232.Accepted.leetcode.java
deleted file mode 100644
index 3da7ce06..00000000
--- ./240.search-a-2d-matrix-ii.34338232.Accepted.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-  public class Solution
-  {
-    public boolean searchMatrix(int[][] matrix, int target)
-    {
-      int n = matrix.length, m = matrix[0].length;
-      return helper(matrix, 0, n - 1, 0, m - 1, target);
-    }
-    boolean helper(int[][] matrix, int rowStart, int rowEnd, int colStart, int colEnd, int target)
-    {
-      if (rowStart > rowEnd || colStart > colEnd)
-      {
-        return false;
-      }
-
-      int rm = (rowStart + rowEnd) / 2, cm = (colStart + colEnd) / 2;
-
-      if (matrix[rm][cm] == target)
-      {
-        return true;
-      }
-      else if (matrix[rm][cm] > target)
-      {
-        return helper(matrix, rowStart, rm - 1, colStart, cm - 1, target) ||
-               helper(matrix,  rm, rowEnd, colStart, cm - 1, target) ||
-               helper(matrix, rowStart, rm - 1, cm, colEnd, target);
-      }
-      else
-      {
-        return helper(matrix, rm + 1, rowEnd, cm + 1, colEnd, target) ||
-               helper(matrix,  rm + 1, rowEnd, colStart, cm, target) ||
-               helper(matrix, rowStart, rm, cm + 1, colEnd, target);
-      }
-    }
-  }
-
diff --git a/240.search-a-2d-matrix-ii.34679854.Accepted.leetcode.java b/240.search-a-2d-matrix-ii.34679854.Accepted.leetcode.java
deleted file mode 100644
index 2c5b531d..00000000
--- ./240.search-a-2d-matrix-ii.34679854.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-  public class Solution
-  {
-    public boolean searchMatrix(int[][] matrix, int target)
-    {
-      if (matrix == null || matrix.length == 0 || matrix[0].length == 0)
-      {
-        return false;
-      }
-
-      int m = matrix.length;
-      int n = matrix[0].length;
-      int row = m - 1;
-      int col = 0;
-
-      while (row >= 0 && row < m && col >= 0 && col < n)
-      {
-        int cur = matrix[row][col];
-
-        if (cur == target)
-        {
-          return true;
-        }
-        else if (cur > target)
-        {
-          row-- ;
-        }
-        else
-        {
-          col++ ;
-        }
-      }
-
-      return false;
-    }
-  }
-
diff --git a/240.search-a-2d-matrix-ii.34724957.Accepted.leetcode.java b/240.search-a-2d-matrix-ii.34724957.Accepted.leetcode.java
deleted file mode 100644
index cfb52a85..00000000
--- ./240.search-a-2d-matrix-ii.34724957.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-  public class Solution
-  {
-    public boolean searchMatrix(int[][] matrix, int target)
-    {
-      return dfs(matrix, 0, matrix.length - 1, 0, matrix[0].length - 1, target);
-    }
-
-    boolean dfs(int[][] matrix, int rowStart, int rowEnd, int colStart,
-                int colEnd, int target)
-    {
-      if (rowStart > rowEnd || colStart > colEnd)
-      {
-        return false;
-      }
-
-      int rm = (rowStart + rowEnd) / 2, cm = (colStart + colEnd) / 2;
-
-      if (matrix[rm][cm] == target)
-      {
-        return true;
-      }
-      else if (matrix[rm][cm] > target)
-      {
-        return dfs(matrix, rowStart, rm - 1, colStart, cm - 1, target)
-          || dfs(matrix, rm, rowEnd, colStart, cm - 1, target)
-          || dfs(matrix, rowStart, rm - 1, cm, colEnd, target);
-      }
-      else
-      {
-        return dfs(matrix, rm + 1, rowEnd, cm + 1, colEnd, target)
-          || dfs(matrix, rm + 1, rowEnd, colStart, cm, target)
-          || dfs(matrix, rowStart, rm, cm + 1, colEnd, target);
-      }
-    }
-  }
-
diff --git a/240.search-a-2d-matrix-ii.72967020.Accepted.leetcode.java b/240.search-a-2d-matrix-ii.72967020.Accepted.leetcode.java
deleted file mode 100644
index 3bfe6c01..00000000
--- ./240.search-a-2d-matrix-ii.72967020.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public boolean searchMatrix(int[][] matrix, int target)
-    {
-        if (matrix == null || matrix.length == 0 || matrix[0].length == 0)
-        {
-            return false;
-        }
-
-        int m = matrix.length;
-        int n = matrix[0].length;
-        int row = m - 1;
-        int col = 0;
-
-        while (row >= 0 && row < m && col >= 0 && col < n)
-        {
-            int cur = matrix[row][col];
-
-            if (cur == target)
-            {
-                return true;
-            }
-            else if (cur > target)
-            {
-                row-- ;
-            }
-            else
-            {
-                col++ ;
-            }
-        }
-
-        return false;
-    }
-}
-
diff --git a/240.search-a-2d-matrix-ii.72968244.Accepted.leetcode.java b/240.search-a-2d-matrix-ii.72968244.Accepted.leetcode.java
deleted file mode 100644
index faa639a7..00000000
--- ./240.search-a-2d-matrix-ii.72968244.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public boolean searchMatrix(int[][] matrix, int target)
-    {
-        if (matrix == null || matrix.length == 0 || matrix[0].length == 0)
-        {
-            return false;
-        }
-
-        int m = matrix.length;
-        int n = matrix[0].length;
-        int row = m - 1;
-        int col = 0;
-
-        while (row >= 0 && row < m && col >= 0 && col < n)
-        {
-            int cur = matrix[row][col];
-
-            if(cur == target)
-            {
-                return true;
-            }
-            else if(cur > target)
-            {
-                row--;
-            }
-            else
-            {
-                col++;
-            }
-        }
-
-        return false;
-    }
-}
-
diff --git a/240.search-a-2d-matrix-ii.72968336.Runtime-Error.leetcode.java b/240.search-a-2d-matrix-ii.72968336.Runtime-Error.leetcode.java
deleted file mode 100644
index f1006e95..00000000
--- ./240.search-a-2d-matrix-ii.72968336.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public boolean searchMatrix(int[][] matrix, int target)
-    {
-        if (matrix == null || matrix.length == 0 || matrix[0].length == 0)
-        {
-            return false;
-        }
-
-        int m = matrix.length;
-        int n = matrix[0].length;
-        int row = m - 1;
-        int col = 0;
-
-        while(row >= 0 && col <= n)
-        {
-            int cur = matrix[row][col];
-
-            if(cur == target)
-            {
-                return true;
-            }
-            else if(cur > target)
-            {
-                row--;
-            }
-            else
-            {
-                col++;
-            }
-        }
-
-        return false;
-    }
-}
-
diff --git a/240.search-a-2d-matrix-ii.72968387.Accepted.leetcode.java b/240.search-a-2d-matrix-ii.72968387.Accepted.leetcode.java
deleted file mode 100644
index da9ded5a..00000000
--- ./240.search-a-2d-matrix-ii.72968387.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public boolean searchMatrix(int[][] matrix, int target)
-    {
-        if (matrix == null || matrix.length == 0 || matrix[0].length == 0)
-        {
-            return false;
-        }
-
-        int m = matrix.length;
-        int n = matrix[0].length;
-        int row = m - 1;
-        int col = 0;
-
-        while(row >= 0 && col < n)
-        {
-            int cur = matrix[row][col];
-
-            if(cur == target)
-            {
-                return true;
-            }
-            else if(cur > target)
-            {
-                row--;
-            }
-            else
-            {
-                col++;
-            }
-        }
-
-        return false;
-    }
-}
-
diff --git a/240.search-a-2d-matrix-ii.72968488.Accepted.leetcode.java b/240.search-a-2d-matrix-ii.72968488.Accepted.leetcode.java
deleted file mode 100644
index e09f194e..00000000
--- ./240.search-a-2d-matrix-ii.72968488.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public boolean searchMatrix(int[][] matrix, int target)
-    {
-        if(matrix == null || matrix.length == 0 || matrix[0].length == 0)
-        {
-            return false;
-        }
-        
-        int m = matrix.length;
-        int n = matrix[0].length;
-        int row = m - 1;
-        int col = 0;
-
-        while(row >= 0 && col < n)
-        {
-            int cur = matrix[row][col];
-
-            if(cur == target)
-            {
-                return true;
-            }
-            else if(cur > target)
-            {
-                row--;
-            }
-            else
-            {
-                col++;
-            }
-        }
-
-        return false;
-    }
-}
-
diff --git a/241.different-ways-to-add-parentheses.181543995.Accepted.leetcode.java b/241.different-ways-to-add-parentheses.181543995.Accepted.leetcode.java
deleted file mode 100644
index 8da817d2..00000000
--- ./241.different-ways-to-add-parentheses.181543995.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution
-{
-    public List<Integer> diffWaysToCompute(String input)
-    {
-        List<Integer> result = new ArrayList<Integer>();
-
-        for (int i = 0; i < input.length(); i++)
-        {
-            char ch = input.charAt(i);
-
-            if (ch == '+' || ch == '-' || ch == '*')
-            {
-                List<Integer> left = diffWaysToCompute(input.substring(0, i));
-                List<Integer> right = diffWaysToCompute(input.substring(i + 1, input.length()));
-
-                for (int l : left)
-                {
-                    for (int r : right)
-                    {
-                        switch (ch)
-                        {
-                        case '+' :
-                            result.add(l + r);
-                            break;
-
-                        case '-' :
-                            result.add(l - r);
-                            break;
-
-                        case '*' :
-                            result.add(l * r);
-                            break;
-                        }
-                    }
-                }
-            }
-        }
-
-        if (result.size() == 0)
-        {
-            result.add(Integer.valueOf(input));
-        }
-
-        return result;
-    }
-}
-
diff --git a/242.valid-anagram.102399360.Accepted.leetcode.java b/242.valid-anagram.102399360.Accepted.leetcode.java
deleted file mode 100644
index 93a2a6a5..00000000
--- ./242.valid-anagram.102399360.Accepted.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-public class Solution
-{
-    public boolean isAnagram(String s, String t)
-    {
-        if (null == s || null == t || s.length() != t.length())
-        {
-            return false;
-        }
-
-        Map<Character, Integer> map = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < s.length(); i++)
-        {
-            char c = s.charAt(i);
-
-            if (!map.containsKey(c))
-            {
-                map.put(c, 0);
-            }
-
-            map.put(c, map.get(c) + 1);
-        }
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (map.containsKey(c) && map.get(c) > 0)
-            {
-                map.put(c, map.get(c) - 1);
-            }
-            else
-            {
-                return false;
-            }
-        }
-
-        for (Integer value : map.values())
-        {
-            if (value != 0)
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-}
diff --git a/242.valid-anagram.102399387.Accepted.leetcode.java b/242.valid-anagram.102399387.Accepted.leetcode.java
deleted file mode 100644
index 5ad0fdfc..00000000
--- ./242.valid-anagram.102399387.Accepted.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution
-{
-    public boolean isAnagram(String s, String t)
-    {
-        Map<Character, Integer> map = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < s.length(); i++)
-        {
-            char c = s.charAt(i);
-
-            if (!map.containsKey(c))
-            {
-                map.put(c, 0);
-            }
-
-            map.put(c, map.get(c) + 1);
-        }
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (map.containsKey(c) && map.get(c) > 0)
-            {
-                map.put(c, map.get(c) - 1);
-            }
-            else
-            {
-                return false;
-            }
-        }
-
-        for (Integer value : map.values())
-        {
-            if (value != 0)
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-}
diff --git a/242.valid-anagram.46299945.Accepted.leetcode.java b/242.valid-anagram.46299945.Accepted.leetcode.java
deleted file mode 100644
index 137d0ab1..00000000
--- ./242.valid-anagram.46299945.Accepted.leetcode.java
+++ /dev/null
@@ -1,55 +0,0 @@
-  public class Solution
-  {
-    public boolean isAnagram(String s, String t)
-    {
-      if (null == s && null == t)
-      {
-        return true;
-      }
-
-      if (null == s || null == t || s.length() != t.length())
-      {
-        return false;
-      }
-
-      Map<Character, Integer> map = new HashMap<Character, Integer>();
-
-      for (int i = 0; i < s.length(); i++)
-      {
-        char c = s.charAt(i);
-
-        if (!map.containsKey(c))
-        {
-          map.put(c, 0);
-        }
-
-        map.put(c, map.get(c) + 1);
-      }
-
-      for (int i = 0; i < t.length(); i++)
-      {
-        char c = t.charAt(i);
-
-        if (map.containsKey(c) && map.get(c) > 0)
-        {
-          map.put(c, map.get(c) - 1);
-        }
-        else
-        {
-          return false;
-        }
-      }
-
-      // iterate map
-      for (Integer value : map.values())
-      {
-        if (value != 0)
-        {
-          return false;
-        }
-      }
-
-      return true;
-    }
-  }
-
diff --git a/242.valid-anagram.82068517.Accepted.leetcode.java b/242.valid-anagram.82068517.Accepted.leetcode.java
deleted file mode 100644
index 23cbf000..00000000
--- ./242.valid-anagram.82068517.Accepted.leetcode.java
+++ /dev/null
@@ -1,54 +0,0 @@
-public class Solution
-{
-    public boolean isAnagram(String s, String t)
-    {
-        if (null == s && null == t)
-        {
-            return true;
-        }
-
-        if (null == s || null == t || s.length() != t.length())
-        {
-            return false;
-        }
-
-        Map<Character, Integer> map = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < s.length(); i++)
-        {
-            char c = s.charAt(i);
-
-            if (!map.containsKey(c))
-            {
-                map.put(c, 0);
-            }
-
-            map.put(c, map.get(c) + 1);
-        }
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (map.containsKey(c) && map.get(c) > 0)
-            {
-                map.put(c, map.get(c) - 1);
-            }
-            else
-            {
-                return false;
-            }
-        }
-
-        // iterate map
-        for (Integer value : map.values())
-        {
-            if (value != 0)
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-}
diff --git a/243.shortest-word-distance.185259162.Wrong-Answer.leetcode.java b/243.shortest-word-distance.185259162.Wrong-Answer.leetcode.java
deleted file mode 100644
index 2f71e18b..00000000
--- ./243.shortest-word-distance.185259162.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public int shortestDistance(String[] words, String word1, String word2)
-    {
-        int idx1 = -1, idx2 = -1, distance = Integer.MAX_VALUE;
-
-        for (int i = 0; i < words.length; i++)
-        {
-            if (words[i].equals(word1))
-            {
-                idx1 = i;
-            }
-
-            if (words[i].equals(word2))
-            {
-                idx2 = i;
-            }
-
-            distance = Math.min(distance, Math.abs(idx1 - idx2));
-        }
-
-        return distance;
-    }
-}
-
diff --git a/243.shortest-word-distance.185260058.Wrong-Answer.leetcode.java b/243.shortest-word-distance.185260058.Wrong-Answer.leetcode.java
deleted file mode 100644
index 37a16c80..00000000
--- ./243.shortest-word-distance.185260058.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public int shortestDistance(String[] words, String word1, String word2)
-    {
-        int idx1 = -1, idx2 = -1, distance = Integer.MAX_VALUE;
-
-        for (int i = 0; i < words.length; i++)
-        {
-            if (words[i].equals(word1))
-            {
-                idx1 = i;
-                System.out.printf("idx1 --> %s\n", idx1);
-            }
-
-            if (words[i].equals(word2))
-            {
-                idx2 = i;
-                System.out.printf("idx2 --> %s\n", idx2);
-            }
-
-            distance = Math.min(distance, Math.abs(idx1 - idx2));
-        }
-
-        return distance;
-    }
-}
-
diff --git a/243.shortest-word-distance.185260238.Accepted.leetcode.java b/243.shortest-word-distance.185260238.Accepted.leetcode.java
deleted file mode 100644
index 71a90e96..00000000
--- ./243.shortest-word-distance.185260238.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public int shortestDistance(String[] words, String word1, String word2)
-    {
-        int idx1 = -1, idx2 = -1, distance = Integer.MAX_VALUE;
-
-        for (int i = 0; i < words.length; i++)
-        {
-            if (words[i].equals(word1))
-            {
-                idx1 = i;
-                System.out.printf("idx1 --> %s\n", idx1);
-            }
-
-            if (words[i].equals(word2))
-            {
-                idx2 = i;
-                System.out.printf("idx2 --> %s\n", idx2);
-            }
-
-            if (idx1 != -1 && idx2 != -1)
-            {
-                distance = Math.min(distance, Math.abs(idx1 - idx2));
-            }
-        }
-
-        return distance;
-    }
-}
-
diff --git a/243.shortest-word-distance.71481252.Accepted.leetcode.java b/243.shortest-word-distance.71481252.Accepted.leetcode.java
deleted file mode 100644
index f472e2f8..00000000
--- ./243.shortest-word-distance.71481252.Accepted.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-public class Solution {
-    public int shortestDistance(String[] words, String word1, String word2) {
-        int idx1 = -1, idx2 = -1, distance = Integer.MAX_VALUE;
-        for(int i = 0; i < words.length; i++){
-            if(words[i].equals(word1)){
-                idx1 = i;
-                // 第一次写入idx就先不比较
-                if(idx2 != -1) distance = Math.min(distance, idx1 - idx2);
-            }
-            if(words[i].equals(word2)){
-                idx2 = i;
-                // 第一次写入idx就先不比较
-                if(idx1 != -1) distance = Math.min(distance, idx2 - idx1);
-            }
-        }
-        return distance;
-    }
-}
diff --git a/243.shortest-word-distance.94976098.Accepted.leetcode.java b/243.shortest-word-distance.94976098.Accepted.leetcode.java
deleted file mode 100644
index 7ea3eeee..00000000
--- ./243.shortest-word-distance.94976098.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    public int shortestDistance(String[] words, String word1, String word2)
-    {
-        int idx1 = -1, idx2 = -1, distance = Integer.MAX_VALUE;
-
-        for (int i = 0; i < words.length; i++)
-        {
-            if (words[i].equals(word1))
-            {
-                idx1 = i;
-
-                // 第一次写入idx就先不比较
-                if (idx2 != -1)
-                {
-                    distance = Math.min(distance, idx1 - idx2);
-                }
-            }
-
-            if (words[i].equals(word2))
-            {
-                idx2 = i;
-
-                // 第一次写入idx就先不比较
-                if (idx1 != -1)
-                {
-                    distance = Math.min(distance, idx2 - idx1);
-                }
-            }
-        }
-
-        return distance;
-    }
-}
diff --git a/243.shortest-word-distance.94977961.Wrong-Answer.leetcode.java b/243.shortest-word-distance.94977961.Wrong-Answer.leetcode.java
deleted file mode 100644
index dd035531..00000000
--- ./243.shortest-word-distance.94977961.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution
-{
-    public int shortestDistance(String[] words, String word1, String word2)
-    {
-        int idx1 = -1, idx2 = -1, distance = Integer.MAX_VALUE;
-
-        for (int i = 0; i < words.length; i++)
-        {
-            if (words[i].equals(word1))
-            {
-                idx1 = i;
-            }
-
-            if (words[i].equals(word2))
-            {
-                idx2 = i;
-            }
-            
-            distance = Math.min(distance, Math.abs(idx1 - idx2));
-        }
-
-        return distance;
-    }
-}
diff --git a/243.shortest-word-distance.94978674.Wrong-Answer.leetcode.java b/243.shortest-word-distance.94978674.Wrong-Answer.leetcode.java
deleted file mode 100644
index 7ed2e13f..00000000
--- ./243.shortest-word-distance.94978674.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public int shortestDistance(String[] words, String word1, String word2)
-    {
-        int p1 = -1, p2 = -1, distance = Integer.MAX_VALUE;
-
-        for (int i = 0; i < words.length; i++)
-        {
-            if (words[i].equals(word1))
-            {
-                p1 = i;
-            }
-
-            if (words[i].equals(word2))
-            {
-                p2 = i;
-            }
-            
-            System.out.println("p1 --> " + p1);
-            System.out.println("p2 --> " + p2);
-            distance = Math.min(distance, Math.abs(p1 - p2));
-        }
-
-        return distance;
-    }
-}
diff --git a/243.shortest-word-distance.94978875.Accepted.leetcode.java b/243.shortest-word-distance.94978875.Accepted.leetcode.java
deleted file mode 100644
index 3cb80f92..00000000
--- ./243.shortest-word-distance.94978875.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public int shortestDistance(String[] words, String word1, String word2)
-    {
-        int p1 = -1, p2 = -1, distance = Integer.MAX_VALUE;
-
-        for (int i = 0; i < words.length; i++)
-        {
-            if (words[i].equals(word1))
-            {
-                p1 = i;
-            }
-
-            if (words[i].equals(word2))
-            {
-                p2 = i;
-            }
-            
-            if (p1 != -1 && p2 != -1)
-            {
-                distance = Math.min(distance, Math.abs(p1 - p2));    
-            }
-        }
-
-        return distance;
-    }
-}
diff --git a/244.shortest-word-distance-ii.71481499.Accepted.leetcode.java b/244.shortest-word-distance-ii.71481499.Accepted.leetcode.java
deleted file mode 100644
index 76893030..00000000
--- ./244.shortest-word-distance-ii.71481499.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class WordDistance {
-    
-    HashMap<String, List<Integer>> map = new HashMap<String, List<Integer>>();
-    
-    public WordDistance(String[] words) {
-        // 统计每个单词出现的下标存入哈希表中
-        for(int i = 0; i < words.length; i++){
-            List<Integer> cnt = map.get(words[i]);
-            if(cnt == null){
-                cnt = new ArrayList<Integer>();
-            }
-            cnt.add(i);
-            map.put(words[i], cnt);
-        }
-    }
-
-    public int shortest(String word1, String word2) {
-        List<Integer> idx1 = map.get(word1);
-        List<Integer> idx2 = map.get(word2);
-        int distance = Integer.MAX_VALUE;
-        int i = 0, j = 0;
-        // 每次比较两个下标列表最小的下标，然后把跳过较小的那个
-        while(i < idx1.size() && j < idx2.size()){
-            distance = Math.min(Math.abs(idx1.get(i) - idx2.get(j)), distance);
-            if(idx1.get(i) < idx2.get(j)){
-                i++;
-            } else {
-                j++;
-            }
-        }
-        return distance;
-    }
-}
diff --git a/244.shortest-word-distance-ii.94967548.Accepted.leetcode.java b/244.shortest-word-distance-ii.94967548.Accepted.leetcode.java
deleted file mode 100644
index 1820c395..00000000
--- ./244.shortest-word-distance-ii.94967548.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class WordDistance
-{
-
-    HashMap<String, List<Integer>> map = new HashMap<String, List<Integer>>();
-
-    public WordDistance(String[] words)
-    {
-        // 统计每个单词出现的下标存入哈希表中
-        for (int i = 0; i < words.length; i++)
-        {
-            List<Integer> cnt = map.get(words[i]);
-
-            if (cnt == null)
-            {
-                cnt = new ArrayList<Integer>();
-            }
-
-            cnt.add(i);
-            map.put(words[i], cnt);
-        }
-    }
-
-    public int shortest(String word1, String word2)
-    {
-        List<Integer> idx1 = map.get(word1);
-        List<Integer> idx2 = map.get(word2);
-        int distance = Integer.MAX_VALUE;
-        int i = 0, j = 0;
-
-        // 每次比较两个下标列表最小的下标，然后把跳过较小的那个
-        while (i < idx1.size() && j < idx2.size())
-        {
-            distance = Math.min(Math.abs(idx1.get(i) - idx2.get(j)), distance);
-
-            if (idx1.get(i) < idx2.get(j))
-            {
-                i++;
-            }
-            else
-            {
-                j++;
-            }
-        }
-
-        return distance;
-    }
-}
diff --git a/244.shortest-word-distance-ii.95501273.Accepted.leetcode.java b/244.shortest-word-distance-ii.95501273.Accepted.leetcode.java
deleted file mode 100644
index ab96ccb4..00000000
--- ./244.shortest-word-distance-ii.95501273.Accepted.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-public class WordDistance
-{
-
-    HashMap<String, List<Integer>> map = new HashMap<String, List<Integer>>();
-
-    public WordDistance(String[] words)
-    {
-        for (int i = 0; i < words.length; i++)
-        {
-            List<Integer> cnt = map.get(words[i]);
-
-            if (cnt == null)
-            {
-                cnt = new ArrayList<Integer>();
-            }
-
-            cnt.add(i);
-            map.put(words[i], cnt);
-        }
-    }
-
-    public int shortest(String word1, String word2)
-    {
-        List<Integer> idx1 = map.get(word1);
-        List<Integer> idx2 = map.get(word2);
-        int distance = Integer.MAX_VALUE;
-        int i = 0, j = 0;
-
-        while (i < idx1.size() && j < idx2.size())
-        {
-            distance = Math.min(distance, Math.abs(idx1.get(i) - idx2.get(j)));
-            
-            if (idx1.get(i) < idx2.get(j))
-            {
-                i++;
-            }
-            else
-            {
-                j++;
-            }
-        }
-        
-        return distance;
-    }
-}
diff --git a/244.shortest-word-distance-ii.96576012.Accepted.leetcode.java b/244.shortest-word-distance-ii.96576012.Accepted.leetcode.java
deleted file mode 100644
index d4d06e83..00000000
--- ./244.shortest-word-distance-ii.96576012.Accepted.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-public class WordDistance
-{
-
-    HashMap<String, List<Integer>> map = new HashMap<String, List<Integer>>();
-
-    public WordDistance(String[] words)
-    {
-        for (int i = 0; i < words.length; i++)
-        {
-            String word = words[i];
-            
-            if (!map.containsKey(word))
-            {
-                map.put(word, new ArrayList<Integer>());
-            }
-            
-            map.get(word).add(i);
-        }
-    }
-
-    public int shortest(String word1, String word2)
-    {
-        List<Integer> idx1 = map.get(word1);
-        List<Integer> idx2 = map.get(word2);
-        int distance = Integer.MAX_VALUE;
-        int i = 0, j = 0;
-
-        while (i < idx1.size() && j < idx2.size())
-        {
-            distance = Math.min(distance, Math.abs(idx1.get(i) - idx2.get(j)));
-            
-            if (idx1.get(i) < idx2.get(j))
-            {
-                i++;
-            }
-            else
-            {
-                j++;
-            }
-        }
-        
-        return distance;
-    }
-}
diff --git a/245.shortest-word-distance-iii.185794525.Wrong-Answer.leetcode.java b/245.shortest-word-distance-iii.185794525.Wrong-Answer.leetcode.java
deleted file mode 100644
index 332249b2..00000000
--- ./245.shortest-word-distance-iii.185794525.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int shortestWordDistance(String[] words, String word1, String word2)
-    {
-        int p1 = -1, p2 = -1, distance = words.length;
-
-        for (int i = 0; i < words.length; i++)
-        {
-            if (words[i].equals(word1))
-            {
-                p1 = i;
-            }
-
-            if (words[i].equals(word2))
-            {
-                p2 = i;
-            }
-
-            if (p1 != -1 && p2 != -1)
-            {
-                distance = (p1 != p2) ? Math.min(distance, Math.abs(p1 - p2)) : distance;
-            }
-        }
-
-        return distance;
-    }
-}
-
diff --git a/245.shortest-word-distance-iii.185799012.Wrong-Answer.leetcode.java b/245.shortest-word-distance-iii.185799012.Wrong-Answer.leetcode.java
deleted file mode 100644
index 155ddf02..00000000
--- ./245.shortest-word-distance-iii.185799012.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int shortestWordDistance(String[] words, String word1, String word2)
-    {
-        int p1 = -1, p2 = -1, distance = words.length;
-
-        for (int i = 0; i < words.length; i++)
-        {
-            if (words[i].equals(word1))
-            {
-                p1 = i;
-            }
-
-            if (words[i].equals(word2))
-            {
-                p2 = i;
-            }
-
-            if (p1 != -1 && p2 != -1)
-            {
-                distance = (p1 != p2) ? Math.min(distance, Math.abs(p1 - p2)) : distance;
-                System.out.printf("distance --> %s\n", distance);
-            }
-        }
-
-        return distance;
-    }
-}
-
diff --git a/245.shortest-word-distance-iii.185805555.Wrong-Answer.leetcode.java b/245.shortest-word-distance-iii.185805555.Wrong-Answer.leetcode.java
deleted file mode 100644
index b62306aa..00000000
--- ./245.shortest-word-distance-iii.185805555.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public int shortestWordDistance(String[] words, String word1, String word2)
-    {
-        int p1 = -1, p2 = -1, distance = words.length;
-
-        for (int i = 0; i < words.length; i++)
-        {
-            if (words[i].equals(word1))
-            {
-                System.out.printf("p1 --> %s\n", p1);
-                p1 = i;
-            }
-
-            if (words[i].equals(word2))
-            {
-                System.out.printf("p2 --> %s\n", p2);
-                p2 = i;
-            }
-
-            if (p1 != -1 && p2 != -1)
-            {
-                distance = (p1 != p2) ? Math.min(distance, Math.abs(p1 - p2)) : distance;
-                System.out.printf("distance --> %s\n", distance);
-            }
-        }
-
-        return distance;
-    }
-}
-
diff --git a/245.shortest-word-distance-iii.71481836.Accepted.leetcode.java b/245.shortest-word-distance-iii.71481836.Accepted.leetcode.java
deleted file mode 100644
index ecd9f539..00000000
--- ./245.shortest-word-distance-iii.71481836.Accepted.leetcode.java
+++ /dev/null
@@ -1,17 +0,0 @@
-public class Solution {
-    public int shortestWordDistance(String[] words, String word1, String word2) {
-        int idx1 = -1, idx2 = -1, distance = Integer.MAX_VALUE, turn = 0, inc = (word1.equals(word2) ? 1 : 0);
-        for(int i = 0; i < words.length; i++){
-            if(words[i].equals(word1) && turn % 2 == 0){
-                idx1 = i;
-                if(idx2 != -1) distance = Math.min(distance, idx1 - idx2);
-                turn += inc;
-            } else if(words[i].equals(word2)){
-                idx2 = i;
-                if(idx1 != -1) distance = Math.min(distance, idx2 - idx1);
-                turn += inc;
-            }
-        }
-        return distance;
-    }
-}
diff --git a/245.shortest-word-distance-iii.94967636.Accepted.leetcode.java b/245.shortest-word-distance-iii.94967636.Accepted.leetcode.java
deleted file mode 100644
index 31328c7b..00000000
--- ./245.shortest-word-distance-iii.94967636.Accepted.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution
-{
-    public int shortestWordDistance(String[] words, String word1, String word2)
-    {
-        int idx1 = -1, idx2 = -1, distance = Integer.MAX_VALUE, turn = 0, inc = (word1.equals(word2) ? 1 : 0);
-
-        for (int i = 0; i < words.length; i++)
-        {
-            if (words[i].equals(word1) && turn % 2 == 0)
-            {
-                idx1 = i;
-
-                if (idx2 != -1)
-                {
-                    distance = Math.min(distance, idx1 - idx2);
-                }
-
-                turn += inc;
-            }
-            else if (words[i].equals(word2))
-            {
-                idx2 = i;
-
-                if (idx1 != -1)
-                {
-                    distance = Math.min(distance, idx2 - idx1);
-                }
-
-                turn += inc;
-            }
-        }
-
-        return distance;
-    }
-}
diff --git a/245.shortest-word-distance-iii.96576486.Accepted.leetcode.java b/245.shortest-word-distance-iii.96576486.Accepted.leetcode.java
deleted file mode 100644
index ab0aa616..00000000
--- ./245.shortest-word-distance-iii.96576486.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public int shortestWordDistance(String[] words, String word1, String word2)
-    {
-        int p1 = -1, p2 = -1, distance = words.length;
-
-        for (int i = 0; i < words.length; i++)
-        {
-            if (words[i].equals(word1))
-            {
-                p1 = i;
-
-                if (p1 != -1 && p2 != -1)
-                {
-                    distance = (p1 != p2) ? Math.min(distance, Math.abs(p1 - p2)) : distance;
-                }
-            }
-
-            if (words[i].equals(word2))
-            {
-                p2 = i;
-
-                if (p1 != -1 && p2 != -1)
-                {
-                    distance = (p1 != p2) ? Math.min(distance, Math.abs(p1 - p2)) : distance;
-                }
-            }
-        }
-
-        return distance;
-    }
-}
diff --git a/245.shortest-word-distance-iii.96576660.Wrong-Answer.leetcode.java b/245.shortest-word-distance-iii.96576660.Wrong-Answer.leetcode.java
deleted file mode 100644
index b246ad6a..00000000
--- ./245.shortest-word-distance-iii.96576660.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public int shortestWordDistance(String[] words, String word1, String word2)
-    {
-        int p1 = -1, p2 = -1, distance = words.length;
-
-        for (int i = 0; i < words.length; i++)
-        {
-            if (words[i].equals(word1))
-            {
-                p1 = i;
-            }
-
-            if (words[i].equals(word2))
-            {
-                p2 = i;
-            }
-
-            if (p1 != -1 && p2 != -1)
-            {
-                distance = (p1 != p2) ? Math.min(distance, Math.abs(p1 - p2)) : distance;
-            }
-        }
-
-        return distance;
-    }
-}
diff --git a/246.strobogrammatic-number.67596526.Accepted.leetcode.java b/246.strobogrammatic-number.67596526.Accepted.leetcode.java
deleted file mode 100644
index 9f998829..00000000
--- ./246.strobogrammatic-number.67596526.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution {
-    public boolean isStrobogrammatic(String num) {
-        if(num == null || num.length() == 0) {
-            return true;
-        }
-         
-        Map<Character, Character> map = new HashMap<>();
-        map.put('0', '0');
-        map.put('1', '1');
-        map.put('8', '8');
-        map.put('6', '9');
-        map.put('9', '6');
-         
-        int lo = 0;
-        int hi = num.length() - 1;
-         
-        while (lo <= hi) {
-            char c1 = num.charAt(lo);
-            char c2 = num.charAt(hi);
-             
-            if (!map.containsKey(c1) || map.get(c1) != c2) {
-                return false;
-            }
-             
-            lo++;
-            hi--;
-        }
-         
-        return true;
-    }
-}
diff --git a/247.strobogrammatic-number-ii.71491056.Accepted.leetcode.java b/247.strobogrammatic-number-ii.71491056.Accepted.leetcode.java
deleted file mode 100644
index a26ce243..00000000
--- ./247.strobogrammatic-number-ii.71491056.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution {
-    private List<String> result = new ArrayList<String>();
-    private Map<Character, Character> hashMap = new HashMap<>();
-     
-    public List<String> findStrobogrammatic(int n) {
-        result.clear();
-        hashMap.clear();
-        fillHashMap(hashMap);
-         
-        char[] arr = new char[n];
-        findStrobogrammaticHelper(arr, 0, n - 1);
-         
-        return result;
-    }
-     
-    private void findStrobogrammaticHelper(char[] arr, int lo, int hi) {
-        if (lo > hi) {
-            if (arr.length == 1 || (arr.length > 1 && arr[0] != '0')) {
-                result.add(new String(arr));
-            }
-            return;
-        }
-         
-        for (Character c : hashMap.keySet()) {
-            arr[lo] = c;
-            arr[hi] = hashMap.get(c);
-             
-            if (lo < hi || (lo == hi && hashMap.get(c) == c)) {
-                findStrobogrammaticHelper(arr, lo + 1, hi - 1);
-            }
-        }
-    }
-     
-    private void fillHashMap(Map<Character, Character> hashMap) {
-        hashMap.put('0', '0');
-        hashMap.put('1', '1');
-        hashMap.put('8', '8');
-        hashMap.put('6', '9');
-        hashMap.put('9', '6');
-    }
-}
diff --git a/248.strobogrammatic-number-iii.71750767.Accepted.leetcode.java b/248.strobogrammatic-number-iii.71750767.Accepted.leetcode.java
deleted file mode 100644
index 2b9d28bf..00000000
--- ./248.strobogrammatic-number-iii.71750767.Accepted.leetcode.java
+++ /dev/null
@@ -1,55 +0,0 @@
-public class Solution {
-public int strobogrammaticInRange(String low, String high) {
-    int m = low.length(), n = high.length();
-    List<String> result = new ArrayList<String>();
-    for(int i=m; i<=n; i++){
-        result.addAll(findStrobogrammatic(i));
-    }
-    int i=0;
-    int count=result.size();
-    while(i<result.size() && result.get(i).length()==low.length()){
-        if(result.get(i).compareTo(low)<0){
-            count--;
-        }
-        i++;
-    }
-    i=result.size()-1;
-    while(i>=0 && result.get(i).length()==high.length()){
-        if(result.get(i).compareTo(high)>0){
-            count--;
-        }
-        i--;
-    }
-    return count;
-}
-public List<String> findStrobogrammatic(int n) {
-    HashMap<Character, Character> map = new HashMap<>();
-    map.put('1','1');
-    map.put('0','0');
-    map.put('6','9');
-    map.put('9','6');
-    map.put('8','8');
-    List<String> list = new ArrayList<>();
-    char[] arr = new char[n];
-    dfs(list, arr, 0, n, map);
-    Collections.sort(list);
-    return list;
-}
-public void dfs(List<String> list, char[] buffer, int idx, int n, Map<Character, Character> map){
-    if(idx==(n+1)/2){
-        list.add( String.valueOf(buffer));
-        return;
-    }
-    for(char key:map.keySet()){
-        if(idx==0 && n>1 && key=='0'){
-            continue;
-        }
-        if(idx==(n/2) && (key=='6'||key=='9')){
-            continue;
-        } 
-        buffer[idx] = key;
-        buffer[n-idx-1] = map.get(key);
-        dfs(list, buffer, idx+1, n, map);
-    }
-}
-}
diff --git a/248.strobogrammatic-number-iii.71751233.Accepted.leetcode.java b/248.strobogrammatic-number-iii.71751233.Accepted.leetcode.java
deleted file mode 100644
index 82c35850..00000000
--- ./248.strobogrammatic-number-iii.71751233.Accepted.leetcode.java
+++ /dev/null
@@ -1,82 +0,0 @@
-  public class Solution
-  {
-    public int strobogrammaticInRange(String low, String high)
-    {
-      int m = low.length(), n = high.length();
-      List<String> result = new ArrayList<String>();
-
-      for (int i = m; i <= n; i++)
-      {
-        result.addAll(findStrobogrammatic(i));
-      }
-
-      int i = 0;
-      int count = result.size();
-
-      while (i < result.size() && result.get(i).length() == low.length())
-      {
-        if (result.get(i).compareTo(low) < 0)
-        {
-          count--;
-        }
-
-        i++;
-      }
-
-      i = result.size() - 1;
-
-      while (i >= 0 && result.get(i).length() == high.length())
-      {
-        if (result.get(i).compareTo(high) > 0)
-        {
-          count--;
-        }
-
-        i--;
-      }
-
-      return count;
-    }
-    public List<String> findStrobogrammatic(int n)
-    {
-      HashMap<Character, Character> map = new HashMap<>();
-      map.put('1', '1');
-      map.put('0', '0');
-      map.put('6', '9');
-      map.put('9', '6');
-      map.put('8', '8');
-      List<String> list = new ArrayList<>();
-      char[] arr = new char[n];
-      dfs(list, arr, 0, n, map);
-      Collections.sort(list);
-      return list;
-    }
-    public void dfs(List<String> list, char[] buffer, int idx, int n, Map<Character, Character> map)
-    {
-      if (idx == (n + 1) / 2)
-      {
-        list.add(String.valueOf(buffer));
-        return;
-      }
-
-      for (char key : map.keySet())
-      {
-        if (idx == 0 && n > 1 && key == '0')
-        {
-          continue;
-        }
-
-        if (idx == (n / 2) && (key == '6' || key == '9'))
-        {
-          continue;
-        }
-
-        buffer[idx] = key;
-        buffer[n - idx - 1] = map.get(key);
-        dfs(list, buffer, idx + 1, n, map);
-      }
-    }
-
-  }
-
-
diff --git a/249.group-shifted-strings.67598379.Accepted.leetcode.java b/249.group-shifted-strings.67598379.Accepted.leetcode.java
deleted file mode 100644
index 09061fa1..00000000
--- ./249.group-shifted-strings.67598379.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution {
-    public List<List<String>> groupStrings(String[] strings) {
-    List<List<String>> result = new ArrayList<List<String>>();
-    HashMap<String, ArrayList<String>> map 
-                    = new HashMap<String, ArrayList<String>>();
- 
-    for(String s: strings){
-        char[] arr = s.toCharArray();
-        if(arr.length>0){
-            int diff = arr[0]-'a';
-            for(int i=0; i<arr.length; i++){
-                if(arr[i]-diff<'a'){
-                   arr[i] = (char) (arr[i]-diff+26);
-                }else{
-                   arr[i] = (char) (arr[i]-diff); 
-                }
- 
-            }
-        }  
- 
-        String ns = new String(arr);
-        if(map.containsKey(ns)){
-            map.get(ns).add(s);
-        }else{
-            ArrayList<String> al = new ArrayList<String>();
-            al.add(s);
-            map.put(ns, al);
-        }
-    }
- 
-    for(Map.Entry<String, ArrayList<String>> entry: map.entrySet()){
-        Collections.sort(entry.getValue());
-    }
- 
-    result.addAll(map.values());
- 
-    return result;
-}
-}
diff --git a/25.reverse-nodes-in-k-group.34387291.Accepted.leetcode.java b/25.reverse-nodes-in-k-group.34387291.Accepted.leetcode.java
deleted file mode 100644
index 075d4285..00000000
--- ./25.reverse-nodes-in-k-group.34387291.Accepted.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-  public class Solution
-  {
-    public ListNode reverseKGroup(ListNode head, int k)
-    {
-      if (head == null || k == 1)
-      {
-        return head;
-      }
-
-      ListNode dummy = new ListNode(0);
-      dummy.next = head;
-      ListNode pre = dummy;
-      int i = 0;
-
-      while (head != null)
-      {
-        i++ ;
-
-        if (i % k == 0)
-        {
-          pre = reverse(pre, head.next);
-          head = pre.next;
-        }
-        else
-        {
-          head = head.next;
-        }
-      }
-
-      return dummy.next;
-    }
-
-    public ListNode reverse(ListNode pre, ListNode next)
-    {
-      ListNode last = pre.next;
-      ListNode cur = last.next;
-
-      while (cur != next)
-      {
-        last.next = cur.next;
-        cur.next = pre.next;
-        pre.next = cur;
-        cur = last.next;
-      }
-
-      return last;
-    }
-  }
-
diff --git a/25.reverse-nodes-in-k-group.34389172.Accepted.leetcode.java b/25.reverse-nodes-in-k-group.34389172.Accepted.leetcode.java
deleted file mode 100644
index 7b61ac1f..00000000
--- ./25.reverse-nodes-in-k-group.34389172.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-  public class Solution
-  {
-    public ListNode reverseKGroup(ListNode head, int k)
-    {
-      if (head == null || k == 1)
-      {
-        return head;
-      }
-
-      ListNode dummy = new ListNode(0);
-      dummy.next = head;
-      ListNode pre = dummy;
-      int count = 0;
-
-      while (head != null)
-      {
-        if (++count % k == 0)
-        {
-          pre = reverse(pre, head.next);
-          head = pre.next;
-        }
-        else
-        {
-          head = head.next;
-        }
-      }
-
-      return dummy.next;
-    }
-
-    public ListNode reverse(ListNode pre, ListNode next)
-    {
-      ListNode last = pre.next;
-      ListNode cur = last.next;
-
-      while (cur != next)
-      {
-        last.next = cur.next;
-        cur.next = pre.next;
-        pre.next = cur;
-        cur = last.next;
-      }
-
-      return last;
-    }
-  }
-
diff --git a/25.reverse-nodes-in-k-group.9439402.Accepted.leetcode.java b/25.reverse-nodes-in-k-group.9439402.Accepted.leetcode.java
deleted file mode 100644
index 0643385e..00000000
--- ./25.reverse-nodes-in-k-group.9439402.Accepted.leetcode.java
+++ /dev/null
@@ -1,55 +0,0 @@
-  public class Solution {
-    public ListNode reverseKGroup(ListNode head, int k) {
-      // Start typing your Java solution below
-      // DO NOT write main() function
-      if (head == null || k == 1) {
-        return head;
-      }
-
-      ListNode dummy = new ListNode(0);
-      dummy.next = head;
-      ListNode pre = dummy;
-      int i = 0;
-
-      while (head != null) {
-        i++;
-
-        if (i % k == 0) {
-          pre = reverse(pre, head.next);
-          head = pre.next;
-        }
-        else {
-          head = head.next;
-        }
-      }
-
-      return dummy.next;
-    }
-
-    /**
-     * Reverse a link list between pre and next exclusively an example: a linked
-     * list: 0->1->2->3->4->5->6 | | pre next after call pre = reverse(pre,
-     * next)
-     *
-     * 0->3->2->1->4->5->6 | | pre next
-     *
-     * @param pre
-     * @param next
-     * @return the reversed list's last node, which is the precedence of
-     *         parameter next
-     */
-    public ListNode reverse(ListNode pre, ListNode next) {
-      ListNode last = pre.next;
-      ListNode cur = last.next;
-
-      while (cur != next) {
-        last.next = cur.next;
-        cur.next = pre.next;
-        pre.next = cur;
-        cur = last.next;
-      }
-
-      return last;
-    }
-  }
-
diff --git a/250.count-univalue-subtrees.71479418.Accepted.leetcode.java b/250.count-univalue-subtrees.71479418.Accepted.leetcode.java
deleted file mode 100644
index e765e759..00000000
--- ./250.count-univalue-subtrees.71479418.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution {
-    public int countUnivalSubtrees(TreeNode root) {
-        if (root == null) return 0;
-        ArrayList<Integer> sum = new ArrayList<Integer>();
-        sum.add(0);
-        helper(root, sum);
-        return sum.get(0);
-    }
-    
-    public boolean helper(TreeNode root, ArrayList<Integer> sum) {
-        if (root == null) return true;
-        boolean left = helper(root.left, sum);
-        boolean right = helper(root.right, sum);
-        if (left && right && (root.left==null || root.val==root.left.val) && (root.right==null || root.val==root.right.val)) {
-            sum.set(0, sum.get(0)+1);
-            return true;
-        }
-        return false;
-    }
-}
diff --git a/251.flatten-2d-vector.71472240.Accepted.leetcode.java b/251.flatten-2d-vector.71472240.Accepted.leetcode.java
deleted file mode 100644
index 3e45f0c9..00000000
--- ./251.flatten-2d-vector.71472240.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Vector2D implements Iterator<Integer> {
-
-    public Vector2D(List<List<Integer>> vec2d) {  
-        row = vec2d.iterator();  
-        if(row.hasNext())  
-            col = row.next().iterator();  
-    } 
-    
-    @Override
-    public Integer next() {
-        int lastValue = col.next();  
-        return lastValue;  
-    }
-
-    @Override
-    public boolean hasNext() {
-            if(col == null) {  
-            return false;  
-        }  
-        if(col.hasNext()) {  
-            return true;  
-        } else {  
-            while(row.hasNext()) {  
-                col = row.next().iterator();  
-                if(col.hasNext())  
-                    return true;  
-            }  
-            return false;  
-        }  
-        
-    }
-    
-    private Iterator<List<Integer>> row = null;  
-    private Iterator<Integer> col = null;
-}
-
-/**
- * Your Vector2D object will be instantiated and called as such:
- * Vector2D i = new Vector2D(vec2d);
- * while (i.hasNext()) v[f()] = i.next();
- */
diff --git a/252.meeting-rooms.156154009.Runtime-Error.leetcode.java b/252.meeting-rooms.156154009.Runtime-Error.leetcode.java
deleted file mode 100644
index 350b59d8..00000000
--- ./252.meeting-rooms.156154009.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public boolean canAttendMeetings(Interval[] intervals)
-    {
-        Arrays.sort(intervals, new Comparator<Interval>()
-        {
-            public int compare(Interval i1, Interval i2)
-            {
-                return i1.start - i2.start;
-            }
-        });
-        int end = intervals[0].end;
-
-        for (int i = 1; i < intervals.length; i++)
-        {
-            if (intervals[i].start < end)
-            {
-                return false;
-            }
-
-            end = Math.max(end, intervals[i].end);
-        }
-
-        return true;
-    }
-}
-
diff --git a/252.meeting-rooms.156175728.Accepted.leetcode.java b/252.meeting-rooms.156175728.Accepted.leetcode.java
deleted file mode 100644
index b61707c8..00000000
--- ./252.meeting-rooms.156175728.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public boolean canAttendMeetings(Interval[] intervals)
-    {
-        if (intervals == null || intervals.length == 0)
-        {
-            return true;
-        }
-
-        Arrays.sort(intervals, new Comparator<Interval>()
-        {
-            public int compare(Interval i1, Interval i2)
-            {
-                return i1.start - i2.start;
-            }
-        });
-        int end = intervals[0].end;
-
-        for (int i = 1; i < intervals.length; i++)
-        {
-            if (intervals[i].start < end)
-            {
-                return false;
-            }
-
-            end = Math.max(end, intervals[i].end);
-        }
-
-        return true;
-    }
-}
-
diff --git a/252.meeting-rooms.187106485.Wrong-Answer.leetcode.java b/252.meeting-rooms.187106485.Wrong-Answer.leetcode.java
deleted file mode 100644
index bc787503..00000000
--- ./252.meeting-rooms.187106485.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public boolean canAttendMeetings(Interval[] intervals)
-    {
-        if (intervals.length == 0)
-        {
-            return false;
-        }
-
-        Arrays.sort(intervals, new Comparator<Interval>()
-        {
-            public int compare(Interval i1, Interval i2)
-            {
-                return i1.start - i2.start;
-            }
-        });
-        int end = intervals[0].end;
-
-        for (int i = 1; i < intervals.length; i++)
-        {
-            if (intervals[i].start < end)
-            {
-                return false;
-            }
-
-            end = Math.max(end, intervals[i].end);
-        }
-
-        return true;
-    }
-}
-
diff --git a/252.meeting-rooms.187106530.Accepted.leetcode.java b/252.meeting-rooms.187106530.Accepted.leetcode.java
deleted file mode 100644
index 8b8e2347..00000000
--- ./252.meeting-rooms.187106530.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public boolean canAttendMeetings(Interval[] intervals)
-    {
-        if (intervals.length == 0)
-        {
-            return true;
-        }
-
-        Arrays.sort(intervals, new Comparator<Interval>()
-        {
-            public int compare(Interval i1, Interval i2)
-            {
-                return i1.start - i2.start;
-            }
-        });
-        int end = intervals[0].end;
-
-        for (int i = 1; i < intervals.length; i++)
-        {
-            if (intervals[i].start < end)
-            {
-                return false;
-            }
-
-            end = Math.max(end, intervals[i].end);
-        }
-
-        return true;
-    }
-}
-
diff --git a/252.meeting-rooms.187106731.Wrong-Answer.leetcode.java b/252.meeting-rooms.187106731.Wrong-Answer.leetcode.java
deleted file mode 100644
index c2162a1d..00000000
--- ./252.meeting-rooms.187106731.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public boolean canAttendMeetings(Interval[] intervals)
-    {
-        if (intervals == null || intervals.length == 0)
-        {
-            return true;
-        }
-
-        int end = intervals[0].end;
-
-        for (int i = 1; i < intervals.length; i++)
-        {
-            if (intervals[i].start < end)
-            {
-                return false;
-            }
-
-            end = Math.max(end, intervals[i].end);
-        }
-
-        return true;
-    }
-}
-
diff --git a/252.meeting-rooms.72376570.Wrong-Answer.leetcode.java b/252.meeting-rooms.72376570.Wrong-Answer.leetcode.java
deleted file mode 100644
index a233ca8b..00000000
--- ./252.meeting-rooms.72376570.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-  public class Solution
-  {
-    public boolean canAttendMeetings(Interval[] intervals)
-    {
-      if(intervals == null || intervals.length == 0)
-      {
-          return true;
-      }
-      
-      int end = intervals[0].end;
-
-      for (int i = 1; i < intervals.length; i++)
-      {
-        if (intervals[i].start < end)
-        {
-          return false;
-        }
-
-        end = Math.max(end, intervals[i].end);
-      }
-
-      return true;
-    }
-  }
-
diff --git a/252.meeting-rooms.79754644.Wrong-Answer.leetcode.java b/252.meeting-rooms.79754644.Wrong-Answer.leetcode.java
deleted file mode 100644
index 8f0e4a23..00000000
--- ./252.meeting-rooms.79754644.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution
-{
-    public boolean canAttendMeetings(Interval[] intervals)
-    {
-        if(intervals == null || intervals.length == 0)
-        {
-            return true;
-        }
-      
-        int end = intervals[0].end;
-
-        for (int i = 1; i < intervals.length; i++)
-        {
-            if (intervals[i].start < end)
-            {
-                return false;
-            }
-
-            end = Math.max(end, intervals[i].end);
-        }
-
-        return true;
-    }
-}
diff --git a/252.meeting-rooms.79757880.Accepted.leetcode.java b/252.meeting-rooms.79757880.Accepted.leetcode.java
deleted file mode 100644
index b8d7f720..00000000
--- ./252.meeting-rooms.79757880.Accepted.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class Solution
-{
-    public boolean canAttendMeetings(Interval[] intervals)
-    {
-        if(intervals == null || intervals.length == 0)
-        {
-            return true;
-        }
-      
-        Arrays.sort(intervals, new Comparator<Interval>()
-        {
-            public int compare(Interval a, Interval b)
-            {
-                if(a.start == b.start)
-                {
-                    return a.end - b.end;
-                }
-                
-                return a.start - b.start;
-            }
-        }
-        );
-        
-        int end = intervals[0].end;
-
-        for (int i = 1; i < intervals.length; i++)
-        {
-            if (intervals[i].start < end)
-            {
-                return false;
-            }
-
-            end = Math.max(end, intervals[i].end);
-        }
-
-        return true;
-    }
-}
diff --git a/253.meeting-rooms-ii.156189927.Wrong-Answer.leetcode.java b/253.meeting-rooms-ii.156189927.Wrong-Answer.leetcode.java
deleted file mode 100644
index 627e4500..00000000
--- ./253.meeting-rooms-ii.156189927.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public int minMeetingRooms(Interval[] intervals)
-    {
-        if (intervals == null || intervals.length == 0)
-        {
-            return 0;
-        }
-
-        Arrays.sort(intervals, new Comparator<Interval>()
-        {
-            public int compare(Interval o1, Interval o2)
-            {
-                return o1.start - o2.start;
-            }
-        });
-        PriorityQueue<Integer> endTimes = new PriorityQueue<Integer>();
-        endTimes.offer(intervals[0].end);
-
-        for (int i = 1; i < intervals.length; i++)
-        {
-            if (intervals[i].end >= endTimes.peek())
-            {
-                endTimes.poll();
-            }
-
-            endTimes.offer(intervals[i].end);
-        }
-
-        return endTimes.size();
-    }
-}
-
diff --git a/253.meeting-rooms-ii.83710583.Accepted.leetcode.java b/253.meeting-rooms-ii.83710583.Accepted.leetcode.java
deleted file mode 100644
index a1b3b48a..00000000
--- ./253.meeting-rooms-ii.83710583.Accepted.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/**
- * Definition for an interval.
- * public class Interval {
- *     int start;
- *     int end;
- *     Interval() { start = 0; end = 0; }
- *     Interval(int s, int e) { start = s; end = e; }
- * }
- */
-public class Solution 
-{
-    public int minMeetingRooms(Interval[] intervals) 
-    {
-        if(intervals == null || intervals.length == 0)
-        {
-            return 0;   
-        }
-        
-        Arrays.sort(intervals, new Comparator<Interval>()
-        {
-            public int compare(Interval o1, Interval o2)
-            {
-                return o1.start - o2.start;
-            }
-        });
-        
-        // 用堆来管理房间的结束时间
-        PriorityQueue<Integer> endTimes = new PriorityQueue<Integer>();
-        endTimes.offer(intervals[0].end);
-        
-        for(int i = 1; i < intervals.length; i++)
-        {
-            // 如果当前时间段的开始时间大于最早结束的时间，则可以更新这个最早的结束时间为当前时间段的结束时间，如果小于的话，就加入一个新的结束时间，表示新的房间
-            if(intervals[i].start >= endTimes.peek())
-            {
-                endTimes.poll();
-            }
-            
-            endTimes.offer(intervals[i].end);
-        }
-        
-        // 有多少结束时间就有多少房间
-        return endTimes.size();
-    }
-}
diff --git a/253.meeting-rooms-ii.83912672.Wrong-Answer.leetcode.java b/253.meeting-rooms-ii.83912672.Wrong-Answer.leetcode.java
deleted file mode 100644
index 1e36c173..00000000
--- ./253.meeting-rooms-ii.83912672.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/**
- * Definition for an interval.
- * public class Interval {
- *     int start;
- *     int end;
- *     Interval() { start = 0; end = 0; }
- *     Interval(int s, int e) { start = s; end = e; }
- * }
- */
-public class Solution 
-{
-    public int minMeetingRooms(Interval[] intervals) 
-    {
-        if(intervals == null || intervals.length == 0)
-        {
-            return 0;   
-        }
-        
-        Arrays.sort(intervals, new Comparator<Interval>()
-        {
-            public int compare(Interval o1, Interval o2)
-            {
-                return o1.start - o2.start;
-            }
-        });
-        
-        PriorityQueue<Integer> endTimes = new PriorityQueue<Integer>();
-        endTimes.offer(intervals[0].end);
-        
-        for(int i = 1; i < intervals.length; i++)
-        {
-            if(intervals[i].end >= endTimes.peek())
-            {
-                endTimes.poll();
-            }
-            
-            endTimes.offer(intervals[i].end);
-        }
-        
-        return endTimes.size();
-    }
-}
diff --git a/253.meeting-rooms-ii.83912801.Wrong-Answer.leetcode.java b/253.meeting-rooms-ii.83912801.Wrong-Answer.leetcode.java
deleted file mode 100644
index efa695ef..00000000
--- ./253.meeting-rooms-ii.83912801.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/**
- * Definition for an interval.
- * public class Interval {
- *     int start;
- *     int end;
- *     Interval() { start = 0; end = 0; }
- *     Interval(int s, int e) { start = s; end = e; }
- * }
- */
-public class Solution 
-{
-    public int minMeetingRooms(Interval[] intervals) 
-    {
-        if(intervals == null || intervals.length == 0)
-        {
-            return 0;   
-        }
-        
-        Arrays.sort(intervals, new Comparator<Interval>()
-        {
-            public int compare(Interval o1, Interval o2)
-            {
-                return o1.start - o2.start;
-            }
-        });
-        
-        PriorityQueue<Integer> endTimes = new PriorityQueue<Integer>();
-        endTimes.offer(intervals[0].end);
-        
-        for(int i = 1; i < intervals.length; i++)
-        {
-            if(intervals[i].end > endTimes.peek())
-            {
-                endTimes.poll();
-            }
-            
-            endTimes.offer(intervals[i].end);
-        }
-        
-        return endTimes.size();
-    }
-}
diff --git a/253.meeting-rooms-ii.83912927.Accepted.leetcode.java b/253.meeting-rooms-ii.83912927.Accepted.leetcode.java
deleted file mode 100644
index 36392b2f..00000000
--- ./253.meeting-rooms-ii.83912927.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/**
- * Definition for an interval.
- * public class Interval {
- *     int start;
- *     int end;
- *     Interval() { start = 0; end = 0; }
- *     Interval(int s, int e) { start = s; end = e; }
- * }
- */
-public class Solution 
-{
-    public int minMeetingRooms(Interval[] intervals) 
-    {
-        if(intervals == null || intervals.length == 0)
-        {
-            return 0;   
-        }
-        
-        Arrays.sort(intervals, new Comparator<Interval>()
-        {
-            public int compare(Interval o1, Interval o2)
-            {
-                return o1.start - o2.start;
-            }
-        });
-        
-        PriorityQueue<Integer> endTimes = new PriorityQueue<Integer>();
-        endTimes.offer(intervals[0].end);
-        
-        for(int i = 1; i < intervals.length; i++)
-        {
-            if(intervals[i].start >= endTimes.peek())
-            {
-                endTimes.poll();
-            }
-            
-            endTimes.offer(intervals[i].end);
-        }
-        
-        return endTimes.size();
-    }
-}
diff --git a/254.factor-combinations.67534319.Accepted.leetcode.java b/254.factor-combinations.67534319.Accepted.leetcode.java
deleted file mode 100644
index 5695e279..00000000
--- ./254.factor-combinations.67534319.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution {
-    public List<List<Integer>> getFactors(int n) {
-        List<List<Integer>> ret = new ArrayList<List<Integer>> ();
-        helper(ret, new ArrayList<Integer> (), n, 2);
-        return ret;
-    }
-    
-    private void helper(List<List<Integer>> ret, List<Integer> item, int n, int start) {
-        if (n == 1) {
-            if (item.size() > 1) {
-                ret.add(new ArrayList<Integer> (item));
-            }
-            return;
-        }
-        for (int i = start; i <= n; i++) {
-            if (n % i == 0) {
-                item.add(i);
-                helper(ret, item, n/i, i);
-                item.remove(item.size()-1);
-            }
-        }
-    }
-}
diff --git a/254.factor-combinations.96573187.Accepted.leetcode.java b/254.factor-combinations.96573187.Accepted.leetcode.java
deleted file mode 100644
index beb5bb6e..00000000
--- ./254.factor-combinations.96573187.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> getFactors(int n)
-    {
-        List<List<Integer>> ret = new ArrayList<List<Integer>> ();
-        helper(ret, new ArrayList<Integer> (), n, 2);
-        return ret;
-    }
-
-    private void helper(List<List<Integer>> ret, List<Integer> item, int n, int start)
-    {
-        if (n == 1)
-        {
-            if (item.size() > 1)
-            {
-                ret.add(new ArrayList<Integer> (item));
-            }
-
-            return;
-        }
-
-        for (int i = start; i <= n; i++)
-        {
-            if (n % i == 0)
-            {
-                item.add(i);
-                helper(ret, item, n / i, i);
-                item.remove(item.size() - 1);
-            }
-        }
-    }
-}
diff --git a/254.factor-combinations.97366173.Accepted.leetcode.java b/254.factor-combinations.97366173.Accepted.leetcode.java
deleted file mode 100644
index d02f8705..00000000
--- ./254.factor-combinations.97366173.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> getFactors(int n)
-    {
-        List<List<Integer>> ret = new ArrayList<List<Integer>> ();
-        helper(ret, new ArrayList<Integer> (), n, 2);
-        return ret;
-    }
-
-    private void helper(List<List<Integer>> ret, List<Integer> item, int n, int start)
-    {
-        if (n == 1)
-        {
-            if (item.size() > 1)
-            {
-                ret.add(new ArrayList<Integer> (item));
-            }
-        }
-
-        for (int i = start; i <= n; i++)
-        {
-            if (n % i == 0)
-            {
-                item.add(i);
-                helper(ret, item, n / i, i);
-                item.remove(item.size() - 1);
-            }
-        }
-    }
-}
diff --git a/256.paint-house.71927079.Accepted.leetcode.java b/256.paint-house.71927079.Accepted.leetcode.java
deleted file mode 100644
index 2cdbe203..00000000
--- ./256.paint-house.71927079.Accepted.leetcode.java
+++ /dev/null
@@ -1,14 +0,0 @@
-public class Solution {
-    public int minCost(int[][] costs) {
-        if(costs != null && costs.length == 0) return 0;
-        for(int i = 1; i < costs.length; i++){
-            // 涂第一种颜色的话，上一个房子就不能涂第一种颜色，这样我们要在上一个房子的第二和第三个颜色的最小开销中找最小的那个加上
-            costs[i][0] = costs[i][0] + Math.min(costs[i - 1][1], costs[i - 1][2]);
-            // 涂第二或者第三种颜色同理
-            costs[i][1] = costs[i][1] + Math.min(costs[i - 1][0], costs[i - 1][2]);
-            costs[i][2] = costs[i][2] + Math.min(costs[i - 1][0], costs[i - 1][1]);
-        }
-        // 返回涂三种颜色中开销最小的那个
-        return Math.min(costs[costs.length - 1][0], Math.min(costs[costs.length - 1][1], costs[costs.length - 1][2]));
-    }
-}
diff --git a/256.paint-house.96526788.Accepted.leetcode.java b/256.paint-house.96526788.Accepted.leetcode.java
deleted file mode 100644
index 7219a7e2..00000000
--- ./256.paint-house.96526788.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int minCost(int[][] costs)
-    {
-        if (costs != null && costs.length == 0)
-        {
-            return 0;
-        }
-
-        for (int i = 1; i < costs.length; i++)
-        {
-            // 涂第一种颜色的话，上一个房子就不能涂第一种颜色，这样我们要在上一个房子的第二和第三个颜色的最小开销中找最小的那个加上
-            costs[i][0] = costs[i][0] + Math.min(costs[i - 1][1], costs[i - 1][2]);
-            // 涂第二或者第三种颜色同理
-            costs[i][1] = costs[i][1] + Math.min(costs[i - 1][0], costs[i - 1][2]);
-            costs[i][2] = costs[i][2] + Math.min(costs[i - 1][0], costs[i - 1][1]);
-        }
-
-        // 返回涂三种颜色中开销最小的那个
-        return Math.min(costs[costs.length - 1][0], Math.min(costs[costs.length - 1][1], costs[costs.length - 1][2]));
-    }
-}
diff --git a/257.binary-tree-paths.188290829.Accepted.leetcode.java b/257.binary-tree-paths.188290829.Accepted.leetcode.java
deleted file mode 100644
index 0526a320..00000000
--- ./257.binary-tree-paths.188290829.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public List<String> binaryTreePaths(TreeNode root)
-    {
-        List<String> result = new ArrayList<String>();
-
-        if (root == null)
-        {
-            return result;
-        }
-
-        binaryTreePathsDFS(root, "", result);
-        return result;
-    }
-
-    void binaryTreePathsDFS(TreeNode root, String out, List<String> result)
-    {
-        if (root == null)
-        {
-            return;
-        }
-
-        if (root.left == null && root.right == null)
-        {
-            result.add(out + root.val);
-        }
-
-        binaryTreePathsDFS(root.left, out  + root.val + "->", result);
-        binaryTreePathsDFS(root.right, out  + root.val + "->", result);
-    }
-}
-
diff --git a/257.binary-tree-paths.188291168.Accepted.leetcode.java b/257.binary-tree-paths.188291168.Accepted.leetcode.java
deleted file mode 100644
index 415986f8..00000000
--- ./257.binary-tree-paths.188291168.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public List<String> binaryTreePaths(TreeNode root)
-    {
-        List<String> result = new ArrayList<String>();
-        binaryTreePathsDFS(root, "", result);
-        return result;
-    }
-
-    void binaryTreePathsDFS(TreeNode root, String out, List<String> result)
-    {
-        if (root == null)
-        {
-            return;
-        }
-
-        if (root.left == null && root.right == null)
-        {
-            result.add(out + root.val);
-        }
-
-        binaryTreePathsDFS(root.left, out + root.val + "->", result);
-        binaryTreePathsDFS(root.right, out + root.val + "->", result);
-    }
-}
-
diff --git a/257.binary-tree-paths.188291339.Wrong-Answer.leetcode.java b/257.binary-tree-paths.188291339.Wrong-Answer.leetcode.java
deleted file mode 100644
index 57b9a1bf..00000000
--- ./257.binary-tree-paths.188291339.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public List<String> binaryTreePaths(TreeNode root)
-    {
-        List<String> result = new ArrayList<String>();
-        binaryTreePathsDFS(root, "", result);
-        return result;
-    }
-
-    void binaryTreePathsDFS(TreeNode root, String out, List<String> result)
-    {
-        if (root == null)
-        {
-            return;
-        }
-
-        if (root.left == null && root.right == null)
-        {
-            result.add(out + "->" + root.val);
-        }
-
-        binaryTreePathsDFS(root.left, out + root.val + "->", result);
-        binaryTreePathsDFS(root.right, out + root.val + "->", result);
-    }
-}
-
diff --git a/257.binary-tree-paths.188291537.Accepted.leetcode.java b/257.binary-tree-paths.188291537.Accepted.leetcode.java
deleted file mode 100644
index da057748..00000000
--- ./257.binary-tree-paths.188291537.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public List<String> binaryTreePaths(TreeNode root)
-    {
-        List<String> result = new ArrayList<String>();
-        binaryTreePathsDFS(root, "", result);
-        return result;
-    }
-
-    void binaryTreePathsDFS(TreeNode root, String out, List<String> result)
-    {
-        if (root == null)
-        {
-            return;
-        }
-
-        if (root.left == null && root.right == null)
-        {
-            result.add(out + root.val);
-        }
-
-        binaryTreePathsDFS(root.left, out  + root.val + "->", result);
-        binaryTreePathsDFS(root.right, out  + root.val + "->", result);
-    }
-}
-
diff --git a/257.binary-tree-paths.204778484.Accepted.leetcode.java b/257.binary-tree-paths.204778484.Accepted.leetcode.java
deleted file mode 100644
index 984bfffb..00000000
--- ./257.binary-tree-paths.204778484.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public List<String> binaryTreePaths(TreeNode root)
-    {
-        List<String> result = new ArrayList<String>();
-
-        if (root == null)
-        {
-            return result;
-        }
-
-        binaryTreePathsDFS(root, "", result);
-        return result;
-    }
-
-    void binaryTreePathsDFS(TreeNode root, String out, List<String> result)
-    {
-        if (root == null)
-        {
-            return;
-        }
-
-        if (root.left == null && root.right == null)
-        {
-            out += root.val;
-            result.add(out);
-        }
-
-        binaryTreePathsDFS(root.left, out + root.val + "->", result);
-        binaryTreePathsDFS(root.right, out + root.val + "->", result);
-    }
-}
-
diff --git a/257.binary-tree-paths.206075045.Wrong-Answer.leetcode.java b/257.binary-tree-paths.206075045.Wrong-Answer.leetcode.java
deleted file mode 100644
index 517a8f03..00000000
--- ./257.binary-tree-paths.206075045.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    public List<String> binaryTreePaths(TreeNode root)
-    {
-        List<String> result = new ArrayList<String>();
-
-        if (root == null)
-        {
-            return result;
-        }
-
-        binaryTreePathsDFS(root, "" + root.val, result);
-        return result;
-    }
-
-    void binaryTreePathsDFS(TreeNode root, String out, List<String> result)
-    {
-        if (root == null)
-        {
-            return;
-        }
-
-        if (root.left == null && root.right == null)
-        {
-            out += root.val;
-            result.add(out);
-        }
-
-        out += root.val + "->";
-        binaryTreePathsDFS(root.left, out, result);
-        binaryTreePathsDFS(root.right, out, result);
-    }
-}
-
diff --git a/258.add-digits.188492015.Accepted.leetcode.java b/258.add-digits.188492015.Accepted.leetcode.java
deleted file mode 100644
index bbcedbd0..00000000
--- ./258.add-digits.188492015.Accepted.leetcode.java
+++ /dev/null
@@ -1,8 +0,0 @@
-public class Solution
-{
-    public int addDigits(int num)
-    {
-        return (num - 1) % 9 + 1;
-    }
-}
-
diff --git a/258.add-digits.39165182.Accepted.leetcode.java b/258.add-digits.39165182.Accepted.leetcode.java
deleted file mode 100644
index 8fa7e878..00000000
--- ./258.add-digits.39165182.Accepted.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-  public class Solution
-  {
-    public int addDigits(int num)
-    {
-      while (num / 10 > 0)
-      {
-        int sum = 0;
-
-        while (num > 0)
-        {
-          sum += num % 10;
-          num /= 10;
-        }
-
-        num = sum;
-      }
-
-      return num;
-    }
-  }
-
diff --git a/258.add-digits.39165231.Accepted.leetcode.java b/258.add-digits.39165231.Accepted.leetcode.java
deleted file mode 100644
index 0cbebd5c..00000000
--- ./258.add-digits.39165231.Accepted.leetcode.java
+++ /dev/null
@@ -1,8 +0,0 @@
-  public class Solution
-  {
-    public int addDigits(int num)
-    {
-      return (num - 1) % 9 + 1;
-    }
-  }
-
diff --git a/259.3sum-smaller.188686795.Runtime-Error.leetcode.java b/259.3sum-smaller.188686795.Runtime-Error.leetcode.java
deleted file mode 100644
index 1087e81a..00000000
--- ./259.3sum-smaller.188686795.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int threeSumSmaller(int[] nums, int target)
-    {
-        Arrays.sort(nums);
-        int cnt = 0;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            int left = i + 1, right = nums.length - 1;
-
-            while (left < right)
-            {
-                if (nums[i] + nums[left] + nums[right] < target)
-                {
-                    cnt += right - left;
-                    left--;
-                }
-                else
-                {
-                    right++;
-                }
-            }
-        }
-
-        return cnt;
-    }
-}
-
diff --git a/259.3sum-smaller.188719296.Runtime-Error.leetcode.java b/259.3sum-smaller.188719296.Runtime-Error.leetcode.java
deleted file mode 100644
index a5c0d0e3..00000000
--- ./259.3sum-smaller.188719296.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public int threeSumSmaller(int[] nums, int target)
-    {
-        Arrays.sort(nums);
-        int cnt = 0;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            int left = i + 1, right = nums.length - 1;
-
-            while (left < right)
-            {
-                System.out.printf("i --> %s\n", i) ;
-                System.out.printf("left --> %s\n", left) ;
-                System.out.printf("right --> %s\n", right) ;
-
-                if (nums[i] + nums[left] + nums[right] < target)
-                {
-                    cnt += right - left;
-                    left--;
-                }
-                else
-                {
-                    right++;
-                }
-            }
-        }
-
-        return cnt;
-    }
-}
-
diff --git a/259.3sum-smaller.188719480.Time-Limit-Exceeded.leetcode.java b/259.3sum-smaller.188719480.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 197822ca..00000000
--- ./259.3sum-smaller.188719480.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public int threeSumSmaller(int[] nums, int target)
-    {
-        Arrays.sort(nums);
-        int cnt = 0;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            int left = i + 1, right = nums.length - 1;
-
-            while (left < right)
-            {
-                System.out.printf("i --> %s\n", i) ;
-                System.out.printf("left --> %s\n", left) ;
-                System.out.printf("right --> %s\n", right) ;
-
-                if (nums[i] + nums[left] + nums[right] < target)
-                {
-                    cnt += right - left;
-                    left++;
-                }
-                else
-                {
-                    right--;
-                }
-            }
-        }
-
-        return cnt;
-    }
-}
-
diff --git a/259.3sum-smaller.188719598.Accepted.leetcode.java b/259.3sum-smaller.188719598.Accepted.leetcode.java
deleted file mode 100644
index 1c1911a0..00000000
--- ./259.3sum-smaller.188719598.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int threeSumSmaller(int[] nums, int target)
-    {
-        Arrays.sort(nums);
-        int cnt = 0;
-
-        for (int i = 0; i < nums.length - 2; i++)
-        {
-            int left = i + 1, right = nums.length - 1;
-
-            while (left < right)
-            {
-                if (nums[i] + nums[left] + nums[right] < target)
-                {
-                    cnt += right - left;
-                    left++;
-                }
-                else
-                {
-                    right--;
-                }
-            }
-        }
-
-        return cnt;
-    }
-}
-
diff --git a/259.3sum-smaller.188719722.Accepted.leetcode.java b/259.3sum-smaller.188719722.Accepted.leetcode.java
deleted file mode 100644
index 285559c9..00000000
--- ./259.3sum-smaller.188719722.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int threeSumSmaller(int[] nums, int target)
-    {
-        Arrays.sort(nums);
-        int cnt = 0;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            int left = i + 1, right = nums.length - 1;
-
-            while (left < right)
-            {
-                if (nums[i] + nums[left] + nums[right] < target)
-                {
-                    cnt += right - left;
-                    left += 1;
-                }
-                else
-                {
-                    right--;
-                }
-            }
-        }
-
-        return cnt;
-    }
-}
-
diff --git a/259.3sum-smaller.188721062.Accepted.leetcode.java b/259.3sum-smaller.188721062.Accepted.leetcode.java
deleted file mode 100644
index f3bc9425..00000000
--- ./259.3sum-smaller.188721062.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int threeSumSmaller(int[] nums, int target)
-    {
-        Arrays.sort(nums);
-        int cnt = 0;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            int left = i + 1, right = nums.length - 1;
-
-            while (left < right)
-            {
-                if (nums[i] + nums[left] + nums[right] < target)
-                {
-                    cnt += right - left;
-                    left++;
-                }
-                else
-                {
-                    right--;
-                }
-            }
-        }
-
-        return cnt;
-    }
-}
-
diff --git a/259.3sum-smaller.204777515.Accepted.leetcode.java b/259.3sum-smaller.204777515.Accepted.leetcode.java
deleted file mode 100644
index 2620bfa5..00000000
--- ./259.3sum-smaller.204777515.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public int threeSumSmaller(int[] nums, int target)
-    {
-        // 先将数组排序
-        Arrays.sort(nums);
-        int cnt = 0;
-
-        for (int i = 0; i < nums.length - 2; i++)
-        {
-            int left = i + 1, right = nums.length - 1;
-
-            while (left < right)
-            {
-                if (nums[i] + nums[left] + nums[right] < target)
-                {
-                    cnt += right - left;
-                    left++;
-                }
-                else
-                {
-                    right--;
-                }
-            }
-        }
-
-        return cnt;
-    }
-}
-
diff --git a/26.remove-duplicates-from-sorted-array.156295336.Accepted.leetcode.java b/26.remove-duplicates-from-sorted-array.156295336.Accepted.leetcode.java
deleted file mode 100644
index ab2166cc..00000000
--- ./26.remove-duplicates-from-sorted-array.156295336.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public int removeDuplicates(int[] A)
-    {
-        if (A.length == 0)
-        {
-            return 0;
-        }
-
-        int index = 0;
-
-        for (int i = 1; i < A.length; i++)
-        {
-            if (A[index] != A[i])
-            {
-                A[++index] = A[i];
-            }
-        }
-
-        return index + 1;
-    }
-}
-
diff --git a/26.remove-duplicates-from-sorted-array.156296129.Accepted.leetcode.java b/26.remove-duplicates-from-sorted-array.156296129.Accepted.leetcode.java
deleted file mode 100644
index 6ce36766..00000000
--- ./26.remove-duplicates-from-sorted-array.156296129.Accepted.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-public class Solution
-{
-    public int removeDuplicates(int[] A)
-    {
-        int index = 0;
-
-        for (int nav = 0; nav < A.length; nav++)
-        {
-            if (A[nav] != A[index])
-            {
-                A[++index] = A[nav];
-            }
-        }
-
-        return index + 1;
-    }
-}
-
diff --git a/26.remove-duplicates-from-sorted-array.156296480.Accepted.leetcode.java b/26.remove-duplicates-from-sorted-array.156296480.Accepted.leetcode.java
deleted file mode 100644
index ddd3ede0..00000000
--- ./26.remove-duplicates-from-sorted-array.156296480.Accepted.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-public class Solution
-{
-    public int removeDuplicates(int[] A)
-    {
-        int index = 1;
-
-        for (int nav = 0; nav < A.length; nav++)
-        {
-            if (A[nav] != A[index - 1])
-            {
-                A[index++] = A[nav];
-            }
-        }
-
-        return index;
-    }
-}
-
diff --git a/26.remove-duplicates-from-sorted-array.82223929.Wrong-Answer.leetcode.java b/26.remove-duplicates-from-sorted-array.82223929.Wrong-Answer.leetcode.java
deleted file mode 100644
index 35277f3b..00000000
--- ./26.remove-duplicates-from-sorted-array.82223929.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,17 +0,0 @@
-public class Solution 
-{
-    public int removeDuplicates(int[] A) 
-    {
-        int index = 0;
-    
-        for(int nav = 0; nav < A.length; nav++)
-        {
-            if(A[nav] != A[index])   
-            {
-                A[++index] = A[nav];
-            }
-        }
-    
-        return index;
-    }
-}
diff --git a/26.remove-duplicates-from-sorted-array.82224337.Wrong-Answer.leetcode.java b/26.remove-duplicates-from-sorted-array.82224337.Wrong-Answer.leetcode.java
deleted file mode 100644
index b929c524..00000000
--- ./26.remove-duplicates-from-sorted-array.82224337.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,17 +0,0 @@
-public class Solution 
-{
-    public int removeDuplicates(int[] A) 
-    {
-        int index = 0;
-    
-        for(int nav = 1; nav < A.length; nav++)
-        {
-            if(A[nav] != A[index])   
-            {
-                A[++index] = A[nav];
-            }
-        }
-    
-        return index;
-    }
-}
diff --git a/26.remove-duplicates-from-sorted-array.82224825.Accepted.leetcode.java b/26.remove-duplicates-from-sorted-array.82224825.Accepted.leetcode.java
deleted file mode 100644
index e96d5762..00000000
--- ./26.remove-duplicates-from-sorted-array.82224825.Accepted.leetcode.java
+++ /dev/null
@@ -1,17 +0,0 @@
-public class Solution 
-{
-    public int removeDuplicates(int[] A) 
-    {
-        int index = 0;
-    
-        for(int nav = 1; nav < A.length; nav++)
-        {
-            if(A[nav] != A[index])   
-            {
-                A[++index] = A[nav];
-            }
-        }
-    
-        return index + 1;
-    }
-}
diff --git a/26.remove-duplicates-from-sorted-array.82226046.Accepted.leetcode.java b/26.remove-duplicates-from-sorted-array.82226046.Accepted.leetcode.java
deleted file mode 100644
index 62cd5dc3..00000000
--- ./26.remove-duplicates-from-sorted-array.82226046.Accepted.leetcode.java
+++ /dev/null
@@ -1,17 +0,0 @@
-public class Solution 
-{
-    public int removeDuplicates(int[] A) 
-    {
-        int index = 1;
-    
-        for(int nav = 1; nav < A.length; nav++)
-        {
-            if(A[nav] != A[index - 1])   
-            {
-                A[index++] = A[nav];
-            }
-        }
-    
-        return index;
-    }
-}
diff --git a/260.single-number-iii.39141674.Accepted.leetcode.java b/260.single-number-iii.39141674.Accepted.leetcode.java
deleted file mode 100644
index 43c72748..00000000
--- ./260.single-number-iii.39141674.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-  public class Solution
-  {
-    public int[] singleNumber(int[] nums)
-    {
-      int[] res = new int[2];
-      res[0] = 0;
-      res[1] = 0;
-      int n = 0;
-
-      for (int elem : nums)
-      {
-        n ^= elem;
-      }
-
-      n = n & (~(n - 1));
-
-      for (int elem : nums)
-      {
-        if ((elem & n) != 0)
-        {
-          res[0] ^= elem;
-        }
-        else
-        {
-          res[1] ^= elem;
-        }
-      }
-
-      return res;
-    }
-  }
-
diff --git a/261.graph-valid-tree.67534591.Accepted.leetcode.java b/261.graph-valid-tree.67534591.Accepted.leetcode.java
deleted file mode 100644
index 2a10a996..00000000
--- ./261.graph-valid-tree.67534591.Accepted.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-public class Solution {
-    public boolean validTree(int n, int[][] edges) {
-        UnionFind uf = new UnionFind(n);
-        for(int i = 0; i < edges.length; i++){
-            // 如果两个节点已经在同一集合中，说明新的边将产生环路
-            if(!uf.union(edges[i][0], edges[i][1])){
-                return false;
-            }
-        }
-        return uf.count() == 1;
-    }
-    
-    public class UnionFind {
-        
-        int[] ids;
-        int cnt;
-        
-        public UnionFind(int size){
-            this.ids = new int[size];
-            //初始化并查集，每个节点对应自己的集合号
-            for(int i = 0; i < this.ids.length; i++){
-                this.ids[i] = i;
-            }
-            this.cnt = size;
-        }
-        public boolean union(int m, int n){
-            int src = find(m);
-            int dst = find(n);
-            //如果两个节点不在同一集合中，将两个集合合并为一个
-            if(src != dst){
-                for(int i = 0; i < ids.length; i++){
-                    if(ids[i] == src){
-                        ids[i] = dst;
-                    }
-                }
-                // 合并完集合后，集合数减一
-                cnt--;
-                return true;
-            } else {
-                return false;
-            }
-        }
-        public int find(int m){
-            return ids[m];
-        }
-        public boolean areConnected(int m, int n){
-            return find(m) == find(n);
-        }
-        public int count(){
-            return cnt;
-        }
-    }
-}
diff --git a/261.graph-valid-tree.84761699.Accepted.leetcode.java b/261.graph-valid-tree.84761699.Accepted.leetcode.java
deleted file mode 100644
index 3b85db1f..00000000
--- ./261.graph-valid-tree.84761699.Accepted.leetcode.java
+++ /dev/null
@@ -1,71 +0,0 @@
-public class Solution 
-{
-    public boolean validTree(int n, int[][] edges) 
-    {
-        UnionFind uf = new UnionFind(n);
-        for (int i = 0; i < edges.length; i++)
-        {
-            // 如果两个节点已经在同一集合中，说明新的边将产生环路
-            if (!uf.union(edges[i][0], edges[i][1]))
-            {
-                return false;
-            }
-        }
-        
-        return uf.count() == 1;
-    }
-    
-    public class UnionFind 
-    {
-        
-        int[] ids;
-        int cnt;
-        
-        public UnionFind(int size)
-        {
-            this.ids = new int[size];
-            //初始化并查集，每个节点对应自己的集合号
-            for (int i = 0; i < this.ids.length; i++)
-            {
-                this.ids[i] = i;
-            }
-            
-            this.cnt = size;
-        }
-        public boolean union(int m, int n)
-        {
-            int src = find(m);
-            int dst = find(n);
-            //如果两个节点不在同一集合中，将两个集合合并为一个
-            if (src != dst)
-            {
-                for (int i = 0; i < ids.length; i++)
-                {
-                    if (ids[i] == src)
-                    {
-                        ids[i] = dst;
-                    }
-                }
-                // 合并完集合后，集合数减一
-                cnt--;
-                return true;
-            } 
-            else 
-            {
-                return false;
-            }
-        }
-        public int find(int m)
-        {
-            return ids[m];
-        }
-        public boolean areConnected(int m, int n)
-        {
-            return find(m) == find(n);
-        }
-        public int count()
-        {
-            return cnt;
-        }
-    }
-}
diff --git a/263.ugly-number.39168142.Accepted.leetcode.java b/263.ugly-number.39168142.Accepted.leetcode.java
deleted file mode 100644
index 7112d801..00000000
--- ./263.ugly-number.39168142.Accepted.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-  public class Solution
-  {
-    public boolean isUgly(int num)
-    {
-      if (num <= 0) { return false; }
-
-      while (num % 2 == 0) { num /= 2; }
-
-      while (num % 3 == 0) { num /= 3; }
-
-      while (num % 5 == 0) { num /= 5; }
-
-      return num == 1;
-    }
-  }
-
diff --git a/264.ugly-number-ii.188809316.Time-Limit-Exceeded.leetcode.java b/264.ugly-number-ii.188809316.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index a6c6f77b..00000000
--- ./264.ugly-number-ii.188809316.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public int nthUglyNumber(int n)
-    {
-        int[] uglyNumber = new int[n];
-        int[] index = new int[3]; // respectively for 2,3,5
-        int[] factor = {2, 3, 5}; // respectively for 2,3,5
-        uglyNumber[0] = 1;
-
-        for (int i = 1; i < n; i++)
-        {
-            int min = Math.min(Math.min(factor[0], factor[1]), factor[2]);
-            uglyNumber[i] = min;
-
-            if (min == factor[0])
-            {
-                factor[0] = 2 * uglyNumber[++index[0]];
-                System.out.printf("factor[0] --> %s\n", factor[0]) ;
-            }
-
-            if (min == factor[1])
-            {
-                factor[1] = 3 * uglyNumber[++index[1]];
-                System.out.printf("factor[1] --> %s\n", factor[1]) ;
-            }
-
-            if (min == factor[2])
-            {
-                factor[2] = 5 * uglyNumber[++index[2]];
-                System.out.printf("factor[2] --> %s\n", factor[2]) ;
-            }
-        }
-
-        return uglyNumber[n - 1];
-    }
-}
-
diff --git a/264.ugly-number-ii.39169135.Accepted.leetcode.java b/264.ugly-number-ii.39169135.Accepted.leetcode.java
deleted file mode 100644
index e19fae97..00000000
--- ./264.ugly-number-ii.39169135.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-  public class Solution
-  {
-    public int nthUglyNumber(int n)
-    {
-      int[] uglyNumber = new int[n];
-      int[] index = new int[3]; // respectively for 2,3,5
-      int[] factor = {2, 3, 5}; // respectively for 2,3,5
-      uglyNumber[0] = 1;
-
-      for (int i = 1; i < n; i++)
-      {
-        int min = Math.min(Math.min(factor[0], factor[1]), factor[2]);
-        uglyNumber[i] = min;
-
-        if (min == factor[0]) { factor[0] = 2 * uglyNumber[++index[0]]; }
-
-        if (min == factor[1]) { factor[1] = 3 * uglyNumber[++index[1]]; }
-
-        if (min == factor[2]) { factor[2] = 5 * uglyNumber[++index[2]]; }
-      }
-
-      return uglyNumber[n - 1];
-    }
-  }
-
diff --git a/265.paint-house-ii.71360791.Accepted.leetcode.java b/265.paint-house-ii.71360791.Accepted.leetcode.java
deleted file mode 100644
index bdcd6c20..00000000
--- ./265.paint-house-ii.71360791.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution {
-    public int minCostII(int[][] costs) {
-        if (costs == null || costs.length == 0) {
-            return 0;
-        }
-         
-        int n = costs.length;
-        int k = costs[0].length;
-         
-        // dp[j] means the min cost for color j
-        int[] dp = new int[k];
-        int min1 = 0;
-        int min2 = 0;
- 
-        for (int i = 0; i < n; i++) {
-            int oldMin1 = min1;
-            int oldMin2 = min2;
-             
-            min1 = Integer.MAX_VALUE;
-            min2 = Integer.MAX_VALUE;
-             
-            for (int j = 0; j < k; j++) {
-                if (dp[j] != oldMin1 || oldMin1 == oldMin2) {
-                    dp[j] = oldMin1 + costs[i][j];
-                } else {
-                    dp[j] = oldMin2 + costs[i][j];
-                }
-                 
-                if (min1 <= dp[j]) {
-                    min2 = Math.min(min2, dp[j]);
-                } else {
-                    min2 = min1;
-                    min1 = dp[j];
-                }
-            }
-             
-        }
-         
-        return min1;
-    }
-}
diff --git a/266.palindrome-permutation.67535164.Accepted.leetcode.java b/266.palindrome-permutation.67535164.Accepted.leetcode.java
deleted file mode 100644
index 5c87010d..00000000
--- ./266.palindrome-permutation.67535164.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution {
-    public boolean canPermutePalindrome(String s) {
-        if (s == null || s.length() <= 1) {
-            return true;
-        }
-         
-        Map<Character, Integer> map = new HashMap<Character, Integer>();
-         
-        for (int i = 0; i < s.length(); i++) {
-            char letter = s.charAt(i);
-             
-            if (map.containsKey(letter)) {
-                int count = map.get(letter) + 1;
-                map.put(letter, count);
-            } else {
-                map.put(letter, 1);
-            }
-        }
-         
-        int tolerance = 0;
-        Iterator it = map.entrySet().iterator();
-        while (it.hasNext()) {
-            Map.Entry pair = (Map.Entry) it.next();
-             
-            if ((int) pair.getValue() % 2 != 0) {
-                tolerance++;
-            }
-        }
-         
-        if (s.length() % 2 == 0) {
-            return tolerance == 0;
-        } else {
-            return tolerance == 1;
-        }
-    }
-}
diff --git a/267.palindrome-permutation-ii.72101393.Accepted.leetcode.java b/267.palindrome-permutation-ii.72101393.Accepted.leetcode.java
deleted file mode 100644
index 8faf62da..00000000
--- ./267.palindrome-permutation-ii.72101393.Accepted.leetcode.java
+++ /dev/null
@@ -1,111 +0,0 @@
-public class Solution {
-    public List<String> generatePalindromes(String s) {
-        List<String> result = new ArrayList<>();
-        if (s == null || s.length() == 0) {
-            return result;
-        }
-         
-        // Step 1: determine if the string s is palindrome permutated
-        Map<Character, Integer> map = new HashMap();
-        if (!isPalindromePermutation(s, map)) {
-            return result;
-        }
-         
-        // Step 2: form the left half of the seed string
-        StringBuffer sb = new StringBuffer();
-        char middle = '\0';
-         
-        Iterator it = map.entrySet().iterator();
-        while (it.hasNext()) {
-            Map.Entry pair = (Map.Entry) it.next();
-            char key = (char) pair.getKey();
-            int val = (int) pair.getValue();
-            while (val > 1) {
-                sb.append(key);
-                val -= 2;
-            }
-             
-            if (val == 1) {
-                middle = key;
-            }
-        }
-         
-        // Step 3: gnerate the permutations of the string
-        permutation(sb.toString().toCharArray(), 0, result);
-        List<String> result2 = new ArrayList<>();
-         
-        // Step 4: append the right half of the string
-        for (String str : result) {
-            StringBuffer tmp = new StringBuffer(str);
-            if (middle != '\0') {
-                tmp.append(middle);
-            }
-             
-            for (int i = str.length() - 1; i >= 0; i--) {
-                tmp.append(str.charAt(i));
-            }
-            result2.add(tmp.toString());
-        }
-         
-        return result2;
-    }
-     
-    private boolean isPalindromePermutation(String s, Map<Character, Integer> map) {
-        int tolerance = 0;
-        for (int i = 0; i < s.length(); i++) {
-            char c = s.charAt(i);
-            if (map.containsKey(c)) {
-                int val = map.get(c);
-                map.put(c, val + 1);
-            } else {
-                map.put(c, 1);
-            }
-        }
-         
-        Iterator it = map.entrySet().iterator();
-        while (it.hasNext()) {
-            Map.Entry pair = (Map.Entry) it.next();
-            int val = (int) pair.getValue();
-            if (val % 2 == 1) {
-                tolerance++;
-            }
-        }
-         
-        if (tolerance <= 1) {
-            return true;
-        } else {
-            return false;
-        }
-    }
-     
-    private void permutation(char[] s, int start, List<String> result) {
-        if (start >= s.length) {
-            result.add(new String(s));
-            return;
-        }
-         
-        for (int i = start; i < s.length; i++) {
-            if (!containsDuplicate(s, start, i)) {
-                swap(s, i, start);
-                permutation(s, start + 1, result);
-                swap(s, i, start);
-            }
-        }
-    }
-     
-    private void swap(char[] s, int i, int j) {
-        char temp = s[i];
-        s[i] = s[j];
-        s[j] = temp;
-    }
-     
-    private boolean containsDuplicate(char[] s, int start, int end) {
-        for (int i = start; i < end; i++) {
-            if (s[i] == s[end]) {
-                return true;
-            }
-        }
-         
-        return false;
-    }
-}
diff --git a/269.alien-dictionary.71908125.Accepted.leetcode.java b/269.alien-dictionary.71908125.Accepted.leetcode.java
deleted file mode 100644
index fc5b9e27..00000000
--- ./269.alien-dictionary.71908125.Accepted.leetcode.java
+++ /dev/null
@@ -1,82 +0,0 @@
-public class Solution {
-    public String alienOrder(String[] words) {
-        // Step 1: build the graph
-        Map<Character, Set<Character>> graph = new HashMap<>();
-        for (int i = 0; i < words.length; i++) {
-            String curr = words[i];
-            for (int j = 0; j < curr.length(); j++) {
-                if (!graph.containsKey(curr.charAt(j))) {
-                    graph.put(curr.charAt(j), new HashSet<Character>());
-                }
-            }
-             
-            if (i > 0) {
-                connectGraph(graph, words[i - 1], curr);
-            }
-        }
-         
-        // Step 2: toplogical sorting
-        StringBuffer sb = new StringBuffer();
-        Map<Character, Integer> visited = new HashMap<Character, Integer>();
-         
-        Iterator it = graph.entrySet().iterator();
-        while (it.hasNext()) {
-            Map.Entry pair = (Map.Entry) it.next();
-            char vertexId = (char) pair.getKey();
-            if (toplogicalSort(vertexId, graph, sb, visited) == false) {
-                return "";
-            }
-        }
-         
-        return sb.toString();
-    }
-     
-    private void connectGraph(Map<Character, Set<Character>> graph, String prev, String curr) {
-        if (prev == null || curr == null) {
-            return;
-        }
-         
-        int len = Math.min(prev.length(), curr.length());
-         
-        for (int i = 0; i < len; i++) {
-            char p = prev.charAt(i);
-            char q = curr.charAt(i);
-            if (p != q) {
-                if (!graph.get(p).contains(q)) {
-                    graph.get(p).add(q);
-                }
-                break;
-            }
-        }
-    }
-     
-    private boolean toplogicalSort(char vertexId, Map<Character, Set<Character>> graph, StringBuffer sb, 
-                                   Map<Character, Integer> visited) {
-        if (visited.containsKey(vertexId)) {
-            // visited
-            if (visited.get(vertexId) == -1) {
-                return false;
-            }
-             
-            // already in the list
-            if (visited.get(vertexId) == 1) {
-                return true;
-            }
-        } else {
-            // mark as visited
-            visited.put(vertexId, -1);
-        }
-         
-        Set<Character> neighbors = graph.get(vertexId);
-        for (char neighbor : neighbors) {
-            if (toplogicalSort(neighbor, graph, sb, visited) == false) {
-                return false;
-            }
-        }
-         
-        sb.insert(0, vertexId);
-        visited.put(vertexId, 1);
-         
-        return true;
-    }
-}
diff --git a/270.closest-binary-search-tree-value.67597805.Accepted.leetcode.java b/270.closest-binary-search-tree-value.67597805.Accepted.leetcode.java
deleted file mode 100644
index 70a8b459..00000000
--- ./270.closest-binary-search-tree-value.67597805.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution {
-    public int closestValue(TreeNode root, double target) {
-    double min=Double.MAX_VALUE;
-    int result = root.val;
- 
-    while(root!=null){
-        if(target>root.val){
- 
-            double diff = Math.abs(root.val-target);
-            if(diff<min){
-                min = Math.min(min, diff);
-                result = root.val;
-            }
-            root = root.right;
-        }else if(target<root.val){
- 
-            double diff = Math.abs(root.val-target);
-            if(diff<min){
-                min = Math.min(min, diff);
-                result = root.val;
-            }
-            root = root.left;
-        }else{
-            return root.val;
-        }
-    }
- 
-    return result;
-}
-}
diff --git a/270.closest-binary-search-tree-value.68462023.Accepted.leetcode.java b/270.closest-binary-search-tree-value.68462023.Accepted.leetcode.java
deleted file mode 100644
index c07be3fd..00000000
--- ./270.closest-binary-search-tree-value.68462023.Accepted.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-  public class Solution
-  {
-    public int closestValue(TreeNode root, double target)
-    {
-      int closest = root.val;
-
-      while (root != null)
-      {
-        closest = Math.abs(closest - target) < Math.abs(root.val - target) ? closest : root.val;
-        root = target < root.val ? root.left : root.right;
-      }
-
-      return closest;
-    }
-  }
-
diff --git a/271.encode-and-decode-strings.72051485.Accepted.leetcode.java b/271.encode-and-decode-strings.72051485.Accepted.leetcode.java
deleted file mode 100644
index d9a3ab88..00000000
--- ./271.encode-and-decode-strings.72051485.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Codec {
-
-    // Encodes a list of strings to a single string.
-    public String encode(List<String> strs) {
-        StringBuilder output = new StringBuilder();
-        for(String str : strs){
-            // 对于每个子串，先把其长度放在前面，用#隔开
-            output.append(String.valueOf(str.length())+"#");
-            // 再把子串本身放在后面
-            output.append(str);
-        }
-        return output.toString();
-    }
-
-    // Decodes a single string to a list of strings.
-    public List<String> decode(String s) {
-        List<String> res = new LinkedList<String>();
-        int start = 0;
-        while(start < s.length()){
-            // 找到从start开始的第一个#，这个#前面是长度
-            int idx = s.indexOf('#', start);
-            int size = Integer.parseInt(s.substring(start, idx));
-            // 根据这个长度截取子串
-            res.add(s.substring(idx + 1, idx + size + 1));
-            // 更新start为子串后面一个位置
-            start = idx + size + 1;
-        }
-        return res;
-    }
-}
diff --git a/272.closest-binary-search-tree-value-ii.68465584.Accepted.leetcode.java b/272.closest-binary-search-tree-value-ii.68465584.Accepted.leetcode.java
deleted file mode 100644
index afdba606..00000000
--- ./272.closest-binary-search-tree-value-ii.68465584.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution {
-    public List<Integer> closestKValues(TreeNode root, double target, int k) {
-        Queue<Integer> klist = new LinkedList<Integer>();
-        Stack<TreeNode> stk = new Stack<TreeNode>();
-        // 迭代中序遍历二叉搜索树的代码
-        while(root != null){
-            stk.push(root);
-            root = root.left;
-        }
-        while(!stk.isEmpty()){
-            TreeNode curr = stk.pop();
-            // 维护一个大小为k的队列
-            // 队列不到k时直接加入
-            if(klist.size() < k){
-                klist.offer(curr.val);
-            } else {
-            // 队列到k时，判断下新的数是否更近，更近就加入队列并去掉队头
-                int first = klist.peek();
-                if(Math.abs(first - target) > Math.abs(curr.val - target)){
-                    klist.poll();
-                    klist.offer(curr.val);
-                } else {
-                // 如果不是更近则直接退出，后面的数只会更大
-                    break;
-                }
-            }
-            // 中序遍历的代码
-            if(curr.right != null){
-                curr = curr.right;
-                while(curr != null){
-                    stk.push(curr);
-                    curr = curr.left;
-                }
-            }
-        }
-        // 强制转换成List，是用LinkedList实现的所以可以转换
-        return (List<Integer>)klist;
-    }
-}
diff --git a/274.h-index.194140127.Accepted.leetcode.java b/274.h-index.194140127.Accepted.leetcode.java
deleted file mode 100644
index 225a2918..00000000
--- ./274.h-index.194140127.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution
-{
-    public int hIndex(int[] citations)
-    {
-        if (citations == null || citations.length == 0)
-        {
-            return 0;
-        }
-
-        int n = citations.length;
-        int[] buckets = new int[n + 1];
-
-        // Step 1: Accmulate the number of citations for each bucket
-        for (int i = 0; i < n; i++)
-        {
-            if (citations[i] <= n)
-            {
-                buckets[citations[i]]++;
-            }
-            else
-            {
-                buckets[n]++;
-            }
-        }
-
-        // Step 2: iterate the citations from right to left.
-        int numPapers = 0;
-
-        for (int i = n; i >= 0; i--)
-        {
-            numPapers += buckets[i];
-
-            if (numPapers >= i)
-            {
-                return i;
-            }
-        }
-
-        return 0;
-    }
-}
-
diff --git a/274.h-index.65410412.Wrong-Answer.leetcode.java b/274.h-index.65410412.Wrong-Answer.leetcode.java
deleted file mode 100644
index 95afad70..00000000
--- ./274.h-index.65410412.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-  public class Solution
-  {
-    public int hIndex(int[] citations)
-    {
-      int n = citations.length;
-
-      if (n == 0)
-      {
-        return 0;
-      }
-
-      int min = 0, max = citations.length - 1;
-
-      while (min <= max)
-      {
-        int mid = (min + max) / 2;
-
-        // 如果该点是有效的H指数，则最大H指数一定在右边
-        if (citations[mid] < n - mid)
-        {
-          min = mid + 1;
-          // 否则最大H指数在左边
-        }
-        else
-        {
-          max = mid - 1;
-        }
-      }
-
-      // n - min是min点的H指数
-      return n - min;
-    }
-  }
-
diff --git a/274.h-index.65410530.Accepted.leetcode.java b/274.h-index.65410530.Accepted.leetcode.java
deleted file mode 100644
index 01f73834..00000000
--- ./274.h-index.65410530.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-  public class Solution
-  {
-    public int hIndex(int[] citations)
-    {
-      if (citations == null || citations.length == 0)
-      {
-        return 0;
-      }
-
-      int n = citations.length;
-      int[] buckets = new int[n + 1];
-
-      // Step 1: Accmulate the number of citations for each bucket
-      for (int i = 0; i < n; i++)
-      {
-        if (citations[i] <= n)
-        {
-          buckets[citations[i]]++;
-        }
-        else
-        {
-          buckets[n]++;
-        }
-      }
-
-      // Step 2: iterate the citations from right to left.
-      int numPapers = 0;
-
-      for (int i = n; i >= 0; i--)
-      {
-        numPapers += buckets[i];
-
-        if (numPapers >= i)
-        {
-          return i;
-        }
-      }
-
-      return 0;
-    }
-  }
-
diff --git a/275.h-index-ii.65414118.Accepted.leetcode.java b/275.h-index-ii.65414118.Accepted.leetcode.java
deleted file mode 100644
index 3a342f16..00000000
--- ./275.h-index-ii.65414118.Accepted.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-  public class Solution
-  {
-    public int hIndex(int[] citations)
-    {
-      if (citations == null || citations.length == 0)
-      {
-        return 0;
-      }
-
-      int lo = 0;
-      int hi = citations.length - 1;
-      int len = citations.length;
-
-      while (lo + 1 < hi)
-      {
-        int mid = lo + (hi - lo) / 2;
-
-        if (citations[mid] == len - mid)
-        {
-          return len - mid;
-        }
-        else if (citations[mid] < len - mid)
-        {
-          lo = mid;
-        }
-        else
-        {
-          hi = mid;
-        }
-      }
-
-      if (citations[lo] >= len - lo)
-      {
-        return len - lo;
-      }
-
-      if (citations[hi] >= len - hi)
-      {
-        return len - hi;
-      }
-
-      return 0;
-    }
-  }
-
diff --git a/277.find-the-celebrity.102929654.Accepted.leetcode.java b/277.find-the-celebrity.102929654.Accepted.leetcode.java
deleted file mode 100644
index 5a4bebc9..00000000
--- ./277.find-the-celebrity.102929654.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-/* The knows API is defined in the parent class Relation.
-      boolean knows(int a, int b); */
- 
-public class Solution extends Relation {
-    public int findCelebrity(int n) {
-        if(n <=1) return 0;
-         
-        //Below is the elimination process. If the left people knows right, we will eliminate left person, which is left++; else we will eliminate the right person, which is the step right--. After we go through all these steps, we'll know that only one person is left that satisfies our logic.
-        int left = 0;
-        int right = n-1;
-        while(left < right){
-            if(knows(left, right)) left++;
-            else right--;
-        }
-         
-        //Last but not least, here we need to check whether the only person is the real celebrity. Consider one example, if A does not know B and B does not know A either, then A and B would not be celebrity. So we need to check the negative case, which is left knows some person or any person does not know the left person.
-        for(int i = 0; i < n; i++){
-            if(i != left){
-                if(knows(left, i) || !knows(i, left)) return -1;
-            }
-        }
-         
-        return left;
-    }
-}
diff --git a/277.find-the-celebrity.102929721.Accepted.leetcode.java b/277.find-the-celebrity.102929721.Accepted.leetcode.java
deleted file mode 100644
index cac8505a..00000000
--- ./277.find-the-celebrity.102929721.Accepted.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class Solution extends Relation
-{
-    public int findCelebrity(int n)
-    {
-        if (n <= 1)
-        {
-            return 0;
-        }
-
-        int left = 0;
-        int right = n - 1;
-
-        while (left < right)
-        {
-            if (knows(left, right))
-            {
-                left++;
-            }
-            else
-            {
-                right--;
-            }
-        }
-
-        for (int i = 0; i < n; i++)
-        {
-            if (i != left)
-            {
-                if (knows(left, i) || !knows(i, left))
-                {
-                    return -1;
-                }
-            }
-        }
-
-        return left;
-    }
-}
diff --git a/277.find-the-celebrity.102929754.Wrong-Answer.leetcode.java b/277.find-the-celebrity.102929754.Wrong-Answer.leetcode.java
deleted file mode 100644
index bf4b0e5d..00000000
--- ./277.find-the-celebrity.102929754.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution extends Relation
-{
-    public int findCelebrity(int n)
-    {
-        if (n <= 1)
-        {
-            return 0;
-        }
-
-        int left = 0;
-        int right = n - 1;
-
-        while (left < right)
-        {
-            if (knows(left, right))
-            {
-                left++;
-            }
-            else
-            {
-                right--;
-            }
-        }
-
-        return left;
-    }
-}
diff --git a/277.find-the-celebrity.102929795.Accepted.leetcode.java b/277.find-the-celebrity.102929795.Accepted.leetcode.java
deleted file mode 100644
index ba0eed66..00000000
--- ./277.find-the-celebrity.102929795.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution extends Relation
-{
-    public int findCelebrity(int n)
-    {
-        int left = 0;
-        int right = n - 1;
-
-        while (left < right)
-        {
-            if (knows(left, right))
-            {
-                left++;
-            }
-            else
-            {
-                right--;
-            }
-        }
-
-        for (int i = 0; i < n; i++)
-        {
-            if (i != left)
-            {
-                if (knows(left, i) || !knows(i, left))
-                {
-                    return -1;
-                }
-            }
-        }
-
-        return left;
-    }
-}
diff --git a/277.find-the-celebrity.71358414.Accepted.leetcode.java b/277.find-the-celebrity.71358414.Accepted.leetcode.java
deleted file mode 100644
index f4145087..00000000
--- ./277.find-the-celebrity.71358414.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution extends Relation {  
-    public int findCelebrity(int n) {  
-        int[] bitmap = new int[n];  
-          
-        for(int i=0; i<n; i++) {  
-            for(int j=0; j<n; j++) {  
-                if(i==j) continue;  
-                  
-                if(bitmap[j]>=0) {  
-                    if( knows(i, j) ) {  
-                        bitmap[i] = -1;  
-                        bitmap[j]++;  
-                    } else {  
-                        bitmap[j] = -1;  
-                    }  
-                }  
-            }  
-        }  
-          
-        for(int i=0; i<n; i++) {  
-            if(bitmap[i] == n-1) {  
-                for(int j=0; j<n; j++) {  
-                    if(i==j) continue;  
-                    if(knows(i, j)) return -1;  
-                }  
-                return i;  
-            }  
-        }  
-          
-        return -1;  
-    }  
-} 
diff --git a/277.find-the-celebrity.96520233.Accepted.leetcode.java b/277.find-the-celebrity.96520233.Accepted.leetcode.java
deleted file mode 100644
index b45aed5b..00000000
--- ./277.find-the-celebrity.96520233.Accepted.leetcode.java
+++ /dev/null
@@ -1,54 +0,0 @@
-public class Solution extends Relation
-{
-    public int findCelebrity(int n)
-    {
-        int[] bitmap = new int[n];
-
-        for (int i = 0; i < n; i++)
-        {
-            for (int j = 0; j < n; j++)
-            {
-                if (i == j)
-                {
-                    continue;
-                }
-
-                if (bitmap[j] >= 0)
-                {
-                    if (knows(i, j))
-                    {
-                        bitmap[i] = -1;
-                        bitmap[j]++;
-                    }
-                    else
-                    {
-                        bitmap[j] = -1;
-                    }
-                }
-            }
-        }
-
-        for (int i = 0; i < n; i++)
-        {
-            if (bitmap[i] == n - 1)
-            {
-                for (int j = 0; j < n; j++)
-                {
-                    if (i == j)
-                    {
-                        continue;
-                    }
-
-                    if (knows(i, j))
-                    {
-                        return -1;
-                    }
-                }
-
-                return i;
-            }
-        }
-
-        return -1;
-    }
-}
diff --git a/277.find-the-celebrity.96523222.Accepted.leetcode.java b/277.find-the-celebrity.96523222.Accepted.leetcode.java
deleted file mode 100644
index 4a6e061a..00000000
--- ./277.find-the-celebrity.96523222.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution extends Relation
-{
-    public int findCelebrity(int n)
-    {
-        if (n == 0)
-        {
-            return -1;
-        }
-
-        int can = 0;
-
-        for (int i = 1; i < n; i ++)
-        {
-            if (!knows(i, can))
-            {
-                can = i;
-            }
-        }
-
-        for (int i = 0; i < n; i ++)
-        {
-            if (i != can)
-            {
-                if (!knows(i, can) || knows(can, i))
-                {
-                    return -1;
-                }
-            }
-        }
-
-        return can;
-    }
-}
diff --git a/278.first-bad-version.102365201.Wrong-Answer.leetcode.java b/278.first-bad-version.102365201.Wrong-Answer.leetcode.java
deleted file mode 100644
index 13b92aa9..00000000
--- ./278.first-bad-version.102365201.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution extends VersionControl
-{
-    public int firstBadVersion(int n)
-    {
-        if (n == 1)
-        {
-            return 1;
-        }
-
-        int left = 1;
-        int right = n - 1;
-
-        while (left + 1 < right)
-        {
-            int mid = left + (right - left) / 2;
-
-            if (isBadVersion(mid))
-            {
-                right = mid;
-            }
-            else
-            {
-                left = mid;
-            }
-        }
-
-        return isBadVersion(left) ? left : right;
-    }
-}
diff --git a/278.first-bad-version.102365296.Accepted.leetcode.java b/278.first-bad-version.102365296.Accepted.leetcode.java
deleted file mode 100644
index a3579dd6..00000000
--- ./278.first-bad-version.102365296.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution extends VersionControl
-{
-    public int firstBadVersion(int n)
-    {
-        if (n == 1)
-        {
-            return 1;
-        }
-
-        int left = 1;
-        int right = n;
-
-        while (left + 1 < right)
-        {
-            int mid = left + (right - left) / 2;
-
-            if (isBadVersion(mid))
-            {
-                right = mid;
-            }
-            else
-            {
-                left = mid;
-            }
-        }
-
-        return isBadVersion(left) ? left : right;
-    }
-}
diff --git a/278.first-bad-version.65415856.Accepted.leetcode.java b/278.first-bad-version.65415856.Accepted.leetcode.java
deleted file mode 100644
index fd515f4f..00000000
--- ./278.first-bad-version.65415856.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/* The isBadVersion API is defined in the parent class VersionControl.
-      boolean isBadVersion(int version); */
-
-public class Solution extends VersionControl {
-    public int firstBadVersion(int n) {
-              // write your code here
-      if (n == 1)
-      {
-        return 1;
-      }
-
-      int left = 1;
-      int right = n;
-
-      while (left < right)
-      {
-        int mid = left + (right - left) / 2;
-
-        if (isBadVersion(mid))
-        {
-          right = mid;
-        }
-        else
-        {
-          left = mid + 1;
-        }
-      }
-
-      return right;
-   
-    }
-}
diff --git a/278.first-bad-version.65415903.Accepted.leetcode.java b/278.first-bad-version.65415903.Accepted.leetcode.java
deleted file mode 100644
index f6447c1d..00000000
--- ./278.first-bad-version.65415903.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-    public class Solution extends VersionControl
-    {
-        public int firstBadVersion(int n)
-        {
-            // write your code here
-            if (n == 1)
-            {
-                return 1;
-            }
-            int left = 1;
-            int right = n;
-            while (left < right)
-            {
-                int mid = left + (right - left) / 2;
-                if (isBadVersion(mid))
-                {
-                    right = mid;
-                }
-                else
-                {
-                    left = mid + 1;
-                }
-            }
-            return right;
-        }
-    }
-
diff --git a/278.first-bad-version.72970604.Accepted.leetcode.java b/278.first-bad-version.72970604.Accepted.leetcode.java
deleted file mode 100644
index aa2b8c81..00000000
--- ./278.first-bad-version.72970604.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution extends VersionControl
-{
-    public int firstBadVersion(int n)
-    {
-        // write your code here
-        if (n == 1)
-        {
-            return 1;
-        }
-
-        int left = 1;
-        int right = n - 1;
-
-        while (left <= right)
-        {
-            int mid = left + (right - left) / 2;
-
-            if (isBadVersion(mid))
-            {
-                right = mid - 1;
-            }
-            else
-            {
-                left = mid + 1;
-            }
-        }
-
-        return left;
-    }
-}
-
diff --git a/278.first-bad-version.72970809.Wrong-Answer.leetcode.java b/278.first-bad-version.72970809.Wrong-Answer.leetcode.java
deleted file mode 100644
index b53ab9b7..00000000
--- ./278.first-bad-version.72970809.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution extends VersionControl
-{
-    public int firstBadVersion(int n)
-    {
-        // write your code here
-        if (n == 1)
-        {
-            return 1;
-        }
-
-        int left = 1;
-        int right = n - 1;
-
-        while (left + 1 < right)
-        {
-            int mid = left + (right - left) / 2;
-
-            if (isBadVersion(mid))
-            {
-                right = mid;
-            }
-            else
-            {
-                left = mid;
-            }
-        }
-
-        return isBadVersion(left) ? left : right;
-    }
-}
-
diff --git a/278.first-bad-version.72970903.Accepted.leetcode.java b/278.first-bad-version.72970903.Accepted.leetcode.java
deleted file mode 100644
index a96d2f26..00000000
--- ./278.first-bad-version.72970903.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution extends VersionControl
-{
-    public int firstBadVersion(int n)
-    {
-        // write your code here
-        if (n == 1)
-        {
-            return 1;
-        }
-
-        int left = 1;
-        int right = n;
-
-        while (left + 1 < right)
-        {
-            int mid = left + (right - left) / 2;
-
-            if (isBadVersion(mid))
-            {
-                right = mid;
-            }
-            else
-            {
-                left = mid;
-            }
-        }
-
-        return isBadVersion(left) ? left : right;
-    }
-}
-
diff --git a/278.first-bad-version.80425503.Wrong-Answer.leetcode.java b/278.first-bad-version.80425503.Wrong-Answer.leetcode.java
deleted file mode 100644
index 67b461ed..00000000
--- ./278.first-bad-version.80425503.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution extends VersionControl
-{
-    public int firstBadVersion(int n)
-    {
-        // write your code here
-        if (n == 1)
-        {
-            return 1;
-        }
-
-        int left = 1;
-        int right = n - 1;
-
-        while (left + 1 < right)
-        {
-            int mid = left + (right - left) / 2;
-
-            if (isBadVersion(mid))
-            {
-                right = mid;
-            }
-            else
-            {
-                left = mid;
-            }
-        }
-
-        return isBadVersion(left) ? left : right;
-    }
-}
diff --git a/278.first-bad-version.80426643.Accepted.leetcode.java b/278.first-bad-version.80426643.Accepted.leetcode.java
deleted file mode 100644
index 3e9167e6..00000000
--- ./278.first-bad-version.80426643.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution extends VersionControl
-{
-    public int firstBadVersion(int n)
-    {
-        // write your code here
-        if (n == 1)
-        {
-            return 1;
-        }
-
-        int left = 1;
-        int right = n;
-
-        while (left + 1 < right)
-        {
-            int mid = left + (right - left) / 2;
-
-            if (isBadVersion(mid))
-            {
-                right = mid;
-            }
-            else
-            {
-                left = mid;
-            }
-        }
-
-        return isBadVersion(left) ? left : right;
-    }
-}
diff --git a/279.perfect-squares.39917305.Accepted.leetcode.java b/279.perfect-squares.39917305.Accepted.leetcode.java
deleted file mode 100644
index b74a9993..00000000
--- ./279.perfect-squares.39917305.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-  public class Solution
-  {
-    public int numSquares(int n)
-    {
-      int dp[] = new int[n + 1];
-      Arrays.fill(dp, Integer.MAX_VALUE);
-
-      for (int i = 1; i * i <= n; i++)
-      {
-        dp[i * i] = 1;
-      }
-
-      for (int i = 1; i <= n; i++)
-      {
-        for (int j = 1; i + j * j <= n; j++)
-        {
-          dp[i + j * j] = Math.min(dp[i] + 1, dp[i + j * j]);
-        }
-      }
-
-      return dp[n];
-    }
-  }
-
diff --git a/28.implement-strstr.72852173.Accepted.leetcode.java b/28.implement-strstr.72852173.Accepted.leetcode.java
deleted file mode 100644
index 9b0c5cce..00000000
--- ./28.implement-strstr.72852173.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-class Solution
-{
-  public int strStr(String source, String target)
-  {
-    if (source == null || target == null)
-    {
-      return -1;
-    }
-
-    for(int i = 0; i < source.length() - target.length() + 1; i++)
-    {
-      int j = 0;
-
-      for (; j < target.length(); j++)
-      {
-          if (source.charAt(i + j) != target.charAt(j))
-          {
-              break;
-          }
-      }
-        
-      if (j == target.length())
-      {
-          return i;
-      }
-    
-    }
-
-    return -1;
-  }
-}
-
diff --git a/28.implement-strstr.80106408.Accepted.leetcode.java b/28.implement-strstr.80106408.Accepted.leetcode.java
deleted file mode 100644
index c5417111..00000000
--- ./28.implement-strstr.80106408.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-class Solution
-{
-    public int strStr(String source, String target)
-    {
-        if (source == null || target == null)
-        {
-            return -1;
-        }
-
-        for(int i = 0; i < source.length() - target.length() + 1; i++)
-        {
-            int j = 0;
-
-            for (; j < target.length(); j++)
-            {
-                if (source.charAt(i + j) != target.charAt(j))
-                {
-                    break;
-                }
-            }
-        
-            if (j == target.length())
-            {
-                return i;
-            }
-    
-        }
-
-        return -1;
-    }
-}
diff --git a/28.implement-strstr.80107493.Accepted.leetcode.java b/28.implement-strstr.80107493.Accepted.leetcode.java
deleted file mode 100644
index 9224377e..00000000
--- ./28.implement-strstr.80107493.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-class Solution
-{
-    public int strStr(String source, String target)
-    {
-        if (source == null || target == null)
-        {
-            return -1;
-        }
-
-        for(int i = 0; i < source.length() - target.length() + 1; i++)
-        {
-            int j = 0;
-            
-            for(; j < target.length(); j++)
-            {
-                if(source.charAt(i + j) != target.charAt(j))
-                {
-                    break;
-                }
-            }
-            
-            if(j == target.length())
-            {
-                return i;
-            }
-        }
-        
-        return -1;
-    }
-}
diff --git a/280.wiggle-sort.71480670.Accepted.leetcode.java b/280.wiggle-sort.71480670.Accepted.leetcode.java
deleted file mode 100644
index 27748efb..00000000
--- ./280.wiggle-sort.71480670.Accepted.leetcode.java
+++ /dev/null
@@ -1,12 +0,0 @@
-public class Solution {
-    public void wiggleSort(int[] nums) {
-        for(int i = 1; i < nums.length; i++){
-            // 需要交换的情况：奇数时nums[i] < nums[i - 1]或偶数时nums[i] > nums[i - 1]
-            if((i % 2 == 1 && nums[i] < nums[i-1]) || (i % 2 == 0 && nums[i] > nums[i-1])){
-                int tmp = nums[i-1];
-                nums[i-1] = nums[i];
-                nums[i] = tmp;
-            }
-        }
-    }
-}
diff --git a/280.wiggle-sort.87230514.Accepted.leetcode.java b/280.wiggle-sort.87230514.Accepted.leetcode.java
deleted file mode 100644
index a576c759..00000000
--- ./280.wiggle-sort.87230514.Accepted.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-public class Solution 
-{
-    public void wiggleSort(int[] nums) 
-    {
-        for (int i = 1; i < nums.length; i++)
-        {
-            // 需要交换的情况：奇数时nums[i] < nums[i - 1]或偶数时nums[i] > nums[i - 1]
-            if ((i % 2 == 1 && nums[i] < nums[i-1]) || (i % 2 == 0 && nums[i] > nums[i-1]))
-            {
-                int tmp = nums[i-1];
-                nums[i-1] = nums[i];
-                nums[i] = tmp;
-            }
-        }
-    }
-}
diff --git a/280.wiggle-sort.87262543.Runtime-Error.leetcode.java b/280.wiggle-sort.87262543.Runtime-Error.leetcode.java
deleted file mode 100644
index bdee94cc..00000000
--- ./280.wiggle-sort.87262543.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-public class Solution 
-{
-    public void wiggleSort(int[] nums) 
-    {
-        for (int i = 1; i < nums.length; i++)
-        {
-            if ((i % 2 == 0 && nums[i - 1] < nums[i])
-                || (i % 2 == 1 && nums[i - 1] > nums[i]))
-            {
-                int temp = nums[i];
-                nums[i] = nums[i + 1];
-                nums[i + 1] = temp;
-            }
-        }
-    }
-}
diff --git a/280.wiggle-sort.87262811.Wrong-Answer.leetcode.java b/280.wiggle-sort.87262811.Wrong-Answer.leetcode.java
deleted file mode 100644
index e88dba0b..00000000
--- ./280.wiggle-sort.87262811.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-public class Solution 
-{
-    public void wiggleSort(int[] nums) 
-    {
-        for (int i = 1; i < nums.length - 1; i++)
-        {
-            if ((i % 2 == 0 && nums[i - 1] < nums[i])
-                || (i % 2 == 1 && nums[i - 1] > nums[i]))
-            {
-                int temp = nums[i];
-                nums[i] = nums[i + 1];
-                nums[i + 1] = temp;
-            }
-        }
-    }
-}
diff --git a/280.wiggle-sort.87262916.Wrong-Answer.leetcode.java b/280.wiggle-sort.87262916.Wrong-Answer.leetcode.java
deleted file mode 100644
index 836d45d0..00000000
--- ./280.wiggle-sort.87262916.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class Solution 
-{
-    public void wiggleSort(int[] nums) 
-    {
-        for (int i = 1; i < nums.length; i++)
-        {
-            if ((i % 2 == 0 && nums[i - 1] < nums[i])
-                || (i % 2 == 1 && nums[i - 1] > nums[i]))
-            {
-                if (i + 1 < nums.length)
-                {
-                    int temp = nums[i];
-                    nums[i] = nums[i + 1];
-                    nums[i + 1] = temp;    
-                }
-            }
-        }
-    }
-}
diff --git a/280.wiggle-sort.87466175.Accepted.leetcode.java b/280.wiggle-sort.87466175.Accepted.leetcode.java
deleted file mode 100644
index 4dae86dd..00000000
--- ./280.wiggle-sort.87466175.Accepted.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-public class Solution 
-{
-    public void wiggleSort(int[] nums) 
-    {
-        for (int i = 1; i < nums.length; i++)
-        {
-            if ((i % 2 == 0 && nums[i - 1] < nums[i])
-                || (i % 2 == 1 && nums[i - 1] > nums[i]))
-            {
-                int temp = nums[i - 1];
-                nums[i - 1] = nums[i];
-                nums[i] = temp;
-            }
-        }
-    }
-}
diff --git a/281.zigzag-iterator.71935121.Accepted.leetcode.java b/281.zigzag-iterator.71935121.Accepted.leetcode.java
deleted file mode 100644
index c46ad77b..00000000
--- ./281.zigzag-iterator.71935121.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class ZigzagIterator {
-    
-    Iterator<Integer> it1;
-    Iterator<Integer> it2;
-    int turns;
-
-    public ZigzagIterator(List<Integer> v1, List<Integer> v2) {
-        this.it1 = v1.iterator();
-        this.it2 = v2.iterator();
-        turns = 0;
-    }
-
-    public int next() {
-        // 如果没有下一个则返回0
-        if(!hasNext()){
-            return 0;
-        }
-        turns++;
-        // 如果是第奇数个，且第一个列表也有下一个元素时，返回第一个列表的下一个
-        // 如果第二个列表已经没有，返回第一个列表的下一个
-        if((turns % 2 == 1 && it1.hasNext()) || (!it2.hasNext())){
-            return it1.next();
-        // 如果是第偶数个，且第二个列表也有下一个元素时，返回第二个列表的下一个
-        // 如果第一个列表已经没有，返回第二个列表的下一个
-        } else if((turns % 2 == 0 && it2.hasNext()) || (!it1.hasNext())){
-            return it2.next();
-        }
-        return 0;
-    }
-
-    public boolean hasNext() {
-        return it1.hasNext() || it2.hasNext();
-    }
-}
diff --git a/281.zigzag-iterator.86822680.Accepted.leetcode.java b/281.zigzag-iterator.86822680.Accepted.leetcode.java
deleted file mode 100644
index 9dcbc7f0..00000000
--- ./281.zigzag-iterator.86822680.Accepted.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-public class ZigzagIterator 
-{
-    
-    Iterator<Integer> it1;
-    Iterator<Integer> it2;
-    int turns;
-
-    public ZigzagIterator(List<Integer> v1, List<Integer> v2) 
-    {
-        this.it1 = v1.iterator();
-        this.it2 = v2.iterator();
-        turns = 0;
-    }
-
-    public int next() 
-    {
-        // 如果没有下一个则返回0
-        if (!hasNext())
-        {
-            return 0;
-        }
-        
-        turns++;
-        // 如果是第奇数个，且第一个列表也有下一个元素时，返回第一个列表的下一个
-        // 如果第二个列表已经没有，返回第一个列表的下一个
-        
-        if ((turns % 2 == 1 && it1.hasNext()) || (!it2.hasNext()))
-        {
-            return it1.next();
-        // 如果是第偶数个，且第二个列表也有下一个元素时，返回第二个列表的下一个
-        // 如果第一个列表已经没有，返回第二个列表的下一个
-        }
-        else if ((turns % 2 == 0 && it2.hasNext()) || (!it1.hasNext()))
-        {
-            return it2.next();
-        }
-        
-        return 0;
-    }
-
-    public boolean hasNext() 
-    {
-        return it1.hasNext() || it2.hasNext();
-    }
-}
diff --git a/282.expression-add-operators.102780598.Accepted.leetcode.java b/282.expression-add-operators.102780598.Accepted.leetcode.java
deleted file mode 100644
index c3b7f9e6..00000000
--- ./282.expression-add-operators.102780598.Accepted.leetcode.java
+++ /dev/null
@@ -1,59 +0,0 @@
-public class Solution
-{
-    public List<String> addOperators(String num, int target)
-    {
-        List<String> result = new ArrayList<>();
-
-        if (num == null || num.length() == 0)
-        {
-            return result;
-        }
-
-        addOperatorHelper(num, 0, target, 0, 0, "", result);
-        return result;
-    }
-
-    private void addOperatorHelper(String num, int start, int target, long curSum,
-                                   long preNum, String curResult, List<String> result)
-    {
-        if (start == num.length() && curSum == target)
-        {
-            result.add(curResult);
-            return;
-        }
-
-        if (start == num.length())
-        {
-            return;
-        }
-
-        for (int i = start; i < num.length(); i++)
-        {
-            String curStr = num.substring(start, i + 1);
-
-            if (curStr.length() > 1 && curStr.charAt(0) == '0')
-            {
-                break;
-            }
-
-            long curNum = Long.parseLong(curStr);
-
-            if (curResult.isEmpty())
-            {
-                addOperatorHelper(num, i + 1, target, curNum, curNum, curStr, result);
-            }
-            else
-            {
-                // Multiply
-                addOperatorHelper(num, i + 1, target, curSum - preNum + preNum * curNum,
-                                  preNum * curNum, curResult + "*" + curNum, result);
-                // Add
-                addOperatorHelper(num, i + 1, target, curSum + curNum, curNum,
-                                  curResult + "+" + curNum, result);
-                // Subtract
-                addOperatorHelper(num, i + 1, target, curSum - curNum, -curNum,
-                                  curResult + "-" + curNum, result);
-            }
-        }
-    }
-}
diff --git a/282.expression-add-operators.65418952.Accepted.leetcode.java b/282.expression-add-operators.65418952.Accepted.leetcode.java
deleted file mode 100644
index 681c21d2..00000000
--- ./282.expression-add-operators.65418952.Accepted.leetcode.java
+++ /dev/null
@@ -1,60 +0,0 @@
-  public class Solution
-  {
-    public List<String> addOperators(String num, int target)
-    {
-      List<String> result = new ArrayList<>();
-
-      if (num == null || num.length() == 0)
-      {
-        return result;
-      }
-
-      addOperatorHelper(num, 0, target, 0, 0, "", result);
-      return result;
-    }
-
-    private void addOperatorHelper(String num, int start, int target, long curSum,
-                                   long preNum, String curResult, List<String> result)
-    {
-      if (start == num.length() && curSum == target)
-      {
-        result.add(curResult);
-        return;
-      }
-
-      if (start == num.length())
-      {
-        return;
-      }
-
-      for (int i = start; i < num.length(); i++)
-      {
-        String curStr = num.substring(start, i + 1);
-
-        if (curStr.length() > 1 && curStr.charAt(0) == '0')
-        {
-          break;
-        }
-
-        long curNum = Long.parseLong(curStr);
-
-        if (curResult.isEmpty())
-        {
-          addOperatorHelper(num, i + 1, target, curNum, curNum, curStr, result);
-        }
-        else
-        {
-          // Multiply
-          addOperatorHelper(num, i + 1, target, curSum - preNum + preNum * curNum,
-                            preNum * curNum, curResult + "*" + curNum, result);
-          // Add
-          addOperatorHelper(num, i + 1, target, curSum + curNum, curNum,
-                            curResult + "+" + curNum, result);
-          // Subtract
-          addOperatorHelper(num, i + 1, target, curSum - curNum, -curNum,
-                            curResult + "-" + curNum, result);
-        }
-      }
-    }
-  }
-
diff --git a/283.move-zeroes.102780865.Wrong-Answer.leetcode.java b/283.move-zeroes.102780865.Wrong-Answer.leetcode.java
deleted file mode 100644
index 78a24694..00000000
--- ./283.move-zeroes.102780865.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-public class Solution
-{
-    public void moveZeroes(int[] nums)
-    {
-        int index = 0;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-        }
-
-        while (index < nums.length)
-        {
-            nums[index++] = 0;
-        }
-    }
-}
diff --git a/285.inorder-successor-in-bst.102784648.Wrong-Answer.leetcode.java b/285.inorder-successor-in-bst.102784648.Wrong-Answer.leetcode.java
deleted file mode 100644
index c6264b49..00000000
--- ./285.inorder-successor-in-bst.102784648.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public TreeNode inorderSuccessor(TreeNode root, TreeNode p)
-    {
-        if (root == null)
-        {
-            return null;
-        }
-
-        TreeNode successor = null;
-
-        while (root != null)
-        {
-            if (root.val > p.val)
-            {
-                successor = root;
-                root = root.left;
-            }
-            else if (root.val < p.val)
-            {
-                root = root.right;
-            }
-            else
-            {
-                break;
-            }
-        }
-
-        if (root.right == null)
-        {
-            return successor;
-        }
-
-        return root;
-    }
-}
diff --git a/285.inorder-successor-in-bst.102863295.Accepted.leetcode.java b/285.inorder-successor-in-bst.102863295.Accepted.leetcode.java
deleted file mode 100644
index 525c060c..00000000
--- ./285.inorder-successor-in-bst.102863295.Accepted.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-public class Solution
-{
-    public TreeNode inorderSuccessor(TreeNode root, TreeNode p)
-    {
-        if (root == null)
-        {
-            return null;
-        }
-
-        TreeNode successor = null;
-
-        while (root != null)
-        {
-            if (root.val > p.val)
-            {
-                successor = root;
-                root = root.left;
-            }
-            else if (root.val < p.val)
-            {
-                root = root.right;
-            }
-            else
-            {
-                break;
-            }
-        }
-
-        if (root.right == null)
-        {
-            return successor;
-        }
-        else
-        {
-            root = root.right;
-            
-            while (root.left != null)
-            {
-                root = root.left;
-            }
-        }
-
-        return root;
-    }
-}
diff --git a/285.inorder-successor-in-bst.102863595.Accepted.leetcode.java b/285.inorder-successor-in-bst.102863595.Accepted.leetcode.java
deleted file mode 100644
index 97905a3c..00000000
--- ./285.inorder-successor-in-bst.102863595.Accepted.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution
-{
-    public TreeNode inorderSuccessor(TreeNode root, TreeNode p)
-    {
-        if (root == null)
-        {
-            return null;
-        }
-
-        TreeNode successor = null;
-
-        while (root != null)
-        {
-            if (root.val > p.val)
-            {
-                successor = root;
-                root = root.left;
-            }
-            else if (root.val < p.val)
-            {
-                root = root.right;
-            }
-            else
-            {
-                break;
-            }
-        }
-        
-        if (root.right == null)
-        {
-            return successor;
-        }
-
-        root = root.right;
-
-        while (root.left != null)
-        {
-            root = root.left;
-        }
-
-        return root;
-    }
-}
diff --git a/285.inorder-successor-in-bst.102863930.Accepted.leetcode.java b/285.inorder-successor-in-bst.102863930.Accepted.leetcode.java
deleted file mode 100644
index 4756788e..00000000
--- ./285.inorder-successor-in-bst.102863930.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    public TreeNode inorderSuccessor(TreeNode root, TreeNode p)
-    {
-        TreeNode successor = null;
-
-        while (root != null && root.val != p.val)
-        {
-            if (root.val > p.val)
-            {
-                successor = root;
-                root = root.left;
-            }
-            else
-            {
-                root = root.right;
-            }
-        }
-
-        if (root.right == null)
-        {
-            return successor;
-        }
-
-        root = root.right;
-
-        while (root.left != null)
-        {
-            root = root.left;
-        }
-
-        return root;
-    }
-}
diff --git a/285.inorder-successor-in-bst.102864208.Accepted.leetcode.java b/285.inorder-successor-in-bst.102864208.Accepted.leetcode.java
deleted file mode 100644
index 6adfba8b..00000000
--- ./285.inorder-successor-in-bst.102864208.Accepted.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution
-{
-    public TreeNode minValue(TreeNode root)
-    {
-        TreeNode nav = root;
-
-        while (nav.left != null)
-        {
-            nav = nav.left;
-        }
-
-        return nav;
-    }
- 
-    TreeNode inorderSuccessor(TreeNode cur, TreeNode target)
-    {
-        if (target.right != null)
-        {
-            return minValue(target.right);
-        }
-
-        TreeNode pre = null;
-
-        while (cur != null)
-        {
-            if (cur.val > target.val)
-            {
-                pre = cur;
-                cur = cur.left;
-            }
-            else if (cur.val < target.val)
-            {
-                cur = cur.right;
-            }
-            else
-            {
-                break;
-            }
-        }
-
-        return pre;
-    }
-}
diff --git a/286.walls-and-gates.67597583.Accepted.leetcode.java b/286.walls-and-gates.67597583.Accepted.leetcode.java
deleted file mode 100644
index 177d30c6..00000000
--- ./286.walls-and-gates.67597583.Accepted.leetcode.java
+++ /dev/null
@@ -1,61 +0,0 @@
-public class Solution {
-    public void wallsAndGates(int[][] rooms) {
-        if (rooms == null || rooms.length == 0) {
-            return;
-        }
-         
-        int m = rooms.length;
-        int n = rooms[0].length;
-         
-        boolean[][] visited = new boolean[m][n];
-         
-        for (int i = 0; i < m; i++) {
-            for (int j = 0; j < n; j++) {
-                if (rooms[i][j] == 0) {
-                    wallsAndGatesHelper(i, j, 0, visited, rooms);
-                }
-            }
-        }
-    }
-     
-    private void wallsAndGatesHelper(int row, int col, int distance, boolean[][] visited, int[][] rooms) {
-        int rows = rooms.length;
-        int cols = rooms[0].length;
-         
-        if (row < 0 || row >= rows || col < 0 || col >= cols) {
-            return;
-        }
-         
-        // visited
-        if (visited[row][col]) {
-            return;
-        }
-         
-        // Is wall?
-        if (rooms[row][col] == -1) {
-            return;
-        }
-         
-        // Distance greater than current
-        if (distance > rooms[row][col]) {
-            return;
-        }
-         
-         
-        // Mark as visited
-        visited[row][col] = true;
-         
-        if (distance < rooms[row][col]) {
-            rooms[row][col] = distance;
-        }
-         
-        // go up, down, left and right
-        wallsAndGatesHelper(row - 1, col, distance + 1, visited, rooms);
-        wallsAndGatesHelper(row + 1, col, distance + 1, visited, rooms);
-        wallsAndGatesHelper(row, col - 1, distance + 1, visited, rooms);
-        wallsAndGatesHelper(row, col + 1, distance + 1, visited, rooms);
-         
-        // Mark as unvisited
-        visited[row][col] = false;
-    }
-}
diff --git a/287.find-the-duplicate-number.65541041.Accepted.leetcode.java b/287.find-the-duplicate-number.65541041.Accepted.leetcode.java
deleted file mode 100644
index 21833e0c..00000000
--- ./287.find-the-duplicate-number.65541041.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-  public class Solution
-  {
-    public int findDuplicate(int[] nums)
-    {
-      int min = 0, max = nums.length - 1;
-
-      while (min <= max)
-      {
-        int mid = min + (max - min) / 2;
-        int cnt = 0;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-          if (nums[i] <= mid)
-          {
-            cnt++;
-          }
-        }
-
-        if (cnt > mid)
-        {
-          max = mid - 1;
-        }
-        else
-        {
-          min = mid + 1;
-        }
-      }
-
-      return min;
-    }
-  }
-
diff --git a/287.find-the-duplicate-number.65541227.Accepted.leetcode.java b/287.find-the-duplicate-number.65541227.Accepted.leetcode.java
deleted file mode 100644
index 85b19b44..00000000
--- ./287.find-the-duplicate-number.65541227.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-  public class Solution
-  {
-    public int findDuplicate(int[] nums)
-    {
-      int slow = 0;
-      int fast = 0;
-
-      // 找到快慢指针相遇的地方
-      do
-      {
-        slow = nums[slow];
-        fast = nums[nums[fast]];
-      }
-      while (slow != fast);
-
-      int find = 0;
-
-      // 用一个新指针从头开始，直到和慢指针相遇
-      while (find != slow)
-      {
-        slow = nums[slow];
-        find = nums[find];
-      }
-
-      return find;
-    }
-  }
-
diff --git a/287.find-the-duplicate-number.87107989.Accepted.leetcode.java b/287.find-the-duplicate-number.87107989.Accepted.leetcode.java
deleted file mode 100644
index bba55323..00000000
--- ./287.find-the-duplicate-number.87107989.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public int findDuplicate(int[] nums)
-    {
-        int slow = 0;
-        int fast = 0;
-
-        // 找到快慢指针相遇的地方
-        do
-        {
-            slow = nums[slow];
-            fast = nums[nums[fast]];
-        }
-        while (slow != fast);
-
-        int find = 0;
-
-        // 用一个新指针从头开始，直到和慢指针相遇
-        while (find != slow)
-        {
-            slow = nums[slow];
-            find = nums[find];
-        }
-
-        return find;
-    }
-}
diff --git a/288.unique-word-abbreviation.67595491.Runtime-Error.leetcode.java b/288.unique-word-abbreviation.67595491.Runtime-Error.leetcode.java
deleted file mode 100644
index 038898a5..00000000
--- ./288.unique-word-abbreviation.67595491.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class ValidWordAbbr {
-    private Map<String, String> map = new HashMap<String, String>();
-
-    public ValidWordAbbr(String[] dictionary) {
-        for(int i = 0; i < dictionary.length; i++){
-            String key = abbreviate(dictionary[i]);
-            if(!map.containsKey(key)){
-                map.put(key, dictionary[i]);
-            }else{
-                map.put(key, "");
-            }
-        }
-    }
-    
-    private String abbreviate(String str){
-        return str.charAt(0) + Integer.toString(str.length() - 2)+ str.charAt(str.length()-1);
-    }
-
-    public boolean isUnique(String word) {
-        String x = abbreviate(word);
-        if(map.containsKey(x)){
-            if(map.get(x).equals(word)){
-                return true;
-            }else {
-                return false;
-            }
-        }
-        return true;
-    }
-}
-
-// Your ValidWordAbbr object will be instantiated and called as such:
-// ValidWordAbbr vwa = new ValidWordAbbr(dictionary);
-// vwa.isUnique("Word");
-// vwa.isUnique("anotherWord");
diff --git a/288.unique-word-abbreviation.67595571.Accepted.leetcode.java b/288.unique-word-abbreviation.67595571.Accepted.leetcode.java
deleted file mode 100644
index 20b99d7b..00000000
--- ./288.unique-word-abbreviation.67595571.Accepted.leetcode.java
+++ /dev/null
@@ -1,56 +0,0 @@
-public class ValidWordAbbr {
-    private Set<String> uniqueDict;
-    private Map<String, String> abbrDict;
- 
-    public ValidWordAbbr(String[] dictionary) {
-        uniqueDict = new HashSet<>();
-        abbrDict = new HashMap<>();
-         
-        for (String word : dictionary) {
-            if (!uniqueDict.contains(word)) {
-                String abbr = getAbbr(word);
-                if (!abbrDict.containsKey(abbr)) {
-                    abbrDict.put(abbr, word);
-                } else {
-                    abbrDict.put(abbr, "");
-                }
-                 
-                uniqueDict.add(word);
-            }
-        }
-    }
- 
-    public boolean isUnique(String word) {
-        if (word == null || word.length() == 0) {
-            return true;
-        }
-         
-        String abbr = getAbbr(word);
-        if (!abbrDict.containsKey(abbr) || abbrDict.get(abbr).equals(word)) {
-            return true;
-        } else {
-            return false;
-        }
-    }
-     
-    private String getAbbr(String word) {
-        if (word == null || word.length() < 3) {
-            return word;
-        }
-         
-        StringBuffer sb = new StringBuffer();
-        sb.append(word.charAt(0));
-        sb.append(word.length() - 2);
-        sb.append(word.charAt(word.length() - 1));
-         
-        return sb.toString();
- 
-    }
-     
-}
- 
- 
-// Your ValidWordAbbr object will be instantiated and called as such:
-// ValidWordAbbr vwa = new ValidWordAbbr(dictionary);
-// vwa.isUnique("Word");
-// vwa.isUnique("anotherWord");
diff --git a/289.game-of-life.65417091.Accepted.leetcode.java b/289.game-of-life.65417091.Accepted.leetcode.java
deleted file mode 100644
index 6c3e080b..00000000
--- ./289.game-of-life.65417091.Accepted.leetcode.java
+++ /dev/null
@@ -1,58 +0,0 @@
-  public class Solution
-  {
-    public void gameOfLife(int[][] board)
-    {
-      int m = board.length;
-      int n = board[0].length;
-      int[] dx = { -1, -1, 0, 1, 1, 1, 0, -1};
-      int[] dy = {0, 1, 1, 1, 0, -1, -1, -1};
-
-      for (int i = 0; i < m; i++)
-      {
-        for (int j = 0; j < n; j++)
-        {
-          int count = 0;
-
-          for (int k = 0; k < 8; k++)
-          {
-            int x = i + dx[k];
-            int y = j + dy[k];
-
-            if (x >= 0 && x < m && y >= 0 && y < n && (board[x][y] & 1) == 1)
-            {
-              count++;
-            }
-          }
-
-          if (count == 3 && (board[i][j] & 1) == 0)
-          {
-            board[i][j] = 2;
-          }
-
-          if (count < 2 && (board[i][j] & 1) == 0)
-          {
-            board[i][j] = 0;
-          }
-
-          if (count >= 2 && count <= 3 && (board[i][j] & 1) == 1)
-          {
-            board[i][j] = 3;
-          }
-
-          if (count > 3 && (board[i][j] & 1) == 1)
-          {
-            board[i][j] = 1;
-          }
-        }
-      }
-
-      for (int i = 0; i < m; i++)
-      {
-        for (int j = 0; j < n; j++)
-        {
-          board[i][j] >>= 1;
-        }
-      }
-    }
-  }
-
diff --git a/29.divide-two-integers.34408631.Wrong-Answer.leetcode.java b/29.divide-two-integers.34408631.Wrong-Answer.leetcode.java
deleted file mode 100644
index 9cc2a8df..00000000
--- ./29.divide-two-integers.34408631.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-  public class Solution
-  {
-    public int divide(int dividend, int divisor)
-    {
-      long a = Math.abs((long) dividend);
-      long b = Math.abs((long) divisor);
-      long result = 0;
-
-      while (a >= b)
-      {
-        long c = b;
-
-        for (int i = 0; a >= c; ++i, c <<= 1)
-        {
-          a -= c;
-          result += 1 << i;
-        }
-      }
-
-      return (int)(((dividend ^ divisor) >>> 31 == 1) ? -result : result);
-    }
-  }
-
diff --git a/29.divide-two-integers.34410484.Accepted.leetcode.java b/29.divide-two-integers.34410484.Accepted.leetcode.java
deleted file mode 100644
index 2f908079..00000000
--- ./29.divide-two-integers.34410484.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-  public class Solution
-  {
-    public int divide(int dividend, int divisor)
-    {
-      if (dividend == Integer.MIN_VALUE && divisor == -1)
-      {
-        return Integer.MAX_VALUE;
-      }
-
-      long a = Math.abs((long) dividend);
-      long b = Math.abs((long) divisor);
-      long result = 0;
-
-      while (a >= b)
-      {
-        long c = b;
-
-        for (int i = 0; a >= c; ++i, c <<= 1)
-        {
-          a -= c;
-          result += 1 << i;
-        }
-      }
-
-      return (int)(((dividend ^ divisor) >>> 31 == 1) ? -result : result);
-    }
-  }
-
diff --git a/29.divide-two-integers.8134925.Accepted.leetcode.java b/29.divide-two-integers.8134925.Accepted.leetcode.java
deleted file mode 100644
index 02ee6d35..00000000
--- ./29.divide-two-integers.8134925.Accepted.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution {
-        public int divide(int dividend, int divisor) {  
-        if(divisor==0)  
-            return Integer.MAX_VALUE;  
-          
-        int res = 0;  
-        if(dividend==Integer.MIN_VALUE)  
-        {  
-            res = 1;  
-            dividend += Math.abs(divisor);  
-        }  
-        if(divisor==Integer.MIN_VALUE)  
-            return res;  
-        boolean isNeg = ((dividend^divisor)>>>31==1)?true:false;  
-        dividend = Math.abs(dividend);  
-        divisor = Math.abs(divisor);  
-        int digit = 0;  
-        while(divisor<=(dividend>>1))  
-        {  
-            divisor <<= 1;  
-            digit++;  
-        }  
-        while(digit>=0)  
-        {  
-            if(dividend>=divisor)  
-            {  
-                dividend -= divisor;  
-                res += 1<<digit;  
-            }  
-            divisor >>= 1;  
-            digit--;  
-        }  
-        return isNeg?-res:res;  
-    }  
-}
diff --git a/29.divide-two-integers.9351195.Accepted.leetcode.java b/29.divide-two-integers.9351195.Accepted.leetcode.java
deleted file mode 100644
index 6cca7bc9..00000000
--- ./29.divide-two-integers.9351195.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-  public class Solution {
-
-    public int divide(int dividend, int divisor) {
-      long a = Math.abs((long) dividend);
-      long b = Math.abs((long) divisor);
-      long result = 0;
-
-      while (a >= b) {
-        long c = b;
-
-        for (int i = 0; a >= c; ++i, c <<= 1) {
-          a -= c;
-          result += 1 << i;
-        }
-      }
-
-      return (int) (((dividend ^ divisor) >>> 31 == 1) ? -result : result);
-    }
-  }
-
diff --git a/290.word-pattern.65261611.Accepted.leetcode.java b/290.word-pattern.65261611.Accepted.leetcode.java
deleted file mode 100644
index 8335f446..00000000
--- ./290.word-pattern.65261611.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-  public class Solution
-  {
-    public boolean wordPattern(String pattern, String str)
-    {
-      String[] words = str.split(" ");
-
-      if (words.length != pattern.length())
-      {
-        return false;
-      }
-
-      Map index = new HashMap();
-
-      for (int i = 0; i < words.length; ++i)
-        if (!Objects.equals(index.put(pattern.charAt(i), i),
-                            index.put(words[i], i)))
-        {
-          return false;
-        }
-
-      return true;
-    }
-  }
-
diff --git a/290.word-pattern.83453685.Accepted.leetcode.java b/290.word-pattern.83453685.Accepted.leetcode.java
deleted file mode 100644
index 3fe90271..00000000
--- ./290.word-pattern.83453685.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public boolean wordPattern(String pattern, String str)
-    {
-        String[] words = str.split(" ");
-
-        if (words.length != pattern.length())
-        {
-            return false;
-        }
-
-        Map index = new HashMap();
-
-        for (int i = 0; i < words.length; ++i)
-        {
-            if (!Objects.equals(index.put(pattern.charAt(i), i),
-                            index.put(words[i], i)))
-            {
-                return false;
-            }    
-        }
-        
-        return true;
-    }
-}
diff --git a/291.word-pattern-ii.71921865.Accepted.leetcode.java b/291.word-pattern-ii.71921865.Accepted.leetcode.java
deleted file mode 100644
index 1e05f924..00000000
--- ./291.word-pattern-ii.71921865.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution {
-    public boolean wordPatternMatch(String pattern, String str) {
-    if(pattern.length()==0 && str.length()==0)
-        return true;
-    if(pattern.length()==0)
-        return false;
- 
-    HashMap<Character, String> map = new HashMap<Character, String>();
-    HashSet<String> set = new HashSet<String>();
-    return helper(pattern, str, 0, 0, map, set);
-}
- 
-public boolean helper(String pattern, String str, int i, int j, HashMap<Character, String> map, HashSet<String> set){
-    if(i==pattern.length() && j==str.length()){
-        return true;
-    }
- 
-    if(i>=pattern.length() || j>=str.length())
-        return false;
- 
-    char c = pattern.charAt(i);
-    for(int k=j+1; k<=str.length(); k++){
-        String sub = str.substring(j, k);
-        if(!map.containsKey(c) && !set.contains(sub)){
-            map.put(c, sub);
-            set.add(sub);
-            if(helper(pattern, str, i+1, k, map, set))
-                return true;
-            map.remove(c);
-            set.remove(sub);
-        }else if(map.containsKey(c) && map.get(c).equals(sub)){
-            if(helper(pattern, str, i+1, k, map, set))
-                return true;
-        }
-    }
- 
-    return false;
-}
-}
diff --git a/292.nim-game.65409668.Accepted.leetcode.java b/292.nim-game.65409668.Accepted.leetcode.java
deleted file mode 100644
index fb0f76bc..00000000
--- ./292.nim-game.65409668.Accepted.leetcode.java
+++ /dev/null
@@ -1,8 +0,0 @@
-  public class Solution
-  {
-    public boolean canWinNim(int n)
-    {
-      return n % 4 > 0;
-    }
-  }
-
diff --git a/293.flip-game.71072360.Accepted.leetcode.java b/293.flip-game.71072360.Accepted.leetcode.java
deleted file mode 100644
index 03329e39..00000000
--- ./293.flip-game.71072360.Accepted.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution {
-    public List<String> generatePossibleNextMoves(String s) {
-    List<String> result = new ArrayList<String>();
- 
-    if(s==null)
-        return result;
- 
-    char[] arr = s.toCharArray();
-    for(int i=0; i<arr.length-1; i++){
-        if(arr[i]==arr[i+1] && arr[i]=='+'){
-            arr[i]='-';
-            arr[i+1]='-';
-            result.add(new String(arr));
-            arr[i]='+';
-            arr[i+1]='+';
-        }
-    }
- 
-    return result;
-}
-}
diff --git a/294.flip-game-ii.71480242.Accepted.leetcode.java b/294.flip-game-ii.71480242.Accepted.leetcode.java
deleted file mode 100644
index 4de3b5d4..00000000
--- ./294.flip-game-ii.71480242.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution {
-    public boolean canWin(String s) {
-        if (s == null || s.length() == 0) {
-            return false;
-        }
-         
-        char[] arr = s.toCharArray();
-         
-        return canWinHelper(arr);
-    }
-     
-    private boolean canWinHelper(char[] arr) {
-        int i = 0;
-         
-        for (i = 0; i < arr.length - 1; i++) {
-            if (arr[i] == '+' && arr[i + 1] == '+') {
-                arr[i] = '-';
-                arr[i + 1] = '-';
-                 
-               boolean win = !canWinHelper(arr);
-                 
-                arr[i] = '+';
-                arr[i + 1] = '+';
-                 
-                if (win) {
-                    return true;
-                }
-            }
-        }
-         
-        return false;
-    }
-}
diff --git a/295.find-median-from-data-stream.92765801.Wrong-Answer.leetcode.java b/295.find-median-from-data-stream.92765801.Wrong-Answer.leetcode.java
deleted file mode 100644
index 057b3fdd..00000000
--- ./295.find-median-from-data-stream.92765801.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-class MedianFinder
-{
-    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>();
-    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(Collections.reverseOrder());
-
-    public void addNum(int num)
-    {
-        minHeap.offer(num);
-        maxHeap.offer(minHeap.poll());
-        
-        while (maxHeap.size() > minHeap.size() + 1)
-        {
-            minHeap.offer(maxHeap.poll());
-        }
-    }
-
-    public double findMedian()
-    {
-        if (maxHeap.size() > minHeap.size())
-        {
-            return maxHeap.peek();
-        }
-        else
-        {
-            return (minHeap.peek() + maxHeap.peek()) / 2;
-        }
-    }
-}
diff --git a/295.find-median-from-data-stream.92769362.Wrong-Answer.leetcode.java b/295.find-median-from-data-stream.92769362.Wrong-Answer.leetcode.java
deleted file mode 100644
index 56e31de6..00000000
--- ./295.find-median-from-data-stream.92769362.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-class MedianFinder
-{
-    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>();
-    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(Collections.reverseOrder());
-
-    public void addNum(int num)
-    {
-        minHeap.offer(num);
-        maxHeap.offer(minHeap.poll());
-        
-        while (maxHeap.size() > minHeap.size() + 1)
-        {
-            minHeap.offer(maxHeap.poll());
-        }
-        
-        print(maxHeap);
-        print(minHeap);
-    }
-
-    public double findMedian()
-    {
-        if (maxHeap.size() > minHeap.size())
-        {
-            return maxHeap.peek();
-        }
-        else
-        {
-            return (minHeap.peek() + maxHeap.peek()) / 2;
-        }
-    }
-    
-    public void print(PriorityQueue heap)
-    {
-        Iterator<Integer> iter = heap.iterator();
-        
-        while (iter.hasNext())
-        {
-            System.out.print(iter.next() + " ");
-        }
-        
-        System.out.println();
-    }
-}
diff --git a/295.find-median-from-data-stream.92769499.Wrong-Answer.leetcode.java b/295.find-median-from-data-stream.92769499.Wrong-Answer.leetcode.java
deleted file mode 100644
index 685b3487..00000000
--- ./295.find-median-from-data-stream.92769499.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-class MedianFinder
-{
-    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>();
-    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(Collections.reverseOrder());
-
-    public void addNum(int num)
-    {
-        minHeap.offer(num);
-        maxHeap.offer(minHeap.poll());
-        
-        while (maxHeap.size() > minHeap.size() + 1)
-        {
-            minHeap.offer(maxHeap.poll());
-        }
-        
-        System.out.println("num --> " + num);
-        print(maxHeap);
-        print(minHeap);
-    }
-
-    public double findMedian()
-    {
-        if (maxHeap.size() > minHeap.size())
-        {
-            return maxHeap.peek();
-        }
-        else
-        {
-            return (minHeap.peek() + maxHeap.peek()) / 2;
-        }
-    }
-    
-    public void print(PriorityQueue heap)
-    {
-        Iterator<Integer> iter = heap.iterator();
-        
-        while (iter.hasNext())
-        {
-            System.out.print(iter.next() + ",");
-        }
-        
-        System.out.println();
-    }
-}
diff --git a/295.find-median-from-data-stream.92770734.Wrong-Answer.leetcode.java b/295.find-median-from-data-stream.92770734.Wrong-Answer.leetcode.java
deleted file mode 100644
index 832f885c..00000000
--- ./295.find-median-from-data-stream.92770734.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-class MedianFinder
-{
-    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>();
-    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(Collections.reverseOrder());
-
-    public void addNum(int num)
-    {
-        minHeap.offer(num);
-        maxHeap.offer(minHeap.poll());
-        
-        System.out.println("maxHeap.peek() --> " + maxHeap.peek());
-        System.out.println("minHeap.peek() --> " + minHeap.peek());
-        
-        while (maxHeap.size() > minHeap.size() + 1)
-        {
-            minHeap.offer(maxHeap.poll());
-        }
-        
-        System.out.println("num --> " + num);
-        print(maxHeap);
-        print(minHeap);
-    }
-
-    public double findMedian()
-    {
-        if (maxHeap.size() > minHeap.size())
-        {
-            return maxHeap.peek();
-        }
-        else
-        {
-            return (minHeap.peek() + maxHeap.peek()) / 2;
-        }
-    }
-    
-    public void print(PriorityQueue heap)
-    {
-        Iterator<Integer> iter = heap.iterator();
-        
-        while (iter.hasNext())
-        {
-            System.out.print(iter.next() + ",");
-        }
-        
-        System.out.println();
-    }
-}
diff --git a/295.find-median-from-data-stream.92770763.Wrong-Answer.leetcode.java b/295.find-median-from-data-stream.92770763.Wrong-Answer.leetcode.java
deleted file mode 100644
index 92031fdf..00000000
--- ./295.find-median-from-data-stream.92770763.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-class MedianFinder
-{
-    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>();
-    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(Collections.reverseOrder());
-
-    public void addNum(int num)
-    {
-        minHeap.offer(num);
-        maxHeap.offer(minHeap.poll());
-        
-        System.out.println("num --> " + num);
-        System.out.println("maxHeap.peek() --> " + maxHeap.peek());
-        System.out.println("minHeap.peek() --> " + minHeap.peek());
-        
-        while (maxHeap.size() > minHeap.size() + 1)
-        {
-            minHeap.offer(maxHeap.poll());
-        }
-
-        print(maxHeap);
-        print(minHeap);
-    }
-
-    public double findMedian()
-    {
-        if (maxHeap.size() > minHeap.size())
-        {
-            return maxHeap.peek();
-        }
-        else
-        {
-            return (minHeap.peek() + maxHeap.peek()) / 2;
-        }
-    }
-    
-    public void print(PriorityQueue heap)
-    {
-        Iterator<Integer> iter = heap.iterator();
-        
-        while (iter.hasNext())
-        {
-            System.out.print(iter.next() + ",");
-        }
-        
-        System.out.println();
-    }
-}
diff --git a/295.find-median-from-data-stream.92771002.Wrong-Answer.leetcode.java b/295.find-median-from-data-stream.92771002.Wrong-Answer.leetcode.java
deleted file mode 100644
index e9da6d6b..00000000
--- ./295.find-median-from-data-stream.92771002.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,46 +0,0 @@
-class MedianFinder
-{
-    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>();
-    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(Collections.reverseOrder());
-
-    public void addNum(int num)
-    {
-        minHeap.offer(num);
-        maxHeap.offer(minHeap.poll());
-        
-        System.out.println("num --> " + num);
-        print(maxHeap);
-        print(minHeap);
-
-        while (maxHeap.size() > minHeap.size() + 1)
-        {
-            minHeap.offer(maxHeap.poll());
-        }
-
-    }
-
-    public double findMedian()
-    {
-        if (maxHeap.size() > minHeap.size())
-        {
-            return maxHeap.peek();
-        }
-        else
-        {
-            return (minHeap.peek() + maxHeap.peek()) / 2;
-        }
-    }
-    
-    public void print(PriorityQueue heap)
-    {
-        System.out.println("heap.peek() --> " + heap.peek());
-        Iterator<Integer> iter = heap.iterator();
-        
-        while (iter.hasNext())
-        {
-            System.out.print(iter.next() + ",");
-        }
-        
-        System.out.println();
-    }
-}
diff --git a/295.find-median-from-data-stream.92771232.Wrong-Answer.leetcode.java b/295.find-median-from-data-stream.92771232.Wrong-Answer.leetcode.java
deleted file mode 100644
index 1cf4162c..00000000
--- ./295.find-median-from-data-stream.92771232.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,46 +0,0 @@
-class MedianFinder
-{
-    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>();
-    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(Collections.reverseOrder());
-
-    public void addNum(int num)
-    {
-        minHeap.offer(num);
-        maxHeap.offer(minHeap.poll());
-        
-        System.out.println("num --> " + num);
-        print(maxHeap);
-        print(minHeap);
-
-        while (maxHeap.size() > minHeap.size() + 1)
-        {
-            minHeap.offer(maxHeap.poll());
-        }
-
-    }
-
-    public double findMedian()
-    {
-        if (maxHeap.size() > minHeap.size())
-        {
-            return maxHeap.peek();
-        }
-        else
-        {
-            return (minHeap.peek() + maxHeap.peek()) / 2;
-        }
-    }
-    
-    public void print(PriorityQueue heap)
-    {
-        System.out.println("heap.peek() --> " + heap.peek());
-        Iterator<Integer> iter = heap.iterator();
-        
-        while (iter.hasNext())
-        {
-            System.out.print(iter.next() + ",");
-        }
-        
-        System.out.println();
-    }
-}
diff --git a/295.find-median-from-data-stream.92771386.Wrong-Answer.leetcode.java b/295.find-median-from-data-stream.92771386.Wrong-Answer.leetcode.java
deleted file mode 100644
index 92b71dea..00000000
--- ./295.find-median-from-data-stream.92771386.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-class MedianFinder
-{
-    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>();
-    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(Collections.reverseOrder());
-
-    public void addNum(int num)
-    {
-        minHeap.offer(num);
-        maxHeap.offer(minHeap.poll());
-        
-        
-        while (maxHeap.size() > minHeap.size() + 1)
-        {
-            minHeap.offer(maxHeap.poll());
-        }
-
-        System.out.println("num --> " + num);
-        print(maxHeap);
-        print(minHeap);
-
-    }
-
-    public double findMedian()
-    {
-        if (maxHeap.size() > minHeap.size())
-        {
-            return maxHeap.peek();
-        }
-        else
-        {
-            return (minHeap.peek() + maxHeap.peek()) / 2;
-        }
-    }
-    
-    public void print(PriorityQueue heap)
-    {
-        System.out.println("heap.peek() --> " + heap.peek());
-        Iterator<Integer> iter = heap.iterator();
-        
-        while (iter.hasNext())
-        {
-            System.out.print(iter.next() + ",");
-        }
-        
-        System.out.println();
-    }
-}
diff --git a/295.find-median-from-data-stream.92771631.Time-Limit-Exceeded.leetcode.java b/295.find-median-from-data-stream.92771631.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 94ea48d6..00000000
--- ./295.find-median-from-data-stream.92771631.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-class MedianFinder
-{
-    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>();
-    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(Collections.reverseOrder());
-
-    public void addNum(int num)
-    {
-        minHeap.offer(num);
-        maxHeap.offer(minHeap.poll());
-        
-        
-        while (maxHeap.size() > minHeap.size() + 1)
-        {
-            minHeap.offer(maxHeap.poll());
-        }
-
-        System.out.println("num --> " + num);
-        print(maxHeap);
-        print(minHeap);
-
-    }
-
-    public double findMedian()
-    {
-        if (maxHeap.size() > minHeap.size())
-        {
-            return maxHeap.peek();
-        }
-        else
-        {
-            return ((double)minHeap.peek() + (double)maxHeap.peek()) / 2;
-        }
-    }
-    
-    public void print(PriorityQueue heap)
-    {
-        System.out.println("heap.peek() --> " + heap.peek());
-        Iterator<Integer> iter = heap.iterator();
-        
-        while (iter.hasNext())
-        {
-            System.out.print(iter.next() + ",");
-        }
-        
-        System.out.println();
-    }
-}
diff --git a/295.find-median-from-data-stream.92771892.Accepted.leetcode.java b/295.find-median-from-data-stream.92771892.Accepted.leetcode.java
deleted file mode 100644
index 75e722e9..00000000
--- ./295.find-median-from-data-stream.92771892.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-class MedianFinder
-{
-    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>();
-    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(Collections.reverseOrder());
-
-    public void addNum(int num)
-    {
-        minHeap.offer(num);
-        maxHeap.offer(minHeap.poll());
-        
-        while (maxHeap.size() > minHeap.size() + 1)
-        {
-            minHeap.offer(maxHeap.poll());
-        }
-    }
-
-    public double findMedian()
-    {
-        if (maxHeap.size() > minHeap.size())
-        {
-            return maxHeap.peek();
-        }
-        else
-        {
-            return ((double)minHeap.peek() + (double)maxHeap.peek()) / 2;
-        }
-    }
-    
-    public void print(PriorityQueue heap)
-    {
-        System.out.println("heap.peek() --> " + heap.peek());
-        Iterator<Integer> iter = heap.iterator();
-        
-        while (iter.hasNext())
-        {
-            System.out.print(iter.next() + ",");
-        }
-        
-        System.out.println();
-    }
-}
diff --git a/295.find-median-from-data-stream.92771936.Accepted.leetcode.java b/295.find-median-from-data-stream.92771936.Accepted.leetcode.java
deleted file mode 100644
index 7a447ab0..00000000
--- ./295.find-median-from-data-stream.92771936.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-class MedianFinder
-{
-    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>();
-    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(Collections.reverseOrder());
-
-    public void addNum(int num)
-    {
-        minHeap.offer(num);
-        maxHeap.offer(minHeap.poll());
-        
-        while (maxHeap.size() > minHeap.size() + 1)
-        {
-            minHeap.offer(maxHeap.poll());
-        }
-    }
-
-    public double findMedian()
-    {
-        if (maxHeap.size() > minHeap.size())
-        {
-            return maxHeap.peek();
-        }
-        else
-        {
-            return ((double)minHeap.peek() + (double)maxHeap.peek()) / 2;
-        }
-    }
-}
diff --git a/296.best-meeting-point.71857514.Accepted.leetcode.java b/296.best-meeting-point.71857514.Accepted.leetcode.java
deleted file mode 100644
index c9d3c7d7..00000000
--- ./296.best-meeting-point.71857514.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution {
-    public int minTotalDistance(int[][] grid) {
-    int m=grid.length;
-    int n=grid[0].length;
- 
-    ArrayList<Integer> cols = new ArrayList<Integer>();
-    ArrayList<Integer> rows = new ArrayList<Integer>();
-    for(int i=0; i<m; i++){
-        for(int j=0; j<n; j++){
-           if(grid[i][j]==1){
-               cols.add(j);
-               rows.add(i);
-           }
-        }
-    }
- 
-    int sum=0;
- 
-    for(Integer i: rows){
-        sum += Math.abs(i - rows.get(rows.size()/2));    
-    }
- 
-    Collections.sort(cols);
- 
-    for(Integer i: cols){
-        sum+= Math.abs(i-cols.get(cols.size()/2));
-    }
- 
-    return sum;
-}
-}
diff --git a/296.best-meeting-point.94482375.Accepted.leetcode.java b/296.best-meeting-point.94482375.Accepted.leetcode.java
deleted file mode 100644
index 1c783620..00000000
--- ./296.best-meeting-point.94482375.Accepted.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class Solution
-{
-    public int minTotalDistance(int[][] grid)
-    {
-        int m = grid.length;
-        int n = grid[0].length;
-        ArrayList<Integer> cols = new ArrayList<Integer>();
-        ArrayList<Integer> rows = new ArrayList<Integer>();
-
-        for (int i = 0; i < m; i++)
-        {
-            for (int j = 0; j < n; j++)
-            {
-                if (grid[i][j] == 1)
-                {
-                    cols.add(j);
-                    rows.add(i);
-                }
-            }
-        }
-
-        int sum = 0;
-
-        for (Integer i : rows)
-        {
-            sum += Math.abs(i - rows.get(rows.size() / 2));
-        }
-
-        Collections.sort(cols);
-
-        for (Integer i : cols)
-        {
-            sum += Math.abs(i - cols.get(cols.size() / 2));
-        }
-
-        return sum;
-    }
-}
diff --git a/296.best-meeting-point.95035526.Wrong-Answer.leetcode.java b/296.best-meeting-point.95035526.Wrong-Answer.leetcode.java
deleted file mode 100644
index c4a22369..00000000
--- ./296.best-meeting-point.95035526.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public int minTotalDistance(int[][] grid)
-    {
-        int m = grid.length;
-        int n = grid[0].length;
-        ArrayList<Integer> cols = new ArrayList<Integer>();
-        ArrayList<Integer> rows = new ArrayList<Integer>();
-
-        for (int i = 0; i < m; i++)
-        {
-            for (int j = 0; j < n; j++)
-            {
-                if (grid[i][j] == 1)
-                {
-                    cols.add(j);
-                    rows.add(i);
-                }
-            }
-        }
-
-        int sum = 0;
-
-        for (Integer i : rows)
-        {
-            sum += Math.abs(i - rows.get(rows.size() / 2));
-        }
-
-        for (Integer i : cols)
-        {
-            sum += Math.abs(i - cols.get(cols.size() / 2));
-        }
-
-        return sum;
-    }
-}
diff --git a/296.best-meeting-point.95123437.Accepted.leetcode.java b/296.best-meeting-point.95123437.Accepted.leetcode.java
deleted file mode 100644
index 3deeffb6..00000000
--- ./296.best-meeting-point.95123437.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public int minTotalDistance(int[][] grid)
-    {
-        int m = grid.length;
-        int n = grid[0].length;
-        ArrayList<Integer> cols = new ArrayList<Integer>();
-        ArrayList<Integer> rows = new ArrayList<Integer>();
-
-        for (int i = 0; i < m; i++)
-        {
-            for (int j = 0; j < n; j++)
-            {
-                if (grid[i][j] == 1)
-                {
-                    rows.add(i);
-                    cols.add(j);
-                }
-            }
-        }
-        
-        Collections.sort(cols);
-        int sum = 0;
-        
-        for (int i = 0; i < rows.size(); i++)
-        {
-            sum += Math.abs(rows.get(i) - rows.get(rows.size() / 2));
-        }
-        
-        for (int i = 0; i < cols.size(); i++)
-        {
-            sum += Math.abs(cols.get(i) - cols.get(cols.size() / 2));
-        }
-        
-        return sum;
-    }
-}
diff --git a/296.best-meeting-point.95790290.Wrong-Answer.leetcode.java b/296.best-meeting-point.95790290.Wrong-Answer.leetcode.java
deleted file mode 100644
index f28b8ad0..00000000
--- ./296.best-meeting-point.95790290.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public int minTotalDistance(int[][] grid)
-    {
-        int m = grid.length;
-        int n = grid[0].length;
-        List<Integer> rows = new ArrayList<Integer>();
-        List<Integer> cols = new ArrayList<Integer>();
-
-        for (int i = 0; i < m; i++)
-        {
-            for (int j = 0; j < n; j++)
-            {
-                if (grid[i][j] == 0)
-                {
-                    rows.add(i);
-                    cols.add(j);
-                }
-            }
-        }
-        
-        Collections.sort(cols);
-        int sum = 0;
-        
-        for (int i = 0; i < rows.size(); i++)
-        {
-            sum += Math.abs(rows.get(i) - rows.get(rows.size() / 2));
-        }
-        
-        for (int i = 0; i < cols.size(); i++)
-        {
-            sum += Math.abs(cols.get(i) - cols.get(cols.size() / 2));
-        }
-        
-        return sum;
-    }
-}
diff --git a/296.best-meeting-point.95791839.Accepted.leetcode.java b/296.best-meeting-point.95791839.Accepted.leetcode.java
deleted file mode 100644
index 59f61f67..00000000
--- ./296.best-meeting-point.95791839.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public int minTotalDistance(int[][] grid)
-    {
-        int m = grid.length;
-        int n = grid[0].length;
-        List<Integer> rows = new ArrayList<Integer>();
-        List<Integer> cols = new ArrayList<Integer>();
-
-        for (int i = 0; i < m; i++)
-        {
-            for (int j = 0; j < n; j++)
-            {
-                if (grid[i][j] == 1)
-                {
-                    rows.add(i);
-                    cols.add(j);
-                }
-            }
-        }
-        
-        Collections.sort(cols);
-        int sum = 0;
-        
-        for (int i = 0; i < rows.size(); i++)
-        {
-            sum += Math.abs(rows.get(i) - rows.get(rows.size() / 2));
-        }
-        
-        for (int i = 0; i < cols.size(); i++)
-        {
-            sum += Math.abs(cols.get(i) - cols.get(cols.size() / 2));
-        }
-        
-        return sum;
-    }
-}
diff --git a/298.binary-tree-longest-consecutive-sequence.102449829.Accepted.leetcode.java b/298.binary-tree-longest-consecutive-sequence.102449829.Accepted.leetcode.java
deleted file mode 100644
index 19b5e0a2..00000000
--- ./298.binary-tree-longest-consecutive-sequence.102449829.Accepted.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public int longestConsecutive(TreeNode root) 
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-        
-        return longestConsecutive(root, 0, root.val - 1);
-    }
-    
-    public int longestConsecutive(TreeNode root, int len, int preVal)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-        
-        if (preVal + 1 == root.val)
-        {
-            len++;
-        }
-        else
-        {
-            len = 1;
-        }
-        
-        int result = Math.max(longestConsecutive(root.left, len, root.val),
-                                longestConsecutive(root.right, len, root.val));
-        
-        return Math.max(result, len);
-    }
-}
diff --git a/298.binary-tree-longest-consecutive-sequence.94674796.Runtime-Error.leetcode.java b/298.binary-tree-longest-consecutive-sequence.94674796.Runtime-Error.leetcode.java
deleted file mode 100644
index db8961d3..00000000
--- ./298.binary-tree-longest-consecutive-sequence.94674796.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public int longestConsecutive(TreeNode root) 
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-        
-        return longestConsecutive(root, 0, root.val - 1);
-    }
-    
-    public int longestConsecutive(TreeNode root, int len, int preVal)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-        
-        if (preVal + 1 == root.val)
-        {
-            len++;
-            System.out.println("root.val --> " + root.val);
-            System.out.println("len --> " + len);
-        }
-        else
-        {
-            len = 0;
-        }
-        
-        int result = Math.max(longestConsecutive(root.left, len, root.val),
-                                longestConsecutive(root.right, len, root.val));
-        
-        return Math.max(result, len);
-    }
-}
diff --git a/298.binary-tree-longest-consecutive-sequence.94674906.Wrong-Answer.leetcode.java b/298.binary-tree-longest-consecutive-sequence.94674906.Wrong-Answer.leetcode.java
deleted file mode 100644
index 554a6e6b..00000000
--- ./298.binary-tree-longest-consecutive-sequence.94674906.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public int longestConsecutive(TreeNode root) 
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-        
-        return longestConsecutive(root, 0, root.val - 1);
-    }
-    
-    public int longestConsecutive(TreeNode root, int len, int preVal)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-        
-        if (preVal + 1 == root.val)
-        {
-            len++;
-        }
-        else
-        {
-            len = 0;
-        }
-        
-        int result = Math.max(longestConsecutive(root.left, len, root.val),
-                                longestConsecutive(root.right, len, root.val));
-        
-        return Math.max(result, len);
-    }
-}
diff --git a/298.binary-tree-longest-consecutive-sequence.94675747.Runtime-Error.leetcode.java b/298.binary-tree-longest-consecutive-sequence.94675747.Runtime-Error.leetcode.java
deleted file mode 100644
index 2fa06515..00000000
--- ./298.binary-tree-longest-consecutive-sequence.94675747.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public int longestConsecutive(TreeNode root) 
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-        
-        return longestConsecutive(root, 0, root.val - 1);
-    }
-    
-    public int longestConsecutive(TreeNode root, int len, int preVal)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-        
-        if (preVal + 1 == root.val)
-        {
-            len++;
-        }
-        else
-        {
-            len = 0;
-        }
-        
-        int result = Math.max(longestConsecutive(root.left, len, root.val),
-                                longestConsecutive(root.right, len, root.val));
-        
-        System.out.println("root.val --> " + root.val);
-        System.out.println("len --> " + len);
-        return Math.max(result, len);
-    }
-}
diff --git a/298.binary-tree-longest-consecutive-sequence.94675782.Wrong-Answer.leetcode.java b/298.binary-tree-longest-consecutive-sequence.94675782.Wrong-Answer.leetcode.java
deleted file mode 100644
index d54603a8..00000000
--- ./298.binary-tree-longest-consecutive-sequence.94675782.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public int longestConsecutive(TreeNode root) 
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-        
-        return longestConsecutive(root, 0, root.val - 1);
-    }
-    
-    public int longestConsecutive(TreeNode root, int len, int preVal)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-        
-        if (preVal + 1 == root.val)
-        {
-            len++;
-        }
-        else
-        {
-            len = 0;
-        }
-        
-        int result = Math.max(longestConsecutive(root.left, len, root.val),
-                                longestConsecutive(root.right, len, root.val));
-        return Math.max(result, len);
-    }
-}
diff --git a/298.binary-tree-longest-consecutive-sequence.94675867.Accepted.leetcode.java b/298.binary-tree-longest-consecutive-sequence.94675867.Accepted.leetcode.java
deleted file mode 100644
index 9246209a..00000000
--- ./298.binary-tree-longest-consecutive-sequence.94675867.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public int longestConsecutive(TreeNode root) 
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-        
-        return longestConsecutive(root, 0, root.val - 1);
-    }
-    
-    public int longestConsecutive(TreeNode root, int len, int preVal)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-        
-        if (preVal + 1 == root.val)
-        {
-            len++;
-        }
-        else
-        {
-            len = 1;
-        }
-        
-        int result = Math.max(longestConsecutive(root.left, len, root.val),
-                                longestConsecutive(root.right, len, root.val));
-        return Math.max(result, len);
-    }
-}
diff --git a/299.bulls-and-cows.65419587.Accepted.leetcode.java b/299.bulls-and-cows.65419587.Accepted.leetcode.java
deleted file mode 100644
index 02b7c29e..00000000
--- ./299.bulls-and-cows.65419587.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-  public class Solution
-  {
-    public String getHint(String secret, String guess)
-    {
-      int countBull = 0;
-      int countCow = 0;
-      int[] arr1 = new int[10];
-      int[] arr2 = new int[10];
-
-      for (int i = 0; i < secret.length(); i++)
-      {
-        char c1 = secret.charAt(i);
-        char c2 = guess.charAt(i);
-
-        if (c1 == c2)
-        {
-          countBull++;
-        }
-        else
-        {
-          arr1[c1 - '0']++;
-          arr2[c2 - '0']++;
-        }
-      }
-
-      for (int i = 0; i < 10; i++)
-      {
-        countCow += Math.min(arr1[i], arr2[i]);
-      }
-
-      return countBull + "A" + countCow + "B";
-    }
-  }
-
diff --git a/3.longest-substring-without-repeating-characters.46903517.Accepted.leetcode.java b/3.longest-substring-without-repeating-characters.46903517.Accepted.leetcode.java
deleted file mode 100644
index 932ff26d..00000000
--- ./3.longest-substring-without-repeating-characters.46903517.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-  public class Solution
-  {
-    public int lengthOfLongestSubstring(String s)
-    {
-      int[] prevPos = new int[Character.MAX_VALUE + 1];
-      Arrays.fill(prevPos, -1);
-      int begin = 0;
-      int maxLen = 0;
-
-      for (int index = 0; index < s.length(); index++)
-      {
-        begin = Math.max(begin, prevPos[s.charAt(index)] + 1);
-        maxLen = Math.max(maxLen, index - begin + 1);
-        prevPos[s.charAt(index)] = index;
-      }
-
-      return maxLen;
-    }
-  }
-
diff --git a/3.longest-substring-without-repeating-characters.79814643.Accepted.leetcode.java b/3.longest-substring-without-repeating-characters.79814643.Accepted.leetcode.java
deleted file mode 100644
index 56b74580..00000000
--- ./3.longest-substring-without-repeating-characters.79814643.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution 
-{
-    public int lengthOfLongestSubstring(String s) 
-    {
-        if(s == null || s.length() == 0)    
-        {
-            return 0;
-        }
-        
-        int[] map = new int[256];
-        int left = 0,right = 0, ans = 0;
-        
-        while(right < s.length())
-        {
-            while(right < s.length() && map[s.charAt(right)] == 0)
-            {
-                map[s.charAt(right)] = 1;
-                ans = Math.max(ans, right - left + 1);
-                right++;
-            }
-            
-            map[s.charAt(left++)] = 0;
-        }
-        
-        return ans;
-    }
-}
diff --git a/3.longest-substring-without-repeating-characters.8745359.Time-Limit-Exceeded.leetcode.java b/3.longest-substring-without-repeating-characters.8745359.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index fd126dca..00000000
--- ./3.longest-substring-without-repeating-characters.8745359.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-  public class Solution {
-
-    public int lengthOfLongestSubstring(String s) {
-      int[] prevPos = new int[Character.MAX_VALUE + 1];
-      Arrays.fill(prevPos, -1);
-      int substringBegin = 0;
-      int maxSubstringLen = 0;
-
-      for (int i = 0; i < s.length(); i++) {
-        substringBegin = Math.max(substringBegin, prevPos[s.charAt(i)] + 1);
-        prevPos[s.charAt(i)] = i;
-        maxSubstringLen = Math.max(maxSubstringLen, i - substringBegin + 1);
-      }
-
-      return maxSubstringLen;
-    }
-  }
-
diff --git a/300.longest-increasing-subsequence.102365730.Accepted.leetcode.java b/300.longest-increasing-subsequence.102365730.Accepted.leetcode.java
deleted file mode 100644
index 5f76633b..00000000
--- ./300.longest-increasing-subsequence.102365730.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution
-{
-    public int lengthOfLIS(int[] nums)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return 0;
-        }
-
-        ArrayList<Integer> list = new ArrayList<Integer>();
-
-        for (int num : nums)
-        {
-            if (list.size() == 0)
-            {
-                list.add(num);
-            }
-            else if (num > list.get(list.size() - 1))
-            {
-                list.add(num);
-            }
-            else
-            {
-                int i = 0;
-                int j = list.size() - 1;
-
-                while (i < j)
-                {
-                    int mid = (i + j) / 2;
-
-                    if (list.get(mid) < num)
-                    {
-                        i = mid + 1;
-                    }
-                    else
-                    {
-                        j = mid;
-                    }
-                }
-
-                list.set(j, num);
-            }
-        }
-
-        return list.size();
-    }
-}
diff --git a/300.longest-increasing-subsequence.102368051.Wrong-Answer.leetcode.java b/300.longest-increasing-subsequence.102368051.Wrong-Answer.leetcode.java
deleted file mode 100644
index e61397c6..00000000
--- ./300.longest-increasing-subsequence.102368051.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution
-{
-    public int lengthOfLIS(int[] nums)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return 0;
-        }
-
-        ArrayList<Integer> list = new ArrayList<Integer>();
-
-        for (int num : nums)
-        {
-            if (list.size() == 0)
-            {
-                list.add(num);
-            }
-            else if (num > list.get(list.size() - 1))
-            {
-                list.add(num);
-            }
-            else
-            {
-                int i = 0;
-                int j = list.size() - 1;
-
-                while (i + 1 < j)
-                {
-                    int mid = (i + j) / 2;
-
-                    if (list.get(mid) < num)
-                    {
-                        i = mid;
-                    }
-                    else
-                    {
-                        j = mid;
-                    }
-                }
-
-                list.set(list.get(i) > num ? i : j, num);
-            }
-        }
-
-        return list.size();
-    }
-}
diff --git a/300.longest-increasing-subsequence.102368229.Accepted.leetcode.java b/300.longest-increasing-subsequence.102368229.Accepted.leetcode.java
deleted file mode 100644
index cc098f7c..00000000
--- ./300.longest-increasing-subsequence.102368229.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution
-{
-    public int lengthOfLIS(int[] nums)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return 0;
-        }
-
-        ArrayList<Integer> list = new ArrayList<Integer>();
-
-        for (int num : nums)
-        {
-            if (list.size() == 0)
-            {
-                list.add(num);
-            }
-            else if (num > list.get(list.size() - 1))
-            {
-                list.add(num);
-            }
-            else
-            {
-                int i = 0;
-                int j = list.size() - 1;
-
-                while (i + 1 < j)
-                {
-                    int mid = (i + j) / 2;
-
-                    if (list.get(mid) < num)
-                    {
-                        i = mid;
-                    }
-                    else
-                    {
-                        j = mid;
-                    }
-                }
-
-                list.set(list.get(i) >= num ? i : j, num);
-            }
-        }
-
-        return list.size();
-    }
-}
diff --git a/300.longest-increasing-subsequence.102368701.Runtime-Error.leetcode.java b/300.longest-increasing-subsequence.102368701.Runtime-Error.leetcode.java
deleted file mode 100644
index ae2013e7..00000000
--- ./300.longest-increasing-subsequence.102368701.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution
-{
-    public int lengthOfLIS(int[] nums)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return 0;
-        }
-
-        ArrayList<Integer> list = new ArrayList<Integer>();
-
-        for (int num : nums)
-        {
-            if (list.size() == 0)
-            {
-                list.add(num);
-            }
-            else if (num > list.get(list.size()))
-            {
-                list.add(num);
-            }
-            else
-            {
-                int i = 0;
-                int j = list.size() - 1;
-
-                while (i + 1 < j)
-                {
-                    int mid = (i + j) / 2;
-
-                    if (list.get(mid) < num)
-                    {
-                        i = mid;
-                    }
-                    else
-                    {
-                        j = mid;
-                    }
-                }
-
-                list.set(list.get(i) >= num ? i : j, num);
-            }
-        }
-
-        return list.size();
-    }
-}
diff --git a/300.longest-increasing-subsequence.102368744.Accepted.leetcode.java b/300.longest-increasing-subsequence.102368744.Accepted.leetcode.java
deleted file mode 100644
index 69f058c3..00000000
--- ./300.longest-increasing-subsequence.102368744.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution
-{
-    public int lengthOfLIS(int[] nums)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return 0;
-        }
-
-        ArrayList<Integer> list = new ArrayList<Integer>();
-
-        for (int num : nums)
-        {
-            if (list.size() == 0)
-            {
-                list.add(num);
-            }
-            else if (num > list.get(list.size() - 1))
-            {
-                list.add(num);
-            }
-            else
-            {
-                int i = 0;
-                int j = list.size();
-
-                while (i + 1 < j)
-                {
-                    int mid = (i + j) / 2;
-
-                    if (list.get(mid) < num)
-                    {
-                        i = mid;
-                    }
-                    else
-                    {
-                        j = mid;
-                    }
-                }
-
-                list.set(list.get(i) >= num ? i : j, num);
-            }
-        }
-
-        return list.size();
-    }
-}
diff --git a/300.longest-increasing-subsequence.102368762.Accepted.leetcode.java b/300.longest-increasing-subsequence.102368762.Accepted.leetcode.java
deleted file mode 100644
index 4231935c..00000000
--- ./300.longest-increasing-subsequence.102368762.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution
-{
-    public int lengthOfLIS(int[] nums)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return 0;
-        }
-
-        ArrayList<Integer> list = new ArrayList<Integer>();
-
-        for (int num : nums)
-        {
-            if (list.size() == 0)
-            {
-                list.add(num);
-            }
-            else if (num > list.get(list.size() - 1))
-            {
-                list.add(num);
-            }
-            else
-            {
-                int i = 0;
-                int j = list.size();
-
-                while (i + 1 < j)
-                {
-                    int mid = (i + j) / 2;
-
-                    if (list.get(mid) <= num)
-                    {
-                        i = mid;
-                    }
-                    else
-                    {
-                        j = mid;
-                    }
-                }
-
-                list.set(list.get(i) >= num ? i : j, num);
-            }
-        }
-
-        return list.size();
-    }
-}
diff --git a/300.longest-increasing-subsequence.102368806.Accepted.leetcode.java b/300.longest-increasing-subsequence.102368806.Accepted.leetcode.java
deleted file mode 100644
index eb531385..00000000
--- ./300.longest-increasing-subsequence.102368806.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution
-{
-    public int lengthOfLIS(int[] nums)
-    {
-        ArrayList<Integer> list = new ArrayList<Integer>();
-
-        for (int num : nums)
-        {
-            if (list.size() == 0)
-            {
-                list.add(num);
-            }
-            else if (num > list.get(list.size() - 1))
-            {
-                list.add(num);
-            }
-            else
-            {
-                int i = 0;
-                int j = list.size();
-
-                while (i + 1 < j)
-                {
-                    int mid = (i + j) / 2;
-
-                    if (list.get(mid) <= num)
-                    {
-                        i = mid;
-                    }
-                    else
-                    {
-                        j = mid;
-                    }
-                }
-
-                list.set(list.get(i) >= num ? i : j, num);
-            }
-        }
-
-        return list.size();
-    }
-}
diff --git a/300.longest-increasing-subsequence.102368849.Runtime-Error.leetcode.java b/300.longest-increasing-subsequence.102368849.Runtime-Error.leetcode.java
deleted file mode 100644
index dc50cfe5..00000000
--- ./300.longest-increasing-subsequence.102368849.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution
-{
-    public int lengthOfLIS(int[] nums)
-    {
-        ArrayList<Integer> list = new ArrayList<Integer>();
-
-        for (int num : nums)
-        {
-            if (list.size() == 0)
-            {
-                list.add(num);
-            }
-            else if (num > list.get(list.size() - 1))
-            {
-                list.add(num);
-            }
-            else
-            {
-                int i = 0;
-                int j = list.size();
-
-                while (i + 1 < j)
-                {
-                    int mid = (i + j) / 2;
-
-                    if (list.get(mid) <= num)
-                    {
-                        i = mid;
-                    }
-                    else
-                    {
-                        j = mid;
-                    }
-                }
-
-                list.set(list.get(j) >= num ? j : i, num);
-            }
-        }
-
-        return list.size();
-    }
-}
diff --git a/301.remove-invalid-parentheses.65181344.Accepted.leetcode.java b/301.remove-invalid-parentheses.65181344.Accepted.leetcode.java
deleted file mode 100644
index b5b78a2b..00000000
--- ./301.remove-invalid-parentheses.65181344.Accepted.leetcode.java
+++ /dev/null
@@ -1,57 +0,0 @@
-  public class Solution
-  {
-    private List<String> res = new ArrayList<String>();
-    private int max = 0;
-    public List<String> removeInvalidParentheses(String s)
-    {
-      dfs(s, "", 0, 0);
-
-      if (res.size() == 0)
-      {
-        res.add("");
-      }
-
-      return res;
-    }
-
-    private void dfs(String str, String subRes, int countLeft, int maxLeft)
-    {
-      if (str.length() == 0)
-      {
-        if (countLeft == 0 && subRes.length() != 0)
-        {
-          if (maxLeft > max)
-          {
-            max = maxLeft;
-          }
-
-          if (max == maxLeft && !res.contains(subRes))
-          {
-            res.add(subRes.toString());
-          }
-        }
-
-        return;
-      }
-
-      if (str.charAt(0) == '(')
-      {
-        dfs(str.substring(1), subRes.concat("("), countLeft + 1, maxLeft + 1);
-        dfs(str.substring(1), subRes, countLeft, maxLeft);
-      }
-      else if (str.charAt(0) == ')')
-      {
-        if (countLeft > 0)
-        {
-          dfs(str.substring(1), subRes.concat(")"), countLeft - 1, maxLeft);
-        }
-
-        dfs(str.substring(1), subRes, countLeft, maxLeft);
-      }
-      else
-      {
-        dfs(str.substring(1), subRes.concat(String.valueOf(str.charAt(0))), countLeft, maxLeft);
-      }
-    }
-  }
-
diff --git a/301.remove-invalid-parentheses.85234116.Accepted.leetcode.java b/301.remove-invalid-parentheses.85234116.Accepted.leetcode.java
deleted file mode 100644
index d36bc9d5..00000000
--- ./301.remove-invalid-parentheses.85234116.Accepted.leetcode.java
+++ /dev/null
@@ -1,56 +0,0 @@
-public class Solution
-{
-    private List<String> res = new ArrayList<String>();
-    private int max = 0;
-    public List<String> removeInvalidParentheses(String s)
-    {
-        dfs(s, "", 0, 0);
-
-        if (res.size() == 0)
-        {
-            res.add("");
-        }
-
-        return res;
-    }
-
-    private void dfs(String str, String subRes, int countLeft, int maxLeft)
-    {
-        if (str.length() == 0)
-        {
-            if (countLeft == 0 && subRes.length() != 0)
-            {
-                if (maxLeft > max)
-                {
-                    max = maxLeft;
-                }
-
-                if (max == maxLeft && !res.contains(subRes))
-                {
-                    res.add(subRes.toString());
-                }
-            }
-
-            return;
-        }
-
-        if (str.charAt(0) == '(')
-        {
-            dfs(str.substring(1), subRes.concat("("), countLeft + 1, maxLeft + 1);
-            dfs(str.substring(1), subRes, countLeft, maxLeft);
-        }
-        else if (str.charAt(0) == ')')
-        {
-            if (countLeft > 0)
-            {
-                dfs(str.substring(1), subRes.concat(")"), countLeft - 1, maxLeft);
-            }
-
-            dfs(str.substring(1), subRes, countLeft, maxLeft);
-        }
-        else
-        {
-            dfs(str.substring(1), subRes.concat(String.valueOf(str.charAt(0))), countLeft, maxLeft);
-        }
-    }
-}
diff --git a/302.smallest-rectangle-enclosing-black-pixels.71487366.Accepted.leetcode.java b/302.smallest-rectangle-enclosing-black-pixels.71487366.Accepted.leetcode.java
deleted file mode 100644
index f6cfb371..00000000
--- ./302.smallest-rectangle-enclosing-black-pixels.71487366.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution {
-    public int minArea(char[][] image, int x, int y) {
-        if(image == null || image.length == 0) {
-            return 0;
-        }
-        int rowNum = image.length, colNum = image[0].length;
-        int left = binarySearch(image, 0, y, 0, rowNum, true, true);
-        int right = binarySearch(image, y + 1, colNum, 0, rowNum, true, false);
-        int top = binarySearch(image, 0, x, left, right, false, true);
-        int bot = binarySearch(image, x + 1, rowNum, left, right, false, false);
-        
-        return (right - left) * (bot - top);
-    }
-    
-    private int binarySearch(char[][] image, int lo, int hi, int min, int max, boolean searchHorizontal, boolean searchLo) {
-        while(lo < hi) {
-            int mid = lo + (hi - lo) / 2;
-            boolean hasBlackPixel = false;
-            for(int i = min; i < max; i++) {
-                if((searchHorizontal ? image[i][mid] : image[mid][i]) == '1') {
-                    hasBlackPixel = true;
-                    break;
-                }
-            }
-            if(hasBlackPixel == searchLo) {
-                hi = mid;
-            } else {
-                lo = mid + 1;
-            }
-        }
-        return lo;
-    }
-}
diff --git a/303.range-sum-query-immutable.102674440.Runtime-Error.leetcode.java b/303.range-sum-query-immutable.102674440.Runtime-Error.leetcode.java
deleted file mode 100644
index 95a8c1f1..00000000
--- ./303.range-sum-query-immutable.102674440.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class NumArray
-{
-    private int[] nums;
-
-    public NumArray(int[] nums)
-    {
-        this.nums = nums;
-
-        for (int i = 1; i < nums.length; i++)
-        {
-            nums[i] += nums[i - 1];
-        }   
-    }
-
-    public int sumRange(int i, int j)
-    {
-        return nums[j] - nums[i - 1];
-    }
-}
diff --git a/303.range-sum-query-immutable.102674539.Accepted.leetcode.java b/303.range-sum-query-immutable.102674539.Accepted.leetcode.java
deleted file mode 100644
index c57fbce7..00000000
--- ./303.range-sum-query-immutable.102674539.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class NumArray
-{
-    private int[] nums;
-
-    public NumArray(int[] nums)
-    {
-        this.nums = nums;
-
-        for (int i = 1; i < nums.length; i++)
-        {
-            nums[i] += nums[i - 1];
-        }   
-    }
-
-    public int sumRange(int i, int j)
-    {
-        if (i >= 1)
-        {
-            return nums[j] - nums[i - 1];
-        }
-        else
-        {
-            return nums[j];
-        }
-    }
-}
diff --git a/303.range-sum-query-immutable.102674800.Accepted.leetcode.java b/303.range-sum-query-immutable.102674800.Accepted.leetcode.java
deleted file mode 100644
index a0002235..00000000
--- ./303.range-sum-query-immutable.102674800.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class NumArray
-{
-    private int[] nums;
-
-    public NumArray(int[] nums)
-    {
-        this.nums = nums;
-
-        for (int i = 1; i < nums.length; i++)
-        {
-            nums[i] += nums[i - 1];
-        }   
-    }
-
-    public int sumRange(int i, int j)
-    {
-        if (i == 0)
-        {
-            return nums[j];
-        }
-        
-        return nums[j] - nums[i - 1];
-    }
-}
diff --git a/304.range-sum-query-2d-immutable.102697387.Runtime-Error.leetcode.java b/304.range-sum-query-2d-immutable.102697387.Runtime-Error.leetcode.java
deleted file mode 100644
index 3488580d..00000000
--- ./304.range-sum-query-2d-immutable.102697387.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class NumMatrix
-{
-    private int[][] matrix;
-    private int[][] sum;
-
-    public NumMatrix(int[][] matrix)
-    {
-        this.matrix = matrix;
-
-        if (matrix == null || matrix.length == 0)
-        {
-            return;
-        }
-
-        int m = matrix.length;
-        int n = matrix[0].length;
-        sum = new int[m + 1][n + 1];
-
-        for (int i = 1; i < m; i++)
-        {
-            for (int j = 1; j < n; j++)
-            {
-                sum[i][j] = sum[i - 1][j] + sum[i][j - 1] -
-                            sum[i - 1][j - 1] + matrix[i - 1][j - 1];
-            }
-        }
-    }
-
-    public int sumRegion(int row1, int col1, int row2, int col2)
-    {
-        return sum[row2][col2] - sum[row2][col1 - 1] -
-                sum[row1 - 1][col2] + sum[row1 - 1][col1 - 1];
-    }
-}
diff --git a/304.range-sum-query-2d-immutable.65420224.Accepted.leetcode.java b/304.range-sum-query-2d-immutable.65420224.Accepted.leetcode.java
deleted file mode 100644
index 7d773f31..00000000
--- ./304.range-sum-query-2d-immutable.65420224.Accepted.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class NumMatrix
-  {
-    private int[][] matrix;
-    private int[][] sum;
-
-    public NumMatrix(int[][] matrix)
-    {
-      this.matrix = matrix;
-
-      if (matrix == null || matrix.length == 0)
-      {
-        return;
-      }
-
-      int m = matrix.length;
-      int n = matrix[0].length;
-      sum = new int[m + 1][n + 1];
-
-      for (int i = 1; i <= m; i++)
-      {
-        for (int j = 1; j <= n; j++)
-        {
-          sum[i][j] = sum[i - 1][j] + sum[i][j - 1] -
-                      sum[i - 1][j - 1] + matrix[i - 1][j - 1];
-        }
-      }
-    }
-
-    public int sumRegion(int row1, int col1, int row2, int col2)
-    {
-      return sum[row2 + 1][col2 + 1] - sum[row2 + 1][col1] -
-             sum[row1][col2 + 1] + sum[row1][col1];
-    }
-  }
-
diff --git a/304.range-sum-query-2d-immutable.87620171.Accepted.leetcode.java b/304.range-sum-query-2d-immutable.87620171.Accepted.leetcode.java
deleted file mode 100644
index bd9678f8..00000000
--- ./304.range-sum-query-2d-immutable.87620171.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class NumMatrix
-{
-    private int[][] matrix;
-    private int[][] sum;
-
-    public NumMatrix(int[][] matrix)
-    {
-        this.matrix = matrix;
-
-        if (matrix == null || matrix.length == 0)
-        {
-            return;
-        }
-
-        int m = matrix.length;
-        int n = matrix[0].length;
-        sum = new int[m + 1][n + 1];
-
-        for (int i = 1; i <= m; i++)
-        {
-            for (int j = 1; j <= n; j++)
-            {
-                sum[i][j] = sum[i - 1][j] + sum[i][j - 1] -
-                            sum[i - 1][j - 1] + matrix[i - 1][j - 1];
-            }
-        }
-    }
-
-    public int sumRegion(int row1, int col1, int row2, int col2)
-    {
-        return sum[row2 + 1][col2 + 1] - sum[row2 + 1][col1] -
-                sum[row1][col2 + 1] + sum[row1][col1];
-    }
-}
diff --git a/305.number-of-islands-ii.344545125.Wrong-Answer.leetcode.java b/305.number-of-islands-ii.344545125.Wrong-Answer.leetcode.java
deleted file mode 100644
index a3cb08e8..00000000
--- ./305.number-of-islands-ii.344545125.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,92 +0,0 @@
-public class Solution
-{
-    private int[][] dir = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};
-
-    public List<Integer> numIslands2(int m, int n, int[][] positions)
-    {
-        UnionFind2D islands = new UnionFind2D(m * n);
-        List<Integer> ans = new ArrayList<>();
-
-        for (int[] position : positions)
-        {
-            int x = position[0], y = position[1];
-            int p = islands.add(x * n + y);
-
-            for (int[] d : dir)
-            {
-                int newX = x + d[0];
-                int newY = y + d[1];
-
-                if (newX < 0 || newX >= m || newY < 0 || newY >= n)
-                {
-                    continue;
-                }
-
-                int q = islands.getID(newX * n + newY);
-
-                if (q != -1 && !islands.find(p, q))
-                {
-                    islands.unite(p, q);
-                }
-            }
-
-            ans.add(islands.size());
-        }
-
-        return ans;
-    }
-}
-
-class UnionFind2D
-{
-    private int[] id;
-    private int count;
-
-    public UnionFind2D(int size)
-    {
-        this.count = 0;
-        this.id = new int[size];
-        Arrays.fill(id, -1);
-    }
-
-    public int size()
-    {
-        return this.count;
-    }
-
-    public int getID(int index)
-    {
-        return id[index];
-    }
-
-    public int add(int i)
-    {
-        id[i] = i;
-        ++count;
-        return i;
-    }
-
-    public boolean find(int p, int q)
-    {
-        return root(p) == root(q);
-    }
-
-    public void unite(int p, int q)
-    {
-        int i = root(p);
-        int j = root(q);
-        id[i] = j;
-        --count;
-    }
-
-    public int root(int i)
-    {
-        while (i != id[i])
-        {
-            i = id[i];
-        }
-
-        return i;
-    }
-}
-
diff --git a/305.number-of-islands-ii.344545164.Wrong-Answer.leetcode.java b/305.number-of-islands-ii.344545164.Wrong-Answer.leetcode.java
deleted file mode 100644
index 9a6f3ebf..00000000
--- ./305.number-of-islands-ii.344545164.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,92 +0,0 @@
-public class Solution
-{
-    private int[][] dir = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};
-
-    public List<Integer> numIslands2(int m, int n, int[][] positions)
-    {
-        UnionFind2D islands = new UnionFind2D(m * n);
-        List<Integer> ans = new ArrayList<>();
-
-        for (int[] position : positions)
-        {
-            int x = position[0], y = position[1];
-            int p = islands.add(x * n + y);
-
-            for (int[] d : dir)
-            {
-                int newX = x + d[0];
-                int newY = y + d[1];
-
-                if (newX < 0 || newX >= m || newY < 0 || newY >= n)
-                {
-                    continue;
-                }
-
-                int q = islands.getID(newX * n + newY);
-
-                if (q != -1 && !islands.find(p, q))
-                {
-                    islands.unite(p, q);
-                }
-            }
-
-            ans.add(islands.size());
-        }
-
-        return ans;
-    }
-}
-
-class UnionFind2D
-{
-    private int[] id;
-    private int count;
-
-    public UnionFind2D(int size)
-    {
-        this.count = 0;
-        this.id = new int[size];
-        Arrays.fill(id, -1);
-    }
-
-    public int size()
-    {
-        return this.count;
-    }
-
-    public int getID(int index)
-    {
-        return id[index];
-    }
-
-    public int add(int i)
-    {
-        id[i] = i;
-        ++count;
-        return i;
-    }
-
-    public boolean find(int p, int q)
-    {
-        return root(p) == root(q);
-    }
-
-    public void unite(int p, int q)
-    {
-        int i = root(p);
-        int j = root(q);
-        id[i] = j;
-        --count;
-    }
-
-    private int root(int i)
-    {
-        while (i != id[i])
-        {
-            i = id[i];
-        }
-
-        return i;
-    }
-}
-
diff --git a/305.number-of-islands-ii.97237723.Wrong-Answer.leetcode.java b/305.number-of-islands-ii.97237723.Wrong-Answer.leetcode.java
deleted file mode 100644
index 0b1af381..00000000
--- ./305.number-of-islands-ii.97237723.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,91 +0,0 @@
-public class Solution
-{
-    private int[][] dir = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};
-
-    public List<Integer> numIslands2(int m, int n, int[][] positions)
-    {
-        UnionFind2D islands = new UnionFind2D(m * n);
-        List<Integer> ans = new ArrayList<>();
-
-        for (int[] position : positions)
-        {
-            int x = position[0], y = position[1];
-            int p = islands.add(x * n + y);
-
-            for (int[] d : dir)
-            {
-                int newX = x + d[0];
-                int newY = y + d[1];
-
-                if (newX < 0 || newX >= m || newY < 0 || newY >= n)
-                {
-                    continue;
-                }
-
-                int q = islands.getID(newX * n + newY);
-
-                if (q > 0 && !islands.find(p, q))
-                {
-                    islands.unite(p, q);
-                }
-            }
-
-            ans.add(islands.size());
-        }
-
-        return ans;
-    }
-}
-
-class UnionFind2D
-{
-    private int[] id;
-    private int count;
-
-    public UnionFind2D(int size)
-    {
-        this.count = 0;
-        this.id = new int[size];
-        Arrays.fill(id, -1);
-    }
-
-    public int size()
-    {
-        return this.count;
-    }
-
-    public int getID(int index)
-    {
-        return id[index];
-    }
-
-    public int add(int i)
-    {
-        id[i] = i;
-        ++count;
-        return i;
-    }
-
-    public boolean find(int p, int q)
-    {
-        return root(p) == root(q);
-    }
-
-    public void unite(int p, int q)
-    {
-        int i = root(p);
-        int j = root(q);
-        id[i] = j;
-        --count;
-    }
-
-    private int root(int i)
-    {
-        while (i != id[i])
-        {
-            i = id[i];
-        }
-
-        return i;
-    }
-}
diff --git a/305.number-of-islands-ii.97318512.Runtime-Error.leetcode.java b/305.number-of-islands-ii.97318512.Runtime-Error.leetcode.java
deleted file mode 100644
index c76e0ec0..00000000
--- ./305.number-of-islands-ii.97318512.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,94 +0,0 @@
-public class Solution
-{
-    private int[][] dir = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};
-
-    public List<Integer> numIslands2(int m, int n, int[][] positions)
-    {
-        UnionFind2D islands = new UnionFind2D(m * n);
-        List<Integer> ans = new ArrayList<>();
-
-        for (int[] position : positions)
-        {
-            int x = position[0], y = position[1];
-            int p = islands.add(x * n + y);
-
-            for (int[] d : dir)
-            {
-                int newX = x + d[0];
-                int newY = y + d[1];
-
-                if (newX < 0 || newX >= m || newY < 0 || newY >= n)
-                {
-                    continue;
-                }
-
-                int q = islands.getID(newX * n + newY);
-
-                System.out.println(p + " --> " + islands.root(p));
-                System.out.println(q + " --> " + islands.root(q));
-                
-                if (q > 0 && !islands.find(p, q))
-                {
-                    islands.unite(p, q);
-                }
-            }
-
-            ans.add(islands.size());
-        }
-
-        return ans;
-    }
-}
-
-class UnionFind2D
-{
-    private int[] id;
-    private int count;
-
-    public UnionFind2D(int size)
-    {
-        this.count = 0;
-        this.id = new int[size];
-        Arrays.fill(id, -1);
-    }
-
-    public int size()
-    {
-        return this.count;
-    }
-
-    public int getID(int index)
-    {
-        return id[index];
-    }
-
-    public int add(int i)
-    {
-        id[i] = i;
-        ++count;
-        return i;
-    }
-
-    public boolean find(int p, int q)
-    {
-        return root(p) == root(q);
-    }
-
-    public void unite(int p, int q)
-    {
-        int i = root(p);
-        int j = root(q);
-        id[i] = j;
-        --count;
-    }
-
-    public int root(int i)
-    {
-        while (i != id[i])
-        {
-            i = id[i];
-        }
-
-        return i;
-    }
-}
diff --git a/305.number-of-islands-ii.97319206.Wrong-Answer.leetcode.java b/305.number-of-islands-ii.97319206.Wrong-Answer.leetcode.java
deleted file mode 100644
index 1eaf2428..00000000
--- ./305.number-of-islands-ii.97319206.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,99 +0,0 @@
-public class Solution
-{
-    private int[][] dir = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};
-
-    public List<Integer> numIslands2(int m, int n, int[][] positions)
-    {
-        UnionFind2D islands = new UnionFind2D(m * n);
-        List<Integer> ans = new ArrayList<>();
-
-        for (int[] position : positions)
-        {
-            int x = position[0], y = position[1];
-            int p = islands.add(x * n + y);
-
-            for (int[] d : dir)
-            {
-                int newX = x + d[0];
-                int newY = y + d[1];
-
-                if (newX < 0 || newX >= m || newY < 0 || newY >= n)
-                {
-                    continue;
-                }
-
-                int q = islands.getID(newX * n + newY);
-
-                System.out.println(p + " --> " + islands.root(p));
-                
-                if (q != -1)
-                {
-                    System.out.println(q + " --> " + islands.root(q));    
-                }
-                
-                
-                if (q > 0 && !islands.find(p, q))
-                {
-                    islands.unite(p, q);
-                }
-            }
-
-            ans.add(islands.size());
-        }
-
-        return ans;
-    }
-}
-
-class UnionFind2D
-{
-    private int[] id;
-    private int count;
-
-    public UnionFind2D(int size)
-    {
-        this.count = 0;
-        this.id = new int[size];
-        Arrays.fill(id, -1);
-    }
-
-    public int size()
-    {
-        return this.count;
-    }
-
-    public int getID(int index)
-    {
-        return id[index];
-    }
-
-    public int add(int i)
-    {
-        id[i] = i;
-        ++count;
-        return i;
-    }
-
-    public boolean find(int p, int q)
-    {
-        return root(p) == root(q);
-    }
-
-    public void unite(int p, int q)
-    {
-        int i = root(p);
-        int j = root(q);
-        id[i] = j;
-        --count;
-    }
-
-    public int root(int i)
-    {
-        while (i != id[i])
-        {
-            i = id[i];
-        }
-
-        return i;
-    }
-}
diff --git a/305.number-of-islands-ii.97323503.Time-Limit-Exceeded.leetcode.java b/305.number-of-islands-ii.97323503.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 7e9cac73..00000000
--- ./305.number-of-islands-ii.97323503.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,99 +0,0 @@
-public class Solution
-{
-    private int[][] dir = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};
-
-    public List<Integer> numIslands2(int m, int n, int[][] positions)
-    {
-        UnionFind2D islands = new UnionFind2D(m * n);
-        List<Integer> ans = new ArrayList<>();
-
-        for (int[] position : positions)
-        {
-            int x = position[0], y = position[1];
-            int p = islands.add(x * n + y);
-
-            for (int[] d : dir)
-            {
-                int newX = x + d[0];
-                int newY = y + d[1];
-
-                if (newX < 0 || newX >= m || newY < 0 || newY >= n)
-                {
-                    continue;
-                }
-
-                int q = islands.getID(newX * n + newY);
-
-                System.out.println(p + " --> " + islands.root(p));
-                
-                if (q != -1)
-                {
-                    System.out.println(q + " --> " + islands.root(q));    
-                }
-                
-                
-                if (q != -1 && !islands.find(p, q))
-                {
-                    islands.unite(p, q);
-                }
-            }
-
-            ans.add(islands.size());
-        }
-
-        return ans;
-    }
-}
-
-class UnionFind2D
-{
-    private int[] id;
-    private int count;
-
-    public UnionFind2D(int size)
-    {
-        this.count = 0;
-        this.id = new int[size];
-        Arrays.fill(id, -1);
-    }
-
-    public int size()
-    {
-        return this.count;
-    }
-
-    public int getID(int index)
-    {
-        return id[index];
-    }
-
-    public int add(int i)
-    {
-        id[i] = i;
-        ++count;
-        return i;
-    }
-
-    public boolean find(int p, int q)
-    {
-        return root(p) == root(q);
-    }
-
-    public void unite(int p, int q)
-    {
-        int i = root(p);
-        int j = root(q);
-        id[i] = j;
-        --count;
-    }
-
-    public int root(int i)
-    {
-        while (i != id[i])
-        {
-            i = id[i];
-        }
-
-        return i;
-    }
-}
diff --git a/305.number-of-islands-ii.97323562.Accepted.leetcode.java b/305.number-of-islands-ii.97323562.Accepted.leetcode.java
deleted file mode 100644
index c907167e..00000000
--- ./305.number-of-islands-ii.97323562.Accepted.leetcode.java
+++ /dev/null
@@ -1,91 +0,0 @@
-public class Solution
-{
-    private int[][] dir = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};
-
-    public List<Integer> numIslands2(int m, int n, int[][] positions)
-    {
-        UnionFind2D islands = new UnionFind2D(m * n);
-        List<Integer> ans = new ArrayList<>();
-
-        for (int[] position : positions)
-        {
-            int x = position[0], y = position[1];
-            int p = islands.add(x * n + y);
-
-            for (int[] d : dir)
-            {
-                int newX = x + d[0];
-                int newY = y + d[1];
-
-                if (newX < 0 || newX >= m || newY < 0 || newY >= n)
-                {
-                    continue;
-                }
-
-                int q = islands.getID(newX * n + newY);
-
-                if (q != -1 && !islands.find(p, q))
-                {
-                    islands.unite(p, q);
-                }
-            }
-
-            ans.add(islands.size());
-        }
-
-        return ans;
-    }
-}
-
-class UnionFind2D
-{
-    private int[] id;
-    private int count;
-
-    public UnionFind2D(int size)
-    {
-        this.count = 0;
-        this.id = new int[size];
-        Arrays.fill(id, -1);
-    }
-
-    public int size()
-    {
-        return this.count;
-    }
-
-    public int getID(int index)
-    {
-        return id[index];
-    }
-
-    public int add(int i)
-    {
-        id[i] = i;
-        ++count;
-        return i;
-    }
-
-    public boolean find(int p, int q)
-    {
-        return root(p) == root(q);
-    }
-
-    public void unite(int p, int q)
-    {
-        int i = root(p);
-        int j = root(q);
-        id[i] = j;
-        --count;
-    }
-
-    public int root(int i)
-    {
-        while (i != id[i])
-        {
-            i = id[i];
-        }
-
-        return i;
-    }
-}
diff --git a/305.number-of-islands-ii.97324733.Wrong-Answer.leetcode.java b/305.number-of-islands-ii.97324733.Wrong-Answer.leetcode.java
deleted file mode 100644
index f336be67..00000000
--- ./305.number-of-islands-ii.97324733.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,95 +0,0 @@
-public class Solution
-{
-    private int[][] dir = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};
-
-    public List<Integer> numIslands2(int m, int n, int[][] positions)
-    {
-        UnionFind2D islands = new UnionFind2D(m * n);
-        List<Integer> ans = new ArrayList<>();
-
-        for (int[] position : positions)
-        {
-            int x = position[0], y = position[1];
-            int p = islands.add(x * n + y);
-
-            for (int[] d : dir)
-            {
-                int newX = x + d[0];
-                int newY = y + d[1];
-
-                if (newX < 0 || newX >= m || newY < 0 || newY >= n)
-                {
-                    continue;
-                }
-
-                int q = islands.getID(newX * n + newY);
-
-                if (q != -1 && !islands.find(p, q))
-                {
-                    islands.unite(p, q);
-                }
-            }
-
-            ans.add(islands.size());
-        }
-
-        return ans;
-    }
-}
-
-class UnionFind2D
-{
-    private int[] id;
-    private int count;
-
-    public UnionFind2D(int size)
-    {
-        this.count = 0;
-        this.id = new int[size];
-    }
-
-    public int size()
-    {
-        return this.count;
-    }
-
-    public int getID(int index)
-    {
-        if (index == id[index])
-        {
-            return 0;
-        }
-
-        return id[index];
-    }
-
-    public int add(int i)
-    {
-        id[i] = i;
-        ++count;
-        return i;
-    }
-
-    public boolean find(int p, int q)
-    {
-        return root(p) == root(q);
-    }
-
-    public void unite(int p, int q)
-    {
-        int i = root(p);
-        int j = root(q);
-        id[i] = j;
-        --count;
-    }
-
-    private int root(int i)
-    {
-        while (i != id[i])
-        {
-            i = id[i];
-        }
-
-        return i;
-    }
-}
diff --git a/305.number-of-islands-ii.97324997.Accepted.leetcode.java b/305.number-of-islands-ii.97324997.Accepted.leetcode.java
deleted file mode 100644
index f0aa51ca..00000000
--- ./305.number-of-islands-ii.97324997.Accepted.leetcode.java
+++ /dev/null
@@ -1,91 +0,0 @@
-public class Solution
-{
-    private int[][] dir = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};
-
-    public List<Integer> numIslands2(int m, int n, int[][] positions)
-    {
-        UnionFind2D islands = new UnionFind2D(m * n);
-        List<Integer> ans = new ArrayList<>();
-
-        for (int[] position : positions)
-        {
-            int x = position[0], y = position[1];
-            int p = islands.add(x * n + y);
-
-            for (int[] d : dir)
-            {
-                int newX = x + d[0];
-                int newY = y + d[1];
-
-                if (newX < 0 || newX >= m || newY < 0 || newY >= n)
-                {
-                    continue;
-                }
-
-                int q = islands.getID(newX * n + newY);
-
-                if (q != -1 && !islands.find(p, q))
-                {
-                    islands.unite(p, q);
-                }
-            }
-
-            ans.add(islands.size());
-        }
-
-        return ans;
-    }
-}
-
-class UnionFind2D
-{
-    private int[] id;
-    private int count;
-
-    public UnionFind2D(int size)
-    {
-        this.count = 0;
-        this.id = new int[size];
-        Arrays.fill(id, -1);
-    }
-
-    public int size()
-    {
-        return this.count;
-    }
-
-    public int getID(int index)
-    {
-        return id[index];
-    }
-
-    public int add(int i)
-    {
-        id[i] = i;
-        ++count;
-        return i;
-    }
-
-    public boolean find(int p, int q)
-    {
-        return root(p) == root(q);
-    }
-
-    public void unite(int p, int q)
-    {
-        int i = root(p);
-        int j = root(q);
-        id[i] = j;
-        --count;
-    }
-
-    private int root(int i)
-    {
-        while (i != id[i])
-        {
-            i = id[i];
-        }
-
-        return i;
-    }
-}
diff --git a/306.additive-number.65088952.Accepted.leetcode.java b/306.additive-number.65088952.Accepted.leetcode.java
deleted file mode 100644
index e162acb3..00000000
--- ./306.additive-number.65088952.Accepted.leetcode.java
+++ /dev/null
@@ -1,56 +0,0 @@
-  public class Solution
-  {
-    public boolean isAdditiveNumber(String num)
-    {
-      for (int i = 0; i < num.length(); i++)
-      {
-        for (int j = i + 1; j < num.length() - i - 1; j++)
-        {
-          String first = num.substring(0, i + 1);
-          String second = num.substring(i + 1, j + 1);
-
-          if (valid(j + 1, num, first, second))
-          {
-            return true;
-          }
-        }
-      }
-
-      return false;
-    }
-
-    private boolean valid(int start, String num, String first, String second)
-    {
-      if (start == num.length())
-      {
-        return true;
-      }
-
-      long f = Long.parseLong(first);
-      long s = Long.parseLong(second);
-
-      if (!Long.toString(f).equals(first) || !Long.toString(s).equals(second))
-      {
-        return false;
-      }
-
-      long sum = f + s;
-      String sumS = Long.toString(sum);
-
-      if (start + sumS.length() > num.length())
-      {
-        return false;
-      }
-
-      String third = num.substring(start, start + sumS.length());
-      long t = Long.parseLong(third);
-
-      if (!Long.toString(t).equals(third) || t != sum)
-      {
-        return false;
-      }
-
-      return valid(start + sumS.length(), num, second, third);
-    }
-  }
-
diff --git a/307.range-sum-query-mutable.65090428.Time-Limit-Exceeded.leetcode.java b/307.range-sum-query-mutable.65090428.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 28028166..00000000
--- ./307.range-sum-query-mutable.65090428.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,114 +0,0 @@
-public class NumArray
-    {
-      class SegmentTreeNode
-      {
-        int start, end;
-        int sum;
-        SegmentTreeNode left, right;
-
-        // Constructor
-        public SegmentTreeNode(int start, int end)
-        {
-          this.start = start;
-          this.end = end;
-          sum = 0;
-        }
-
-        public SegmentTreeNode(int start, int end, int sum)
-        {
-          this.start = start;
-          this.end = end;
-          this.sum = sum;
-        }
-
-      }
-
-      private SegmentTreeNode root;
-
-      public NumArray(int[] nums)
-      {
-        if (nums == null || nums.length == 0)
-        {
-          return;
-        }
-
-        root = buildSegmentTree(nums, 0, nums.length - 1);
-      }
-
-      void update(int i, int val)
-      {
-        updateHelper(root, i, val);
-      }
-
-      private void updateHelper(SegmentTreeNode root, int i, int val)
-      {
-        if (root == null)
-        {
-          return;
-        }
-
-        int mid = root.start + (root.end - root.start) / 2;
-
-        if (i <= mid)
-        {
-          updateHelper(root.left, i, val);
-        }
-        else
-        {
-          updateHelper(root.right, i, val);
-        }
-
-        if (root.start == root.end && root.start == i)
-        {
-          root.sum = val;
-          return;
-        }
-
-        root.sum = root.left.sum + root.right.sum;
-      }
-
-      public int sumRange(int i, int j)
-      {
-        return sumRangeHelper(root, i, j);
-      }
-
-      private int sumRangeHelper(SegmentTreeNode root, int start, int end)
-      {
-        if (root == null || end < root.start || start > root.end ||
-            start > end)
-        {
-          return 0;
-        }
-
-        if (start <= root.start && end >= root.end)
-        {
-          return root.sum;
-        }
-
-        int mid = root.start + (root.end - root.start) / 2;
-        return sumRangeHelper(root.left, start, Math.min(end, mid)) +
-               sumRangeHelper(root.right, Math.max(mid + 1, start), end);
-      }
-
-      private SegmentTreeNode buildSegmentTree(int[] nums, int start, int end)
-      {
-        if (nums == null || nums.length == 0 || start > end)
-        {
-          return null;
-        }
-
-        // Start == end
-        if (start == end)
-        {
-          return new SegmentTreeNode(start, end, nums[start]);
-        }
-
-        SegmentTreeNode root = new SegmentTreeNode(start, end);
-        int mid = start + (end - start) / 2;
-        root.left = buildSegmentTree(nums, start, mid);
-        root.right = buildSegmentTree(nums, mid + 1, end);
-        root.sum = root.left.sum + root.right.sum;
-        return root;
-      }
-    }
-
diff --git a/307.range-sum-query-mutable.65090811.Accepted.leetcode.java b/307.range-sum-query-mutable.65090811.Accepted.leetcode.java
deleted file mode 100644
index c2b762ce..00000000
--- ./307.range-sum-query-mutable.65090811.Accepted.leetcode.java
+++ /dev/null
@@ -1,58 +0,0 @@
-public class NumArray
-    {
-      int[] tree;
-      int[] nums;
-
-      public NumArray(int[] nums)
-      {
-        this.nums = nums;
-        int sum = 0;
-        int lowbit;
-        tree = new int[nums.length + 1];
-
-        for (int i = 1; i < tree.length; i++)
-        {
-          sum = 0;
-          lowbit = i & (-i);
-
-          for (int j = i; j > i - lowbit; j--)
-          {
-            sum += nums[j - 1];
-          }
-
-          tree[i] = sum;
-        }
-      }
-
-      void update(int i, int val)
-      {
-        int diff = val - nums[i];
-        nums[i] = val;
-        i++;
-
-        for (; i < tree.length; i += (i & (-i)))
-        {
-          tree[i] += diff;
-        }
-      }
-
-      public int sumRange(int i, int j)
-      {
-        return getSum(j) - getSum(i - 1);
-      }
-
-      public int getSum(int i)
-      {
-        int sum = 0;
-        i++;
-
-        while (i > 0)
-        {
-          sum += tree[i];
-          i -= (i & (-i));
-        }
-
-        return sum;
-      }
-    }
-
diff --git a/308.range-sum-query-2d-mutable.71350466.Accepted.leetcode.java b/308.range-sum-query-2d-mutable.71350466.Accepted.leetcode.java
deleted file mode 100644
index 77b2aa2a..00000000
--- ./308.range-sum-query-2d-mutable.71350466.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class NumMatrix {
-    int[][] rowSums;
-    
-    public NumMatrix(int[][] matrix) {
-        if (matrix.length == 0)
-            return;
-        rowSums = new int[matrix.length][matrix[0].length];
-        
-        // 建rowSums矩阵
-        for (int i = 0; i < matrix.length; i++) {
-            for (int j = 0; j < matrix[0].length; j++) {
-                rowSums[i][j] = matrix[i][j] + (j == 0 ? 0 : rowSums[i][j - 1]);
-            }
-        }
-    }
-
-    public void update(int row, int col, int val) {
-        // 求出新值与旧值的差
-        int diff = val - (rowSums[row][col] - (col == 0 ? 0 : rowSums[row][col - 1]));
-        
-        // 更新该行受影响的sum
-        for (int j = col; j < rowSums[0].length; j++) {
-            rowSums[row][j] += diff;
-        }
-    }
-
-    public int sumRegion(int row1, int col1, int row2, int col2) {
-        int res = 0;
-
-        // 逐行求和，每行的相应和为两sum相减
-        for (int i = row1; i <= row2; i++) {
-            res += rowSums[i][col2] - (col1 == 0 ? 0 :rowSums[i][col1 - 1]);
-        }
-        return res;
-    }
-}
diff --git a/309.best-time-to-buy-and-sell-stock-with-cooldown.64885319.Accepted.leetcode.java b/309.best-time-to-buy-and-sell-stock-with-cooldown.64885319.Accepted.leetcode.java
deleted file mode 100644
index 0876f0b1..00000000
--- ./309.best-time-to-buy-and-sell-stock-with-cooldown.64885319.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-  public class Solution
-  {
-    public int maxProfit(int[] prices)
-    {
-      if (prices == null || prices.length <= 1)
-      {
-        return 0;
-      }
-
-      int b1 = -prices[0];
-      int s2 = 0;
-      int s1 = 0;
-
-      for (int i = 1; i <= prices.length; i++)
-      {
-        int b0 = Math.max(b1, s2 - prices[i - 1]);
-        int s0 = Math.max(s1, b1 + prices[i - 1]);
-        b1 = b0;
-        s2 = s1;
-        s1 = s0;
-      }
-
-      return s1;
-    }
-  }
-
diff --git a/31.next-permutation.34536004.Runtime-Error.leetcode.java b/31.next-permutation.34536004.Runtime-Error.leetcode.java
deleted file mode 100644
index 7583707d..00000000
--- ./31.next-permutation.34536004.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-  public class Solution
-  {
-    private void swap(int[] num, int i, int j)
-    {
-      int temp = num[i];
-      num[i] = num[j];
-      num[j] = temp;
-    }
-
-    private void reverse(int[] num, int begin, int end)
-    {
-      while (begin < end)
-      {
-        swap(num, begin++, end--);
-      }
-    }
-
-    public void nextPermutation(int[] num)
-    {
-      if (num.length <= 1)
-      {
-        return;
-      }
-
-      int i = num.length - 2;
-
-      while (i >= 0 && num[i] >= num[i + 1])
-      {
-        i--;
-      }
-
-      int j = num.length;
-
-      while (num[--j] <= num[i])
-      {
-      }
-
-      swap(num, i, j);
-      reverse(num, i + 1, num.length - 1);
-    }
-  }
-
diff --git a/31.next-permutation.34536096.Runtime-Error.leetcode.java b/31.next-permutation.34536096.Runtime-Error.leetcode.java
deleted file mode 100644
index a06543ee..00000000
--- ./31.next-permutation.34536096.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-  public class Solution
-  {
-    private void swap(int[] num, int i, int j)
-    {
-      int temp = num[i];
-      num[i] = num[j];
-      num[j] = temp;
-    }
-
-    private void reverse(int[] num, int begin, int end)
-    {
-      while (begin < end)
-      {
-        swap(num, begin++, end--);
-      }
-    }
-
-    public void nextPermutation(int[] num)
-    {
-      if (num.length <= 1)
-      {
-        return;
-      }
-
-      int i = num.length - 2;
-
-      while (i >= 0 && num[i] >= num[i + 1])
-      {
-        i--;
-      }
-
-      int j = num.length;
-
-      while (j > 0 && num[--j] <= num[i])
-      {
-      }
-
-      swap(num, i, j);
-      reverse(num, i + 1, num.length - 1);
-    }
-  }
-
diff --git a/31.next-permutation.34536301.Accepted.leetcode.java b/31.next-permutation.34536301.Accepted.leetcode.java
deleted file mode 100644
index bd6ce588..00000000
--- ./31.next-permutation.34536301.Accepted.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-  public class Solution
-  {
-    private void swap(int[] num, int i, int j)
-    {
-      int temp = num[i];
-      num[i] = num[j];
-      num[j] = temp;
-    }
-
-    private void reverse(int[] num, int begin, int end)
-    {
-      while (begin < end)
-      {
-        swap(num, begin++, end--);
-      }
-    }
-
-    public void nextPermutation(int[] num)
-    {
-      if (num.length <= 1)
-      {
-        return;
-      }
-
-      int i = num.length - 2;
-
-      while (i >= 0 && num[i] >= num[i + 1])
-      {
-        i--;
-      }
-
-      if (i < 0)
-      {
-        reverse(num, 0, num.length - 1);
-        return;
-      }
-
-      int j = num.length;
-
-      while (num[--j] <= num[i])
-      {
-      }
-
-      swap(num, i, j);
-      reverse(num, i + 1, num.length - 1);
-    }
-  }
-
diff --git a/31.next-permutation.7792073.Accepted.leetcode.java b/31.next-permutation.7792073.Accepted.leetcode.java
deleted file mode 100644
index 792c42a7..00000000
--- ./31.next-permutation.7792073.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-  public class Solution {
-    private void swap(int[] num, int i, int j) {
-      int temp = num[i];
-      num[i] = num[j];
-      num[j] = temp;
-    }
-
-    private void reverse(int[] num, int begin, int end) {
-      end--;
-
-      while (begin < end) {
-        swap(num, begin++, end--);
-      }
-    }
-
-    public void nextPermutation(int[] num) {
-      if (num.length <= 1) {
-        return;
-      }
-
-      int i = num.length - 1;
-
-      while (i > 0) {
-        i--;
-
-        if (num[i] < num[i + 1]) {
-          int j = num.length;
-
-          while (num[--j] <= num[i]) {
-          }
-
-          swap(num, i, j);
-          reverse(num, i + 1, num.length);
-          return;
-        }
-      }
-
-      reverse(num, 0, num.length);
-    }
-  }
-
diff --git a/31.next-permutation.87270512.Accepted.leetcode.java b/31.next-permutation.87270512.Accepted.leetcode.java
deleted file mode 100644
index 8d9e928b..00000000
--- ./31.next-permutation.87270512.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution
-{
-    private void swap(int[] num, int i, int j)
-    {
-        int temp = num[i];
-        num[i] = num[j];
-        num[j] = temp;
-    }
-
-    private void reverse(int[] num, int begin, int end)
-    {
-        while (begin < end)
-        {
-            swap(num, begin++, end--);
-        }
-    }
-
-    public void nextPermutation(int[] num)
-    {
-        if (num.length <= 1)
-        {
-            return;
-        }
-
-        int i = num.length - 2;
-
-        while (i >= 0 && num[i] >= num[i + 1])
-        {
-            i--;
-        }
-
-        if (i < 0)
-        {
-            reverse(num, 0, num.length - 1);
-            return;
-        }
-
-        int j = num.length;
-
-        while (num[--j] <= num[i])
-        {
-        }
-
-        swap(num, i, j);
-        reverse(num, i + 1, num.length - 1);
-    }
-}
diff --git a/31.next-permutation.87270781.Runtime-Error.leetcode.java b/31.next-permutation.87270781.Runtime-Error.leetcode.java
deleted file mode 100644
index 7c3abeea..00000000
--- ./31.next-permutation.87270781.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution
-{
-    private void swap(int[] num, int i, int j)
-    {
-        int temp = num[i];
-        num[i] = num[j];
-        num[j] = temp;
-    }
-
-    private void reverse(int[] num, int begin, int end)
-    {
-        while (begin < end)
-        {
-            swap(num, begin++, end--);
-        }
-    }
-
-    public void nextPermutation(int[] num)
-    {
-        if (num.length <= 1)
-        {
-            return;
-        }
-
-        int i = num.length - 2;
-
-        while (i >= 0 && num[i] >= num[i + 1])
-        {
-            i--;
-        }
-
-        int j = num.length;
-
-        while (j > 0 && num[--j] <= num[i])
-        {
-        }
-
-        swap(num, i, j);
-        reverse(num, i + 1, num.length - 1);
-    }
-}
diff --git a/31.next-permutation.8866936.Accepted.leetcode.java b/31.next-permutation.8866936.Accepted.leetcode.java
deleted file mode 100644
index f74fdb2d..00000000
--- ./31.next-permutation.8866936.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution {
-    private void swap(int[] num, int i, int j) {
-      int temp = num[i];
-      num[i] = num[j];
-      num[j] = temp;
-    }
-
-    private void reverse(int[] num, int begin, int end) {
-      while (begin < end) {
-        swap(num, begin++, end--);
-      }
-    }
-
-    public void nextPermutation(int[] num) {
-      if (num.length <= 1) {
-        return;
-      }
-
-      int i = num.length - 1;
-
-      while (i > 0) {
-        i--;
-
-        if (num[i] < num[i + 1]) {
-          int j = num.length;
-
-          while (num[--j] <= num[i]) {
-          }
-
-          swap(num, i, j);
-          reverse(num, i + 1, num.length - 1);
-          return;
-        }
-      }
-
-      reverse(num, 0, num.length - 1);
-    }
-  }
-
diff --git a/310.minimum-height-trees.64985934.Accepted.leetcode.java b/310.minimum-height-trees.64985934.Accepted.leetcode.java
deleted file mode 100644
index 85d418ed..00000000
--- ./310.minimum-height-trees.64985934.Accepted.leetcode.java
+++ /dev/null
@@ -1,69 +0,0 @@
-  public class Solution
-  {
-    public List<Integer> findMinHeightTrees(int n, int[][] edges)
-    {
-      List<Integer> result = new ArrayList<>();
-
-      if (n <= 0)
-      {
-        return result;
-      }
-
-      // Corner case: there is a single node and no edge at all
-      if (n == 1 && edges.length == 0)
-      {
-        result.add(0);
-        return result;
-      }
-
-      // Step 1: construct the graph
-      List<Set<Integer>> adjList = new ArrayList<>();
-
-      for (int i = 0; i < n; i++)
-      {
-        adjList.add(new HashSet<>());
-      }
-
-      for (int[] edge : edges)
-      {
-        int from = edge[0];
-        int to = edge[1];
-        adjList.get(from).add(to);
-        adjList.get(to).add(from);
-      }
-
-      // Remove leaf nodes
-      List<Integer> leaves = new ArrayList<>();
-
-      for (int i = 0; i < n; i++)
-      {
-        if (adjList.get(i).size() == 1)
-        {
-          leaves.add(i);
-        }
-      }
-
-      while (n > 2)
-      {
-        // identify and remove all leaf nodes
-        n -= leaves.size();
-        List<Integer> newLeaves = new ArrayList<>();
-
-        for (int leaf : leaves)
-        {
-          int neighbor = adjList.get(leaf).iterator().next();
-          adjList.get(neighbor).remove(leaf);
-
-          if (adjList.get(neighbor).size() == 1)
-          {
-            newLeaves.add(neighbor);
-          }
-        }
-
-        leaves = newLeaves;
-      }
-
-      return leaves;
-    }
-  }
-
diff --git a/311.sparse-matrix-multiplication.72107069.Accepted.leetcode.java b/311.sparse-matrix-multiplication.72107069.Accepted.leetcode.java
deleted file mode 100644
index 5d901d65..00000000
--- ./311.sparse-matrix-multiplication.72107069.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution {
-    public int[][] multiply(int[][] A, int[][] B) {
-        if (A == null || A[0] == null || B == null || B[0] == null) return null;
-        int m = A.length, n = A[0].length, l = B[0].length;
-        int[][] C = new int[m][l];
-        Map<Integer, HashMap<Integer, Integer>> tableB = new HashMap<>();
-
-        for(int k = 0; k < n; k++) {
-            tableB.put(k, new HashMap<Integer, Integer>());
-            for(int j = 0; j < l; j++) {
-                if (B[k][j] != 0){
-                    tableB.get(k).put(j, B[k][j]);
-                }
-            }
-        }
-
-        for(int i = 0; i < m; i++) {
-            for(int k = 0; k < n; k++) {
-                if (A[i][k] != 0){
-                    for (Integer j: tableB.get(k).keySet()) {
-                        C[i][j] += A[i][k] * tableB.get(k).get(j);
-                    }
-                }
-            }
-        }
-        return C;   
-    }
-}
diff --git a/311.sparse-matrix-multiplication.96519006.Accepted.leetcode.java b/311.sparse-matrix-multiplication.96519006.Accepted.leetcode.java
deleted file mode 100644
index 0f640181..00000000
--- ./311.sparse-matrix-multiplication.96519006.Accepted.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution
-{
-    public int[][] multiply(int[][] A, int[][] B)
-    {
-        if (A == null || A[0] == null || B == null || B[0] == null)
-        {
-            return null;
-        }
-
-        int m = A.length, n = A[0].length, l = B[0].length;
-        int[][] C = new int[m][l];
-        Map<Integer, HashMap<Integer, Integer>> tableB = new HashMap<>();
-
-        for (int k = 0; k < n; k++)
-        {
-            tableB.put(k, new HashMap<Integer, Integer>());
-
-            for (int j = 0; j < l; j++)
-            {
-                if (B[k][j] != 0)
-                {
-                    tableB.get(k).put(j, B[k][j]);
-                }
-            }
-        }
-
-        for (int i = 0; i < m; i++)
-        {
-            for (int k = 0; k < n; k++)
-            {
-                if (A[i][k] != 0)
-                {
-                    for (Integer j : tableB.get(k).keySet())
-                    {
-                        C[i][j] += A[i][k] * tableB.get(k).get(j);
-                    }
-                }
-            }
-        }
-
-        return C;
-    }
-}
diff --git a/312.burst-balloons.64886137.Accepted.leetcode.java b/312.burst-balloons.64886137.Accepted.leetcode.java
deleted file mode 100644
index 41d97b08..00000000
--- ./312.burst-balloons.64886137.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-  public class Solution
-  {
-    public int DP(int i, int j, int[] nums, int[][] dp)
-    {
-      if (dp[i][j] > 0)
-      {
-        return dp[i][j];
-      }
-
-      for (int x = i; x <= j; x++)
-      {
-        dp[i][j] = Math.max(dp[i][j], DP(i, x - 1, nums, dp) + nums[i - 1] * nums[x] * nums[j + 1] + DP(x + 1, j, nums, dp));
-      }
-
-      return dp[i][j];
-    }
-
-    public int maxCoins(int[] iNums)
-    {
-      int n = iNums.length;
-      int[] nums = new int[n + 2];
-
-      for (int i = 0; i < n; i++)
-      {
-        nums[i + 1] = iNums[i];
-      }
-
-      nums[0] = nums[n + 1] = 1;
-      int[][] dp = new int[n + 2][n + 2];
-      return DP(1, n, nums, dp);
-    }
-  }
-
diff --git a/312.burst-balloons.64886314.Accepted.leetcode.java b/312.burst-balloons.64886314.Accepted.leetcode.java
deleted file mode 100644
index 05b75b8a..00000000
--- ./312.burst-balloons.64886314.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-  public class Solution
-  {
-    public int maxCoins(int[] iNums)
-    {
-      int n = iNums.length;
-      int[] nums = new int[n + 2];
-
-      for (int i = 0; i < n; i++)
-      {
-        nums[i + 1] = iNums[i];
-      }
-
-      nums[0] = nums[n + 1] = 1;
-      int[][] dp = new int[n + 2][n + 2];
-
-      for (int k = 1; k <= n; k++)
-      {
-        for (int i = 1; i <= n - k + 1; i++)
-        {
-          int j = i + k - 1;
-
-          for (int x = i; x <= j; x++)
-          {
-            dp[i][j] = Math.max(dp[i][j], dp[i][x - 1] + nums[i - 1] * nums[x] * nums[j + 1] + dp[x + 1][j]);
-          }
-        }
-      }
-
-      return dp[1][n];
-    }
-  }
-
diff --git a/312.burst-balloons.70034703.Accepted.leetcode.java b/312.burst-balloons.70034703.Accepted.leetcode.java
deleted file mode 100644
index 26be029e..00000000
--- ./312.burst-balloons.70034703.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution {
-    public int maxCoins(int[] iNums) {
-        int[] nums = new int[iNums.length + 2];
-        int n = 1;
-        for (int x : iNums) if (x > 0) nums[n++] = x;
-        nums[0] = nums[n++] = 1;
-
-        int[][] dp = new int[n][n];
-        for (int k = 2; k < n; ++k)
-            for (int l = 0; l < n - k; ++l) {
-                int r = l + k;
-                for (int m = l + 1; m < r; ++m)
-                    dp[l][r] = Math.max(dp[l][r], 
-                        nums[l] * nums[m] * nums[r] + dp[l][m] + dp[m][r]);
-            }
-    
-        return dp[0][n - 1];
-    }
-}
-
diff --git a/313.super-ugly-number.64878026.Accepted.leetcode.java b/313.super-ugly-number.64878026.Accepted.leetcode.java
deleted file mode 100644
index fb6fb34b..00000000
--- ./313.super-ugly-number.64878026.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-  public class Solution
-  {
-    class Node implements Comparable<Node>
-    {
-      int index;
-      int val;
-      int prime;
-      Node(int index, int val, int prime)
-      {
-        this.val = val;
-        this.index = index;
-        this.prime = prime;
-      }
-      public int compareTo(Node x)
-      {
-        return this.val - x.val;
-      }
-    }
-    public int nthSuperUglyNumber(int n, int[] primes)
-    {
-      int[] ugly_number = new int[n];
-      ugly_number[0] = 1;
-      PriorityQueue<Node> q = new PriorityQueue<Node>();
-
-      for (int i = 0; i < primes.length; i++)
-      {
-        q.add(new Node(0, primes[i], primes[i]));
-      }
-
-      for (int i = 1; i < n; i++)
-      {
-        Node cur = q.peek();
-        ugly_number[i] = cur.val;
-
-        do
-        {
-          cur = q.poll();
-          cur.val = ugly_number[ ++cur.index] * cur.prime;
-          q.add(cur);
-        }
-        while (!q.isEmpty() && q.peek().val == ugly_number[i]);
-      }
-
-      return ugly_number[n - 1];
-    }
-  }
-
diff --git a/313.super-ugly-number.64878275.Accepted.leetcode.java b/313.super-ugly-number.64878275.Accepted.leetcode.java
deleted file mode 100644
index f172d259..00000000
--- ./313.super-ugly-number.64878275.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-  public class Solution
-  {
-    public int nthSuperUglyNumber(int n, int[] primes)
-    {
-      int[] times = new int[primes.length];
-      int[] result = new int[n];
-      result[0] = 1; // first is 1
-
-      for (int i = 1; i < n; i++)
-      {
-        int min = Integer.MAX_VALUE;
-
-        for (int j = 0; j < primes.length; j++)
-        {
-          min = Math.min(min, primes[j] * result[times[j]]);
-        }
-
-        result[i] = min;
-
-        for (int j = 0; j < times.length; j++)
-        {
-          if (result[times[j]] * primes[j] == min)
-          {
-            times[j]++;
-          }
-        }
-      }
-
-      return result[n - 1];
-    }
-  }
-
diff --git a/314.binary-tree-vertical-order-traversal.102923538.Accepted.leetcode.java b/314.binary-tree-vertical-order-traversal.102923538.Accepted.leetcode.java
deleted file mode 100644
index 0aa0cc99..00000000
--- ./314.binary-tree-vertical-order-traversal.102923538.Accepted.leetcode.java
+++ /dev/null
@@ -1,62 +0,0 @@
-public class Solution
-{
-    class TreeColumnNode
-    {
-        TreeNode treeNode;
-        int column;
-
-        TreeColumnNode(TreeNode treeNode, int column)
-        {
-            this.treeNode = treeNode;
-            this.column = column;
-        }
-    }
-
-    public List<List<Integer>> verticalOrder(TreeNode root)
-    {
-        List<List<Integer>> results = new ArrayList<>();
-        
-        if (root == null)
-        {
-            return results;
-        }
-        
-        Map<Integer, List<Integer>> map = new HashMap<>();
-        LinkedList<TreeColumnNode> queue = new LinkedList<>();
-        queue.add(new TreeColumnNode(root, 0));
-
-        while (!queue.isEmpty())
-        {
-            TreeColumnNode node = queue.remove();
-            List<Integer> list = map.get(node.column);
-
-            if (list == null)
-            {
-                list = new ArrayList<>();
-                map.put(node.column, list);
-            }
-
-            list.add(node.treeNode.val);
-
-            if (node.treeNode.left != null)
-            {
-                queue.add(new TreeColumnNode(node.treeNode.left, node.column - 1));
-            }
-
-            if (node.treeNode.right != null)
-            {
-                queue.add(new TreeColumnNode(node.treeNode.right, node.column + 1));
-            }
-        }
-
-        List<Integer> columns = new ArrayList<>(map.keySet());
-        Collections.sort(columns);
-
-        for (int i = 0; i < columns.size(); i++)
-        {
-            results.add(map.get(columns.get(i)));
-        }
-
-        return results;
-    }
-}
diff --git a/314.binary-tree-vertical-order-traversal.102924025.Wrong-Answer.leetcode.java b/314.binary-tree-vertical-order-traversal.102924025.Wrong-Answer.leetcode.java
deleted file mode 100644
index 815e7567..00000000
--- ./314.binary-tree-vertical-order-traversal.102924025.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,58 +0,0 @@
-public class Solution
-{
-    class TreeColumnNode
-    {
-        TreeNode treeNode;
-        int column;
-
-        TreeColumnNode(TreeNode treeNode, int column)
-        {
-            this.treeNode = treeNode;
-            this.column = column;
-        }
-    }
-
-    public List<List<Integer>> verticalOrder(TreeNode root)
-    {
-        List<List<Integer>> results = new ArrayList<>();
-        
-        if (root == null)
-        {
-            return results;
-        }
-        
-        Map<Integer, List<Integer>> map = new HashMap<>();
-        LinkedList<TreeColumnNode> queue = new LinkedList<>();
-        queue.add(new TreeColumnNode(root, 0));
-
-        while (!queue.isEmpty())
-        {
-            TreeColumnNode node = queue.remove();
-            List<Integer> list = map.get(node.column);
-
-            if (list == null)
-            {
-                list = new ArrayList<>();
-                map.put(node.column, list);
-            }
-
-            list.add(node.treeNode.val);
-
-            
-            if (node.treeNode.right != null)
-            {
-                queue.add(new TreeColumnNode(node.treeNode.right, node.column + 1));
-            }
-        }
-
-        List<Integer> columns = new ArrayList<>(map.keySet());
-        Collections.sort(columns);
-
-        for (int i = 0; i < columns.size(); i++)
-        {
-            results.add(map.get(columns.get(i)));
-        }
-
-        return results;
-    }
-}
diff --git a/314.binary-tree-vertical-order-traversal.102924047.Wrong-Answer.leetcode.java b/314.binary-tree-vertical-order-traversal.102924047.Wrong-Answer.leetcode.java
deleted file mode 100644
index 24932ab1..00000000
--- ./314.binary-tree-vertical-order-traversal.102924047.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,58 +0,0 @@
-public class Solution
-{
-    class TreeColumnNode
-    {
-        TreeNode treeNode;
-        int column;
-
-        TreeColumnNode(TreeNode treeNode, int column)
-        {
-            this.treeNode = treeNode;
-            this.column = column;
-        }
-    }
-
-    public List<List<Integer>> verticalOrder(TreeNode root)
-    {
-        List<List<Integer>> results = new ArrayList<>();
-        
-        if (root == null)
-        {
-            return results;
-        }
-        
-        Map<Integer, List<Integer>> map = new HashMap<>();
-        LinkedList<TreeColumnNode> queue = new LinkedList<>();
-        queue.add(new TreeColumnNode(root, 0));
-
-        while (!queue.isEmpty())
-        {
-            TreeColumnNode node = queue.remove();
-            List<Integer> list = map.get(node.column);
-
-            if (list == null)
-            {
-                list = new ArrayList<>();
-                map.put(node.column, list);
-            }
-
-            list.add(node.treeNode.val);
-
-            if (node.treeNode.left != null)
-            {
-                queue.add(new TreeColumnNode(node.treeNode.left, node.column - 1));
-            }
-
-            if (node.treeNode.right != null)
-            {
-                queue.add(new TreeColumnNode(node.treeNode.right, node.column + 1));
-            }
-        }
-
-        List<Integer> columns = new ArrayList<>(map.keySet());
-        Collections.sort(columns);
-
-
-        return results;
-    }
-}
diff --git a/314.binary-tree-vertical-order-traversal.102924064.Runtime-Error.leetcode.java b/314.binary-tree-vertical-order-traversal.102924064.Runtime-Error.leetcode.java
deleted file mode 100644
index 552de665..00000000
--- ./314.binary-tree-vertical-order-traversal.102924064.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,56 +0,0 @@
-public class Solution
-{
-    class TreeColumnNode
-    {
-        TreeNode treeNode;
-        int column;
-
-        TreeColumnNode(TreeNode treeNode, int column)
-        {
-            this.treeNode = treeNode;
-            this.column = column;
-        }
-    }
-
-    public List<List<Integer>> verticalOrder(TreeNode root)
-    {
-        List<List<Integer>> results = new ArrayList<>();
-        
-        if (root == null)
-        {
-            return results;
-        }
-        
-        Map<Integer, List<Integer>> map = new HashMap<>();
-        LinkedList<TreeColumnNode> queue = new LinkedList<>();
-        queue.add(new TreeColumnNode(root, 0));
-
-        while (!queue.isEmpty())
-        {
-            TreeColumnNode node = queue.remove();
-            List<Integer> list = map.get(node.column);
-
-            list.add(node.treeNode.val);
-
-            if (node.treeNode.left != null)
-            {
-                queue.add(new TreeColumnNode(node.treeNode.left, node.column - 1));
-            }
-
-            if (node.treeNode.right != null)
-            {
-                queue.add(new TreeColumnNode(node.treeNode.right, node.column + 1));
-            }
-        }
-
-        List<Integer> columns = new ArrayList<>(map.keySet());
-        Collections.sort(columns);
-
-        for (int i = 0; i < columns.size(); i++)
-        {
-            results.add(map.get(columns.get(i)));
-        }
-
-        return results;
-    }
-}
diff --git a/314.binary-tree-vertical-order-traversal.84384546.Accepted.leetcode.java b/314.binary-tree-vertical-order-traversal.84384546.Accepted.leetcode.java
deleted file mode 100644
index 1e479a19..00000000
--- ./314.binary-tree-vertical-order-traversal.84384546.Accepted.leetcode.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-
-public class Solution 
-{  
-    class TreeColumnNode 
-    {  
-        TreeNode treeNode;  
-        int column;  
-    
-        TreeColumnNode(TreeNode treeNode, int column) 
-        {  
-            this.treeNode = treeNode;  
-            this.column = column;  
-        }  
-    } 
-    
-    public List<List<Integer>> verticalOrder(TreeNode root) 
-    {  
-        List<List<Integer>> results = new ArrayList<>();  
-        
-        if (root == null) 
-        {
-            return results;  
-        }
-        
-        Map<Integer, List<Integer>> map = new HashMap<>();  
-        LinkedList<TreeColumnNode> queue = new LinkedList<>();  
-        queue.add(new TreeColumnNode(root, 0));  
-        
-        while (!queue.isEmpty()) 
-        {  
-            TreeColumnNode node = queue.remove();  
-            List<Integer> list = map.get(node.column);  
-            
-            if (list == null) 
-            {  
-                list = new ArrayList<>();  
-                map.put(node.column, list);  
-            }  
-            
-            list.add(node.treeNode.val);  
-            
-            if (node.treeNode.left != null)
-            {
-                queue.add(new TreeColumnNode(node.treeNode.left, node.column-1));  
-            }
-            
-            if (node.treeNode.right != null) 
-            {
-                queue.add(new TreeColumnNode(node.treeNode.right, node.column+1));  
-            }
-        }  
-        
-        List<Integer> columns = new ArrayList<>(map.keySet());  
-        Collections.sort(columns);  
-        
-        for(int i=0; i<columns.size(); i++) 
-        {  
-            results.add(map.get(columns.get(i)));  
-        }  
-        
-        return results;  
-    }  
-}
diff --git a/314.binary-tree-vertical-order-traversal.84415865.Runtime-Error.leetcode.java b/314.binary-tree-vertical-order-traversal.84415865.Runtime-Error.leetcode.java
deleted file mode 100644
index f146221c..00000000
--- ./314.binary-tree-vertical-order-traversal.84415865.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-
-public class Solution 
-{  
-    class TreeColumnNode 
-    {  
-        TreeNode treeNode;  
-        int column;  
-    
-        TreeColumnNode(TreeNode treeNode, int column) 
-        {  
-            this.treeNode = treeNode;  
-            this.column = column;  
-        }  
-    } 
-    
-    public List<List<Integer>> verticalOrder(TreeNode root) 
-    {  
-        List<List<Integer>> results = new ArrayList<>();  
-        
-        Map<Integer, List<Integer>> map = new HashMap<>();  
-        LinkedList<TreeColumnNode> queue = new LinkedList<>();  
-        queue.add(new TreeColumnNode(root, 0));  
-        
-        while (!queue.isEmpty()) 
-        {  
-            TreeColumnNode node = queue.remove();  
-            List<Integer> list = map.get(node.column);  
-            
-            if (list == null) 
-            {  
-                list = new ArrayList<>();  
-                map.put(node.column, list);  
-            }  
-            
-            list.add(node.treeNode.val);  
-            
-            if (node.treeNode.left != null)
-            {
-                queue.add(new TreeColumnNode(node.treeNode.left, node.column - 1));  
-            }
-            
-            if (node.treeNode.right != null) 
-            {
-                queue.add(new TreeColumnNode(node.treeNode.right, node.column + 1));  
-            }
-        }  
-        
-        List<Integer> columns = new ArrayList<>(map.keySet());  
-        Collections.sort(columns);  
-        
-        for(int i = 0; i < columns.size(); i++) 
-        {  
-            results.add(map.get(columns.get(i)));  
-        }  
-        
-        return results;  
-    }  
-}
diff --git a/314.binary-tree-vertical-order-traversal.84415876.Accepted.leetcode.java b/314.binary-tree-vertical-order-traversal.84415876.Accepted.leetcode.java
deleted file mode 100644
index 70e0006f..00000000
--- ./314.binary-tree-vertical-order-traversal.84415876.Accepted.leetcode.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-
-public class Solution 
-{  
-    class TreeColumnNode 
-    {  
-        TreeNode treeNode;  
-        int column;  
-    
-        TreeColumnNode(TreeNode treeNode, int column) 
-        {  
-            this.treeNode = treeNode;  
-            this.column = column;  
-        }  
-    } 
-    
-    public List<List<Integer>> verticalOrder(TreeNode root) 
-    {  
-        List<List<Integer>> results = new ArrayList<>();  
-        
-        if (root == null) 
-        {
-            return results;  
-        }
-        
-        Map<Integer, List<Integer>> map = new HashMap<>();  
-        LinkedList<TreeColumnNode> queue = new LinkedList<>();  
-        queue.add(new TreeColumnNode(root, 0));  
-        
-        while (!queue.isEmpty()) 
-        {  
-            TreeColumnNode node = queue.remove();  
-            List<Integer> list = map.get(node.column);  
-            
-            if (list == null) 
-            {  
-                list = new ArrayList<>();  
-                map.put(node.column, list);  
-            }  
-            
-            list.add(node.treeNode.val);  
-            
-            if (node.treeNode.left != null)
-            {
-                queue.add(new TreeColumnNode(node.treeNode.left, node.column - 1));  
-            }
-            
-            if (node.treeNode.right != null) 
-            {
-                queue.add(new TreeColumnNode(node.treeNode.right, node.column + 1));  
-            }
-        }  
-        
-        List<Integer> columns = new ArrayList<>(map.keySet());  
-        Collections.sort(columns);  
-        
-        for(int i = 0; i < columns.size(); i++) 
-        {  
-            results.add(map.get(columns.get(i)));  
-        }  
-        
-        return results;  
-    }  
-}
diff --git a/314.binary-tree-vertical-order-traversal.84416979.Accepted.leetcode.java b/314.binary-tree-vertical-order-traversal.84416979.Accepted.leetcode.java
deleted file mode 100644
index 0c7dde73..00000000
--- ./314.binary-tree-vertical-order-traversal.84416979.Accepted.leetcode.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-
-public class Solution 
-{  
-    class TreeColumnNode 
-    {  
-        TreeNode treeNode;  
-        int column;  
-    
-        TreeColumnNode(TreeNode treeNode, int column) 
-        {  
-            this.treeNode = treeNode;  
-            this.column = column;  
-        }  
-    } 
-    
-    public List<List<Integer>> verticalOrder(TreeNode root) 
-    {  
-        List<List<Integer>> results = new ArrayList<>();  
-        
-        if (root == null) 
-        {
-            return results;  
-        }
-        
-        Map<Integer, List<Integer>> map = new HashMap<>();  
-        LinkedList<TreeColumnNode> queue = new LinkedList<>();  
-        queue.add(new TreeColumnNode(root, 0));  
-        
-        while(!queue.isEmpty())
-        {
-            TreeColumnNode node = queue.poll();
-            List<Integer> list = map.get(node.column);
-            
-            if(list == null)
-            {
-                list = new ArrayList<Integer>();
-                map.put(node.column, list);
-            }
-            
-            list.add(node.treeNode.val);
-            
-            if(node.treeNode.left != null)
-            {
-                queue.offer(new TreeColumnNode(node.treeNode.left, node.column - 1));
-            }
-            
-            if(node.treeNode.right != null)
-            {
-                queue.offer(new TreeColumnNode(node.treeNode.right, node.column + 1));
-            }
-        }
-        
-        List<Integer> columns = new ArrayList<>(map.keySet());  
-        Collections.sort(columns);  
-        
-        for(int i = 0; i < columns.size(); i++) 
-        {  
-            results.add(map.get(columns.get(i)));  
-        }  
-        
-        return results;  
-    }  
-}
diff --git a/314.binary-tree-vertical-order-traversal.84417222.Accepted.leetcode.java b/314.binary-tree-vertical-order-traversal.84417222.Accepted.leetcode.java
deleted file mode 100644
index 2334b357..00000000
--- ./314.binary-tree-vertical-order-traversal.84417222.Accepted.leetcode.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-
-public class Solution 
-{  
-    class TreeColumnNode 
-    {  
-        TreeNode treeNode;  
-        int column;  
-    
-        TreeColumnNode(TreeNode treeNode, int column) 
-        {  
-            this.treeNode = treeNode;  
-            this.column = column;  
-        }  
-    } 
-    
-    public List<List<Integer>> verticalOrder(TreeNode root) 
-    {  
-        List<List<Integer>> results = new ArrayList<>();  
-        
-        if (root == null) 
-        {
-            return results;  
-        }
-        
-        Map<Integer, List<Integer>> map = new HashMap<>();  
-        LinkedList<TreeColumnNode> queue = new LinkedList<>();  
-        queue.add(new TreeColumnNode(root, 0));  
-        
-        while(!queue.isEmpty())
-        {
-            TreeColumnNode node = queue.poll();
-            List<Integer> list = map.get(node.column);
-            
-            if(list == null)
-            {
-                list = new ArrayList<Integer>();
-                map.put(node.column, list);
-            }
-            
-            list.add(node.treeNode.val);
-            
-            if(node.treeNode.left != null)
-            {
-                queue.offer(new TreeColumnNode(node.treeNode.left, node.column - 1));
-            }
-            
-            if(node.treeNode.right != null)
-            {
-                queue.offer(new TreeColumnNode(node.treeNode.right, node.column + 1));
-            }
-        }
-        
-        List<Integer> columns = new ArrayList<Integer>(map.keySet());  
-        Collections.sort(columns);
-        
-        for(Integer col : columns)
-        {
-            results.add(map.get(col));
-        }
-        
-        return results;  
-    }  
-}
diff --git a/314.binary-tree-vertical-order-traversal.96917778.Accepted.leetcode.java b/314.binary-tree-vertical-order-traversal.96917778.Accepted.leetcode.java
deleted file mode 100644
index ed991012..00000000
--- ./314.binary-tree-vertical-order-traversal.96917778.Accepted.leetcode.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-
-public class Solution 
-{  
-    class TreeColumnNode 
-    {  
-        TreeNode treeNode;  
-        int column;  
-    
-        TreeColumnNode(TreeNode treeNode, int column) 
-        {  
-            this.treeNode = treeNode;  
-            this.column = column;  
-        }  
-    } 
-    
-    public List<List<Integer>> verticalOrder(TreeNode root) 
-    {  
-        List<List<Integer>> results = new ArrayList<>(); 
-        
-        if (root == null)
-        {
-            return results;
-        }
-        
-        Map<Integer, List<Integer>> map = new HashMap<>();  
-        LinkedList<TreeColumnNode> queue = new LinkedList<>();  
-        queue.add(new TreeColumnNode(root, 0));  
-        
-        while (!queue.isEmpty()) 
-        {  
-            TreeColumnNode node = queue.remove();  
-            List<Integer> list = map.get(node.column);  
-            
-            if (list == null) 
-            {  
-                list = new ArrayList<>();  
-                map.put(node.column, list);  
-            }  
-            
-            list.add(node.treeNode.val);  
-            
-            if (node.treeNode.left != null)
-            {
-                queue.add(new TreeColumnNode(node.treeNode.left, node.column - 1));  
-            }
-            
-            if (node.treeNode.right != null) 
-            {
-                queue.add(new TreeColumnNode(node.treeNode.right, node.column + 1));  
-            }
-        }  
-        
-        List<Integer> columns = new ArrayList<>(map.keySet());  
-        Collections.sort(columns);  
-        
-        for(int i = 0; i < columns.size(); i++) 
-        {  
-            results.add(map.get(columns.get(i)));  
-        }  
-        
-        return results;  
-    }  
-}
diff --git a/315.count-of-smaller-numbers-after-self.65412060.Accepted.leetcode.java b/315.count-of-smaller-numbers-after-self.65412060.Accepted.leetcode.java
deleted file mode 100644
index 127b3f3a..00000000
--- ./315.count-of-smaller-numbers-after-self.65412060.Accepted.leetcode.java
+++ /dev/null
@@ -1,46 +0,0 @@
-  public class Solution
-  {
-
-    private void add(int[] bit, int i, int val)
-    {
-      for (; i < bit.length; i += i & -i)
-      {
-        bit[i] += val;
-      }
-    }
-
-    private int query(int[] bit, int i)
-    {
-      int ans = 0;
-
-      for (; i > 0; i -= i & -i)
-      {
-        ans += bit[i];
-      }
-
-      return ans;
-    }
-
-    public List<Integer> countSmaller(int[] nums)
-    {
-      int[] tmp = nums.clone();
-      Arrays.sort(tmp);
-
-      for (int i = 0; i < nums.length; i++)
-      {
-        nums[i] = Arrays.binarySearch(tmp, nums[i]) + 1;
-      }
-
-      int[] bit = new int[nums.length + 1];
-      Integer[] ans = new Integer[nums.length];
-
-      for (int i = nums.length - 1; i >= 0; i--)
-      {
-        ans[i] = query(bit, nums[i] - 1);
-        add(bit, nums[i], 1);
-      }
-
-      return Arrays.asList(ans);
-    }
-  }
-
diff --git a/315.count-of-smaller-numbers-after-self.65412142.Accepted.leetcode.java b/315.count-of-smaller-numbers-after-self.65412142.Accepted.leetcode.java
deleted file mode 100644
index 4c6d4e79..00000000
--- ./315.count-of-smaller-numbers-after-self.65412142.Accepted.leetcode.java
+++ /dev/null
@@ -1,157 +0,0 @@
-  public class Solution
-  {
-    static class segmentTreeNode
-    {
-      int start, end, count;
-      segmentTreeNode left, right;
-      segmentTreeNode(int start, int end, int count)
-      {
-        this.start = start;
-        this.end = end;
-        this.count = count;
-        left = null;
-        right = null;
-      }
-    }
-    public static List<Integer> countSmaller(int[] nums)
-    {
-      // write your code here
-      List<Integer> result = new ArrayList<Integer>();
-      int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
-
-      for (int i : nums)
-      {
-        min = Math.min(min, i);
-      }
-
-      if (min < 0)
-      {
-        for (int i = 0; i < nums.length; i++)
-        {
-          nums[i] -= min;//deal with negative numbers, seems a dummy way
-        }
-      }
-
-      for (int i : nums)
-      {
-        max = Math.max(max, i);
-      }
-
-      segmentTreeNode root = build(0, max);
-
-      for (int i = 0; i < nums.length; i++)
-      {
-        updateAdd(root, nums[i]);
-      }
-
-      for (int i = 0; i < nums.length; i++)
-      {
-        updateDel(root, nums[i]);
-        result.add(query(root, 0, nums[i] - 1));
-      }
-
-      return result;
-    }
-    public static segmentTreeNode build(int start, int end)
-    {
-      if (start > end)
-      {
-        return null;
-      }
-
-      if (start == end)
-      {
-        return new segmentTreeNode(start, end, 0);
-      }
-
-      int mid = (start + end) / 2;
-      segmentTreeNode root = new segmentTreeNode(start, end, 0);
-      root.left = build(start, mid);
-      root.right = build(mid + 1, end);
-      root.count = root.left.count + root.right.count;
-      return root;
-    }
-
-    public static int query(segmentTreeNode root, int start, int end)
-    {
-      if (root == null)
-      {
-        return 0;
-      }
-
-      if (root.start == start && root.end == end)
-      {
-        return root.count;
-      }
-
-      int mid = (root.start + root.end) / 2;
-
-      if (end < mid)
-      {
-        return query(root.left, start, end);
-      }
-      else if (start > end)
-      {
-        return query(root.right, start, end);
-      }
-      else
-      {
-        return query(root.left, start, mid) + query(root.right, mid + 1, end);
-      }
-    }
-
-    public static void updateAdd(segmentTreeNode root, int val)
-    {
-      if (root == null || root.start > val || root.end < val)
-      {
-        return;
-      }
-
-      if (root.start == val && root.end == val)
-      {
-        root.count ++;
-        return;
-      }
-
-      int mid = (root.start + root.end) / 2;
-
-      if (val <= mid)
-      {
-        updateAdd(root.left, val);
-      }
-      else
-      {
-        updateAdd(root.right, val);
-      }
-
-      root.count = root.left.count + root.right.count;
-    }
-
-    public static void updateDel(segmentTreeNode root, int val)
-    {
-      if (root == null || root.start > val || root.end < val)
-      {
-        return;
-      }
-
-      if (root.start == val && root.end == val)
-      {
-        root.count --;
-        return;
-      }
-
-      int mid = (root.start + root.end) / 2;
-
-      if (val <= mid)
-      {
-        updateDel(root.left, val);
-      }
-      else
-      {
-        updateDel(root.right, val);
-      }
-
-      root.count = root.left.count + root.right.count;
-    }
-  }
-
diff --git a/316.remove-duplicate-letters.64876970.Accepted.leetcode.java b/316.remove-duplicate-letters.64876970.Accepted.leetcode.java
deleted file mode 100644
index 11a2b4f8..00000000
--- ./316.remove-duplicate-letters.64876970.Accepted.leetcode.java
+++ /dev/null
@@ -1,64 +0,0 @@
-  public class Solution
-  {
-    public String removeDuplicateLetters(String s)
-    {
-      if (s == null || s.length() <= 1)
-      {
-        return s;
-      }
-
-      // Step 1: find the last index for each char
-      Map<Character, Integer> lastIndexMap = new HashMap<>();
-
-      for (int i = 0; i < s.length(); i++)
-      {
-        char c = s.charAt(i);
-        lastIndexMap.put(c, i);
-      }
-
-      // Step 2: for each character, find the smallest index in the map
-      // Then find out the smallest char before the index.
-      StringBuilder sb = new StringBuilder();
-      int start = 0;
-      int end = findSmallestIndex(lastIndexMap);
-
-      while (!lastIndexMap.isEmpty())
-      {
-        char curr = 'z' + 1;
-        int index = 0;
-
-        for (int i = start; i <= end; i++)
-        {
-          char c = s.charAt(i);
-
-          if ((c < curr) && (lastIndexMap.containsKey(c)))
-          {
-            curr = c;
-            index = i;
-          }
-        }
-
-        // append result
-        sb.append(curr);
-        lastIndexMap.remove(curr);
-        // update the start and end
-        start = index + 1;
-        end = findSmallestIndex(lastIndexMap);
-      }
-
-      return sb.toString();
-    }
-
-    private int findSmallestIndex(Map<Character, Integer> lastIndexMap)
-    {
-      int result = Integer.MAX_VALUE;
-
-      for (int index : lastIndexMap.values())
-      {
-        result = Math.min(result, index);
-      }
-
-      return result;
-    }
-  }
-
diff --git a/316.remove-duplicate-letters.90553975.Accepted.leetcode.java b/316.remove-duplicate-letters.90553975.Accepted.leetcode.java
deleted file mode 100644
index a401fcb5..00000000
--- ./316.remove-duplicate-letters.90553975.Accepted.leetcode.java
+++ /dev/null
@@ -1,63 +0,0 @@
-public class Solution
-{
-    public String removeDuplicateLetters(String s)
-    {
-        if (s == null || s.length() <= 1)
-        {
-            return s;
-        }
-
-        // Step 1: find the last index for each char
-        Map<Character, Integer> lastIndexMap = new HashMap<>();
-
-        for (int i = 0; i < s.length(); i++)
-        {
-            char c = s.charAt(i);
-            lastIndexMap.put(c, i);
-        }
-
-        // Step 2: for each character, find the smallest index in the map
-        // Then find out the smallest char before the index.
-        StringBuilder sb = new StringBuilder();
-        int start = 0;
-        int end = findSmallestIndex(lastIndexMap);
-
-        while (!lastIndexMap.isEmpty())
-        {
-            char curr = 'z' + 1;
-            int index = 0;
-
-            for (int i = start; i <= end; i++)
-            {
-                char c = s.charAt(i);
-
-                if ((c < curr) && (lastIndexMap.containsKey(c)))
-                {
-                    curr = c;
-                    index = i;
-                }
-            }
-
-            // append result
-            sb.append(curr);
-            lastIndexMap.remove(curr);
-            // update the start and end
-            start = index + 1;
-            end = findSmallestIndex(lastIndexMap);
-        }
-
-        return sb.toString();
-    }
-
-    private int findSmallestIndex(Map<Character, Integer> lastIndexMap)
-    {
-        int result = Integer.MAX_VALUE;
-
-        for (int index : lastIndexMap.values())
-        {
-            result = Math.min(result, index);
-        }
-
-        return result;
-    }
-}
diff --git a/316.remove-duplicate-letters.90988516.Wrong-Answer.leetcode.java b/316.remove-duplicate-letters.90988516.Wrong-Answer.leetcode.java
deleted file mode 100644
index 993594b7..00000000
--- ./316.remove-duplicate-letters.90988516.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-public class Solution 
-{
-    public String removeDuplicateLetters(String s) 
-    {
-        Map<Character, Integer> counts = new HashMap<Character, Integer>();
-        char[] chs = s.toCharArray();
-        
-        for (char c : s.toCharArray())
-        {
-            if (counts.get(c) == null)
-            {
-                counts.put(c, 0);
-            }
-            
-            counts.put(c, counts.get(c) + 1);
-        }
-        
-        Stack<Character> stack = new Stack<Character>();
-        
-        for (char c : chs)
-        {
-            if (stack.contains(c))
-            {
-                continue;
-            }
-            
-            while (!stack.isEmpty() && stack.peek() > c && counts.get(stack.peek()) > 1)
-            {
-                stack.pop();
-            }
-            
-            stack.push(c);
-        }
-        
-        StringBuilder sb = new StringBuilder();
-        
-        while (!stack.isEmpty())
-        {
-            sb.append(stack.pop());
-        }
-        
-        return sb.reverse().toString();
-    }
-}
diff --git a/316.remove-duplicate-letters.90989709.Wrong-Answer.leetcode.java b/316.remove-duplicate-letters.90989709.Wrong-Answer.leetcode.java
deleted file mode 100644
index 46906c81..00000000
--- ./316.remove-duplicate-letters.90989709.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-public class Solution 
-{
-    public String removeDuplicateLetters(String s) 
-    {
-        Map<Character, Integer> counts = new HashMap<Character, Integer>();
-        char[] chs = s.toCharArray();
-        
-        for (char c : s.toCharArray())
-        {
-            if (counts.get(c) == null)
-            {
-                counts.put(c, 0);
-            }
-            
-            counts.put(c, counts.get(c) + 1);
-        }
-        
-        Stack<Character> stack = new Stack<Character>();
-        
-        for (char c : chs)
-        {
-            if (stack.contains(c))
-            {
-                counts.put(c, counts.get(c) - 1);
-                continue;
-            }
-            
-            while (!stack.isEmpty() && stack.peek() > c && counts.get(stack.peek()) > 1)
-            {
-                stack.pop();
-            }
-            
-            stack.push(c);
-        }
-        
-        StringBuilder sb = new StringBuilder();
-        
-        while (!stack.isEmpty())
-        {
-            sb.append(stack.pop());
-        }
-        
-        return sb.reverse().toString();
-    }
-}
diff --git a/316.remove-duplicate-letters.90990069.Wrong-Answer.leetcode.java b/316.remove-duplicate-letters.90990069.Wrong-Answer.leetcode.java
deleted file mode 100644
index f96c7f89..00000000
--- ./316.remove-duplicate-letters.90990069.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-public class Solution 
-{
-    public String removeDuplicateLetters(String s) 
-    {
-        Map<Character, Integer> counts = new HashMap<Character, Integer>();
-        char[] chs = s.toCharArray();
-        
-        for (char c : s.toCharArray())
-        {
-            if (counts.get(c) == null)
-            {
-                counts.put(c, 0);
-            }
-            
-            counts.put(c, counts.get(c) + 1);
-        }
-        
-        Stack<Character> stack = new Stack<Character>();
-        
-        for (char c : chs)
-        {
-            System.out.println("c --> " + c);
-            
-            if (stack.contains(c))
-            {
-                counts.put(c, counts.get(c) - 1);
-                continue;
-            }
-            
-            while (!stack.isEmpty() && stack.peek() > c && counts.get(stack.peek()) > 1)
-            {
-                stack.pop();
-            }
-            
-            System.out.println("push c --> " + c);
-            stack.push(c);
-        }
-        
-        StringBuilder sb = new StringBuilder();
-        
-        while (!stack.isEmpty())
-        {
-            sb.append(stack.pop());
-        }
-        
-        return sb.reverse().toString();
-    }
-}
diff --git a/316.remove-duplicate-letters.90990263.Wrong-Answer.leetcode.java b/316.remove-duplicate-letters.90990263.Wrong-Answer.leetcode.java
deleted file mode 100644
index 9b7f25e0..00000000
--- ./316.remove-duplicate-letters.90990263.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-public class Solution 
-{
-    public String removeDuplicateLetters(String s) 
-    {
-        Map<Character, Integer> counts = new HashMap<Character, Integer>();
-        char[] chs = s.toCharArray();
-        
-        for (char c : s.toCharArray())
-        {
-            if (counts.get(c) == null)
-            {
-                counts.put(c, 0);
-            }
-            
-            counts.put(c, counts.get(c) + 1);
-        }
-        
-        Stack<Character> stack = new Stack<Character>();
-        
-        for (char c : chs)
-        {
-            System.out.println("c --> " + c);
-            
-            if (stack.contains(c))
-            {
-                counts.put(c, counts.get(c) - 1);
-                continue;
-            }
-            
-            while (!stack.isEmpty() && stack.peek() > c && counts.get(stack.peek()) > 1)
-            {
-                System.out.println("count char --> " + counts.get(stack.peek()));
-                System.out.println("pop char --> " + stack.peek());
-                stack.pop();
-            }
-            
-            System.out.println("push char --> " + c);
-            stack.push(c);
-        }
-        
-        StringBuilder sb = new StringBuilder();
-        
-        while (!stack.isEmpty())
-        {
-            sb.append(stack.pop());
-        }
-        
-        return sb.reverse().toString();
-    }
-}
diff --git a/316.remove-duplicate-letters.90990464.Accepted.leetcode.java b/316.remove-duplicate-letters.90990464.Accepted.leetcode.java
deleted file mode 100644
index b6eab939..00000000
--- ./316.remove-duplicate-letters.90990464.Accepted.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution 
-{
-    public String removeDuplicateLetters(String s) 
-    {
-        Map<Character, Integer> counts = new HashMap<Character, Integer>();
-        char[] chs = s.toCharArray();
-        
-        for (char c : s.toCharArray())
-        {
-            if (counts.get(c) == null)
-            {
-                counts.put(c, 0);
-            }
-            
-            counts.put(c, counts.get(c) + 1);
-        }
-        
-        Stack<Character> stack = new Stack<Character>();
-        
-        for (char c : chs)
-        {
-            if (stack.contains(c))
-            {
-                counts.put(c, counts.get(c) - 1);
-                continue;
-            }
-            
-            while (!stack.isEmpty() && stack.peek() > c && counts.get(stack.peek()) > 1)
-            {
-                System.out.println("count char --> " + counts.get(stack.peek()));
-                System.out.println("pop char --> " + stack.peek());
-                counts.put(stack.peek(), counts.get(stack.peek()) - 1);
-                stack.pop();
-            }
-            
-            System.out.println("push char --> " + c);
-            stack.push(c);
-        }
-        
-        StringBuilder sb = new StringBuilder();
-        
-        while (!stack.isEmpty())
-        {
-            sb.append(stack.pop());
-        }
-        
-        return sb.reverse().toString();
-    }
-}
diff --git a/316.remove-duplicate-letters.90990565.Accepted.leetcode.java b/316.remove-duplicate-letters.90990565.Accepted.leetcode.java
deleted file mode 100644
index 64b5aa9d..00000000
--- ./316.remove-duplicate-letters.90990565.Accepted.leetcode.java
+++ /dev/null
@@ -1,46 +0,0 @@
-public class Solution 
-{
-    public String removeDuplicateLetters(String s) 
-    {
-        Map<Character, Integer> counts = new HashMap<Character, Integer>();
-        char[] chs = s.toCharArray();
-        
-        for (char c : s.toCharArray())
-        {
-            if (counts.get(c) == null)
-            {
-                counts.put(c, 0);
-            }
-            
-            counts.put(c, counts.get(c) + 1);
-        }
-        
-        Stack<Character> stack = new Stack<Character>();
-        
-        for (char c : chs)
-        {
-            if (stack.contains(c))
-            {
-                counts.put(c, counts.get(c) - 1);
-                continue;
-            }
-            
-            while (!stack.isEmpty() && stack.peek() > c && counts.get(stack.peek()) > 1)
-            {
-                counts.put(stack.peek(), counts.get(stack.peek()) - 1);
-                stack.pop();
-            }
-            
-            stack.push(c);
-        }
-        
-        StringBuilder sb = new StringBuilder();
-        
-        while (!stack.isEmpty())
-        {
-            sb.append(stack.pop());
-        }
-        
-        return sb.reverse().toString();
-    }
-}
diff --git a/317.shortest-distance-from-all-buildings.79364638.Accepted.leetcode.java b/317.shortest-distance-from-all-buildings.79364638.Accepted.leetcode.java
deleted file mode 100644
index ef26f5c3..00000000
--- ./317.shortest-distance-from-all-buildings.79364638.Accepted.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-public class Solution {
-    public int shortestDistance(int[][] grid) {
-        if (grid==null || grid.length==0 || grid[0].length==0) return -1;
-        int m = grid.length;
-        int n = grid[0].length;
-        int[][] dist = new int[m][n];
-        int[][] reach = new int[m][n];
-        int houseNum = 0;
-        int[][] directions = {{-1,0},{1,0},{0,-1},{0,1}};
-        
-        for (int i=0; i<m; i++) {
-            for (int j=0; j<n; j++) {
-                if (grid[i][j] == 1) {
-                    houseNum++;
-                    int level = 0;
-                    boolean[][] visited = new boolean[m][n];
-                    LinkedList<Integer> queue = new LinkedList<Integer>();
-                    queue.offer(i*n+j);
-                    visited[i][j] = true;
-                    while (!queue.isEmpty()) {
-                        int size = queue.size();
-                        for (int t=0; t<size; t++) {
-                            int cur = queue.poll();
-                            int x = cur/n;
-                            int y = cur%n;
-                            for (int[] dir : directions) {
-                                int xnew = x + dir[0];
-                                int ynew = y + dir[1];
-                                if (xnew>=0 && xnew<m && ynew>=0 && ynew<n && !visited[xnew][ynew] && grid[xnew][ynew]==0) {
-                                    queue.offer(xnew*n+ynew);
-                                    visited[xnew][ynew] = true;
-                                    dist[xnew][ynew] += level+1;
-                                    reach[xnew][ynew]++;
-                                }
-                            }
-                        }
-                        level++;
-                    }
-                }
-            }
-        }
-        
-        int minDist = Integer.MAX_VALUE;
-        for (int i=0; i<m; i++) {
-            for (int j=0; j<n; j++) {
-                if (grid[i][j]==0 && reach[i][j] == houseNum) {
-                    minDist = Math.min(minDist, dist[i][j]);
-                }
-            }
-        }
-        return minDist==Integer.MAX_VALUE? -1 : minDist;
-    }
-}
diff --git a/318.maximum-product-of-word-lengths.64988464.Accepted.leetcode.java b/318.maximum-product-of-word-lengths.64988464.Accepted.leetcode.java
deleted file mode 100644
index b0075746..00000000
--- ./318.maximum-product-of-word-lengths.64988464.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-  public class Solution
-  {
-    public int maxProduct(String[] words)
-    {
-      int n = words.length;
-      int[] elements = new int[n];
-
-      for (int i = 0; i < n; i++)
-      {
-        for (int j = 0; j < words[i].length(); j++)
-        {
-          elements[i] |= 1 << (words[i].charAt(j) - 'a');
-        }
-      }
-
-      int ans = 0;
-
-      for (int i = 0; i < n; i++)
-      {
-        for (int j = i + 1; j < n; j++)
-        {
-          if ((elements[i] & elements[j]) == 0)
-          {
-            ans = Math.max(ans, words[i].length() * words[j].length());
-          }
-        }
-      }
-
-      return ans;
-    }
-  }
-
diff --git a/319.bulb-switcher.48736332.Accepted.leetcode.java b/319.bulb-switcher.48736332.Accepted.leetcode.java
deleted file mode 100644
index 6f0d8073..00000000
--- ./319.bulb-switcher.48736332.Accepted.leetcode.java
+++ /dev/null
@@ -1,8 +0,0 @@
-  public class Solution
-  {
-    public int bulbSwitch(int n)
-    {
-      return (int) Math.sqrt(n);
-    }
-  }
-
diff --git a/32.longest-valid-parentheses.34540184.Accepted.leetcode.java b/32.longest-valid-parentheses.34540184.Accepted.leetcode.java
deleted file mode 100644
index 19ce222d..00000000
--- ./32.longest-valid-parentheses.34540184.Accepted.leetcode.java
+++ /dev/null
@@ -1,46 +0,0 @@
-  public class Solution
-  {
-    int longestValidParentheses(String s)
-    {
-      Stack<int[]> stack = new Stack<int[]>();
-      int result = 0;
-
-      for (int i = 0; i <= s.length() - 1; i++)
-      {
-        char c = s.charAt(i);
-
-        if (c == '(')
-        {
-          int[] a = {i, 0};
-          stack.push(a);
-        }
-        else
-        {
-          if (stack.empty() || stack.peek()[1] == 1)
-          {
-            int[] a = {i, 1};
-            stack.push(a);
-          }
-          else
-          {
-            stack.pop();
-            int currentLen = 0;
-
-            if (stack.empty())
-            {
-              currentLen = i + 1;
-            }
-            else
-            {
-              currentLen = i - stack.peek()[0];
-            }
-
-            result = Math.max(result, currentLen);
-          }
-        }
-      }
-
-      return result;
-    }
-  }
-
diff --git a/32.longest-valid-parentheses.34541385.Accepted.leetcode.java b/32.longest-valid-parentheses.34541385.Accepted.leetcode.java
deleted file mode 100644
index 686bd64e..00000000
--- ./32.longest-valid-parentheses.34541385.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-  public class Solution
-  {
-    int longestValidParentheses(String s)
-    {
-      if (s == null || s.length() == 0)
-      {
-        return 0;
-      }
-
-      LinkedList<Integer> stack = new LinkedList<Integer>();
-      int start = 0;
-      int max = 0;
-
-      for (int i = 0; i < s.length(); i++)
-      {
-        if (s.charAt(i) == '(')
-        {
-          stack.push(i);
-        }
-        else
-        {
-          if (stack.isEmpty())
-          {
-            start = i + 1;
-          }
-          else
-          {
-            stack.pop();
-            max = stack.isEmpty() ? Math.max(max, i - start + 1) : Math.max(max, i - stack.peek());
-          }
-        }
-      }
-
-      return max;
-    }
-  }
-
diff --git a/32.longest-valid-parentheses.34541752.Accepted.leetcode.java b/32.longest-valid-parentheses.34541752.Accepted.leetcode.java
deleted file mode 100644
index 719d7975..00000000
--- ./32.longest-valid-parentheses.34541752.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-  public class Solution
-  {
-    int longestValidParentheses(String s)
-    {
-      int res = 0;
-      Stack<Integer> stack = new Stack<Integer>();
-      char[] arr = s.toCharArray();
-
-      for (int i = 0; i < arr.length; i++)
-      {
-        if (arr[i] == ')' && !stack.isEmpty() && arr[stack.peek()] == '(')
-        {
-          stack.pop();
-
-          if (stack.isEmpty())
-          {
-            res = i + 1;
-          }
-          else
-          {
-            res = Math.max(res, i - stack.peek());
-          }
-        }
-        else
-        {
-          stack.push(i);
-        }
-      }
-
-      return res;
-    }
-  }
-
diff --git a/32.longest-valid-parentheses.34542086.Accepted.leetcode.java b/32.longest-valid-parentheses.34542086.Accepted.leetcode.java
deleted file mode 100644
index 319a78e6..00000000
--- ./32.longest-valid-parentheses.34542086.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-  public class Solution
-  {
-    public int longestValidParentheses(String s)
-    {
-      if (s.length() == 0)
-      {
-        return 0;
-      }
-
-      int maxLen = 0;
-      int[] d = new int[s.length()];
-      // d[i] means substring starts with i has max valid lenth of d[i]
-      d[s.length() - 1] = 0;
-
-      for (int i = s.length() - 2; i >= 0; i--)
-      {
-        if (s.charAt(i) == ')')
-        {
-          d[i] = 0;
-        }
-        else
-        {
-          int j = (i + 1) + d[i + 1];
-
-          if (j < s.length() && s.charAt(j) == ')')
-          {
-            d[i] = d[i + 1] + 2; //(()())的外包情况
-
-            if (j + 1 < s.length())
-            {
-              d[i] += d[j + 1];  //()()的后面还有的情况
-            }
-          }
-        }
-
-        maxLen = Math.max(maxLen, d[i]);
-      }
-
-      return maxLen;
-    }
-  }
-
diff --git a/32.longest-valid-parentheses.70561939.Time-Limit-Exceeded.leetcode.java b/32.longest-valid-parentheses.70561939.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index b1f71361..00000000
--- ./32.longest-valid-parentheses.70561939.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-  public class Solution
-  {
-    int longestValidParentheses(String s)
-    {
-      int result = 0;
-      Stack<Integer> stack = new Stack<Integer>();
-      char[] charArray = s.toCharArray();
-
-      for (int i = 0; i < charArray.length; i++)
-      {
-        if (charArray[i] == ')' && !stack.isEmpty()
-            && charArray[stack.peek()] == '(')
-        {
-          stack.pop();
-
-          if (stack.isEmpty())
-          {
-            result = i + 1;
-          }
-          else
-          {
-            result = Math.max(result, i - stack.peek());
-          }
-        }
-        else
-        {
-          stack.push(i);
-        }
-      }
-
-      return result;
-    }
-  }
-
diff --git a/32.longest-valid-parentheses.70562938.Time-Limit-Exceeded.leetcode.java b/32.longest-valid-parentheses.70562938.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index d40fc901..00000000
--- ./32.longest-valid-parentheses.70562938.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution {  
-    public int longestValidParentheses(String s) {  
-        if(s==null||s.length()==0) {  
-            return 0;  
-        }  
-        int start     = -1;  
-        int maxLength = 0;  
-        Stack stack   = new Stack();  
-        for(int i=0;i<s.length();i++) {  
-            if(s.charAt(i)=='(') {  
-                stack.push(i);  
-            } else {  
-                if(!stack.empty()) {  
-                    stack.pop();  
-                    if(stack.empty()==true) {  
-                        maxLength = Math.max(i - start , maxLength);  
-                    } else {  
-                        maxLength = Math.max(i - (int)stack.peek() , maxLength);  
-                    }  
-                } else {  
-                    start = i;  
-                }  
-            }  
-        }  
-      
-        return maxLength;  
-    }  
-}
diff --git a/32.longest-valid-parentheses.70563061.Time-Limit-Exceeded.leetcode.java b/32.longest-valid-parentheses.70563061.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 1371b40c..00000000
--- ./32.longest-valid-parentheses.70563061.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution {  
-    public static int longestValidParentheses(String s) {
-        if (s==null||s.length()==0){
-            return 0;
-            }
-        
-        int start=0;
-        int maxLen=0;
-        Stack<Integer> stack=new Stack<Integer>();
-        
-        for (int i=0; i<s.length();i++){
-            if (s.charAt(i)=='('){
-                stack.push(i);
-            }else{
-                if (stack.isEmpty()){
-                    // record the position before first left parenthesis
-                    start=i+1;
-                }else{
-                    stack.pop();
-                    // if stack is empty mean the positon before the valid left parenthesis is "last"
-                    if (stack.isEmpty()){
-                        maxLen=Math.max(i-start+1, maxLen);
-                    }
-                    else{
-                        // if stack is not empty, then for current i the longest valid parenthesis length is
-                        // i-stack.peek()
-                        maxLen=Math.max(i-stack.peek(),maxLen);
-                    }
-                }
-            }
-        }
-            return maxLen;
-            }
-}
diff --git a/32.longest-valid-parentheses.70563105.Time-Limit-Exceeded.leetcode.java b/32.longest-valid-parentheses.70563105.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 6f4a1952..00000000
--- ./32.longest-valid-parentheses.70563105.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution {  
-    public static int longestValidParentheses(String s) {
-	Stack<int[]> stack = new Stack<int[]>();
-	int result = 0;
- 
-	for(int i=0; i<=s.length()-1; i++){
-		char c = s.charAt(i);
-		if(c=='('){
-			int[] a = {i,0};
-			stack.push(a);
-		}else{
-			if(stack.empty()||stack.peek()[1]==1){
-				int[] a = {i,1};
-				stack.push(a);
-			}else{
-				stack.pop();
-				int currentLen=0;
-				if(stack.empty()){
-					currentLen = i+1;
-				}else{
-					currentLen = i-stack.peek()[0];
-				}
-				result = Math.max(result, currentLen);
-			}
-		}
-	}
- 
-	return result;
-}
-}
diff --git a/32.longest-valid-parentheses.70563182.Accepted.leetcode.java b/32.longest-valid-parentheses.70563182.Accepted.leetcode.java
deleted file mode 100644
index 9c255054..00000000
--- ./32.longest-valid-parentheses.70563182.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution {
-    public int longestValidParentheses(String s) {
-        if (s == null || s.length() == 0) {
-            return 0;
-        }    
-
-        // in this case, res[i] means the max length of parensis ended at i; if not, then res[i] = 0
-        int[] res = new int[s.length()];
-        int open = 0, max = 0;
-
-        for (int i = 0; i < s.length(); i++) {
-            char c = s.charAt(i);
-            if (c == '(') {
-                open++;
-                //res[i] = res[i-1];
-            } else {
-                if (open > 0) {
-                    res[i] = res[i-1] + 2;
-                    // important lines here
-                    if (i >= res[i]) {
-                        res[i] += res[i-res[i]];
-                    }
-                    open--;
-                }
-            }
-
-            max = Math.max(max, res[i]);
-        }
-
-        return max;
-    }
-}
diff --git a/320.generalized-abbreviation.70915581.Accepted.leetcode.java b/320.generalized-abbreviation.70915581.Accepted.leetcode.java
deleted file mode 100644
index c4455d80..00000000
--- ./320.generalized-abbreviation.70915581.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution {
-    public List<String> generateAbbreviations(String word) {
-        List<String> res = new ArrayList<String>();
-        dfs(0, word.toCharArray(), new StringBuffer(), 0, res);
-        return res;
-    }
-    
-    public void dfs(int pos, char[] word, StringBuffer sb, int count, List<String> res) {
-        int len = word.length;
-        int sbOriginSize = sb.length();
-        if (pos == len) {
-            if (count > 0) {
-                sb.append(count);
-            }
-            res.add(sb.toString());
-        }
-        else {
-            //choose to abbr word[pos]
-            dfs(pos+1, word, sb, count+1, res);
-            
-            //choose not to abbr word[pos]
-            //first append previous count to sb if count>0
-            if (count > 0) sb.append(count);
-            sb.append(word[pos]);
-            dfs(pos+1, word, sb, 0, res);
-        }
-        sb.setLength(sbOriginSize);
-    }
-}
diff --git a/320.generalized-abbreviation.85217000.Accepted.leetcode.java b/320.generalized-abbreviation.85217000.Accepted.leetcode.java
deleted file mode 100644
index f09444fe..00000000
--- ./320.generalized-abbreviation.85217000.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution 
-{
-    public List<String> generateAbbreviations(String word) 
-    {
-        List<String> res = new ArrayList<String>();
-        dfs(0, word.toCharArray(), new StringBuffer(), 0, res);
-        return res;
-    }
-    
-    public void dfs(int pos, char[] word, StringBuffer sb, int count, List<String> res) 
-    {
-        int len = word.length;
-        int sbOriginSize = sb.length();
-    
-        if (pos == len) 
-        {
-            if (count > 0) 
-            {
-                sb.append(count);
-            }
-            
-            res.add(sb.toString());
-        }
-        else 
-        {
-            //choose to abbr word[pos]
-            dfs(pos+1, word, sb, count+1, res);
-            
-            //choose not to abbr word[pos]
-            //first append previous count to sb if count>0
-            if (count > 0) 
-            {
-                sb.append(count);
-            }
-            
-            sb.append(word[pos]);
-            dfs(pos+1, word, sb, 0, res);
-        }
-        
-        sb.setLength(sbOriginSize);
-    }
-}
diff --git a/320.generalized-abbreviation.85217044.Accepted.leetcode.java b/320.generalized-abbreviation.85217044.Accepted.leetcode.java
deleted file mode 100644
index 206074c0..00000000
--- ./320.generalized-abbreviation.85217044.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution 
-{
-    public List<String> generateAbbreviations(String word) 
-    {
-        List<String> res = new ArrayList<String>();
-        dfs(0, word.toCharArray(), new StringBuffer(), 0, res);
-        return res;
-    }
-    
-    public void dfs(int pos, char[] word, StringBuffer sb, int count, List<String> res) 
-    {
-        int len = word.length;
-        int sbOriginSize = sb.length();
-    
-        if (pos == len) 
-        {
-            if (count > 0) 
-            {
-                sb.append(count);
-            }
-            
-            res.add(sb.toString());
-        }
-        else 
-        {
-            //choose to abbr word[pos]
-            dfs(pos + 1, word, sb, count + 1, res);
-            
-            //choose not to abbr word[pos]
-            //first append previous count to sb if count>0
-            if (count > 0) 
-            {
-                sb.append(count);
-            }
-            
-            sb.append(word[pos]);
-            dfs(pos + 1, word, sb, 0, res);
-        }
-        
-        sb.setLength(sbOriginSize);
-    }
-}
diff --git a/320.generalized-abbreviation.85217375.Accepted.leetcode.java b/320.generalized-abbreviation.85217375.Accepted.leetcode.java
deleted file mode 100644
index e6714d57..00000000
--- ./320.generalized-abbreviation.85217375.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution 
-{
-    public List<String> generateAbbreviations(String word) 
-    {
-        List<String> result = new ArrayList<String>();
-        dfs(0, word.toCharArray(), new StringBuffer(), 0, result);
-        return result;
-    }
-    
-    public void dfs(int pos, char[] word, StringBuffer sb, int count, List<String> result) 
-    {
-        int len = word.length;
-        int sbOriginSize = sb.length();
-    
-        if (pos == len) 
-        {
-            if (count > 0) 
-            {
-                sb.append(count);
-            }
-            
-            result.add(sb.toString());
-        }
-        else 
-        {
-            //choose to abbr word[pos]
-            dfs(pos + 1, word, sb, count + 1, result);
-            
-            //choose not to abbr word[pos]
-            //first append previous count to sb if count>0
-            if (count > 0) 
-            {
-                sb.append(count);
-            }
-            
-            sb.append(word[pos]);
-            dfs(pos + 1, word, sb, 0, result);
-        }
-        
-        sb.setLength(sbOriginSize);
-    }
-}
diff --git a/320.generalized-abbreviation.85421345.Accepted.leetcode.java b/320.generalized-abbreviation.85421345.Accepted.leetcode.java
deleted file mode 100644
index 73a37651..00000000
--- ./320.generalized-abbreviation.85421345.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution {
-    public List<String> generateAbbreviations(String word){
-        List<String> res = new ArrayList<String>();
-        backtrack(res, word, 0, "", 0);
-        return res;
-    }
-
-    private void backtrack(List<String> res, String word, int pos, String cur, int count){
-        if(pos==word.length()){
-            if(count > 0)
-                cur += count;
-            res.add(cur);
-        }
-        else{
-            backtrack(res,word,pos+1,cur, count+1);
-            backtrack(res,word,pos+1,cur+(count>0?count:"")+word.charAt(pos),0);
-        }
-    }
-}
-
diff --git a/320.generalized-abbreviation.85421584.Accepted.leetcode.java b/320.generalized-abbreviation.85421584.Accepted.leetcode.java
deleted file mode 100644
index ed85bb8a..00000000
--- ./320.generalized-abbreviation.85421584.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution 
-{
-    public List<String> generateAbbreviations(String word)
-    {
-        List<String> res = new ArrayList<String>();
-        backtrack(res, word, 0, "", 0);
-        return res;
-    }
-
-    private void backtrack(List<String> res, String word, int pos, String cur, int count)
-    {
-        if (pos == word.length())
-        {
-            if (count > 0)
-            {
-                cur += count;
-            }
-                
-            res.add(cur);
-        }
-        else
-        {
-            backtrack(res, word, pos + 1, cur, count + 1);
-            backtrack(res, word, pos + 1, cur + (count > 0 ? count : "") + word.charAt(pos), 0);
-        }
-    }
-}
diff --git a/320.generalized-abbreviation.85517262.Wrong-Answer.leetcode.java b/320.generalized-abbreviation.85517262.Wrong-Answer.leetcode.java
deleted file mode 100644
index 2008bb60..00000000
--- ./320.generalized-abbreviation.85517262.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,40 +0,0 @@
-public class Solution 
-{
-    public List<String> generateAbbreviations(String word) 
-    {
-        List<String> result = new ArrayList<String>();
-        dfs(0, word.toCharArray(), new StringBuffer(), 0, result);
-        return result;
-    }
-    
-    public void dfs(int pos, char[] word, StringBuffer sb, int count, List<String> result) 
-    {
-        int len = word.length;
-        int sbOriginSize = sb.length();
-    
-        if (pos == len) 
-        {
-            if (count > 0) 
-            {
-                sb.append(count);
-            }
-            
-            result.add(sb.toString());
-            return;
-        }
-        
-        //choose to abbr word[pos]
-        dfs(pos + 1, word, sb, count + 1, result);
-            
-        //choose not to abbr word[pos]
-        //first append previous count to sb if count>0
-        if (count > 0) 
-        {
-            sb.append(count);
-        }
-            
-        sb.append(word[pos]);
-        dfs(pos + 1, word, sb, 0, result);
-        sb.setLength(sbOriginSize);
-    }
-}
diff --git a/320.generalized-abbreviation.85517353.Accepted.leetcode.java b/320.generalized-abbreviation.85517353.Accepted.leetcode.java
deleted file mode 100644
index 6a6dbd9b..00000000
--- ./320.generalized-abbreviation.85517353.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution 
-{
-    public List<String> generateAbbreviations(String word) 
-    {
-        List<String> result = new ArrayList<String>();
-        dfs(0, word.toCharArray(), new StringBuffer(), 0, result);
-        return result;
-    }
-    
-    public void dfs(int pos, char[] word, StringBuffer sb, int count, List<String> result) 
-    {
-        int len = word.length;
-        int sbOriginSize = sb.length();
-    
-        if (pos == len) 
-        {
-            if (count > 0) 
-            {
-                sb.append(count);
-            }
-            
-            result.add(sb.toString());
-            sb.setLength(sbOriginSize);
-            return;
-        }
-        
-        //choose to abbr word[pos]
-        dfs(pos + 1, word, sb, count + 1, result);
-            
-        //choose not to abbr word[pos]
-        //first append previous count to sb if count>0
-        if (count > 0) 
-        {
-            sb.append(count);
-        }
-            
-        sb.append(word[pos]);
-        dfs(pos + 1, word, sb, 0, result);
-        sb.setLength(sbOriginSize);
-    }
-}
diff --git a/320.generalized-abbreviation.85517449.Accepted.leetcode.java b/320.generalized-abbreviation.85517449.Accepted.leetcode.java
deleted file mode 100644
index 6e59b426..00000000
--- ./320.generalized-abbreviation.85517449.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution 
-{
-    public List<String> generateAbbreviations(String word) 
-    {
-        List<String> result = new ArrayList<String>();
-        dfs(0, word.toCharArray(), new StringBuffer(), 0, result);
-        return result;
-    }
-    
-    public void dfs(int pos, char[] word, StringBuffer sb, int count, List<String> result) 
-    {
-        int len = word.length;
-        int sbOriginSize = sb.length();
-    
-        if (pos == len) 
-        {
-            if (count > 0) 
-            {
-                sb.append(count);
-            }
-            
-            result.add(sb.toString());
-            return;
-        }
-        
-        //choose to abbr word[pos]
-        dfs(pos + 1, word, sb, count + 1, result);
-        sb.setLength(sbOriginSize);
-            
-        //choose not to abbr word[pos]
-        //first append previous count to sb if count>0
-        if (count > 0) 
-        {
-            sb.append(count);
-        }
-            
-        sb.append(word[pos]);
-        dfs(pos + 1, word, sb, 0, result);
-        sb.setLength(sbOriginSize);
-    }
-}
diff --git a/321.create-maximum-number.64755362.Accepted.leetcode.java b/321.create-maximum-number.64755362.Accepted.leetcode.java
deleted file mode 100644
index bdd84af6..00000000
--- ./321.create-maximum-number.64755362.Accepted.leetcode.java
+++ /dev/null
@@ -1,67 +0,0 @@
-  public class Solution
-  {
-    public int[] maxNumber(int[] nums1, int[] nums2, int k)
-    {
-      int[] ans = new int[k];
-
-      for (int i = Math.max(k - nums2.length, 0); i <= Math.min(nums1.length, k); i++)
-      {
-        int[] res1 = get_max_sub_array(nums1, i);
-        int[] res2 = get_max_sub_array(nums2, k - i);
-        int[] res = new int[k];
-        int pos1 = 0, pos2 = 0, tpos = 0;
-
-        while (pos1 < res1.length || pos2 < res2.length)
-        {
-          res[tpos++] = greater(res1, pos1, res2, pos2) ? res1[pos1++] : res2[pos2++];
-        }
-
-        if (!greater(ans, 0, res, 0))
-        {
-          ans = res;
-        }
-      }
-
-      return ans;
-    }
-
-    public boolean greater(int[] nums1, int start1, int[] nums2, int start2)
-    {
-      for (; start1 < nums1.length && start2 < nums2.length; start1++, start2++)
-      {
-        if (nums1[start1] > nums2[start2])
-        {
-          return true;
-        }
-
-        if (nums1[start1] < nums2[start2])
-        {
-          return false;
-        }
-      }
-
-      return start1 != nums1.length;
-    }
-
-    public int[] get_max_sub_array(int[] nums, int k)
-    {
-      int[] res = new int[k];
-      int len = 0;
-
-      for (int i = 0; i < nums.length; i++)
-      {
-        while (len > 0 && len + nums.length - i > k && res[len - 1] < nums[i])
-        {
-          len--;
-        }
-
-        if (len < k)
-        {
-          res[len++] = nums[i];
-        }
-      }
-
-      return res;
-    }
-  }
-
diff --git a/321.create-maximum-number.90261814.Accepted.leetcode.java b/321.create-maximum-number.90261814.Accepted.leetcode.java
deleted file mode 100644
index cfe102a4..00000000
--- ./321.create-maximum-number.90261814.Accepted.leetcode.java
+++ /dev/null
@@ -1,66 +0,0 @@
-public class Solution
-{
-    public int[] maxNumber(int[] nums1, int[] nums2, int k)
-    {
-        int[] ans = new int[k];
-
-        for (int i = Math.max(k - nums2.length, 0); i <= Math.min(nums1.length, k); i++)
-        {
-            int[] res1 = get_max_sub_array(nums1, i);
-            int[] res2 = get_max_sub_array(nums2, k - i);
-            int[] res = new int[k];
-            int pos1 = 0, pos2 = 0, tpos = 0;
-
-            while (pos1 < res1.length || pos2 < res2.length)
-            {
-                res[tpos++] = greater(res1, pos1, res2, pos2) ? res1[pos1++] : res2[pos2++];
-            }
-
-            if (!greater(ans, 0, res, 0))
-            {
-                ans = res;
-            }
-        }
-
-        return ans;
-    }
-
-    public boolean greater(int[] nums1, int start1, int[] nums2, int start2)
-    {
-        for (; start1 < nums1.length && start2 < nums2.length; start1++, start2++)
-        {
-            if (nums1[start1] > nums2[start2])
-            {
-                return true;
-            }
-
-            if (nums1[start1] < nums2[start2])
-            {
-                return false;
-            }
-        }
-
-        return start1 != nums1.length;
-    }
-
-    public int[] get_max_sub_array(int[] nums, int k)
-    {
-        int[] res = new int[k];
-        int len = 0;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            while (len > 0 && len + nums.length - i > k && res[len - 1] < nums[i])
-            {
-                len--;
-            }
-
-            if (len < k)
-            {
-                res[len++] = nums[i];
-            }
-        }
-
-        return res;
-    }
-}
diff --git a/322.coin-change.64984637.Accepted.leetcode.java b/322.coin-change.64984637.Accepted.leetcode.java
deleted file mode 100644
index 1b7ad9c7..00000000
--- ./322.coin-change.64984637.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-  public class Solution
-  {
-    public int coinChange(int[] coins, int amount)
-    {
-      int dp[] = new int[amount + 1];
-      final int INF = 0x7fffffff;
-
-      for (int i = 1; i <= amount; i++)
-      {
-        dp[i] = INF;
-      }
-
-      for (int i = 0; i <= amount; i++)
-      {
-        for (int j = 0; j < coins.length; j++)
-        {
-          if (i + coins[j] <= amount && dp[i] != INF)
-          {
-            dp[i + coins[j]] = Math.min(dp[i + coins[j]], dp[i] + 1);
-          }
-        }
-      }
-
-      return dp[amount] == INF ? -1 : dp[amount];
-    }
-  }
-
diff --git a/322.coin-change.90086852.Runtime-Error.leetcode.java b/322.coin-change.90086852.Runtime-Error.leetcode.java
deleted file mode 100644
index 3d880084..00000000
--- ./322.coin-change.90086852.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public int coinChange(int[] coins, int amount)
-    {
-        int dp[] = new int[amount + 1];
-        final int INF = 0x7fffffff;
-
-        for (int i = 1; i <= amount; i++)
-        {
-            dp[i] = INF;
-        }
-
-        for (int i = 0; i <= amount; i++)
-        {
-            for (int j = 0; j < coins.length; j++)
-            {
-                if (i + coins[j] <= amount && dp[i] != INF)
-                {
-                    dp[i + coins[j]] = Math.min(dp[i + coins[j]], dp[i] + 1);
-                }
-            }
-        }
-
-        return dp[amount] == INF ? -1 : dp[amount];
-    }
-}
diff --git a/322.coin-change.90211972.Runtime-Error.leetcode.java b/322.coin-change.90211972.Runtime-Error.leetcode.java
deleted file mode 100644
index 9676ddaf..00000000
--- ./322.coin-change.90211972.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public int coinChange(int[] coins, int amount)
-    {
-        int dp[] = new int[amount + 1];
-        
-        for (int i = 1; i <= amount; i++)
-        {
-            dp[i] = Integer.MAX_VALUE;
-        }
-
-        for (int i = 0; i <= amount; i++)
-        {
-            for (int j = 0; j < coins.length; j++)
-            {
-                if (i + coins[j] <= amount && dp[i] != Integer.MAX_VALUE)
-                {
-                    dp[i + coins[j]] = Math.min(dp[i + coins[j]], dp[i] + 1);
-                }
-            }
-        }
-
-        return dp[amount] == Integer.MAX_VALUE ? -1 : dp[amount];
-    }
-}
diff --git a/322.coin-change.90215373.Runtime-Error.leetcode.java b/322.coin-change.90215373.Runtime-Error.leetcode.java
deleted file mode 100644
index 0e19d529..00000000
--- ./322.coin-change.90215373.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public int coinChange(int[] coins, int amount)
-    {
-        int dp[] = new int[amount + 1];
-        dp[0] = 0;
-        
-        for (int i = 1; i <= amount; i++)
-        {
-            dp[i] = Integer.MAX_VALUE;
-        }
-
-        for (int i = 0; i <= amount; i++)
-        {
-            for (int j = 0; j < coins.length; j++)
-            {
-                dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);
-            }
-        }
-
-        return dp[amount] == Integer.MAX_VALUE ? -1 : dp[amount];
-    }
-}
diff --git a/322.coin-change.90215534.Runtime-Error.leetcode.java b/322.coin-change.90215534.Runtime-Error.leetcode.java
deleted file mode 100644
index 7687b69a..00000000
--- ./322.coin-change.90215534.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public int coinChange(int[] coins, int amount)
-    {
-        int dp[] = new int[amount + 1];
-        dp[0] = 0;
-        
-        for (int i = 1; i <= amount; i++)
-        {
-            dp[i] = Integer.MAX_VALUE;
-        }
-
-        for (int i = 0; i <= amount; i++)
-        {
-            for (int j = 0; j < coins.length; j++)
-            {
-                System.out.println("i --> " + i);
-                System.out.println("coins[j] --> " + coins[j]);
-                dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);
-            }
-        }
-
-        return dp[amount] == Integer.MAX_VALUE ? -1 : dp[amount];
-    }
-}
diff --git a/322.coin-change.90215624.Wrong-Answer.leetcode.java b/322.coin-change.90215624.Wrong-Answer.leetcode.java
deleted file mode 100644
index 3a55c1ce..00000000
--- ./322.coin-change.90215624.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public int coinChange(int[] coins, int amount)
-    {
-        int dp[] = new int[amount + 1];
-        dp[0] = 0;
-        
-        for (int i = 1; i <= amount; i++)
-        {
-            dp[i] = Integer.MAX_VALUE;
-        }
-
-        for (int i = 0; i <= amount; i++)
-        {
-            for (int j = 0; j < coins.length; j++)
-            {
-                if (i - coins[j] >= 0)
-                {
-                    dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);    
-                }
-            }
-        }
-
-        return dp[amount] == Integer.MAX_VALUE ? -1 : dp[amount];
-    }
-}
diff --git a/322.coin-change.90218560.Wrong-Answer.leetcode.java b/322.coin-change.90218560.Wrong-Answer.leetcode.java
deleted file mode 100644
index f01d2c18..00000000
--- ./322.coin-change.90218560.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public int coinChange(int[] coins, int amount)
-    {
-        int dp[] = new int[amount + 1];
-        dp[0] = 0;
-        
-        for (int i = 1; i <= amount; i++)
-        {
-            dp[i] = Integer.MAX_VALUE;
-        }
-
-        for (int i = 0; i <= amount; i++)
-        {
-            for (int j = 0; j < coins.length; j++)
-            {
-                if (i - coins[j] >= 0)
-                {
-                    dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);    
-                }
-                
-                System.out.println("i --> " + i);
-                System.out.println("dp[i] --> " + dp[i]);
-                System.out.println("coins[j] --> " + coins[j]);
-            }
-        }
-
-        return dp[amount] == Integer.MAX_VALUE ? -1 : dp[amount];
-    }
-}
diff --git a/322.coin-change.90219022.Accepted.leetcode.java b/322.coin-change.90219022.Accepted.leetcode.java
deleted file mode 100644
index c31b6088..00000000
--- ./322.coin-change.90219022.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public int coinChange(int[] coins, int amount)
-    {
-        int dp[] = new int[amount + 1];
-        dp[0] = 0;
-        
-        for (int i = 1; i <= amount; i++)
-        {
-            dp[i] = Integer.MAX_VALUE;
-        }
-
-        for (int i = 0; i <= amount; i++)
-        {
-            for (int j = 0; j < coins.length; j++)
-            {
-                if (i - coins[j] >= 0 && dp[i - coins[j]] != Integer.MAX_VALUE)
-                {
-                    dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);    
-                }
-            }
-        }
-
-        return dp[amount] == Integer.MAX_VALUE ? -1 : dp[amount];
-    }
-}
diff --git a/322.coin-change.90219181.Accepted.leetcode.java b/322.coin-change.90219181.Accepted.leetcode.java
deleted file mode 100644
index 813c5279..00000000
--- ./322.coin-change.90219181.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public int coinChange(int[] coins, int amount)
-    {
-        int dp[] = new int[amount + 1];
-
-        for (int i = 1; i <= amount; i++)
-        {
-            dp[i] = Integer.MAX_VALUE;
-        }
-
-        for (int i = 0; i <= amount; i++)
-        {
-            for (int j = 0; j < coins.length; j++)
-            {
-                if (i - coins[j] >= 0 && dp[i - coins[j]] != Integer.MAX_VALUE)
-                {
-                    dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);    
-                }
-            }
-        }
-
-        return dp[amount] == Integer.MAX_VALUE ? -1 : dp[amount];
-    }
-}
diff --git a/323.number-of-connected-components-in-an-undirected-graph.72047950.Accepted.leetcode.java b/323.number-of-connected-components-in-an-undirected-graph.72047950.Accepted.leetcode.java
deleted file mode 100644
index d7e96be8..00000000
--- ./323.number-of-connected-components-in-an-undirected-graph.72047950.Accepted.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution {
-    public int countComponents(int n, int[][] edges) {
-        unionFind uf = new unionFind(n);
-        for (int[] edge : edges) {
-            if (!uf.isConnected(edge[0], edge[1])) {
-                uf.union(edge[0], edge[1]);
-            }
-        }
-        return uf.findCount();
-    }
-    
-    public class unionFind{
-            int[] ids;
-            int count;
-            
-            public unionFind(int num) {
-                this.ids = new int[num];
-                for (int i=0; i<num; i++) {
-                    ids[i] = i;
-                }
-                this.count = num;
-            }
-            
-            public int find(int i) {
-                return ids[i];
-            }
-            
-            public void union(int i1, int i2) {
-                int id1 = find(i1);
-                int id2 = find(i2);
-                if (id1 != id2) {
-                    for (int i=0; i<ids.length; i++) {
-                        if (ids[i] == id2) {
-                            ids[i] = id1;
-                        }
-                    }
-                    count--;
-                }
-            }
-            
-            public boolean isConnected(int i1, int i2) {
-                return find(i1)==find(i2);
-            }
-            
-            public int findCount() {
-                return count;
-            }
-        }
-}
diff --git a/323.number-of-connected-components-in-an-undirected-graph.84618187.Accepted.leetcode.java b/323.number-of-connected-components-in-an-undirected-graph.84618187.Accepted.leetcode.java
deleted file mode 100644
index 94d20dd2..00000000
--- ./323.number-of-connected-components-in-an-undirected-graph.84618187.Accepted.leetcode.java
+++ /dev/null
@@ -1,69 +0,0 @@
-public class Solution 
-{
-    public int countComponents(int n, int[][] edges) 
-    {
-        unionFind uf = new unionFind(n);
-        
-        for (int[] edge : edges) 
-        {
-            if (!uf.isConnected(edge[0], edge[1])) 
-            {
-                uf.union(edge[0], edge[1]);
-            }
-        }
-        
-        return uf.findCount();
-    }
-    
-    public class unionFind
-    {
-        int[] ids;
-        int count;
-            
-        public unionFind(int num) 
-        {
-            this.ids = new int[num];
-            
-            for (int i = 0; i < num; i++) 
-            {
-                ids[i] = i;
-            }
-            
-            this.count = num;
-        }
-            
-        public int find(int i) 
-        {
-            return ids[i];
-        }
-            
-        public void union(int i1, int i2) 
-        {
-            int id1 = find(i1);
-            int id2 = find(i2);
-    
-            if (id1 != id2) 
-            {
-                for (int i = 0; i < ids.length; i++) 
-                {
-                    if (ids[i] == id2) 
-                    {
-                        ids[i] = id1;
-                    }
-                }
-                
-                count--;
-            }
-        }
-            
-        public boolean isConnected(int i1, int i2) 
-        {
-            return find(i1) == find(i2);
-        }
-            
-        public int findCount() 
-        {
-            return count;
-        }
-    }
-}
diff --git a/323.number-of-connected-components-in-an-undirected-graph.84621682.Accepted.leetcode.java b/323.number-of-connected-components-in-an-undirected-graph.84621682.Accepted.leetcode.java
deleted file mode 100644
index d8ce704e..00000000
--- ./323.number-of-connected-components-in-an-undirected-graph.84621682.Accepted.leetcode.java
+++ /dev/null
@@ -1,74 +0,0 @@
-public class Solution 
-{
-    public int countComponents(int n, int[][] edges) 
-    {
-        unionFind uf = new unionFind(n);
-        
-        for (int[] edge : edges) 
-        {
-            if (!uf.isConnected(edge[0], edge[1])) 
-            {
-                uf.union(edge[0], edge[1]);
-            }
-        }
-        
-        return uf.findCount();
-    }
-    
-    public class unionFind
-    {
-        int[] ids;
-        int count;
-            
-        public unionFind(int num) 
-        {
-            this.ids = new int[num];
-            
-            for (int i = 0; i < num; i++) 
-            {
-                ids[i] = i;
-            }
-            
-            this.count = num;
-        }
-            
-        public int find(int i) 
-        {
-            while(i != ids[i])
-            {
-                i = ids[i];
-            }
-            
-            return i;
-        }
-            
-        public void union(int i1, int i2) 
-        {
-            int id1 = find(i1);
-            int id2 = find(i2);
-    
-            if (id1 != id2) 
-            {
-                for (int i = 0; i < ids.length; i++) 
-                {
-                    if (ids[i] == id2) 
-                    {
-                        ids[i] = id1;
-                    }
-                }
-                
-                count--;
-            }
-        }
-            
-        public boolean isConnected(int i1, int i2) 
-        {
-            return find(i1) == find(i2);
-        }
-            
-        public int findCount() 
-        {
-            return count;
-        }
-    }
-}
diff --git a/323.number-of-connected-components-in-an-undirected-graph.84621752.Accepted.leetcode.java b/323.number-of-connected-components-in-an-undirected-graph.84621752.Accepted.leetcode.java
deleted file mode 100644
index fae39906..00000000
--- ./323.number-of-connected-components-in-an-undirected-graph.84621752.Accepted.leetcode.java
+++ /dev/null
@@ -1,63 +0,0 @@
-public class Solution 
-{
-    public int countComponents(int n, int[][] edges) 
-    {
-        unionFind uf = new unionFind(n);
-        
-        for (int[] edge : edges) 
-        {
-            if (!uf.isConnected(edge[0], edge[1])) 
-            {
-                uf.union(edge[0], edge[1]);
-            }
-        }
-        
-        return uf.findCount();
-    }
-    
-    public class unionFind
-    {
-        int[] ids;
-        int count;
-            
-        public unionFind(int num) 
-        {
-            this.ids = new int[num];
-            
-            for (int i = 0; i < num; i++) 
-            {
-                ids[i] = i;
-            }
-            
-            this.count = num;
-        }
-            
-        public int find(int i) 
-        {
-            while(i != ids[i])
-            {
-                i = ids[i];
-            }
-            
-            return i;
-        }
-            
-        public void union(int i1, int i2) 
-        {
-            int id1 = find(i1);
-            int id2 = find(i2);
-            ids[id1] = id2;
-            count--;
-        }
-            
-        public boolean isConnected(int i1, int i2) 
-        {
-            return find(i1) == find(i2);
-        }
-            
-        public int findCount() 
-        {
-            return count;
-        }
-    }
-}
diff --git a/323.number-of-connected-components-in-an-undirected-graph.84621826.Accepted.leetcode.java b/323.number-of-connected-components-in-an-undirected-graph.84621826.Accepted.leetcode.java
deleted file mode 100644
index 6bcca853..00000000
--- ./323.number-of-connected-components-in-an-undirected-graph.84621826.Accepted.leetcode.java
+++ /dev/null
@@ -1,69 +0,0 @@
-public class Solution 
-{
-    public int countComponents(int n, int[][] edges) 
-    {
-        unionFind uf = new unionFind(n);
-        
-        for (int[] edge : edges) 
-        {
-            if (!uf.isConnected(edge[0], edge[1])) 
-            {
-                uf.union(edge[0], edge[1]);
-            }
-        }
-        
-        return uf.findCount();
-    }
-    
-    public class unionFind
-    {
-        int[] ids;
-        int count;
-            
-        public unionFind(int num) 
-        {
-            this.ids = new int[num];
-            
-            for (int i = 0; i < num; i++) 
-            {
-                ids[i] = i;
-            }
-            
-            this.count = num;
-        }
-            
-        public int find(int i) 
-        {
-            while(i != ids[i])
-            {
-                i = ids[i];
-            }
-            
-            return i;
-        }
-            
-        public void union(int i1, int i2) 
-        {
-            int id1 = find(i1);
-            int id2 = find(i2);
-            
-            if(id1 == id2)
-            {
-                return;
-            }
-            
-            ids[id1] = id2;
-            count--;
-        }
-            
-        public boolean isConnected(int i1, int i2) 
-        {
-            return find(i1) == find(i2);
-        }
-            
-        public int findCount() 
-        {
-            return count;
-        }
-    }
-}
diff --git a/323.number-of-connected-components-in-an-undirected-graph.84623486.Accepted.leetcode.java b/323.number-of-connected-components-in-an-undirected-graph.84623486.Accepted.leetcode.java
deleted file mode 100644
index 22ca0251..00000000
--- ./323.number-of-connected-components-in-an-undirected-graph.84623486.Accepted.leetcode.java
+++ /dev/null
@@ -1,69 +0,0 @@
-public class Solution 
-{
-    public int countComponents(int n, int[][] edges) 
-    {
-        unionFind uf = new unionFind(n);
-        
-        for (int[] edge : edges) 
-        {
-            if (!uf.isConnected(edge[0], edge[1])) 
-            {
-                uf.union(edge[0], edge[1]);
-            }
-        }
-        
-        return uf.findCount();
-    }
-    
-    public class unionFind
-    {
-        int[] ids;
-        int count;
-            
-        public unionFind(int num) 
-        {
-            ids = new int[num];
-            
-            for(int i = 0; i < num; i++)
-            {
-                ids[i] = i;    
-            }
-            
-            this.count = num; 
-        }
-            
-        public int find(int i) 
-        {
-            while(i != ids[i])
-            {
-                i = ids[i];
-            }
-            
-            return i;
-        }
-            
-        public void union(int i1, int i2) 
-        {
-            int id1 = find(i1);
-            int id2 = find(i2);
-            
-            if(id1 == id2)
-            {
-                return;
-            }
-            
-            ids[id1] = id2;
-            count--;
-        }
-            
-        public boolean isConnected(int i1, int i2) 
-        {
-            return find(i1) == find(i2);
-        }
-            
-        public int findCount() 
-        {
-            return count;            
-        }
-    }
-}
diff --git a/324.wiggle-sort-ii.64875508.Accepted.leetcode.java b/324.wiggle-sort-ii.64875508.Accepted.leetcode.java
deleted file mode 100644
index f0f3b984..00000000
--- ./324.wiggle-sort-ii.64875508.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-  public class Solution
-  {
-    public void wiggleSort(int[] nums)
-    {
-      if (nums.length < 2)
-      {
-        return;
-      }
-
-      Arrays.sort(nums);
-      int sortedNum[] = Arrays.copyOf(nums, nums.length);
-      int j = nums.length - 1;
-
-      for (int i = 1; i < nums.length; i = i + 2)
-      {
-        nums[i] = sortedNum[j-- ];
-      }
-
-      for (int i = 0; i < nums.length; i = i + 2)
-      {
-        nums[i] = sortedNum[j-- ];
-      }
-    }
-  }
-
diff --git a/324.wiggle-sort-ii.64875734.Accepted.leetcode.java b/324.wiggle-sort-ii.64875734.Accepted.leetcode.java
deleted file mode 100644
index 76934374..00000000
--- ./324.wiggle-sort-ii.64875734.Accepted.leetcode.java
+++ /dev/null
@@ -1,103 +0,0 @@
-  public class Solution
-  {
-    public void wiggleSort(int [] nums)
-    {
-      if (nums.length < 2)
-      {
-        return;
-      }
-
-      int cntForMedian = (nums.length + 1) / 2;
-      int median = findKthSmallest(nums, cntForMedian, 0, nums.length - 1);
-      mapSortedArrayToWiggleInPlace(nums, median);
-    }
-
-    private void mapSortedArrayToWiggleInPlace(int[] nums, int median)
-    {
-      int i  = 1;
-      int begin = 1;
-      int end = nums.length;
-      int n = nums.length;
-
-      while (i <= end)
-      {
-        int Ai = indexMap(n, i);
-
-        if (nums[Ai] > median)
-        {
-          swap(nums, Ai, indexMap(n, begin++));
-          i ++;
-        }
-        else if (nums[Ai] < median)
-        {
-          swap(nums, Ai, indexMap(n, end--));
-        }
-        else
-        {
-          i++;
-        }
-      }
-    }
-
-    private int indexMap(int n, int i)
-    {
-      return (2 * i - 1) % (n | 1);
-    }
-
-    private int findKthSmallest(int [] nums, int k, int start, int end)
-    {
-      int len = nums.length;
-
-      if (len < 1)
-      {
-        return 0;
-      }
-
-      int left = start;
-      int right = end;
-      int pivot = nums[end];
-
-      while (true)
-      {
-        while (left < right && nums[left] < pivot)
-        {
-          left ++;
-        }
-
-        while (left < right && nums[right] >= pivot)
-        {
-          right --;
-        }
-
-        if (left >= right)
-        {
-          break;
-        }
-
-        swap(nums, left, right);
-      }
-
-      swap(nums, left, end);
-
-      if (k > left - start + 1)
-      {
-        return findKthSmallest(nums, k - (left - start + 1), left + 1, end);
-      }
-      else if (k == left - start + 1)
-      {
-        return nums[left];
-      }
-      else
-      {
-        return findKthSmallest(nums, k, start, left - 1);
-      }
-    }
-
-    private void swap(int []nums, int start, int end)
-    {
-      int temp = nums[start];
-      nums[start] = nums[end];
-      nums[end] = temp;
-    }
-  }
-
diff --git a/325.maximum-size-subarray-sum-equals-k.102665590.Accepted.leetcode.java b/325.maximum-size-subarray-sum-equals-k.102665590.Accepted.leetcode.java
deleted file mode 100644
index 38d8d92f..00000000
--- ./325.maximum-size-subarray-sum-equals-k.102665590.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public int maxSubArrayLen(int[] nums, int k)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return 0;
-        }
-
-        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
-        map.put(0, -1);
-        int sum = 0;
-        int maxLen = Integer.MIN_VALUE;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            sum += nums[i];
-
-            if (!map.containsKey(sum))
-            {
-                map.put(sum, i);
-            }
-
-            if (map.containsKey(sum - k))
-            {
-                int index = map.get(sum - k);
-                maxLen = Math.max(maxLen, i - index);
-            }
-        }
-
-        return maxLen == Integer.MIN_VALUE ? 0 : maxLen;
-    }
-}
diff --git a/325.maximum-size-subarray-sum-equals-k.102668365.Accepted.leetcode.java b/325.maximum-size-subarray-sum-equals-k.102668365.Accepted.leetcode.java
deleted file mode 100644
index 2bac86b7..00000000
--- ./325.maximum-size-subarray-sum-equals-k.102668365.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int maxSubArrayLen(int[] nums, int k)
-    {
-        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
-        map.put(0, -1);
-        int sum = 0;
-        int maxLen = Integer.MIN_VALUE;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            sum += nums[i];
-
-            if (!map.containsKey(sum))
-            {
-                map.put(sum, i);
-            }
-
-            if (map.containsKey(sum - k))
-            {
-                int index = map.get(sum - k);
-                maxLen = Math.max(maxLen, i - index);
-            }
-        }
-
-        return maxLen == Integer.MIN_VALUE ? 0 : maxLen;
-    }
-}
diff --git a/325.maximum-size-subarray-sum-equals-k.102668589.Accepted.leetcode.java b/325.maximum-size-subarray-sum-equals-k.102668589.Accepted.leetcode.java
deleted file mode 100644
index 9c759333..00000000
--- ./325.maximum-size-subarray-sum-equals-k.102668589.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public int maxSubArrayLen(int[] nums, int k)
-    {
-        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
-        map.put(0, -1);
-        int sum = 0;
-        int maxLen = Integer.MIN_VALUE;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            sum += nums[i];
-
-            if (!map.containsKey(sum))
-            {
-                map.put(sum, i);
-            }
-
-            if (map.containsKey(sum - k))
-            {
-                maxLen = Math.max(maxLen, i - map.get(sum - k));
-            }
-        }
-
-        return maxLen == Integer.MIN_VALUE ? 0 : maxLen;
-    }
-}
diff --git a/325.maximum-size-subarray-sum-equals-k.102668767.Wrong-Answer.leetcode.java b/325.maximum-size-subarray-sum-equals-k.102668767.Wrong-Answer.leetcode.java
deleted file mode 100644
index 379cdeb1..00000000
--- ./325.maximum-size-subarray-sum-equals-k.102668767.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public int maxSubArrayLen(int[] nums, int k)
-    {
-        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
-        int sum = 0;
-        int maxLen = Integer.MIN_VALUE;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            sum += nums[i];
-
-            if (!map.containsKey(sum))
-            {
-                map.put(sum, i);
-            }
-
-            if (map.containsKey(sum - k))
-            {
-                maxLen = Math.max(maxLen, i - map.get(sum - k));
-            }
-        }
-
-        return maxLen == Integer.MIN_VALUE ? 0 : maxLen;
-    }
-}
diff --git a/325.maximum-size-subarray-sum-equals-k.102668797.Wrong-Answer.leetcode.java b/325.maximum-size-subarray-sum-equals-k.102668797.Wrong-Answer.leetcode.java
deleted file mode 100644
index 7776745a..00000000
--- ./325.maximum-size-subarray-sum-equals-k.102668797.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int maxSubArrayLen(int[] nums, int k)
-    {
-        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
-        map.put(0, -1);
-        int sum = 0;
-        int maxLen = Integer.MIN_VALUE;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            sum += nums[i];
-
-            if (map.containsKey(sum - k))
-            {
-                maxLen = Math.max(maxLen, i - map.get(sum - k));
-            }
-        }
-
-        return maxLen == Integer.MIN_VALUE ? 0 : maxLen;
-    }
-}
diff --git a/325.maximum-size-subarray-sum-equals-k.102668810.Wrong-Answer.leetcode.java b/325.maximum-size-subarray-sum-equals-k.102668810.Wrong-Answer.leetcode.java
deleted file mode 100644
index 2558aca4..00000000
--- ./325.maximum-size-subarray-sum-equals-k.102668810.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public int maxSubArrayLen(int[] nums, int k)
-    {
-        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
-        map.put(0, -1);
-        int sum = 0;
-        int maxLen = Integer.MIN_VALUE;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            if (!map.containsKey(sum))
-            {
-                map.put(sum, i);
-            }
-
-            if (map.containsKey(sum - k))
-            {
-                maxLen = Math.max(maxLen, i - map.get(sum - k));
-            }
-        }
-
-        return maxLen == Integer.MIN_VALUE ? 0 : maxLen;
-    }
-}
diff --git a/325.maximum-size-subarray-sum-equals-k.102668840.Wrong-Answer.leetcode.java b/325.maximum-size-subarray-sum-equals-k.102668840.Wrong-Answer.leetcode.java
deleted file mode 100644
index 9f88302d..00000000
--- ./325.maximum-size-subarray-sum-equals-k.102668840.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int maxSubArrayLen(int[] nums, int k)
-    {
-        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
-        map.put(0, -1);
-        int sum = 0;
-        int maxLen = Integer.MIN_VALUE;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            sum += nums[i];
-
-            if (!map.containsKey(sum))
-            {
-                map.put(sum, i);
-            }
-        }
-
-        return maxLen == Integer.MIN_VALUE ? 0 : maxLen;
-    }
-}
diff --git a/325.maximum-size-subarray-sum-equals-k.102668879.Wrong-Answer.leetcode.java b/325.maximum-size-subarray-sum-equals-k.102668879.Wrong-Answer.leetcode.java
deleted file mode 100644
index bb413388..00000000
--- ./325.maximum-size-subarray-sum-equals-k.102668879.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public int maxSubArrayLen(int[] nums, int k)
-    {
-        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
-        map.put(0, 0);
-        int sum = 0;
-        int maxLen = Integer.MIN_VALUE;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            sum += nums[i];
-
-            if (!map.containsKey(sum))
-            {
-                map.put(sum, i);
-            }
-
-            if (map.containsKey(sum - k))
-            {
-                maxLen = Math.max(maxLen, i - map.get(sum - k));
-            }
-        }
-
-        return maxLen == Integer.MIN_VALUE ? 0 : maxLen;
-    }
-}
diff --git a/325.maximum-size-subarray-sum-equals-k.72104463.Accepted.leetcode.java b/325.maximum-size-subarray-sum-equals-k.72104463.Accepted.leetcode.java
deleted file mode 100644
index 68386034..00000000
--- ./325.maximum-size-subarray-sum-equals-k.72104463.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution {
-    public int maxSubArrayLen(int[] nums, int k) {
-        if (nums==null || nums.length==0) return 0;
-        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
-        map.put(0, -1);
-        int sum = 0;
-        int maxLen = Integer.MIN_VALUE;
-        for (int i=0; i<nums.length; i++) {
-            sum += nums[i];
-            if (!map.containsKey(sum)) {
-                map.put(sum, i);
-            }
-            if (map.containsKey(sum-k)) {
-                int index = map.get(sum-k);
-                maxLen = Math.max(maxLen, i-index);
-            }
-        }
-        return maxLen==Integer.MIN_VALUE? 0 : maxLen;
-    }
-}
diff --git a/326.power-of-three.63502756.Accepted.leetcode.java b/326.power-of-three.63502756.Accepted.leetcode.java
deleted file mode 100644
index 588badcd..00000000
--- ./326.power-of-three.63502756.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-  public class Solution
-  {
-    public boolean isPowerOfThree(int n)
-    {
-      if (n <= 0)
-      {
-        return false;
-      }
-
-      if (n == 1)
-      {
-        return true;
-      }
-      else if (n % 3 == 0)
-      {
-        return isPowerOfThree(n / 3);
-      }
-      else
-      {
-        return false;
-      }
-    }
-  }
-
diff --git a/326.power-of-three.63503070.Accepted.leetcode.java b/326.power-of-three.63503070.Accepted.leetcode.java
deleted file mode 100644
index d140d472..00000000
--- ./326.power-of-three.63503070.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-  public class Solution
-  {
-    public boolean isPowerOfThree(int n)
-    {
-      if (n <= 0)
-      {
-        return false;
-      }
-
-      while (n != 1)
-      {
-        if (n % 3 != 0)
-        {
-          break;
-        }
-
-        n /= 3;
-      }
-
-      return n == 1;
-    }
-  }
-
diff --git a/326.power-of-three.63503216.Accepted.leetcode.java b/326.power-of-three.63503216.Accepted.leetcode.java
deleted file mode 100644
index 67c1b8bf..00000000
--- ./326.power-of-three.63503216.Accepted.leetcode.java
+++ /dev/null
@@ -1,8 +0,0 @@
-  public class Solution
-  {
-    public boolean isPowerOfThree(int n)
-    {
-      return n > 0 && Math.pow(3, 19) % n == 0;
-    }
-  }
-
diff --git a/327.count-of-range-sum.64758696.Accepted.leetcode.java b/327.count-of-range-sum.64758696.Accepted.leetcode.java
deleted file mode 100644
index b88df7e9..00000000
--- ./327.count-of-range-sum.64758696.Accepted.leetcode.java
+++ /dev/null
@@ -1,54 +0,0 @@
-  public class Solution
-  {
-    public int countRangeSum(int[] nums, int lower, int upper)
-    {
-      int n = nums.length;
-      long[] sums = new long[n + 1];
-
-      for (int i = 0; i < n; ++i)
-      {
-        sums[i + 1] = sums[i] + nums[i];
-      }
-
-      return countWhileMergeSort(sums, 0, n + 1, lower, upper);
-    }
-
-    private int countWhileMergeSort(long[] sums, int start, int end, int lower, int upper)
-    {
-      if (end - start <= 1)
-      {
-        return 0;
-      }
-
-      int mid = (start + end) / 2;
-      int count = countWhileMergeSort(sums, start, mid, lower, upper)
-                  + countWhileMergeSort(sums, mid, end, lower, upper);
-      int j = mid, k = mid, t = mid, r = 0;
-      long[] cache = new long[end - start];
-
-      for (int i = start; i < mid; ++i, ++r)
-      {
-        while (k < end && sums[k] - sums[i] < lower)
-        {
-          k++;
-        }
-
-        while (j < end && sums[j] - sums[i] <= upper)
-        {
-          j++;
-        }
-
-        while (t < end && sums[t] < sums[i])
-        {
-          cache[r++] = sums[t++];  //start merging
-        }
-
-        cache[r] = sums[i];
-        count += j - k;
-      }
-
-      System.arraycopy(cache, 0, sums, start, r);
-      return count;
-    }
-  }
-
diff --git a/327.count-of-range-sum.64758767.Accepted.leetcode.java b/327.count-of-range-sum.64758767.Accepted.leetcode.java
deleted file mode 100644
index 3104d817..00000000
--- ./327.count-of-range-sum.64758767.Accepted.leetcode.java
+++ /dev/null
@@ -1,118 +0,0 @@
-  public class Solution
-  {
-    private class TreeNode
-    {
-      long val = 0;
-      int count = 1;
-      int leftSize = 0;
-      int rightSize = 0;
-      TreeNode left = null;
-      TreeNode right = null;
-      public TreeNode(long v)
-      {
-        this.val = v;
-        this.count = 1;
-        this.leftSize = 0;
-        this.rightSize = 0;
-      }
-    }
-
-    private TreeNode insert(TreeNode root, long val)
-    {
-      if (root == null)
-      {
-        return new TreeNode(val);
-      }
-      else if (root.val == val)
-      {
-        root.count++;
-      }
-      else if (val < root.val)
-      {
-        root.leftSize++;
-        root.left = insert(root.left, val);
-      }
-      else if (val > root.val)
-      {
-        root.rightSize++;
-        root.right = insert(root.right, val);
-      }
-
-      return root;
-    }
-
-    private int countSmaller(TreeNode root, long val)
-    {
-      if (root == null)
-      {
-        return 0;
-      }
-      else if (root.val == val)
-      {
-        return root.leftSize;
-      }
-      else if (root.val > val)
-      {
-        return countSmaller(root.left, val);
-      }
-      else
-      {
-        return root.leftSize + root.count + countSmaller(root.right, val);
-      }
-    }
-
-    private int countLarger(TreeNode root, long val)
-    {
-      if (root == null)
-      {
-        return 0;
-      }
-      else if (root.val == val)
-      {
-        return root.rightSize;
-      }
-      else if (root.val < val)
-      {
-        return countLarger(root.right, val);
-      }
-      else
-      {
-        return countLarger(root.left, val) + root.count + root.rightSize;
-      }
-    }
-
-    private int rangeSize(TreeNode root, long lower, long upper)
-    {
-      int total = root.count + root.leftSize + root.rightSize;
-      int smaller = countSmaller(root, lower);    // Exclude everything smaller than lower
-      int larger = countLarger(root, upper);      // Exclude everything larger than upper
-      return total - smaller - larger;
-    }
-
-    public int countRangeSum(int[] nums, int lower, int upper)
-    {
-      if (nums.length == 0)
-      {
-        return 0;
-      }
-
-      long[] sums = new long[nums.length + 1];
-
-      for (int i = 0; i < nums.length; i++)
-      {
-        sums[i + 1] = sums[i] + nums[i];
-      }
-
-      TreeNode root = new TreeNode(sums[0]);
-      int output = 0;
-
-      for (int i = 1; i < sums.length; i++)
-      {
-        output += rangeSize(root, sums[i] - upper, sums[i] - lower);
-        insert(root, sums[i]);
-      }
-
-      return output;
-    }
-  }
-
diff --git a/328.odd-even-linked-list.64752747.Accepted.leetcode.java b/328.odd-even-linked-list.64752747.Accepted.leetcode.java
deleted file mode 100644
index b424f4cd..00000000
--- ./328.odd-even-linked-list.64752747.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-  public class Solution
-  {
-    public ListNode oddEvenList(ListNode head)
-    {
-      if (head == null)
-      {
-        return head;
-      }
-
-      ListNode result = head;
-      ListNode p1 = head;
-      ListNode p2 = head.next;
-      ListNode connectNode = head.next;
-
-      while (p1 != null && p2 != null)
-      {
-        ListNode t = p2.next;
-
-        if (t == null)
-        {
-          break;
-        }
-
-        p1.next = p2.next;
-        p1 = p1.next;
-        p2.next = p1.next;
-        p2 = p2.next;
-      }
-
-      p1.next = connectNode;
-      return result;
-    }
-  }
-
diff --git a/328.odd-even-linked-list.64753070.Accepted.leetcode.java b/328.odd-even-linked-list.64753070.Accepted.leetcode.java
deleted file mode 100644
index 138270d1..00000000
--- ./328.odd-even-linked-list.64753070.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-  public class Solution
-  {
-    public ListNode oddEvenList(ListNode head)
-    {
-      if (head == null)
-      {
-        return head;
-      }
-
-      ListNode p = head, q = head;
-
-      while (q != null)
-      {
-        q = q.next;
-
-        if (q == null || q.next == null)
-        {
-          break;
-        }
-
-        ListNode next_p = p.next, next_q = q.next;
-        q.next = next_q.next;
-        p.next = next_q;
-        next_q.next = next_p;
-        p = p.next;
-      }
-
-      return head;
-    }
-  }
-
diff --git a/329.longest-increasing-path-in-a-matrix.65416476.Accepted.leetcode.java b/329.longest-increasing-path-in-a-matrix.65416476.Accepted.leetcode.java
deleted file mode 100644
index fe78de02..00000000
--- ./329.longest-increasing-path-in-a-matrix.65416476.Accepted.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-  public class Solution
-  {
-    int []dx = { 1 , -1, 0 , 0  };
-    int []dy = { 0 , 0 , 1 , -1 };
-    public int longestIncreasingPath(int[][] matrix)
-    {
-      if (matrix.length == 0)
-      {
-        return 0;
-      }
-
-      int m = matrix.length, n = matrix[0].length;
-      int[][] dis = new int [m][n];
-      int ans = 0;
-
-      for (int i = 0; i < m; i++)
-      {
-        for (int j = 0; j < n; j++)
-        {
-          ans = Math.max(ans, dfs(i, j, m, n, matrix, dis));
-        }
-      }
-
-      return ans;
-    }
-
-    int dfs(int x, int y, int m, int n, int[][] matrix, int[][] dis)
-    {
-      if (dis[x][y] != 0)
-      {
-        return dis[x][y];
-      }
-
-      for (int i = 0; i < 4; i++)
-      {
-        int nx = x + dx[i];
-        int ny = y + dy[i];
-
-        if (nx >= 0 && ny >= 0 && nx < m && ny < n && matrix[nx][ny] > matrix[x][y])
-        {
-          dis[x][y] = Math.max(dis[x][y], dfs(nx, ny, m, n, matrix, dis));
-        }
-      }
-
-      return ++dis[x][y];
-    }
-  }
-
diff --git a/33.search-in-rotated-sorted-array.102661752.Runtime-Error.leetcode.java b/33.search-in-rotated-sorted-array.102661752.Runtime-Error.leetcode.java
deleted file mode 100644
index a2bc79a7..00000000
--- ./33.search-in-rotated-sorted-array.102661752.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution
-{
-    public int search(int[] nums, int target)
-    {
-        int start = 0;
-        int end = nums.length - 1;
-
-        while (start + 1 < end)
-        {
-            int mid = start + (end - start) / 2;
-
-            if (nums[start] <= nums[mid])
-            {
-                if (nums[start] <= target && target <= nums[mid])
-                {
-                    end = mid;
-                }
-                else
-                {
-                    start = mid;
-                }
-            }
-            else
-            {
-                if (nums[mid] <= target && target <= nums[end])
-                {
-                    start = mid;
-                }
-                else
-                {
-                    end = mid;
-                }
-            }
-        }
-
-        if (nums[start] == target)
-        {
-            return start;
-        }
-        else if (nums[end] == target)
-        {
-            return end;
-        }
-        else
-        {
-            return -1;
-        }
-    }
-}
diff --git a/33.search-in-rotated-sorted-array.102661947.Accepted.leetcode.java b/33.search-in-rotated-sorted-array.102661947.Accepted.leetcode.java
deleted file mode 100644
index b1bf24d0..00000000
--- ./33.search-in-rotated-sorted-array.102661947.Accepted.leetcode.java
+++ /dev/null
@@ -1,54 +0,0 @@
-public class Solution
-{
-    public int search(int[] nums, int target)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return -1;
-        }
-        
-        int start = 0;
-        int end = nums.length - 1;
-
-        while (start + 1 < end)
-        {
-            int mid = start + (end - start) / 2;
-
-            if (nums[start] <= nums[mid])
-            {
-                if (nums[start] <= target && target <= nums[mid])
-                {
-                    end = mid;
-                }
-                else
-                {
-                    start = mid;
-                }
-            }
-            else
-            {
-                if (nums[mid] <= target && target <= nums[end])
-                {
-                    start = mid;
-                }
-                else
-                {
-                    end = mid;
-                }
-            }
-        }
-
-        if (nums[start] == target)
-        {
-            return start;
-        }
-        else if (nums[end] == target)
-        {
-            return end;
-        }
-        else
-        {
-            return -1;
-        }
-    }
-}
diff --git a/33.search-in-rotated-sorted-array.102662567.Accepted.leetcode.java b/33.search-in-rotated-sorted-array.102662567.Accepted.leetcode.java
deleted file mode 100644
index 57971234..00000000
--- ./33.search-in-rotated-sorted-array.102662567.Accepted.leetcode.java
+++ /dev/null
@@ -1,54 +0,0 @@
-public class Solution
-{
-    public int search(int[] nums, int target)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return -1;
-        }
-        
-        int start = 0;
-        int end = nums.length - 1;
-
-        while (start + 1 < end)
-        {
-            int mid = start + (end - start) / 2;
-
-            if (nums[start] < nums[mid])
-            {
-                if (nums[start] <= target && target <= nums[mid])
-                {
-                    end = mid;
-                }
-                else
-                {
-                    start = mid;
-                }
-            }
-            else
-            {
-                if (nums[mid] <= target && target <= nums[end])
-                {
-                    start = mid;
-                }
-                else
-                {
-                    end = mid;
-                }
-            }
-        }
-
-        if (nums[start] == target)
-        {
-            return start;
-        }
-        else if (nums[end] == target)
-        {
-            return end;
-        }
-        else
-        {
-            return -1;
-        }
-    }
-}
diff --git a/33.search-in-rotated-sorted-array.34622904.Accepted.leetcode.java b/33.search-in-rotated-sorted-array.34622904.Accepted.leetcode.java
deleted file mode 100644
index e4297ac8..00000000
--- ./33.search-in-rotated-sorted-array.34622904.Accepted.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-  public class Solution
-  {
-    public int search(int[] A, int target)
-    {
-      int left = 0;
-      int right = A.length - 1;
-
-      while (left <= right)
-      {
-        int mid = left + (right - left) / 2;
-
-        if (A[mid] == target)
-        {
-          return mid;
-        }
-
-        if (A[left] <= A[mid])
-        {
-          if (A[left] <= target && target < A[mid])
-          {
-            right = mid - 1;
-          }
-          else
-          {
-            left = mid + 1;
-          }
-        }
-        else
-        {
-          if (A[mid] < target && target <= A[right])
-          {
-            left = mid + 1;
-          }
-          else
-          {
-            right = mid - 1;
-          }
-        }
-      }
-
-      return -1;
-    }
-  }
-
diff --git a/33.search-in-rotated-sorted-array.73011056.Accepted.leetcode.java b/33.search-in-rotated-sorted-array.73011056.Accepted.leetcode.java
deleted file mode 100644
index 4a7d14d8..00000000
--- ./33.search-in-rotated-sorted-array.73011056.Accepted.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-public class Solution
-{
-    public int search(int[] nums, int target)
-    {
-        int start = 0;
-        int end = nums.length - 1;
-
-        while (start <= end)
-        {
-            int mid = start + (end - start) / 2;
-
-            if (nums[mid] == target)
-            {
-                return mid;
-            }
-
-            if (nums[start] <= nums[mid])
-            {
-                if (nums[start] <= target && target < nums[mid])
-                {
-                    end = mid - 1;
-                }
-                else
-                {
-                    start = mid + 1;
-                }
-            }
-            else
-            {
-                if (nums[mid] < target && target <= nums[end])
-                {
-                    start = mid + 1;
-                }
-                else
-                {
-                    end = mid - 1;
-                }
-            }
-        }
-
-        return -1;
-    }
-}
-
diff --git a/33.search-in-rotated-sorted-array.73012803.Accepted.leetcode.java b/33.search-in-rotated-sorted-array.73012803.Accepted.leetcode.java
deleted file mode 100644
index 68073df9..00000000
--- ./33.search-in-rotated-sorted-array.73012803.Accepted.leetcode.java
+++ /dev/null
@@ -1,56 +0,0 @@
-public class Solution
-{
-    public int search(int[] nums, int target)
-    {
-        int start = 0;
-        int end = nums.length - 1;
-
-        while (start +1 < end)
-        {
-            int mid = start + (end - start) / 2;
-
-            if (nums[mid] == target)
-            {
-                return mid;
-            }
-
-            if (nums[start] <= nums[mid])
-            {
-                if (nums[start] <= target && target < nums[mid])
-                {
-                    end = mid;
-                }
-                else
-                {
-                    start = mid;
-                }
-            }
-            else
-            {
-                if (nums[mid] < target && target <= nums[end])
-                {
-                    start = mid;
-                }
-                else
-                {
-                    end = mid;
-                }
-            }
-        }
-        
-        if(nums[start] == target)
-        {
-            return start;
-        }
-        else if(nums[end] == target) 
-        {
-            return end;
-        }
-        else
-        {
-            return -1;    
-        }
-        
-    }
-}
-
diff --git a/33.search-in-rotated-sorted-array.80739525.Accepted.leetcode.java b/33.search-in-rotated-sorted-array.80739525.Accepted.leetcode.java
deleted file mode 100644
index f3df91cd..00000000
--- ./33.search-in-rotated-sorted-array.80739525.Accepted.leetcode.java
+++ /dev/null
@@ -1,55 +0,0 @@
-public class Solution
-{
-    public int search(int[] nums, int target)
-    {
-        int start = 0;
-        int end = nums.length - 1;
-
-        while (start +1 < end)
-        {
-            int mid = start + (end - start) / 2;
-
-            if (nums[mid] == target)
-            {
-                return mid;
-            }
-
-            if (nums[start] <= nums[mid])
-            {
-                if (nums[start] <= target && target < nums[mid])
-                {
-                    end = mid;
-                }
-                else
-                {
-                    start = mid;
-                }
-            }
-            else
-            {
-                if (nums[mid] < target && target <= nums[end])
-                {
-                    start = mid;
-                }
-                else
-                {
-                    end = mid;
-                }
-            }
-        }
-        
-        if(nums[start] == target)
-        {
-            return start;
-        }
-        else if(nums[end] == target) 
-        {
-            return end;
-        }
-        else
-        {
-            return -1;    
-        }
-        
-    }
-}
diff --git a/33.search-in-rotated-sorted-array.80742889.Accepted.leetcode.java b/33.search-in-rotated-sorted-array.80742889.Accepted.leetcode.java
deleted file mode 100644
index bf02bbab..00000000
--- ./33.search-in-rotated-sorted-array.80742889.Accepted.leetcode.java
+++ /dev/null
@@ -1,55 +0,0 @@
-public class Solution
-{
-    public int search(int[] nums, int target)
-    {
-        int start = 0;
-        int end = nums.length - 1;
-
-        while (start +1 < end)
-        {
-            int mid = start + (end - start) / 2;
-
-            if (nums[mid] == target)
-            {
-                return mid;
-            }
-
-            if(nums[start] <= nums[mid])
-            {
-                if(nums[start] <= target && target <= nums[mid])
-                {
-                    end = mid;
-                }
-                else
-                {
-                    start = mid;
-                }
-            }
-            else
-            {
-                if(nums[mid] <= target && target <= nums[end])
-                {
-                    start = mid;
-                }
-                else
-                {
-                    end = mid;
-                }
-            }
-        }
-        
-        if(nums[start] == target)
-        {
-            return start;
-        }
-        else if(nums[end] == target) 
-        {
-            return end;
-        }
-        else
-        {
-            return -1;    
-        }
-        
-    }
-}
diff --git a/33.search-in-rotated-sorted-array.80742940.Accepted.leetcode.java b/33.search-in-rotated-sorted-array.80742940.Accepted.leetcode.java
deleted file mode 100644
index bd6bc464..00000000
--- ./33.search-in-rotated-sorted-array.80742940.Accepted.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-public class Solution
-{
-    public int search(int[] nums, int target)
-    {
-        int start = 0;
-        int end = nums.length - 1;
-
-        while (start +1 < end)
-        {
-            int mid = start + (end - start) / 2;
-
-            if(nums[start] <= nums[mid])
-            {
-                if(nums[start] <= target && target <= nums[mid])
-                {
-                    end = mid;
-                }
-                else
-                {
-                    start = mid;
-                }
-            }
-            else
-            {
-                if(nums[mid] <= target && target <= nums[end])
-                {
-                    start = mid;
-                }
-                else
-                {
-                    end = mid;
-                }
-            }
-        }
-        
-        if(nums[start] == target)
-        {
-            return start;
-        }
-        else if(nums[end] == target) 
-        {
-            return end;
-        }
-        else
-        {
-            return -1;    
-        }
-        
-    }
-}
diff --git a/330.patching-array.65177930.Accepted.leetcode.java b/330.patching-array.65177930.Accepted.leetcode.java
deleted file mode 100644
index 724eb7a9..00000000
--- ./330.patching-array.65177930.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-  public class Solution
-  {
-    public int minPatches(int[] nums, int n)
-    {
-      int cnt = 0, i = 0;
-
-      for (long known_sum = 1; known_sum <= n;)
-      {
-        if (i < nums.length && known_sum >= nums[i])
-        {
-          known_sum += nums[i++];
-        }
-        else
-        {
-          known_sum <<= 1;
-          cnt++;
-        }
-      }
-
-      return cnt;
-    }
-  }
-
diff --git a/331.verify-preorder-serialization-of-a-binary-tree.65184291.Accepted.leetcode.java b/331.verify-preorder-serialization-of-a-binary-tree.65184291.Accepted.leetcode.java
deleted file mode 100644
index 055ad75a..00000000
--- ./331.verify-preorder-serialization-of-a-binary-tree.65184291.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-  public class Solution
-  {
-    public boolean isValidSerialization(String preorder)
-    {
-      String[] nodes = preorder.split(",");
-      int diff = 1;
-
-      for (String node : nodes)
-      {
-        if (--diff < 0)
-        {
-          return false;
-        }
-
-        if (!node.equals("#"))
-        {
-          diff += 2;
-        }
-      }
-
-      return diff == 0;
-    }
-  }
-
diff --git a/332.reconstruct-itinerary.64873226.Accepted.leetcode.java b/332.reconstruct-itinerary.64873226.Accepted.leetcode.java
deleted file mode 100644
index 6704326d..00000000
--- ./332.reconstruct-itinerary.64873226.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-  public class Solution
-  {
-    HashMap<String, PriorityQueue<String>> map =
-      new HashMap<String, PriorityQueue<String>>();
-    List<String> result = new LinkedList<>();
-    public List<String> findItinerary(String[][] tickets)
-    {
-      for (String[] ticket : tickets)
-      {
-        if (!map.containsKey(ticket[0]))
-        {
-          PriorityQueue<String> q = new PriorityQueue<String>();
-          map.put(ticket[0], q);
-        }
-
-        map.get(ticket[0]).offer(ticket[1]);
-      }
-
-      dfs("JFK");
-      return result;
-    }
-    public void dfs(String s)
-    {
-      PriorityQueue<String> q = map.get(s);
-
-      while (q != null && !q.isEmpty())
-      {
-        dfs(q.poll());
-      }
-
-      ((LinkedList<String>) result).addFirst(s);
-    }
-  }
-
diff --git a/333.largest-bst-subtree.69810555.Accepted.leetcode.java b/333.largest-bst-subtree.69810555.Accepted.leetcode.java
deleted file mode 100644
index 0ad230a0..00000000
--- ./333.largest-bst-subtree.69810555.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution {
-    public int largestBSTSubtree(TreeNode root){  
-        if(isBST(root)){  
-            return size(root);  
-        }  
-        return Math.max(largestBSTSubtree(root.left), largestBSTSubtree(root.right));  
-    }  
-  
-    private int size(TreeNode root) {  
-        if(root == null)  
-            return 0;  
-        return 1 + size(root.left) + size(root.right);  
-    }  
-  
-    private boolean isBST(TreeNode root) {  
-          
-        return isBST(root, Integer.MIN_VALUE, Integer.MAX_VALUE);  
-    }  
-      
-    private boolean isBST(TreeNode root, int min, int max) {  
-        if(root == null)  
-            return true;  
-        if(root.val >= max)  
-            return false;  
-        else if(root.val <= min)  
-            return false;  
-          
-        return isBST(root.left, min, root.val) && isBST(root.right, root.val, max);  
-    } 
-}
diff --git a/333.largest-bst-subtree.69811868.Accepted.leetcode.java b/333.largest-bst-subtree.69811868.Accepted.leetcode.java
deleted file mode 100644
index c9c0465a..00000000
--- ./333.largest-bst-subtree.69811868.Accepted.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-  public class Solution
-  {
-    private int res = 0;
-    public int largestBSTSubtree(TreeNode root)
-    {
-      largestBSTHelper(root);
-      return res;
-    }
-    private Data largestBSTHelper(TreeNode root)
-    {
-      Data curr = new Data();
-
-      if (root == null)
-      {
-        curr.isBST = true;
-        curr.size = 0;
-        return curr;
-      }
-
-      Data left = largestBSTHelper(root.left);
-      Data right = largestBSTHelper(root.right);
-      curr.min = Math.min(root.val, Math.min(right.min, left.min));
-      curr.max = Math.max(root.val, Math.max(right.max, left.max));
-
-      if (left.isBST && root.val > left.max && right.isBST
-          && root.val < right.min)
-      {
-        curr.isBST = true;
-        curr.size = 1 + left.size + right.size;
-
-        if (curr.size > res)
-        {
-          res = curr.size;
-        }
-      }
-      else
-      {
-        curr.size = 0;
-      }
-
-      return curr;
-    }
-  }
-  class Data
-  {
-    boolean isBST = false;
-    // the minimum for right sub tree or the maximum for right sub tree
-    int min = Integer.MAX_VALUE;
-    int max = Integer.MIN_VALUE;
-    // if the tree is BST, size is the size of the tree; otherwise zero
-    int size;
-  }
-
diff --git a/334.increasing-triplet-subsequence.65182548.Accepted.leetcode.java b/334.increasing-triplet-subsequence.65182548.Accepted.leetcode.java
deleted file mode 100644
index d4f3c027..00000000
--- ./334.increasing-triplet-subsequence.65182548.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-  public class Solution
-  {
-    public boolean increasingTriplet(int[] nums)
-    {
-      int x1 = 0x7fffffff, x2 = 0x7fffffff;
-
-      for (int num : nums)
-      {
-        if (num <= x1)
-        {
-          x1 = num;
-        }
-        else if (num <= x2)
-        {
-          x2 = num;
-        }
-        else
-        {
-          return true;
-        }
-      }
-
-      return false;
-    }
-  }
-
diff --git a/335.self-crossing.64762869.Accepted.leetcode.java b/335.self-crossing.64762869.Accepted.leetcode.java
deleted file mode 100644
index 3ceae2c1..00000000
--- ./335.self-crossing.64762869.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-  public class Solution
-  {
-    public boolean isSelfCrossing(int[] x)
-    {
-      if (x == null || x.length <= 3)
-      {
-        return false;
-      }
-
-      for (int i = 3; i < x.length; i++)
-      {
-        if (x[i - 3] >= x[i - 1] && x[i - 2] <= x[i])
-        {
-          return true;
-        }
-
-        if (i >= 4 && x[i - 4] + x[i] >= x[i - 2] && x[i - 3] == x[i - 1])
-        {
-          return true;
-        }
-
-        if (i >= 5 && x[i - 5] <= x[i - 3] && x[i] <= x[i - 2] && x[i - 1] <= x[i - 3] && x[i - 4] <= x[i - 2] && x[i - 1] >= x[i - 3] - x[i - 5]
-            && x[i] >= x[i - 2] - x[i - 4])
-        {
-          return true;
-        }
-      }
-
-      return false;
-    }
-  }
-
diff --git a/336.palindrome-pairs.64760929.Accepted.leetcode.java b/336.palindrome-pairs.64760929.Accepted.leetcode.java
deleted file mode 100644
index 898f93b8..00000000
--- ./336.palindrome-pairs.64760929.Accepted.leetcode.java
+++ /dev/null
@@ -1,97 +0,0 @@
-  public class Solution
-  {
-    public static class Trie
-    {
-      int pos;
-      Trie[] nodes;   // consider xyxabc. if current trie is 'a'. Then a.nodes has information. It means string after a is palindrome
-      List<Integer> palins;
-      public Trie()
-      {
-        pos = -1;
-        nodes = new Trie[26];
-        palins = new ArrayList<>();
-      }
-    }
-
-    public static void add(Trie root, String word, int pos)
-    {
-      for (int i = word.length() - 1; i >= 0; i--)
-      {
-        char ch = word.charAt(i);
-
-        if (isPalindrome(word, 0, i))   // check if substring(0, i) is palindrome.
-        {
-          root.palins.add(pos);
-        }
-
-        if (root.nodes[ch - 'a'] == null)
-        {
-          root.nodes[ch - 'a'] = new Trie();
-        }
-
-        root = root.nodes[ch - 'a'];
-      }
-
-      root.pos = pos; // if it is xyxcba. Until now, the node should be at x.
-      root.palins.add(pos);
-    }
-
-    public static void search(Trie root, String[] words, int i, List<List<Integer>> ans)
-    {
-      int len = words[i].length();
-
-      for (int j = 0; j < len && root != null; j++)
-      {
-        if (root.pos >= 0 && i != root.pos && isPalindrome(words[i], j, len - 1))
-        {
-          ans.add(Arrays.asList(new Integer[] {i, root.pos}));
-        }
-
-        char ch = words[i].charAt(j);
-        root = root.nodes[ch - 'a'];
-      }
-
-      if (root != null && root.palins.size() > 0)   // assume 'xyxabc' is in trie, now try 'cba'
-      {
-        for (int j : root.palins)
-        {
-          if (j != i)
-          {
-            ans.add(Arrays.asList(new Integer[] {i, j}));
-          }
-        }
-      }
-    }
-
-    public static List<List<Integer>> palindromePairs(String[] words)
-    {
-      List<List<Integer>> ans = new ArrayList<>();
-      Trie trie = new Trie();
-
-      for (int i = 0; i < words.length; i++)
-      {
-        add(trie, words[i], i);
-      }
-
-      for (int i = 0; i < words.length; i++)
-      {
-        search(trie, words, i, ans);
-      }
-
-      return ans;
-    }
-
-    public static boolean isPalindrome(String str, int i, int j)
-    {
-      while (i < j)
-      {
-        if (str.charAt(i++) != str.charAt(j--))
-        {
-          return false;
-        }
-      }
-
-      return true;
-    }
-  }
-
diff --git a/337.house-robber-iii.64750828.Accepted.leetcode.java b/337.house-robber-iii.64750828.Accepted.leetcode.java
deleted file mode 100644
index 8f8e6c3d..00000000
--- ./337.house-robber-iii.64750828.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-  public class Solution
-  {
-    public int rob(TreeNode root)
-    {
-      if (root == null)
-      {
-        return 0;
-      }
-
-      int[] result = helper(root);
-      return Math.max(result[0], result[1]);
-    }
-
-    public int[] helper(TreeNode root)
-    {
-      if (root == null)
-      {
-        int[] result = {0, 0};
-        return result;
-      }
-
-      int[] result = new int[2];
-      int[] left = helper(root.left);
-      int[] right = helper(root.right);
-      // result[0] is when root is selected, result[1] is when not.
-      result[0] = root.val + left[1] + right[1];
-      result[1] = Math.max(left[0], left[1]) + Math.max(right[0], right[1]);
-      return result;
-    }
-  }
-
diff --git a/337.house-robber-iii.64751903.Accepted.leetcode.java b/337.house-robber-iii.64751903.Accepted.leetcode.java
deleted file mode 100644
index d475bc91..00000000
--- ./337.house-robber-iii.64751903.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-  public class Solution
-  {
-    public int rob(TreeNode root)
-    {
-      Map<TreeNode, Integer> max = new HashMap<>();
-      Map<TreeNode, Integer> maxWO = new HashMap<>();
-      rec(root, max, maxWO);
-      return max.get(root);
-    }
-
-    private void rec(TreeNode root, Map<TreeNode, Integer> max, Map<TreeNode, Integer> maxWO)
-    {
-      if (root == null)
-      {
-        max.put(root, 0);
-        maxWO.put(root, 0);
-        return;
-      }
-
-      rec(root.left, max, maxWO);
-      rec(root.right, max, maxWO);
-      //without root
-      maxWO.put(root, (root.left == null ? 0 : max.get(root.left)) + (root.right == null ? 0 : max.get(root.right)));
-      //with root
-      int maxW = root.val + (root.left == null ? 0 : maxWO.get(root.left)) + (root.right == null ? 0 : maxWO.get(root.right));
-      max.put(root, Math.max(maxW, maxWO.get(root)));
-    }
-  }
-
diff --git a/338.counting-bits.64983663.Accepted.leetcode.java b/338.counting-bits.64983663.Accepted.leetcode.java
deleted file mode 100644
index b154da53..00000000
--- ./338.counting-bits.64983663.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-  public class Solution
-  {
-    public int[] countBits(int num)
-    {
-      int[] result = new int[num + 1];
-
-      for (int i = 0; i <= num; i++)
-      {
-        result[i] = countEach(i);
-      }
-
-      return result;
-    }
-
-    public int countEach(int num)
-    {
-      int result = 0;
-
-      while (num != 0)
-      {
-        if (num % 2 == 1)
-        {
-          result++;
-        }
-
-        num = num / 2;
-      }
-
-      return result;
-    }
-  }
-
diff --git a/338.counting-bits.64983860.Accepted.leetcode.java b/338.counting-bits.64983860.Accepted.leetcode.java
deleted file mode 100644
index 49298515..00000000
--- ./338.counting-bits.64983860.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-  public class Solution
-  {
-    public int[] countBits(int num)
-    {
-      int[] result = new int[num + 1];
-      int p = 1; //p tracks the index for number x
-      int pow = 1;
-
-      for (int i = 1; i <= num; i++)
-      {
-        if (i == pow)
-        {
-          result[i] = 1;
-          pow <<= 1;
-          p = 1;
-        }
-        else
-        {
-          result[i] = result[p] + 1;
-          p++;
-        }
-      }
-
-      return result;
-    }
-  }
-
diff --git a/339.nested-list-weight-sum.72042965.Accepted.leetcode.java b/339.nested-list-weight-sum.72042965.Accepted.leetcode.java
deleted file mode 100644
index b47b8ea5..00000000
--- ./339.nested-list-weight-sum.72042965.Accepted.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/**
- * // This is the interface that allows for creating nested lists.
- * // You should not implement it, or speculate about its implementation
- * public interface NestedInteger {
- *
- *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
- *     public boolean isInteger();
- *
- *     // @return the single integer that this NestedInteger holds, if it holds a single integer
- *     // Return null if this NestedInteger holds a nested list
- *     public Integer getInteger();
- *
- *     // @return the nested list that this NestedInteger holds, if it holds a nested list
- *     // Return null if this NestedInteger holds a single integer
- *     public List<NestedInteger> getList();
- * }
- */
-public class Solution {
-    public int depthSum(List<NestedInteger> nestedList) {
-    return helper(nestedList, 1);
-}
- 
-public int helper(List<NestedInteger> nestedList, int depth){
-    if(nestedList==null||nestedList.size()==0)
-        return 0;
- 
-    int sum=0;
-    for(NestedInteger ni: nestedList){
-        if(ni.isInteger()){
-            sum += ni.getInteger() * depth;
-        }else{
-            sum += helper(ni.getList(), depth+1);
-        }
-    }
- 
-    return sum;
-}
-}
diff --git a/339.nested-list-weight-sum.72043521.Accepted.leetcode.java b/339.nested-list-weight-sum.72043521.Accepted.leetcode.java
deleted file mode 100644
index 24ca4890..00000000
--- ./339.nested-list-weight-sum.72043521.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-  public class Solution
-  {
-    public int depthSum(List<NestedInteger> nestedList)
-    {
-      return helper(nestedList, 1);
-    }
-    public int helper(List<NestedInteger> nestedList, int depth)
-    {
-      if (nestedList == null || nestedList.size() == 0)
-      {
-        return 0;
-      }
-
-      int sum = 0;
-
-      for (NestedInteger ni : nestedList)
-      {
-        if (ni.isInteger())
-        {
-          sum += ni.getInteger() * depth;
-        }
-        else
-        {
-          sum +=
-            helper((List<NestedInteger>) ni.getList(), depth + 1);
-        }
-      }
-
-      return sum;
-    }
-  }
-
diff --git a/339.nested-list-weight-sum.95306205.Accepted.leetcode.java b/339.nested-list-weight-sum.95306205.Accepted.leetcode.java
deleted file mode 100644
index b67f82c0..00000000
--- ./339.nested-list-weight-sum.95306205.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public int depthSum(List<NestedInteger> nestedList)
-    {
-        return helper(nestedList, 1);
-    }
-    public int helper(List<NestedInteger> nestedList, int depth)
-    {
-        if (nestedList == null || nestedList.size() == 0)
-        {
-            return 0;
-        }
-
-        int sum = 0;
-
-        for (NestedInteger ni : nestedList)
-        {
-            if (ni.isInteger())
-            {
-                sum += ni.getInteger() * depth;
-            }
-            else
-            {
-                sum +=
-                    helper((List<NestedInteger>) ni.getList(), depth + 1);
-            }
-        }
-
-        return sum;
-    }
-}
diff --git a/339.nested-list-weight-sum.95306241.Accepted.leetcode.java b/339.nested-list-weight-sum.95306241.Accepted.leetcode.java
deleted file mode 100644
index 2c0896a5..00000000
--- ./339.nested-list-weight-sum.95306241.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public int depthSum(List<NestedInteger> nestedList)
-    {
-        return helper(nestedList, 1);
-    }
-    public int helper(List<NestedInteger> nestedList, int depth)
-    {
-        if (nestedList == null || nestedList.size() == 0)
-        {
-            return 0;
-        }
-
-        int sum = 0;
-
-        for (NestedInteger ni : nestedList)
-        {
-            if (ni.isInteger())
-            {
-                sum += ni.getInteger() * depth;
-            }
-            else
-            {
-                sum += helper((List<NestedInteger>) ni.getList(), depth + 1);
-            }
-        }
-
-        return sum;
-    }
-}
diff --git a/339.nested-list-weight-sum.95306763.Accepted.leetcode.java b/339.nested-list-weight-sum.95306763.Accepted.leetcode.java
deleted file mode 100644
index d27a1f9b..00000000
--- ./339.nested-list-weight-sum.95306763.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/**
- * // This is the interface that allows for creating nested lists.
- * // You should not implement it, or speculate about its implementation
- * public interface NestedInteger {
- *
- *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
- *     public boolean isInteger();
- *
- *     // @return the single integer that this NestedInteger holds, if it holds a single integer
- *     // Return null if this NestedInteger holds a nested list
- *     public Integer getInteger();
- *
- *     // @return the nested list that this NestedInteger holds, if it holds a nested list
- *     // Return null if this NestedInteger holds a single integer
- *     public List<NestedInteger> getList();
- * }
- */
-public class Solution
-{
-    public int depthSum(List<NestedInteger> nestedList)
-    {
-        return helper(nestedList, 1);
-    }
-    public int helper(List<NestedInteger> nestedList, int depth)
-    {
-        if (nestedList == null || nestedList.size() == 0)
-        {
-            return 0;
-        }
-
-        int sum = 0;
-
-        for (NestedInteger ni : nestedList)
-        {
-            if (ni.isInteger())
-            {
-                sum += ni.getInteger() * depth;
-            }
-            else
-            {
-                sum += helper((List<NestedInteger>) ni.getList(), depth + 1);
-            }
-        }
-
-        return sum;
-    }
-}
diff --git a/339.nested-list-weight-sum.95307157.Accepted.leetcode.java b/339.nested-list-weight-sum.95307157.Accepted.leetcode.java
deleted file mode 100644
index 8a5f04f9..00000000
--- ./339.nested-list-weight-sum.95307157.Accepted.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/**
- * // This is the interface that allows for creating nested lists.
- * // You should not implement it, or speculate about its implementation
- * public interface NestedInteger {
- *
- *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
- *     public boolean isInteger();
- *
- *     // @return the single integer that this NestedInteger holds, if it holds a single integer
- *     // Return null if this NestedInteger holds a nested list
- *     public Integer getInteger();
- *
- *     // @return the nested list that this NestedInteger holds, if it holds a nested list
- *     // Return null if this NestedInteger holds a single integer
- *     public List<NestedInteger> getList();
- * }
- */
-public class Solution
-{
-    public int depthSum(List<NestedInteger> nestedList)
-    {
-        return helper(nestedList, 1);
-    }
-
-    public int helper(List<NestedInteger> nestedList, int depth)
-    {
-        if (nestedList == null || nestedList.size() == 0)
-        {
-            return 0;
-        }
-
-        int sum = 0;
-
-        for (NestedInteger ni : nestedList)
-        {
-            if (ni.isInteger())
-            {
-                sum += ni.getInteger() * depth;
-            }
-            else
-            {
-                sum += helper(ni.getList(), depth + 1);
-            }
-        }
-
-        return sum;
-    }
-}
diff --git a/339.nested-list-weight-sum.95922721.Accepted.leetcode.java b/339.nested-list-weight-sum.95922721.Accepted.leetcode.java
deleted file mode 100644
index f542c575..00000000
--- ./339.nested-list-weight-sum.95922721.Accepted.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/**
- * // This is the interface that allows for creating nested lists.
- * // You should not implement it, or speculate about its implementation
- * public interface NestedInteger {
- *
- *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
- *     public boolean isInteger();
- *
- *     // @return the single integer that this NestedInteger holds, if it holds a single integer
- *     // Return null if this NestedInteger holds a nested list
- *     public Integer getInteger();
- *
- *     // @return the nested list that this NestedInteger holds, if it holds a nested list
- *     // Return null if this NestedInteger holds a single integer
- *     public List<NestedInteger> getList();
- * }
- */
-public class Solution
-{
-    public int depthSum(List<NestedInteger> nestedList)
-    {
-        return helper(nestedList, 1);
-    }
-
-    public int helper(List<NestedInteger> nestedList, int depth)
-    {
-        if (nestedList == null || nestedList.size() == 0)
-        {
-            return 0;
-        }
-
-        int sum = 0;
-        
-        for (NestedInteger ni : nestedList)
-        {
-            if (ni.isInteger())
-            {
-                sum += ni.getInteger() * depth;        
-            }
-            else
-            {
-                sum += helper(ni.getList(), depth + 1);                
-            }
-        }
-        
-        return sum;
-    }
-}
diff --git a/339.nested-list-weight-sum.96516744.Accepted.leetcode.java b/339.nested-list-weight-sum.96516744.Accepted.leetcode.java
deleted file mode 100644
index f49d9dc2..00000000
--- ./339.nested-list-weight-sum.96516744.Accepted.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/**
- * // This is the interface that allows for creating nested lists.
- * // You should not implement it, or speculate about its implementation
- * public interface NestedInteger {
- *
- *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
- *     public boolean isInteger();
- *
- *     // @return the single integer that this NestedInteger holds, if it holds a single integer
- *     // Return null if this NestedInteger holds a nested list
- *     public Integer getInteger();
- *
- *     // @return the nested list that this NestedInteger holds, if it holds a nested list
- *     // Return null if this NestedInteger holds a single integer
- *     public List<NestedInteger> getList();
- * }
- */
-public class Solution
-{
-    public int depthSum(List<NestedInteger> nestedList)
-    {
-        int sum = 0;
-        LinkedList<NestedInteger> queue = new LinkedList<NestedInteger>();
-        LinkedList<Integer> depth = new LinkedList<Integer>();
-
-        for (NestedInteger ni : nestedList)
-        {
-            queue.offer(ni);
-            depth.offer(1);
-        }
-
-        while (!queue.isEmpty())
-        {
-            NestedInteger top = queue.poll();
-            int dep = depth.poll();
-
-            if (top.isInteger())
-            {
-                sum += dep * top.getInteger();
-            }
-            else
-            {
-                for (NestedInteger ni : top.getList())
-                {
-                    queue.offer(ni);
-                    depth.offer(dep + 1);
-                }
-            }
-        }
-
-        return sum;
-    }
-}
diff --git a/340.longest-substring-with-at-most-k-distinct-characters.71926397.Accepted.leetcode.java b/340.longest-substring-with-at-most-k-distinct-characters.71926397.Accepted.leetcode.java
deleted file mode 100644
index 7a32b6cf..00000000
--- ./340.longest-substring-with-at-most-k-distinct-characters.71926397.Accepted.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution {
-    public int lengthOfLongestSubstringKDistinct(String s, int k) {
-    if(k==0 || s==null || s.length()==0)
-        return 0;
- 
-    if(s.length()<k)
-        return s.length();
- 
-    HashMap<Character, Integer> map = new HashMap<Character, Integer>();
- 
-    int maxLen=k;
-    int left=0;
-    for(int i=0; i<s.length(); i++){
-        char c = s.charAt(i);
-        if(map.containsKey(c)){
-            map.put(c, map.get(c)+1);
-        }else{
-            map.put(c, 1);
-        }
- 
-        if(map.size()>k){
-            maxLen=Math.max(maxLen, i-left);
- 
-            while(map.size()>k){
- 
-                char fc = s.charAt(left);
-                if(map.get(fc)==1){
-                    map.remove(fc);
-                }else{
-                    map.put(fc, map.get(fc)-1);
-                }
- 
-                left++;
-            }
-        }
- 
-    }
- 
-    maxLen = Math.max(maxLen, s.length()-left);
- 
-    return maxLen;
-}
-}
diff --git a/341.flatten-nested-list-iterator.102869485.Accepted.leetcode.java b/341.flatten-nested-list-iterator.102869485.Accepted.leetcode.java
deleted file mode 100644
index ff159c95..00000000
--- ./341.flatten-nested-list-iterator.102869485.Accepted.leetcode.java
+++ /dev/null
@@ -1,52 +0,0 @@
-public class NestedIterator implements Iterator<Integer>
-{
-    Stack<Iterator<NestedInteger>> stack = new Stack<Iterator<NestedInteger>>();
-    Integer current;
-    
-    public NestedIterator(List<NestedInteger> nestedList)
-    {
-        if (nestedList == null)
-        {
-            return;
-        }
-
-        stack.push(nestedList.iterator());
-    }
-    
-    @Override
-    public Integer next()
-    {
-        Integer result = current;
-        current = null;
-        return result;
-    }
-    
-    @Override
-    public boolean hasNext()
-    {
-        while (!stack.isEmpty() && current == null)
-        {
-            Iterator<NestedInteger> top = stack.peek();
-
-            if (!top.hasNext())
-            {
-                stack.pop();
-                continue;
-            }
-
-            NestedInteger n = top.next();
-
-            if (n.isInteger())
-            {
-                current = n.getInteger();
-                return true;
-            }
-            else
-            {
-                stack.push(n.getList().iterator());
-            }
-        }
-
-        return false;
-    }
-}
diff --git a/341.flatten-nested-list-iterator.65408228.Accepted.leetcode.java b/341.flatten-nested-list-iterator.65408228.Accepted.leetcode.java
deleted file mode 100644
index 14bd92f8..00000000
--- ./341.flatten-nested-list-iterator.65408228.Accepted.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-public class NestedIterator implements Iterator<Integer>
-  {
-    Stack<Iterator<NestedInteger>> stack = new Stack<Iterator<NestedInteger>>();
-    Integer current;
-
-    public NestedIterator(List<NestedInteger> nestedList)
-    {
-      if (nestedList == null)
-      {
-        return;
-      }
-
-      stack.push(nestedList.iterator());
-    }
-
-    @Override
-    public Integer next()
-    {
-      Integer result = current;
-      current = null;
-      return result;
-    }
-
-    @Override
-    public boolean hasNext()
-    {
-      while (!stack.isEmpty() && current == null)
-      {
-        Iterator<NestedInteger> top = stack.peek();
-
-        if (!top.hasNext())
-        {
-          stack.pop();
-          continue;
-        }
-
-        NestedInteger n = top.next();
-
-        if (n.isInteger())
-        {
-          current = n.getInteger();
-          return true;
-        }
-        else
-        {
-          stack.push(n.getList().iterator());
-        }
-      }
-
-      return false;
-    }
-  }
-
diff --git a/341.flatten-nested-list-iterator.65408735.Accepted.leetcode.java b/341.flatten-nested-list-iterator.65408735.Accepted.leetcode.java
deleted file mode 100644
index 40a432c7..00000000
--- ./341.flatten-nested-list-iterator.65408735.Accepted.leetcode.java
+++ /dev/null
@@ -1,51 +0,0 @@
-public class NestedIterator implements Iterator<Integer>
-  {
-    Stack<Iterator<NestedInteger>> stack =
-      new Stack<Iterator<NestedInteger>>();
-    Integer current;
-    public NestedIterator(List<NestedInteger> nestedList)
-    {
-      if (nestedList == null)
-      {
-        return;
-      }
-
-      stack.push(nestedList.iterator());
-    }
-    @Override
-    public Integer next()
-    {
-      Integer result = current;
-      current = null;
-      return result;
-    }
-    @Override
-    public boolean hasNext()
-    {
-      while (!stack.isEmpty() && current == null)
-      {
-        Iterator<NestedInteger> top = stack.peek();
-
-        if (!top.hasNext())
-        {
-          stack.pop();
-          continue;
-        }
-
-        NestedInteger n = top.next();
-
-        if (n.isInteger())
-        {
-          current = n.getInteger();
-          return true;
-        }
-        else
-        {
-          stack.push(n.getList().iterator());
-        }
-      }
-
-      return false;
-    }
-  }
-
diff --git a/342.power-of-four.65265050.Accepted.leetcode.java b/342.power-of-four.65265050.Accepted.leetcode.java
deleted file mode 100644
index c36f7f5b..00000000
--- ./342.power-of-four.65265050.Accepted.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-  public class Solution
-  {
-    public boolean isPowerOfFour(int num)
-    {
-      if (num <= 0)
-      {
-        return false;
-      }
-
-      while (num % 4 == 0)
-      {
-        num = num / 4;
-      }
-
-      return num == 1;
-    }
-  }
-
diff --git a/343.integer-break.63497854.Accepted.leetcode.java b/343.integer-break.63497854.Accepted.leetcode.java
deleted file mode 100644
index 99f9ab82..00000000
--- ./343.integer-break.63497854.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-  public class Solution
-  {
-    public int integerBreak(int n)
-    {
-      int[] dp = new int[n + 1];
-
-      for (int i = 1; i < n; i++)
-      {
-        for (int j = 1; j < i + 1; j++)
-        {
-          if (i + j <= n)
-          {
-            dp[i + j] =
-              Math.max(Math.max(dp[i], i) * Math.max(dp[j], j),
-                       dp[i + j]);
-          }
-        }
-      }
-
-      return dp[n];
-    }
-  }
-
diff --git a/343.integer-break.63498188.Accepted.leetcode.java b/343.integer-break.63498188.Accepted.leetcode.java
deleted file mode 100644
index b45274ce..00000000
--- ./343.integer-break.63498188.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-  public class Solution
-  {
-    public int integerBreak(int n)
-    {
-      if (n == 2)
-      {
-        return 1;
-      }
-
-      if (n == 3)
-      {
-        return 2;
-      }
-
-      if (n == 4)
-      {
-        return 4;
-      }
-
-      int result = 1;
-
-      if (n % 3 == 0)
-      {
-        int m = n / 3;
-        result = (int) Math.pow(3, m);
-      }
-      else if (n % 3 == 2)
-      {
-        int m = n / 3;
-        result = (int) Math.pow(3, m) * 2;
-      }
-      else if (n % 3 == 1)
-      {
-        int m = (n - 4) / 3;
-        result = (int) Math.pow(3, m) * 4;
-      }
-
-      return result;
-    }
-  }
-
diff --git a/344.reverse-string.63494580.Accepted.leetcode.java b/344.reverse-string.63494580.Accepted.leetcode.java
deleted file mode 100644
index de9e2329..00000000
--- ./344.reverse-string.63494580.Accepted.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-    public class Solution
-    {
-        public String reverseString(String s)
-        {
-            StringBuilder sb = new StringBuilder(s);
-            reverse(sb, 0, sb.length() - 1);
-            return sb.toString();
-        }
-        private void reverse(StringBuilder sb, int begin, int end)
-        {
-            for (; begin < end; begin++ , end-- )
-            {
-                char temp = sb.charAt(begin);
-                sb.setCharAt(begin, sb.charAt(end));
-                sb.setCharAt(end, temp);
-            }
-        }
-    }
-
diff --git a/345.reverse-vowels-of-a-string.64759099.Accepted.leetcode.java b/345.reverse-vowels-of-a-string.64759099.Accepted.leetcode.java
deleted file mode 100644
index a6b65fd6..00000000
--- ./345.reverse-vowels-of-a-string.64759099.Accepted.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-  public class Solution
-  {
-    public String reverseVowels(String s)
-    {
-      ArrayList<Character> vowList = new ArrayList<Character>();
-      vowList.add('a');
-      vowList.add('e');
-      vowList.add('i');
-      vowList.add('o');
-      vowList.add('u');
-      vowList.add('A');
-      vowList.add('E');
-      vowList.add('I');
-      vowList.add('O');
-      vowList.add('U');
-      char[] arr = s.toCharArray();
-      int i = 0;
-      int j = s.length() - 1;
-
-      while (i < j)
-      {
-        if (!vowList.contains(arr[i]))
-        {
-          i++;
-          continue;
-        }
-
-        if (!vowList.contains(arr[j]))
-        {
-          j--;
-          continue;
-        }
-
-        char t = arr[i];
-        arr[i] = arr[j];
-        arr[j] = t;
-        i++;
-        j--;
-      }
-
-      return new String(arr);
-    }
-  }
-
diff --git a/345.reverse-vowels-of-a-string.86880240.Accepted.leetcode.java b/345.reverse-vowels-of-a-string.86880240.Accepted.leetcode.java
deleted file mode 100644
index 6a214641..00000000
--- ./345.reverse-vowels-of-a-string.86880240.Accepted.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution
-{
-    public String reverseVowels(String s)
-    {
-        ArrayList<Character> vowList = new ArrayList<Character>();
-        vowList.add('a');
-        vowList.add('e');
-        vowList.add('i');
-        vowList.add('o');
-        vowList.add('u');
-        vowList.add('A');
-        vowList.add('E');
-        vowList.add('I');
-        vowList.add('O');
-        vowList.add('U');
-        char[] arr = s.toCharArray();
-        int i = 0;
-        int j = s.length() - 1;
-
-        while (i < j)
-        {
-            if (!vowList.contains(arr[i]))
-            {
-                i++;
-                continue;
-            }
-
-            if (!vowList.contains(arr[j]))
-            {
-                j--;
-                continue;
-            }
-
-            char t = arr[i];
-            arr[i] = arr[j];
-            arr[j] = t;
-            i++;
-            j--;
-        }
-
-        return new String(arr);
-    }
-}
diff --git a/345.reverse-vowels-of-a-string.86883198.Accepted.leetcode.java b/345.reverse-vowels-of-a-string.86883198.Accepted.leetcode.java
deleted file mode 100644
index 08a591ca..00000000
--- ./345.reverse-vowels-of-a-string.86883198.Accepted.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution
-{
-    public String reverseVowels(String s)
-    {
-        ArrayList<Character> vowList = new ArrayList<Character>();
-        vowList.add('a');
-        vowList.add('e');
-        vowList.add('i');
-        vowList.add('o');
-        vowList.add('u');
-        vowList.add('A');
-        vowList.add('E');
-        vowList.add('I');
-        vowList.add('O');
-        vowList.add('U');
-        char[] arr = s.toCharArray();
-        int i = 0;
-        int j = s.length() - 1;
-
-        while (i < j)
-        {
-            if (!vowList.contains(arr[i]))
-            {
-                i++;
-                continue;
-            }
-
-            if (!vowList.contains(arr[j]))
-            {
-                j--;
-                continue;
-            }
-
-            char temp = arr[i];
-            arr[i] = arr[j];
-            arr[j] = temp;
-            i++;
-            j--;
-        }
-
-        return new String(arr);
-    }
-}
diff --git a/345.reverse-vowels-of-a-string.86944044.Runtime-Error.leetcode.java b/345.reverse-vowels-of-a-string.86944044.Runtime-Error.leetcode.java
deleted file mode 100644
index cf71ceb5..00000000
--- ./345.reverse-vowels-of-a-string.86944044.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution
-{
-    public String reverseVowels(String s)
-    {
-        Set<Character> vowList = new HashSet<Character>();
-        vowList.add('a');
-        vowList.add('e');
-        vowList.add('i');
-        vowList.add('o');
-        vowList.add('u');
-        vowList.add('A');
-        vowList.add('E');
-        vowList.add('I');
-        vowList.add('O');
-        vowList.add('U');
-        char[] arr = s.toCharArray();
-        int left = 0;
-        int right = s.length() - 1;
-
-        while (left < right)
-        {
-            while (!vowList.contains(arr[left]))
-            {
-                left++;
-            }
-            
-            while (!vowList.contains(arr[right]))
-            {
-                right--;
-            }
-            
-            char temp = arr[left];
-            arr[left] = arr[right];
-            arr[right] = temp;
-            left++;
-            right--;
-        }
-        
-        return new String(arr);
-    }
-}
diff --git a/345.reverse-vowels-of-a-string.86944099.Accepted.leetcode.java b/345.reverse-vowels-of-a-string.86944099.Accepted.leetcode.java
deleted file mode 100644
index e28ae65f..00000000
--- ./345.reverse-vowels-of-a-string.86944099.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution
-{
-    public String reverseVowels(String s)
-    {
-        Set<Character> vowList = new HashSet<Character>();
-        vowList.add('a');
-        vowList.add('e');
-        vowList.add('i');
-        vowList.add('o');
-        vowList.add('u');
-        vowList.add('A');
-        vowList.add('E');
-        vowList.add('I');
-        vowList.add('O');
-        vowList.add('U');
-        char[] arr = s.toCharArray();
-        int left = 0;
-        int right = s.length() - 1;
-
-        while (left < right)
-        {
-            while (left < right && !vowList.contains(arr[left]))
-            {
-                left++;
-            }
-            
-            while (left < right && !vowList.contains(arr[right]))
-            {
-                right--;
-            }
-            
-            char temp = arr[left];
-            arr[left] = arr[right];
-            arr[right] = temp;
-            left++;
-            right--;
-        }
-        
-        return new String(arr);
-    }
-}
diff --git a/345.reverse-vowels-of-a-string.86945456.Accepted.leetcode.java b/345.reverse-vowels-of-a-string.86945456.Accepted.leetcode.java
deleted file mode 100644
index e9741ead..00000000
--- ./345.reverse-vowels-of-a-string.86945456.Accepted.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution
-{
-    public String reverseVowels(String s)
-    {
-        Set<Character> vowList = new HashSet<Character>();
-        vowList.add('a');
-        vowList.add('e');
-        vowList.add('i');
-        vowList.add('o');
-        vowList.add('u');
-        vowList.add('A');
-        vowList.add('E');
-        vowList.add('I');
-        vowList.add('O');
-        vowList.add('U');
-        char[] arr = s.toCharArray();
-        int left = 0;
-        int right = s.length() - 1;
-
-        while (left < right)
-        {
-            if (!vowList.contains(arr[left]))
-            {
-                left++;
-                continue;
-            }
-            
-            if (!vowList.contains(arr[right]))
-            {
-                right--;
-                continue;
-            }
-            
-            char temp = arr[left];
-            arr[left] = arr[right];
-            arr[right] = temp;
-            left++;
-            right--;
-        }
-        
-        return new String(arr);
-    }
-}
diff --git a/346.moving-average-from-data-stream.67596836.Accepted.leetcode.java b/346.moving-average-from-data-stream.67596836.Accepted.leetcode.java
deleted file mode 100644
index cb70253a..00000000
--- ./346.moving-average-from-data-stream.67596836.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class MovingAverage {
-    Queue<Integer> queue;
-    int n;
-    int sum;
-     
-    /** Initialize your data structure here. */
-    public MovingAverage(int size) {
-        queue = new LinkedList<>();
-        n = size;
-        sum = 0;
-    }
-     
-    public double next(int val) {
-        queue.offer(val);
-        double result = 0;
-        sum += val;
-        if (queue.size() <= n) {
-            result = (double) sum / queue.size();
-        } else {
-            int remove = queue.poll();
-            sum -= remove;
-            result = (double) sum / n;
-        }
-         
-        return result;
-    }
-}
- 
-/**
- * Your MovingAverage object will be instantiated and called as such:
- * MovingAverage obj = new MovingAverage(size);
- * double param_1 = obj.next(val);
- */
diff --git a/347.top-k-frequent-elements.62555603.Accepted.leetcode.java b/347.top-k-frequent-elements.62555603.Accepted.leetcode.java
deleted file mode 100644
index 030689cb..00000000
--- ./347.top-k-frequent-elements.62555603.Accepted.leetcode.java
+++ /dev/null
@@ -1,65 +0,0 @@
-  class Pair
-  {
-    int num;
-    int count;
-    public Pair(int num, int count)
-    {
-      this.num = num;
-      this.count = count;
-    }
-  }
-  public class Solution
-  {
-    public List<Integer> topKFrequent(int[] nums, int k)
-    {
-      // count the frequency for each element
-      HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
-
-      for (int num : nums)
-      {
-        if (map.containsKey(num))
-        {
-          map.put(num, map.get(num) + 1);
-        }
-        else
-        {
-          map.put(num, 1);
-        }
-      }
-
-      // create a min heap
-      PriorityQueue<Pair> queue =
-        new PriorityQueue<Pair>(new Comparator<Pair>()
-      {
-        public int compare(Pair a, Pair b)
-        {
-          return a.count - b.count;
-        }
-      });
-
-      // maintain a heap of size k.
-      for (Map.Entry<Integer, Integer> entry : map.entrySet())
-      {
-        Pair p = new Pair(entry.getKey(), entry.getValue());
-        queue.offer(p);
-
-        if (queue.size() > k)
-        {
-          queue.poll();
-        }
-      }
-
-      // get all elements from the heap
-      List<Integer> result = new ArrayList<Integer>();
-
-      while (queue.size() > 0)
-      {
-        result.add(queue.poll().num);
-      }
-
-      // reverse the order
-      Collections.reverse(result);
-      return result;
-    }
-  }
-
diff --git a/347.top-k-frequent-elements.62555907.Accepted.leetcode.java b/347.top-k-frequent-elements.62555907.Accepted.leetcode.java
deleted file mode 100644
index 45f9329a..00000000
--- ./347.top-k-frequent-elements.62555907.Accepted.leetcode.java
+++ /dev/null
@@ -1,57 +0,0 @@
-    public class Solution
-    {
-        public List<Integer> topKFrequent(int[] nums, int k)
-        {
-            // count the frequency for each element
-            HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
-            for (int num : nums)
-            {
-                if (map.containsKey(num))
-                {
-                    map.put(num, map.get(num) + 1);
-                }
-                else
-                {
-                    map.put(num, 1);
-                }
-            }
-            // get the max frequency
-            int max = 0;
-            for (Map.Entry<Integer, Integer> entry : map.entrySet())
-            {
-                max = Math.max(max, entry.getValue());
-            }
-            // initialize an array of ArrayList. index is frequency, value is
-            // list of numbers
-            ArrayList<Integer>[] arr =
-                (ArrayList<Integer>[]) new ArrayList[max + 1];
-            for (int i = 1; i <= max; i++ )
-            {
-                arr[i] = new ArrayList<Integer>();
-            }
-            for (Map.Entry<Integer, Integer> entry : map.entrySet())
-            {
-                int count = entry.getValue();
-                int number = entry.getKey();
-                arr[count].add(number);
-            }
-            List<Integer> result = new ArrayList<Integer>();
-            // add most frequent numbers to result
-            for (int j = max; j >= 1; j-- )
-            {
-                if (arr[j].size() > 0)
-                {
-                    for (int a : arr[j])
-                    {
-                        result.add(a);
-                    }
-                }
-                if (result.size() == k)
-                {
-                    break;
-                }
-            }
-            return result;
-        }
-    }
-
diff --git a/347.top-k-frequent-elements.81676404.Accepted.leetcode.java b/347.top-k-frequent-elements.81676404.Accepted.leetcode.java
deleted file mode 100644
index dbf55e35..00000000
--- ./347.top-k-frequent-elements.81676404.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution 
-{
-    public List<Integer> topKFrequent(int[] nums, int k) 
-    {
-        Map<Integer, Integer> hashmap = new HashMap<Integer, Integer>();
-        PriorityQueue<Map.Entry<Integer, Integer>> queue = new PriorityQueue<Map.Entry<Integer, Integer>>(
-            new Comparator<Map.Entry<Integer, Integer>>() 
-            {
-                public int compare(Map.Entry<Integer, Integer> e1, Map.Entry<Integer, Integer> e2) 
-                {
-                    return e1.getValue() - e2.getValue();
-                }
-            });
-        for (int i = 0; i < nums.length; i++) 
-        {
-            if (!hashmap.containsKey(nums[i])) 
-            {
-                hashmap.put(nums[i], 1);
-            } else 
-            {
-                hashmap.put(nums[i], hashmap.get(nums[i]) + 1);
-            }
-        }
-        
-        for (Map.Entry<Integer, Integer> entry : hashmap.entrySet()) 
-        {
-            if (queue.size() < k) 
-            {
-                queue.offer(entry);
-            } 
-            else if (queue.peek().getValue() < entry.getValue()) 
-            {
-                queue.poll();
-                queue.offer(entry);
-            }
-        }
-        
-        List<Integer> ans = new ArrayList<Integer>();
-        
-        for (Map.Entry<Integer, Integer> entry : queue)
-        {
-            ans.add(entry.getKey());
-        }
-        
-        return ans;
-    }
-}
diff --git a/347.top-k-frequent-elements.81677449.Accepted.leetcode.java b/347.top-k-frequent-elements.81677449.Accepted.leetcode.java
deleted file mode 100644
index f3cf6d94..00000000
--- ./347.top-k-frequent-elements.81677449.Accepted.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution 
-{
-    public List<Integer> topKFrequent(int[] nums, int k) 
-    {
-        Map<Integer, Integer> hashmap = new HashMap<Integer, Integer>();
-        PriorityQueue<Map.Entry<Integer, Integer>> heap = new PriorityQueue<Map.Entry<Integer, Integer>>(
-            new Comparator<Map.Entry<Integer, Integer>>() 
-            {
-                public int compare(Map.Entry<Integer, Integer> e1, Map.Entry<Integer, Integer> e2) 
-                {
-                    return e1.getValue() - e2.getValue();
-                }
-            });
-            
-        for (int i = 0; i < nums.length; i++) 
-        {
-            if (!hashmap.containsKey(nums[i])) 
-            {
-                hashmap.put(nums[i], 1);
-            } 
-            else 
-            {
-                hashmap.put(nums[i], hashmap.get(nums[i]) + 1);
-            }
-        }
-        
-        for (Map.Entry<Integer, Integer> entry : hashmap.entrySet()) 
-        {
-            if (heap.size() < k) 
-            {
-                heap.offer(entry);
-            } 
-            else if (heap.peek().getValue() < entry.getValue()) 
-            {
-                heap.poll();
-                heap.offer(entry);
-            }
-        }
-        
-        List<Integer> ans = new ArrayList<Integer>();
-        
-        for (Map.Entry<Integer, Integer> entry : heap)
-        {
-            ans.add(entry.getKey());
-        }
-        
-        return ans;
-    }
-}
diff --git a/348.design-tic-tac-toe.72066664.Accepted.leetcode.java b/348.design-tic-tac-toe.72066664.Accepted.leetcode.java
deleted file mode 100644
index 91ad4792..00000000
--- ./348.design-tic-tac-toe.72066664.Accepted.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-public class TicTacToe {
-    int[] rows;
-    int[] cols;
-    int dc1;
-    int dc2;
-    int n;
-    /** Initialize your data structure here. */
-    public TicTacToe(int n) {
-        this.n=n;
-        this.rows=new int[n];
-        this.cols=new int[n];
-    }
- 
-    /** Player {player} makes a move at ({row}, {col}).
-        @param row The row of the board.
-        @param col The column of the board.
-        @param player The player, can be either 1 or 2.
-        @return The current winning condition, can be either:
-                0: No one wins.
-                1: Player 1 wins.
-                2: Player 2 wins. */
-    public int move(int row, int col, int player) {
-        int val = (player==1?1:-1);
- 
-        rows[row]+=val;
-        cols[col]+=val;
- 
-        if(row==col){
-            dc1+=val;
-        }
-        if(col==n-row-1){
-            dc2+=val;
-        }
- 
-        if(Math.abs(rows[row])==n 
-        || Math.abs(cols[col])==n 
-        || Math.abs(dc1)==n 
-        || Math.abs(dc2)==n){
-            return player;
-        }
- 
-        return 0;
-    }
-}
diff --git a/348.design-tic-tac-toe.86241519.Accepted.leetcode.java b/348.design-tic-tac-toe.86241519.Accepted.leetcode.java
deleted file mode 100644
index 6f76b7db..00000000
--- ./348.design-tic-tac-toe.86241519.Accepted.leetcode.java
+++ /dev/null
@@ -1,52 +0,0 @@
-public class TicTacToe 
-{
-    int[] rows;
-    int[] cols;
-    int dc1;
-    int dc2;
-    int n;
-    /** Initialize your data structure here. */
-    
-    public TicTacToe(int n) 
-    {
-        this.n = n;
-        this.rows = new int[n];
-        this.cols = new int[n];
-    }
- 
-    /** Player {player} makes a move at ({row}, {col}).
-        @param row The row of the board.
-        @param col The column of the board.
-        @param player The player, can be either 1 or 2.
-        @return The current winning condition, can be either:
-                0: No one wins.
-                1: Player 1 wins.
-                2: Player 2 wins. */
-    
-    public int move(int row, int col, int player) 
-    {
-        int val = (player == 1 ? 1 : -1);
-        rows[row] += val;
-        cols[col] += val;
- 
-        if (row == col)
-        {
-            dc1 += val;
-        }
-        
-        if (col == n - row - 1)
-        {
-            dc2 += val;
-        }
- 
-        if (Math.abs(rows[row]) == n 
-        || Math.abs(cols[col]) == n 
-        || Math.abs(dc1) == n 
-        || Math.abs(dc2) == n)
-        {
-            return player;
-        }
- 
-        return 0;
-    }
-}
diff --git a/348.design-tic-tac-toe.86242605.Accepted.leetcode.java b/348.design-tic-tac-toe.86242605.Accepted.leetcode.java
deleted file mode 100644
index 328b1a7b..00000000
--- ./348.design-tic-tac-toe.86242605.Accepted.leetcode.java
+++ /dev/null
@@ -1,52 +0,0 @@
-public class TicTacToe 
-{
-    int[] rows;
-    int[] cols;
-    int dc1;
-    int dc2;
-    int n;
-    /** Initialize your data structure here. */
-    
-    public TicTacToe(int n) 
-    {
-        this.n = n;
-        this.rows = new int[n];
-        this.cols = new int[n];
-    }
- 
-    /** Player {player} makes a move at ({row}, {col}).
-        @param row The row of the board.
-        @param col The column of the board.
-        @param player The player, can be either 1 or 2.
-        @return The current winning condition, can be either:
-                0: No one wins.
-                1: Player 1 wins.
-                2: Player 2 wins. */
-    
-    public int move(int row, int col, int player) 
-    {
-        int val = (player == 1 ? 1 : -1);
-        rows[row] += val;
-        cols[col] += val;
- 
-        if (row == col)
-        {
-            dc1 += val;
-        }
-        
-        if (col + row + 1 == n)
-        {
-            dc2 += val;
-        }
- 
-        if (Math.abs(rows[row]) == n 
-        || Math.abs(cols[col]) == n 
-        || Math.abs(dc1) == n 
-        || Math.abs(dc2) == n)
-        {
-            return player;
-        }
- 
-        return 0;
-    }
-}
diff --git a/348.design-tic-tac-toe.86347070.Accepted.leetcode.java b/348.design-tic-tac-toe.86347070.Accepted.leetcode.java
deleted file mode 100644
index 7402fa4c..00000000
--- ./348.design-tic-tac-toe.86347070.Accepted.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-public class TicTacToe 
-{
-    int[] rows;
-    int[] cols;
-    int dc1;
-    int dc2;
-    int n;
-    /** Initialize your data structure here. */
-    
-    public TicTacToe(int n) 
-    {
-        this.n = n;
-        this.rows = new int[n];
-        this.cols = new int[n];
-    }
- 
-    /** Player {player} makes a move at ({row}, {col}).
-        @param row The row of the board.
-        @param col The column of the board.
-        @param player The player, can be either 1 or 2.
-        @return The current winning condition, can be either:
-                0: No one wins.
-                1: Player 1 wins.
-                2: Player 2 wins. */
-    
-    public int move(int row, int col, int player) 
-    {
-        int val = player == 1 ? 1 : -1;
-        rows[row] += val;
-        cols[col] += val;
-        
-        if (row == col)
-        {
-            dc1 += val;
-        }
-        
-        if (row + col + 1 == n)
-        {
-            dc2 += val;
-        }
-        
-        if (Math.abs(rows[row]) == n 
-            || Math.abs(cols[col]) == n
-            || Math.abs(dc1) == n
-            || Math.abs(dc2) ==n
-            )
-        {
-            return player;
-        }
-        
-        return 0;
-    }
-}
diff --git a/349.intersection-of-two-arrays.102499711.Accepted.leetcode.java b/349.intersection-of-two-arrays.102499711.Accepted.leetcode.java
deleted file mode 100644
index 988e5cc1..00000000
--- ./349.intersection-of-two-arrays.102499711.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution
-{
-    public int[] intersection(int[] nums1, int[] nums2)
-    {
-        HashSet<Integer> set1 = new HashSet<Integer>();
-
-        for (int i : nums1)
-        {
-            set1.add(i);
-        }
-
-        HashSet<Integer> set2 = new HashSet<Integer>();
-
-        for (int i : nums2)
-        {
-            set2.add(i);
-        }
-
-        Iterator<Integer> iter = set1.iterator();
-
-        while (iter.hasNext())
-        {
-            int i = iter.next();
-
-            if (!set2.contains(i))
-            {
-                iter.remove();
-            }
-        }
-
-        int[] result = new int[set1.size()];
-        int i = 0;
-
-        for (int x : set1)
-        {
-            result[i++] = x;
-        }
-
-        return result;
-    }
-}
diff --git a/349.intersection-of-two-arrays.102501564.Wrong-Answer.leetcode.java b/349.intersection-of-two-arrays.102501564.Wrong-Answer.leetcode.java
deleted file mode 100644
index 3d48e64f..00000000
--- ./349.intersection-of-two-arrays.102501564.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public int[] intersection(int[] nums1, int[] nums2)
-    {
-        HashSet<Integer> set1 = new HashSet<Integer>();
-
-        for (int i : nums1)
-        {
-            set1.add(i);
-        }
-
-        HashSet<Integer> set2 = new HashSet<Integer>();
-
-        for (int i : nums2)
-        {
-            set2.add(i);
-        }
-
-        Iterator<Integer> iter = set1.iterator();
-
-        
-        int[] result = new int[set1.size()];
-        int i = 0;
-
-        for (int x : set1)
-        {
-            result[i++] = x;
-        }
-
-        return result;
-    }
-}
diff --git a/349.intersection-of-two-arrays.102501589.Wrong-Answer.leetcode.java b/349.intersection-of-two-arrays.102501589.Wrong-Answer.leetcode.java
deleted file mode 100644
index 2554ec60..00000000
--- ./349.intersection-of-two-arrays.102501589.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public int[] intersection(int[] nums1, int[] nums2)
-    {
-        HashSet<Integer> set1 = new HashSet<Integer>();
-
-        for (int i : nums1)
-        {
-            set1.add(i);
-        }
-
-        HashSet<Integer> set2 = new HashSet<Integer>();
-
-        for (int i : nums2)
-        {
-            set2.add(i);
-        }
-
-        Iterator<Integer> iter = set1.iterator();
-
-        while (iter.hasNext())
-        {
-            int i = iter.next();
-
-            if (!set2.contains(i))
-            {
-                iter.remove();
-            }
-        }
-
-        int[] result = new int[set1.size()];
-        int i = 0;
-
-        return result;
-    }
-}
diff --git a/349.intersection-of-two-arrays.102742373.Wrong-Answer.leetcode.java b/349.intersection-of-two-arrays.102742373.Wrong-Answer.leetcode.java
deleted file mode 100644
index a0a0550e..00000000
--- ./349.intersection-of-two-arrays.102742373.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class Solution
-{
-    public int[] intersection(int[] nums1, int[] nums2)
-    {
-        HashSet<Integer> set1 = new HashSet<Integer>();
-
-        for (int i : nums1)
-        {
-            set1.add(i);
-        }
-
-        HashSet<Integer> set2 = new HashSet<Integer>();
-
-        for (int i : nums2)
-        {
-            set2.add(i);
-        }
-
-        Iterator<Integer> iter = set1.iterator();
-
-        while (iter.hasNext())
-        {
-            int i = iter.next();
-
-            
-        }
-
-        int[] result = new int[set1.size()];
-        int i = 0;
-
-        for (int x : set1)
-        {
-            result[i++] = x;
-        }
-
-        return result;
-    }
-}
diff --git a/349.intersection-of-two-arrays.102742385.Wrong-Answer.leetcode.java b/349.intersection-of-two-arrays.102742385.Wrong-Answer.leetcode.java
deleted file mode 100644
index 60c4fe38..00000000
--- ./349.intersection-of-two-arrays.102742385.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public int[] intersection(int[] nums1, int[] nums2)
-    {
-        HashSet<Integer> set1 = new HashSet<Integer>();
-
-        for (int i : nums1)
-        {
-            set1.add(i);
-        }
-
-        HashSet<Integer> set2 = new HashSet<Integer>();
-
-        for (int i : nums2)
-        {
-            set2.add(i);
-        }
-
-        Iterator<Integer> iter = set1.iterator();
-
-        while (iter.hasNext())
-        {
-            int i = iter.next();
-        }
-
-        int[] result = new int[set1.size()];
-        int i = 0;
-
-        for (int x : set1)
-        {
-            result[i++] = x;
-        }
-
-        return result;
-    }
-}
diff --git a/349.intersection-of-two-arrays.102742406.Wrong-Answer.leetcode.java b/349.intersection-of-two-arrays.102742406.Wrong-Answer.leetcode.java
deleted file mode 100644
index af9d9c8a..00000000
--- ./349.intersection-of-two-arrays.102742406.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution
-{
-    public int[] intersection(int[] nums1, int[] nums2)
-    {
-        HashSet<Integer> set1 = new HashSet<Integer>();
-
-        for (int i : nums1)
-        {
-            set1.add(i);
-        }
-
-        HashSet<Integer> set2 = new HashSet<Integer>();
-
-        for (int i : nums2)
-        {
-            set2.add(i);
-        }
-
-        Iterator<Integer> iter = set1.iterator();
-
-        while (iter.hasNext())
-        {
-            int i = iter.next();
-
-            if (!set2.contains(i))
-            {
-                iter.remove();
-            }
-        }
-
-        int[] result = new int[set1.size()];
-        int i = 0;
-        return result;
-    }
-}
diff --git a/349.intersection-of-two-arrays.65177379.Accepted.leetcode.java b/349.intersection-of-two-arrays.65177379.Accepted.leetcode.java
deleted file mode 100644
index 33bec971..00000000
--- ./349.intersection-of-two-arrays.65177379.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-  public class Solution
-  {
-    public int[] intersection(int[] nums1, int[] nums2)
-    {
-      HashSet<Integer> set1 = new HashSet<Integer>();
-
-      for (int i : nums1)
-      {
-        set1.add(i);
-      }
-
-      HashSet<Integer> set2 = new HashSet<Integer>();
-
-      for (int i : nums2)
-      {
-        set2.add(i);
-      }
-
-      Iterator<Integer> iter = set1.iterator();
-
-      while (iter.hasNext())
-      {
-        int i = iter.next();
-
-        if (!set2.contains(i))
-        {
-          iter.remove();
-        }
-      }
-
-      int[] result = new int[set1.size()];
-      int i = 0;
-
-      for (int x : set1)
-      {
-        result[i++] = x;
-      }
-
-      return result;
-    }
-  }
-
diff --git a/350.intersection-of-two-arrays-ii.102502416.Accepted.leetcode.java b/350.intersection-of-two-arrays-ii.102502416.Accepted.leetcode.java
deleted file mode 100644
index 62cde39c..00000000
--- ./350.intersection-of-two-arrays-ii.102502416.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution
-{
-    public int[] intersect(int[] nums1, int[] nums2)
-    {
-        Arrays.sort(nums1);
-        Arrays.sort(nums2);
-        ArrayList<Integer> list = new ArrayList<Integer>();
-        int p1 = 0, p2 = 0;
-
-        while (p1 < nums1.length && p2 < nums2.length)
-        {
-            if (nums1[p1] < nums2[p2])
-            {
-                p1++;
-            }
-            else if (nums1[p1] > nums2[p2])
-            {
-                p2++;
-            }
-            else
-            {
-                list.add(nums1[p1]);
-                p1++;
-                p2++;
-            }
-        }
-
-        int[] result = new int[list.size()];
-        int i = 0;
-
-        while (i < list.size())
-        {
-            result[i] = list.get(i);
-            i++;
-        }
-
-        return result;
-    }
-}
diff --git a/350.intersection-of-two-arrays-ii.102502814.Wrong-Answer.leetcode.java b/350.intersection-of-two-arrays-ii.102502814.Wrong-Answer.leetcode.java
deleted file mode 100644
index 8d61ddbc..00000000
--- ./350.intersection-of-two-arrays-ii.102502814.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution
-{
-    public int[] intersect(int[] nums1, int[] nums2)
-    {
-        Arrays.sort(nums1);
-        Arrays.sort(nums2);
-        ArrayList<Integer> list = new ArrayList<Integer>();
-        int p1 = 0, p2 = 0;
-
-        while (p1 < nums1.length && p2 < nums2.length)
-        {
-            if (nums1[p1] < nums2[p2])
-            {
-                p1++;
-            }
-            else
-            {
-                list.add(nums1[p1]);
-                p1++;
-                p2++;
-            }
-        }
-
-        int[] result = new int[list.size()];
-        int i = 0;
-
-        while (i < list.size())
-        {
-            result[i] = list.get(i);
-            i++;
-        }
-
-        return result;
-    }
-}
diff --git a/350.intersection-of-two-arrays-ii.102502836.Memory-Limit-Exceeded.leetcode.java b/350.intersection-of-two-arrays-ii.102502836.Memory-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 4b9337f6..00000000
--- ./350.intersection-of-two-arrays-ii.102502836.Memory-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public int[] intersect(int[] nums1, int[] nums2)
-    {
-        Arrays.sort(nums1);
-        Arrays.sort(nums2);
-        ArrayList<Integer> list = new ArrayList<Integer>();
-        int p1 = 0, p2 = 0;
-
-        while (p1 < nums1.length && p2 < nums2.length)
-        {
-            if (nums1[p1] < nums2[p2])
-            {
-                p1++;
-            }
-            else if (nums1[p1] > nums2[p2])
-            {
-                p2++;
-            }
-            else
-            {
-                list.add(nums1[p1]);
-            }
-        }
-
-        int[] result = new int[list.size()];
-        int i = 0;
-
-        while (i < list.size())
-        {
-            result[i] = list.get(i);
-            i++;
-        }
-
-        return result;
-    }
-}
diff --git a/350.intersection-of-two-arrays-ii.102502871.Runtime-Error.leetcode.java b/350.intersection-of-two-arrays-ii.102502871.Runtime-Error.leetcode.java
deleted file mode 100644
index 7d2f5920..00000000
--- ./350.intersection-of-two-arrays-ii.102502871.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution
-{
-    public int[] intersect(int[] nums1, int[] nums2)
-    {
-        Arrays.sort(nums1);
-        Arrays.sort(nums2);
-        ArrayList<Integer> list = new ArrayList<Integer>();
-        int p1 = 0, p2 = 0;
-
-        while (p1 < nums1.length || p2 < nums2.length)
-        {
-            if (nums1[p1] < nums2[p2])
-            {
-                p1++;
-            }
-            else if (nums1[p1] > nums2[p2])
-            {
-                p2++;
-            }
-            else
-            {
-                list.add(nums1[p1]);
-                p1++;
-                p2++;
-            }
-        }
-
-        int[] result = new int[list.size()];
-        int i = 0;
-
-        while (i < list.size())
-        {
-            result[i] = list.get(i);
-            i++;
-        }
-
-        return result;
-    }
-}
diff --git a/350.intersection-of-two-arrays-ii.102742491.Wrong-Answer.leetcode.java b/350.intersection-of-two-arrays-ii.102742491.Wrong-Answer.leetcode.java
deleted file mode 100644
index 82d3ad7b..00000000
--- ./350.intersection-of-two-arrays-ii.102742491.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public int[] intersect(int[] nums1, int[] nums2)
-    {
-        ArrayList<Integer> list = new ArrayList<Integer>();
-        int p1 = 0, p2 = 0;
-
-        while (p1 < nums1.length && p2 < nums2.length)
-        {
-            if (nums1[p1] < nums2[p2])
-            {
-                p1++;
-            }
-            else if (nums1[p1] > nums2[p2])
-            {
-                p2++;
-            }
-            else
-            {
-                list.add(nums1[p1]);
-                p1++;
-                p2++;
-            }
-        }
-
-        int[] result = new int[list.size()];
-        int i = 0;
-
-        while (i < list.size())
-        {
-            result[i] = list.get(i);
-            i++;
-        }
-
-        return result;
-    }
-}
diff --git a/350.intersection-of-two-arrays-ii.102742535.Wrong-Answer.leetcode.java b/350.intersection-of-two-arrays-ii.102742535.Wrong-Answer.leetcode.java
deleted file mode 100644
index b0aad355..00000000
--- ./350.intersection-of-two-arrays-ii.102742535.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public int[] intersect(int[] nums1, int[] nums2)
-    {
-        Arrays.sort(nums1);
-        Arrays.sort(nums2);
-        ArrayList<Integer> list = new ArrayList<Integer>();
-        int p1 = 0, p2 = 0;
-
-        while (p1 < nums1.length && p2 < nums2.length)
-        {
-            if (nums1[p1] < nums2[p2])
-            {
-                p1++;
-            }
-            else
-            {
-                list.add(nums1[p1]);
-                p1++;
-                p2++;
-            }
-        }
-
-        int[] result = new int[list.size()];
-        return result;
-    }
-}
diff --git a/350.intersection-of-two-arrays-ii.102742572.Time-Limit-Exceeded.leetcode.java b/350.intersection-of-two-arrays-ii.102742572.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 33773b07..00000000
--- ./350.intersection-of-two-arrays-ii.102742572.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public int[] intersect(int[] nums1, int[] nums2)
-    {
-        Arrays.sort(nums1);
-        Arrays.sort(nums2);
-        ArrayList<Integer> list = new ArrayList<Integer>();
-        int p1 = 0, p2 = 0;
-
-        while (p1 < nums1.length && p2 < nums2.length)
-        {
-            if (nums1[p1] < nums2[p2])
-            {
-            }
-            else if (nums1[p1] > nums2[p2])
-            {
-            }
-            else
-            {
-                list.add(nums1[p1]);
-                p1++;
-                p2++;
-            }
-        }
-
-        int[] result = new int[list.size()];
-        int i = 0;
-
-        while (i < list.size())
-        {
-            result[i] = list.get(i);
-            i++;
-        }
-
-        return result;
-    }
-}
diff --git a/351.android-unlock-patterns.71486882.Accepted.leetcode.java b/351.android-unlock-patterns.71486882.Accepted.leetcode.java
deleted file mode 100644
index 2bba3b43..00000000
--- ./351.android-unlock-patterns.71486882.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution {  
-    private int patterns;  
-    private boolean valid(boolean[] keypad, int from, int to) {  
-        if (from==to) return false;  
-        int i=Math.min(from, to), j=Math.max(from,to);  
-        if ((i==1 && j==9) || (i==3 && j==7)) return keypad[5] && !keypad[to];  
-        if ((i==1 || i==4 || i==7) && i+2==j) return keypad[i+1] && !keypad[to];  
-        if (i<=3 && i+6==j) return keypad[i+3] && !keypad[to];  
-        return !keypad[to];  
-    }  
-    private void find(boolean[] keypad, int from, int step, int m, int n) {  
-        if (step == n) {  
-            patterns ++;  
-            return;  
-        }  
-        if (step >= m) patterns ++;  
-        for(int i=1; i<=9; i++) {  
-            if (valid(keypad, from, i)) {  
-                keypad[i] = true;  
-                find(keypad, i, step+1, m, n);  
-                keypad[i] = false;  
-            }  
-        }  
-    }  
-    public int numberOfPatterns(int m, int n) {  
-        boolean[] keypad = new boolean[10];  
-        for(int i=1; i<=9; i++) {  
-            keypad[i] = true;  
-            find(keypad, i, 1, m, n);  
-            keypad[i] = false;  
-        }  
-        return patterns;  
-    }  
-} 
diff --git a/352.data-stream-as-disjoint-intervals.65543673.Accepted.leetcode.java b/352.data-stream-as-disjoint-intervals.65543673.Accepted.leetcode.java
deleted file mode 100644
index e1383d11..00000000
--- ./352.data-stream-as-disjoint-intervals.65543673.Accepted.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-public class SummaryRanges
-  {
-
-    /** Initialize your data structure here. */
-
-    private TreeSet<Interval> intervalSet;
-
-    public SummaryRanges()
-    {
-      intervalSet = new TreeSet<Interval>(new Comparator<Interval>()
-      {
-        public int compare(Interval a, Interval b)
-        {
-          return a.start - b.start;
-        }
-      });
-    }
-
-    public void addNum(int val)
-    {
-      Interval valInterval = new Interval(val, val);
-      Interval floor = intervalSet.floor(valInterval);
-
-      if (floor != null)
-      {
-        if (floor.end >= val)
-        {
-          return;
-        }
-        else if (floor.end + 1 == val)
-        {
-          valInterval.start = floor.start;
-          intervalSet.remove(floor);
-        }
-      }
-
-      Interval higher = intervalSet.higher(valInterval);
-
-      if (higher != null && higher.start == val + 1)
-      {
-        valInterval.end = higher.end;
-        intervalSet.remove(higher);
-      }
-
-      intervalSet.add(valInterval);
-    }
-
-    public List<Interval> getIntervals()
-    {
-      return Arrays.asList(intervalSet.toArray(new Interval[0]));
-    }
-  }
-
diff --git a/353.design-snake-game.151529025.Accepted.leetcode.java b/353.design-snake-game.151529025.Accepted.leetcode.java
deleted file mode 100644
index e9ed7178..00000000
--- ./353.design-snake-game.151529025.Accepted.leetcode.java
+++ /dev/null
@@ -1,73 +0,0 @@
-public class SnakeGame {  
-    private Set<String> board = new HashSet<>();  
-    private int[][] food;  
-    private int eat = 0;  
-    private LinkedList<Position> snake = new LinkedList<>();  
-    private int width, height;  
-      
-    private boolean eat(int y, int x) {  
-        if (eat >= food.length) return false;  
-        if (food[eat][0] < 0 || food[eat][0] >= height || food[eat][1] < 0 || food[eat][1] >= width) return false;  
-        if (y == food[eat][0] && x == food[eat][1]) return true;  
-        return false;  
-    }  
-  
-    /** Initialize your data structure here. 
-        @param width - screen width 
-        @param height - screen height  
-        @param food - A list of food positions 
-        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */  
-    public SnakeGame(int width, int height, int[][] food) {  
-        this.food = food;  
-        Position head = new Position(0,0);  
-        this.snake.add(head);  
-        board.add(head.toString());  
-        this.height = height;  
-        this.width = width;  
-    }  
-      
-    /** Moves the snake. 
-        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down  
-        @return The game's score after the move. Return -1 if game over.  
-        Game over when snake crosses the screen boundary or bites its body. */  
-    public int move(String direction) {  
-        Position head = snake.getFirst();  
-        Position next = new Position(head.y, head.x);  
-        if ("U".equals(direction)) {  
-            next.y --;  
-        } else if ("D".equals(direction)) {  
-            next.y ++;  
-        } else if ("L".equals(direction)) {  
-            next.x --;  
-        } else if ("R".equals(direction)) {  
-            next.x ++;  
-        } else {  
-            return -1;  
-        }  
-        if (next.y < 0 || next.y >= height || next.x < 0 || next.x >= width) return -1;  
-        String ns = next.toString();  
-        if (eat(next.y, next.x)) {  
-            snake.addFirst(next);  
-            board.add(ns);  
-            return ++ eat;  
-        }  
-        Position tail = snake.getLast();  
-        board.remove(tail.toString());  
-        snake.removeLast();  
-        if (board.contains(ns)) return -1;  
-        snake.addFirst(next);  
-        board.add(ns);  
-        return eat;  
-    }  
-}  
-class Position {  
-    int y, x;  
-    Position(int y, int x) {  
-        this.y = y;  
-        this.x = x;  
-    }  
-    public String toString() {  
-        return y + "," + x;  
-    }  
-} 
-
diff --git a/353.design-snake-game.71353590.Accepted.leetcode.java b/353.design-snake-game.71353590.Accepted.leetcode.java
deleted file mode 100644
index f3183383..00000000
--- ./353.design-snake-game.71353590.Accepted.leetcode.java
+++ /dev/null
@@ -1,72 +0,0 @@
-public class SnakeGame {  
-    private Set<String> board = new HashSet<>();  
-    private int[][] food;  
-    private int eat = 0;  
-    private LinkedList<Position> snake = new LinkedList<>();  
-    private int width, height;  
-      
-    private boolean eat(int y, int x) {  
-        if (eat >= food.length) return false;  
-        if (food[eat][0] < 0 || food[eat][0] >= height || food[eat][1] < 0 || food[eat][1] >= width) return false;  
-        if (y == food[eat][0] && x == food[eat][1]) return true;  
-        return false;  
-    }  
-  
-    /** Initialize your data structure here. 
-        @param width - screen width 
-        @param height - screen height  
-        @param food - A list of food positions 
-        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */  
-    public SnakeGame(int width, int height, int[][] food) {  
-        this.food = food;  
-        Position head = new Position(0,0);  
-        this.snake.add(head);  
-        board.add(head.toString());  
-        this.height = height;  
-        this.width = width;  
-    }  
-      
-    /** Moves the snake. 
-        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down  
-        @return The game's score after the move. Return -1 if game over.  
-        Game over when snake crosses the screen boundary or bites its body. */  
-    public int move(String direction) {  
-        Position head = snake.getFirst();  
-        Position next = new Position(head.y, head.x);  
-        if ("U".equals(direction)) {  
-            next.y --;  
-        } else if ("D".equals(direction)) {  
-            next.y ++;  
-        } else if ("L".equals(direction)) {  
-            next.x --;  
-        } else if ("R".equals(direction)) {  
-            next.x ++;  
-        } else {  
-            return -1;  
-        }  
-        if (next.y < 0 || next.y >= height || next.x < 0 || next.x >= width) return -1;  
-        String ns = next.toString();  
-        if (eat(next.y, next.x)) {  
-            snake.addFirst(next);  
-            board.add(ns);  
-            return ++ eat;  
-        }  
-        Position tail = snake.getLast();  
-        board.remove(tail.toString());  
-        snake.removeLast();  
-        if (board.contains(ns)) return -1;  
-        snake.addFirst(next);  
-        board.add(ns);  
-        return eat;  
-    }  
-}  
-class Position {  
-    int y, x;  
-    Position(int y, int x) {  
-        this.y = y;  
-        this.x = x;  
-    }  
-    public String toString() {  
-        return y + "," + x;  
-    }  
-} 
diff --git a/354.russian-doll-envelopes.65543058.Accepted.leetcode.java b/354.russian-doll-envelopes.65543058.Accepted.leetcode.java
deleted file mode 100644
index 9025a969..00000000
--- ./354.russian-doll-envelopes.65543058.Accepted.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-  public class Solution
-  {
-    public int maxEnvelopes(int[][] envelopes)
-    {
-      Arrays.sort(envelopes, new Comparator<int[]>()
-      {
-        @Override
-        public int compare(int[] e1, int[] e2)
-        {
-          if (e1[0] != e2[0])
-          {
-            return e1[0] - e2[0];
-          }
-
-          return e2[1] - e1[1];
-        }
-      });
-      int len = 0;
-      int[] h = new int[envelopes.length];
-
-      for (int[] envelope : envelopes)
-      {
-        int i = 0, j = len - 1;
-
-        while (i <= j)
-        {
-          int m = (i + j) / 2;
-
-          if (h[m] < envelope[1])
-          {
-            i = m + 1;
-          }
-          else
-          {
-            j = m - 1;
-          }
-        }
-
-        h[i] = envelope[1];
-
-        if (i == len)
-        {
-          len ++;
-        }
-      }
-
-      return len;
-    }
-  }
-
diff --git a/355.design-twitter.65262205.Accepted.leetcode.java b/355.design-twitter.65262205.Accepted.leetcode.java
deleted file mode 100644
index 7104f155..00000000
--- ./355.design-twitter.65262205.Accepted.leetcode.java
+++ /dev/null
@@ -1,117 +0,0 @@
-public class Twitter
-  {
-
-    private int postCount;
-    private Map<Integer, Integer> tweetCountMap;
-    private Map<Integer, List<Integer>> tweetIdMap;
-    private Map<Integer, Integer> tweetOwnerMap;
-    private Map<Integer, Set<Integer>> followeeMap;
-
-    /** Initialize your data structure here. */
-    public Twitter()
-    {
-      tweetCountMap = new HashMap<Integer, Integer>();
-      tweetIdMap = new HashMap<Integer, List<Integer>>();
-      tweetOwnerMap = new HashMap<Integer, Integer>();
-      followeeMap = new HashMap<Integer, Set<Integer>>();
-    }
-
-    /** Compose a new tweet. */
-    public void postTweet(int userId, int tweetId)
-    {
-      tweetCountMap.put(tweetId, ++postCount);
-      tweetOwnerMap.put(tweetId, userId);
-      getTweetIdList(userId).add(tweetId);
-    }
-
-    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
-    public List<Integer> getNewsFeed(int userId)
-    {
-      List<Integer> result = new ArrayList<Integer>();
-      Set<Integer> followeeSet = getFolloweeSet(userId);
-      PriorityQueue<Integer> pq = new PriorityQueue<Integer>(new Comparator<Integer>()
-      {
-        @Override
-        public int compare(Integer a, Integer b)
-        {
-          return tweetCountMap.get(b) - tweetCountMap.get(a);
-        }
-      });
-      Map<Integer, Integer> idxMap = new HashMap<Integer, Integer>();
-
-      for (Integer followeeId : followeeSet)
-      {
-        List<Integer> tweetIdList = getTweetIdList(followeeId);
-        int idx = tweetIdList.size() - 1;
-
-        if (idx >= 0)
-        {
-          idxMap.put(followeeId, idx - 1);
-          pq.add(tweetIdList.get(idx));
-        }
-      }
-
-      while (result.size() < 10 && !pq.isEmpty())
-      {
-        Integer topTweetId = pq.poll();
-        result.add(topTweetId);
-        Integer ownerId = tweetOwnerMap.get(topTweetId);
-        int idx = idxMap.get(ownerId);
-
-        if (idx >= 0)
-        {
-          List<Integer> tweetIdList = getTweetIdList(ownerId);
-          pq.add(tweetIdList.get(idx));
-          idxMap.put(ownerId, idx - 1);
-        }
-      }
-
-      return result;
-    }
-
-    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */
-    public void follow(int followerId, int followeeId)
-    {
-      getFolloweeSet(followerId).add(followeeId);
-    }
-
-    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
-    public void unfollow(int followerId, int followeeId)
-    {
-      if (followerId != followeeId)
-      {
-        getFolloweeSet(followerId).remove(followeeId);
-      }
-    }
-
-    /** Get a non-empty followee set of an user. */
-    private Set<Integer> getFolloweeSet(int userId)
-    {
-      Set<Integer> followeeSet = followeeMap.get(userId);
-
-      if (followeeSet == null)
-      {
-        followeeSet = new HashSet<Integer>();
-        followeeSet.add(userId);
-        followeeMap.put(userId, followeeSet);
-      }
-
-      return followeeSet;
-    }
-
-    /** Get a non-empty tweet id list of an user. */
-    private List<Integer> getTweetIdList(int userId)
-    {
-      List<Integer> tweetIdList = tweetIdMap.get(userId);
-
-      if (tweetIdList == null)
-      {
-        tweetIdList = new ArrayList<Integer>();
-        tweetIdMap.put(userId, tweetIdList);
-      }
-
-      return tweetIdList;
-    }
-
-  }
-
diff --git a/356.line-reflection.72100445.Accepted.leetcode.java b/356.line-reflection.72100445.Accepted.leetcode.java
deleted file mode 100644
index fc7a0b41..00000000
--- ./356.line-reflection.72100445.Accepted.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class Solution {
-    public boolean isReflected(int[][] points) {
-        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
-        Set<String> set = new HashSet<String>();
-        for (int[] p : points) {
-            set.add(p[0] + "," + p[1]);
-            min = Math.min(min, p[0]);
-            max = Math.max(max, p[0]);
-        }
-        
-        int sum = min + max;
-        for (int[] p : points) {
-            if (!set.contains((sum - p[0]) + "," + p[1])) {
-                return false;
-            }
-        }
-        return true;
-    }
-}
diff --git a/357.count-numbers-with-unique-digits.65410825.Accepted.leetcode.java b/357.count-numbers-with-unique-digits.65410825.Accepted.leetcode.java
deleted file mode 100644
index 743e5f8c..00000000
--- ./357.count-numbers-with-unique-digits.65410825.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-  public class Solution
-  {
-    public int countNumbersWithUniqueDigits(int n)
-    {
-      n = Math.min(n, 10);
-      int[] dp = new int[n + 1];
-      dp[0] = 1;
-
-      for (int i = 1; i <= n; i++)
-      {
-        dp[i] = 9;
-
-        for (int x = 9; x >= 9 - i + 2; x--)
-        {
-          dp[i] *= x;
-        }
-      }
-
-      int ans = 0;
-
-      for (int i = 0; i < dp.length; i++)
-      {
-        ans += dp[i];
-      }
-
-      return ans;
-    }
-  }
-
diff --git a/358.rearrange-string-k-distance-apart.72053398.Accepted.leetcode.java b/358.rearrange-string-k-distance-apart.72053398.Accepted.leetcode.java
deleted file mode 100644
index 10d5a37f..00000000
--- ./358.rearrange-string-k-distance-apart.72053398.Accepted.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-public class Solution {
-
-public String rearrangeString(String str, int k) {
-
-    StringBuilder rearranged = new StringBuilder();
-    //count frequency of each char
-    Map<Character, Integer> map = new HashMap<>();
-    for (char c : str.toCharArray()) {
-        if (!map.containsKey(c)) {
-            map.put(c, 0);
-        }
-        map.put(c, map.get(c) + 1);
-    }
-
-    //construct a max heap using self-defined comparator, which holds all Map entries
-    Queue<Map.Entry<Character, Integer>> maxHeap = new PriorityQueue<>(new Comparator<Map.Entry<Character, Integer>>() {
-        public int compare(Map.Entry<Character, Integer> entry1, Map.Entry<Character, Integer> entry2) {
-            return entry2.getValue() - entry1.getValue();
-        }
-    });
-
-    //two differenct queue - LinkedList & PriorityQueue, offer & poll
-    Queue<Map.Entry<Character, Integer>> waitQueue = new LinkedList<>();
-
-    maxHeap.addAll(map.entrySet());
-
-    while (!maxHeap.isEmpty()) {
-
-        Map.Entry<Character, Integer> current = maxHeap.poll();
-        rearranged.append(current.getKey());
-        current.setValue(current.getValue() - 1);
-        waitQueue.offer(current);
-
-        if (waitQueue.size() < k) { // intial k-1 chars, waitQueue not full yet
-            continue;
-        }
-        // release from waitQueue if char is already k apart
-        Map.Entry<Character, Integer> front = waitQueue.poll();
-        //note that char with 0 count still needs to be placed in waitQueue as a place holder
-        if (front.getValue() > 0) {
-            maxHeap.offer(front);
-        }
-    }
-    //easy to miss
-    return rearranged.length() == str.length() ? rearranged.toString() : "";
-}
-
-}
diff --git a/358.rearrange-string-k-distance-apart.72053728.Accepted.leetcode.java b/358.rearrange-string-k-distance-apart.72053728.Accepted.leetcode.java
deleted file mode 100644
index 3ec54132..00000000
--- ./358.rearrange-string-k-distance-apart.72053728.Accepted.leetcode.java
+++ /dev/null
@@ -1,63 +0,0 @@
-  public class Solution
-  {
-    public String rearrangeString(String str, int k)
-    {
-      StringBuilder rearranged = new StringBuilder();
-      // count frequency of each char
-      Map<Character, Integer> map = new HashMap<>();
-
-      for (char c : str.toCharArray())
-      {
-        if (!map.containsKey(c))
-        {
-          map.put(c, 0);
-        }
-
-        map.put(c, map.get(c) + 1);
-      }
-
-      // construct a max heap using self-defined comparator, which holds
-      // all Map entries
-      Queue<Map.Entry<Character, Integer>> maxHeap =
-        new PriorityQueue<>(new Comparator<Map.Entry<Character, Integer>>()
-      {
-        public int compare(Map.Entry<Character, Integer> entry1,
-                           Map.Entry<Character, Integer> entry2)
-        {
-          return entry2.getValue() - entry1.getValue();
-        }
-      });
-      // two differenct queue - LinkedList & PriorityQueue, offer & poll
-      Queue<Map.Entry<Character, Integer>> waitQueue = new LinkedList<>();
-      maxHeap.addAll(map.entrySet());
-
-      while (!maxHeap.isEmpty())
-      {
-        Map.Entry<Character, Integer> current = maxHeap.poll();
-        rearranged.append(current.getKey());
-        current.setValue(current.getValue() - 1);
-        waitQueue.offer(current);
-
-        if (waitQueue.size() < k) // intial k-1 chars, waitQueue not
-          // full yet
-        {
-          continue;
-        }
-
-        // release from waitQueue if char is already k apart
-        Map.Entry<Character, Integer> front = waitQueue.poll();
-
-        // note that char with 0 count still needs to be placed in
-        // waitQueue as a place holder
-        if (front.getValue() > 0)
-        {
-          maxHeap.offer(front);
-        }
-      }
-
-      // easy to miss
-      return rearranged.length() == str.length() ? rearranged.toString()
-             : "";
-    }
-  }
-
diff --git a/359.logger-rate-limiter.67598823.Accepted.leetcode.java b/359.logger-rate-limiter.67598823.Accepted.leetcode.java
deleted file mode 100644
index 823262a5..00000000
--- ./359.logger-rate-limiter.67598823.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Logger {  
-    private List<String>[] buf = new List[10];  
-    private Set<String> set = new HashSet<>();  
-    private int from = 0;  
-  
-    /** Initialize your data structure here. */  
-    public Logger() {  
-        for(int i=0; i<buf.length; i++) buf[i] = new ArrayList<>();  
-    }  
-      
-    /** Returns true if the message should be printed in the given timestamp, otherwise returns false. The timestamp is in seconds granularity. */  
-    public boolean shouldPrintMessage(int timestamp, String message) {  
-        for(int t = from; t <= timestamp - 10; t ++) {  
-            for(String s : buf[(t+buf.length)%buf.length]) {  
-                set.remove(s);  
-            }  
-            buf[(t+buf.length)%buf.length].clear();  
-        }  
-        if (!set.add(message)) return false;  
-        buf[timestamp%buf.length].add(message);  
-        from = timestamp - 9;  
-        return true;  
-    }  
-} 
diff --git a/36.valid-sudoku.102832818.Accepted.leetcode.java b/36.valid-sudoku.102832818.Accepted.leetcode.java
deleted file mode 100644
index 01e8fe92..00000000
--- ./36.valid-sudoku.102832818.Accepted.leetcode.java
+++ /dev/null
@@ -1,52 +0,0 @@
-public class Solution
-{
-    public boolean isValidSudoku(char[][] board)
-    {
-        for (int i = 0; i < board[0].length; i++)
-        {
-            HashSet<Character> test = new HashSet<Character>();
-
-            for (int j = 0; j < board.length; j++)
-            {
-                if (board[j][i] != '.' && !test.add(board[j][i]))
-                {
-                    return false;
-                }
-            }
-        }
-
-        for (int i = 0; i < board.length; i++)
-        {
-            HashSet<Character> test = new HashSet<Character>();
-
-            for (int j = 0; j < board[0].length; j++)
-            {
-                if (board[i][j] != '.' && !test.add(board[i][j]))
-                {
-                    return false;
-                }
-            }
-        }
-
-        for (int i = 0; i < 3; i++)
-        {
-            for (int j = 0; j < 3; j++) // for each sub-box
-            {
-                HashSet<Character> test = new HashSet<Character>();
-
-                for (int m = i * 3; m < i * 3 + 3; m++) //row
-                {
-                    for (int n = j * 3; n < j * 3 + 3; n++) //column
-                    {
-                        if (board[m][n] != '.' && !test.add(board[m][n]))
-                        {
-                            return false;
-                        }
-                    }
-                }
-            }
-        }
-
-        return true;
-    }
-}
diff --git a/36.valid-sudoku.102834108.Wrong-Answer.leetcode.java b/36.valid-sudoku.102834108.Wrong-Answer.leetcode.java
deleted file mode 100644
index 28a0d55b..00000000
--- ./36.valid-sudoku.102834108.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution
-{
-    public boolean isValidSudoku(char[][] board)
-    {
-        for (int i = 0; i < board[0].length; i++)
-        {
-            HashSet<Character> test = new HashSet<Character>();
-
-            for (int j = 0; j < board.length; j++)
-            {
-                if (board[j][i] != '.' && !test.add(board[j][i]))
-                {
-                    return false;
-                }
-            }
-        }
-
-        for (int i = 0; i < board.length; i++)
-        {
-            HashSet<Character> test = new HashSet<Character>();
-
-            for (int j = 0; j < board[0].length; j++)
-            {
-                if (board[i][j] != '.' && !test.add(board[i][j]))
-                {
-                    return false;
-                }
-            }
-        }
-
-        for (int i = 0; i < 3; i++)
-        {
-            for (int j = 0; j < 3; j++) // for each sub-box
-            {
-                HashSet<Character> test = new HashSet<Character>();
-            }
-        }
-
-        return true;
-    }
-}
diff --git a/36.valid-sudoku.102834166.Wrong-Answer.leetcode.java b/36.valid-sudoku.102834166.Wrong-Answer.leetcode.java
deleted file mode 100644
index 521825b8..00000000
--- ./36.valid-sudoku.102834166.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-public class Solution
-{
-    public boolean isValidSudoku(char[][] board)
-    {
-        for (int i = 0; i < board[0].length; i++)
-        {
-            HashSet<Character> test = new HashSet<Character>();
-
-            for (int j = 0; j < board.length; j++)
-            {
-            }
-        }
-
-        for (int i = 0; i < board.length; i++)
-        {
-            HashSet<Character> test = new HashSet<Character>();
-
-            for (int j = 0; j < board[0].length; j++)
-            {
-                if (board[i][j] != '.' && !test.add(board[i][j]))
-                {
-                    return false;
-                }
-            }
-        }
-
-        for (int i = 0; i < 3; i++)
-        {
-            for (int j = 0; j < 3; j++) // for each sub-box
-            {
-                HashSet<Character> test = new HashSet<Character>();
-
-                for (int m = i * 3; m < i * 3 + 3; m++) //row
-                {
-                    for (int n = j * 3; n < j * 3 + 3; n++) //column
-                    {
-                        if (board[m][n] != '.' && !test.add(board[m][n]))
-                        {
-                            return false;
-                        }
-                    }
-                }
-            }
-        }
-
-        return true;
-    }
-}
diff --git a/36.valid-sudoku.34755923.Accepted.leetcode.java b/36.valid-sudoku.34755923.Accepted.leetcode.java
deleted file mode 100644
index 3164d4d7..00000000
--- ./36.valid-sudoku.34755923.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-  public class Solution
-  {
-    public boolean isValidSudoku(char[][] board)
-    {
-      boolean[][] rows = new boolean[9][9];
-      boolean[][] columns = new boolean[9][9];
-      boolean[][] cells = new boolean[9][9];
-
-      for (int i = 0; i < 9; i++)
-      {
-        for (int j = 0; j < 9; j++)
-        {
-          if (board[i][j] == '.')
-          {
-            continue;
-          }
-
-          int num = board[i][j] - '1';
-
-          if (rows[i][num] || columns[j][num]
-              || cells[i / 3 * 3 + j / 3][num])
-          {
-            return false;
-          }
-
-          rows[i][num] = columns[j][num] = cells[i / 3 * 3 + j / 3][num] = true;
-        }
-      }
-
-      return true;
-    }
-  }
-
diff --git a/36.valid-sudoku.34757463.Accepted.leetcode.java b/36.valid-sudoku.34757463.Accepted.leetcode.java
deleted file mode 100644
index 7b32147d..00000000
--- ./36.valid-sudoku.34757463.Accepted.leetcode.java
+++ /dev/null
@@ -1,70 +0,0 @@
-  public class Solution
-  {
-    public boolean isValidSudoku(char[][] board)
-    {
-      if (board == null || board.length != 9 || board[0].length != 9)
-      {
-        return false;
-      }
-
-      for (int i = 0; i < 9; i++)
-      {
-        boolean[] map = new boolean[9];
-
-        for (int j = 0; j < 9; j++)
-        {
-          if (board[i][j] != '.')
-          {
-            if (map[(int)(board[i][j] - '1')])
-            {
-              return false;
-            }
-
-            map[(int)(board[i][j] - '1')] = true;
-          }
-        }
-      }
-
-      for (int j = 0; j < 9; j++)
-      {
-        boolean[] map = new boolean[9];
-
-        for (int i = 0; i < 9; i++)
-        {
-          if (board[i][j] != '.')
-          {
-            if (map[(int)(board[i][j] - '1')])
-            {
-              return false;
-            }
-
-            map[(int)(board[i][j] - '1')] = true;
-          }
-        }
-      }
-
-      for (int block = 0; block < 9; block++)
-      {
-        boolean[] map = new boolean[9];
-
-        for (int i = block / 3 * 3; i < block / 3 * 3 + 3; i++)
-        {
-          for (int j = block % 3 * 3; j < block % 3 * 3 + 3; j++)
-          {
-            if (board[i][j] != '.')
-            {
-              if (map[(int)(board[i][j] - '1')])
-              {
-                return false;
-              }
-
-              map[(int)(board[i][j] - '1')] = true;
-            }
-          }
-        }
-      }
-
-      return true;
-    }
-  }
-
diff --git a/36.valid-sudoku.34757657.Accepted.leetcode.java b/36.valid-sudoku.34757657.Accepted.leetcode.java
deleted file mode 100644
index 468fea53..00000000
--- ./36.valid-sudoku.34757657.Accepted.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-  public class Solution
-  {
-    public boolean isValidSudoku(char[][] board)
-    {
-      for (int i = 0; i < board[0].length; i++)
-      {
-        HashSet<Character> test = new HashSet<Character>();
-
-        for (int j = 0; j < board.length; j++)
-        {
-          if (board[j][i] != '.' && !test.add(board[j][i])) { return false; }
-        }
-      }
-
-      for (int i = 0; i < board.length; i++)
-      {
-        HashSet<Character> test = new HashSet<Character>();
-
-        for (int j = 0; j < board[0].length; j++)
-        {
-          if (board[i][j] != '.' && !test.add(board[i][j])) { return false; }
-        }
-      }
-
-      for (int i = 0; i < 3; i++)
-      {
-        for (int j = 0; j < 3; j++) // for each sub-box
-        {
-          HashSet<Character> test = new HashSet<Character>();
-
-          for (int m = i * 3; m < i * 3 + 3; m++) //row
-          {
-            for (int n = j * 3; n < j * 3 + 3; n++) //column
-            {
-              if (board[m][n] != '.' && !test.add(board[m][n])) { return false; }
-            }
-          }
-        }
-      }
-
-      return true;
-    }
-  }
-
diff --git a/36.valid-sudoku.9226837.Accepted.leetcode.java b/36.valid-sudoku.9226837.Accepted.leetcode.java
deleted file mode 100644
index 972c8f50..00000000
--- ./36.valid-sudoku.9226837.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-  public class Solution {
-    public boolean isValidSudoku(char[][] board) {
-      boolean[][] rows = new boolean[9][9];
-      boolean[][] columns = new boolean[9][9];
-      boolean[][] cells = new boolean[9][9];
-
-      for (int i = 0; i < 9; i++) {
-        for (int j = 0; j < 9; j++) {
-          if (board[i][j] == '.') {
-            continue;
-          }
-
-          int num = board[i][j] - '1';
-
-          if (rows[i][num] || columns[j][num]
-              || cells[i / 3 * 3 + j / 3][num]) {
-            return false;
-          }
-
-          rows[i][num] = columns[j][num] = cells[i / 3 * 3 + j / 3][num] = true;
-        }
-      }
-
-      return true;
-    }
-  }
-
diff --git a/360.sort-transformed-array.71752591.Accepted.leetcode.java b/360.sort-transformed-array.71752591.Accepted.leetcode.java
deleted file mode 100644
index 828cfb27..00000000
--- ./360.sort-transformed-array.71752591.Accepted.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution {
-    public int[] sortTransformedArray(int[] nums, int a, int b, int c) {
-        int[] result = new int[nums.length];
-        int start = 0, end = nums.length - 1;
-        int nextIndex = 0;
-        if (a > 0 || (a == 0 && b >= 0)) 
-            nextIndex = nums.length - 1;
-        if (a < 0 || (a == 0 && b < 0))
-            nextIndex = 0;
-        double mid = -1 * ((b * 1.0)  / (2.0 * a));
-        while (start <= end) {
-            if (a > 0 || (a == 0 && b >= 0)) {
-                if (Math.abs(mid - nums[start]) > Math.abs(nums[end] - mid)) {
-                    int x = nums[start++];
-                    result[nextIndex--] = a * x * x + b * x + c;
-                }
-                else {
-                    int x = nums[end--];
-                    result[nextIndex--] = a * x * x + b * x + c;
-                }
-            }
-            else if (a < 0 || (a == 0 && b < 0)){
-                if (Math.abs(mid - nums[start]) > Math.abs(nums[end] - mid)) {
-                    int x = nums[start++];
-                    result[nextIndex++] = a * x * x + b * x + c;
-                }
-                else {
-                    int x = nums[end--];
-                    result[nextIndex++] = a * x * x + b * x + c;
-                }
-            }
-        }
-        return result;
-    }
-}
diff --git a/361.bomb-enemy.71909060.Accepted.leetcode.java b/361.bomb-enemy.71909060.Accepted.leetcode.java
deleted file mode 100644
index 1f10cd57..00000000
--- ./361.bomb-enemy.71909060.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution {
-    public int maxKilledEnemies(char[][] grid) {
-        if(grid.length==0){ return 0; }
-        int rowNo = grid.length, colNo = grid[0].length;
-        int[] colHit = new int[colNo];
-        int rowHit = 0;
-        int result = 0;
-       
-        for(int i=0; i<rowNo; i++){
-            for(int j=0; j<colNo; j++){
-                if(j==0 || grid[i][j-1]=='W'){
-                    rowHit = 0;
-                    for(int k=j; k<colNo && grid[i][k] != 'W'; k++){
-                        if(grid[i][k]=='E'){ rowHit++; }
-                    }
-                }
-               
-                if(i==0 || grid[i-1][j]=='W'){
-                    colHit[j] = 0;
-                    for(int k=i; k<rowNo && grid[k][j] != 'W'; k++){
-                        if(grid[k][j]=='E'){ colHit[j]++; }
-                    }
-                }
-               
-                if(grid[i][j]=='0'){
-                    result = Math.max(result, rowHit+colHit[j]);
-                }
-            }
-        }
-       
-        return result;
-    }
-} 
diff --git a/362.design-hit-counter.72237325.Accepted.leetcode.java b/362.design-hit-counter.72237325.Accepted.leetcode.java
deleted file mode 100644
index c61ff927..00000000
--- ./362.design-hit-counter.72237325.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class HitCounter {
-    private ArrayDeque<Integer> memory;
-    /** Initialize your data structure here. */
-    public HitCounter() {
-        memory = new ArrayDeque<>();
-    }
- 
-    /** Record a hit.
-        @param timestamp - The current timestamp (in seconds granularity). */
-    public void hit(int timestamp) {
-        memory.add(timestamp);
-        // int top = memory.poll();
-        // while (timestamp - top >= 300) {
-        //     top = memory.poll();
-        // }
-        // memory.addFirst(top);
-    }
- 
-    /** Return the number of hits in the past 5 minutes.
-        @param timestamp - The current timestamp (in seconds granularity). */
-    public int getHits(int timestamp) {
-        if (!memory.isEmpty()) {
-            while (!memory.isEmpty() && (timestamp - memory.peek()) >= 300) {
-                memory.poll();
-            }
-        }
-        return memory.size();
-    }
-}
- 
-/**
- * Your HitCounter object will be instantiated and called as such:
- * HitCounter obj = new HitCounter();
- * obj.hit(timestamp);
- * int param_2 = obj.getHits(timestamp);
- */
diff --git a/363.max-sum-of-rectangle-no-larger-than-k.65541818.Accepted.leetcode.java b/363.max-sum-of-rectangle-no-larger-than-k.65541818.Accepted.leetcode.java
deleted file mode 100644
index 037c956f..00000000
--- ./363.max-sum-of-rectangle-no-larger-than-k.65541818.Accepted.leetcode.java
+++ /dev/null
@@ -1,55 +0,0 @@
-  public class Solution
-  {
-    public int maxSumSubmatrix(int[][] matrix, int k)
-    {
-      int m = matrix.length, n = 0;
-
-      if (m > 0)
-      {
-        n = matrix[0].length;
-      }
-
-      if (m * n == 0)
-      {
-        return 0;
-      }
-
-      int M = Math.max(m, n);
-      int N = Math.min(m, n);
-      int ans = Integer.MIN_VALUE;
-
-      for (int x = 0; x < N; x++)
-      {
-        int sums[] = new int[M];
-
-        for (int y = x; y < N; y++)
-        {
-          TreeSet<Integer> set = new TreeSet<Integer>();
-          int num = 0;
-
-          for (int z = 0; z < M; z++)
-          {
-            sums[z] += m > n ? matrix[z][y] : matrix[y][z];
-            num += sums[z];
-
-            if (num <= k)
-            {
-              ans = Math.max(ans, num);
-            }
-
-            Integer i = set.ceiling(num - k);
-
-            if (i != null)
-            {
-              ans = Math.max(ans, num - i);
-            }
-
-            set.add(num);
-          }
-        }
-      }
-
-      return ans;
-    }
-  }
-
diff --git a/364.nested-list-weight-sum-ii.67599221.Accepted.leetcode.java b/364.nested-list-weight-sum-ii.67599221.Accepted.leetcode.java
deleted file mode 100644
index 7d498241..00000000
--- ./364.nested-list-weight-sum-ii.67599221.Accepted.leetcode.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/**
- * // This is the interface that allows for creating nested lists.
- * // You should not implement it, or speculate about its implementation
- * public interface NestedInteger {
- *
- *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
- *     public boolean isInteger();
- *
- *     // @return the single integer that this NestedInteger holds, if it holds a single integer
- *     // Return null if this NestedInteger holds a nested list
- *     public Integer getInteger();
- *
- *     // @return the nested list that this NestedInteger holds, if it holds a nested list
- *     // Return null if this NestedInteger holds a single integer
- *     public List<NestedInteger> getList();
- * }
- */
-public class Solution {
-    public int depthSumInverse(List<NestedInteger> nestedList) {
-        if (nestedList == null || nestedList.isEmpty()) {
-            return 0;
-        }
-        int level = getLv(nestedList);
-        int sum = getSum(nestedList, level);
-        return sum;
-    }
- 
-    private int getLv(List<NestedInteger> nestedList) {
-        if (nestedList == null || nestedList.isEmpty()) {
-            return 0;
-        }
-        int level = 0;
-        boolean hasInt = false;
-        for (NestedInteger ni : nestedList) {
-            if (!ni.isInteger()) {
-                int curLv = getLv(ni.getList());
-                if (curLv > level) {
-                    level = curLv;
-                }
-            } else {
-                hasInt = true;
-            }
-        }
-        return (level > 0 || hasInt) ? level + 1 : 0;
-    }
- 
-    private int getSum(List<NestedInteger> nestedList, int level) {
-        if (level == 0 || nestedList == null || nestedList.isEmpty()) {
-            return 0;
-        }
-        int sum = 0;
-        for (NestedInteger ni : nestedList) {
-            if (ni.isInteger()) {
-                sum += ni.getInteger() * level;
-            } else {
-                sum += getSum(ni.getList(), level - 1);
-            }
-        }
-        return sum;
-    }
-}
diff --git a/364.nested-list-weight-sum-ii.95256932.Accepted.leetcode.java b/364.nested-list-weight-sum-ii.95256932.Accepted.leetcode.java
deleted file mode 100644
index 7d6548e5..00000000
--- ./364.nested-list-weight-sum-ii.95256932.Accepted.leetcode.java
+++ /dev/null
@@ -1,85 +0,0 @@
-/**
- * // This is the interface that allows for creating nested lists.
- * // You should not implement it, or speculate about its implementation
- * public interface NestedInteger {
- *
- *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
- *     public boolean isInteger();
- *
- *     // @return the single integer that this NestedInteger holds, if it holds a single integer
- *     // Return null if this NestedInteger holds a nested list
- *     public Integer getInteger();
- *
- *     // @return the nested list that this NestedInteger holds, if it holds a nested list
- *     // Return null if this NestedInteger holds a single integer
- *     public List<NestedInteger> getList();
- * }
- */
-public class Solution
-{
-    public int depthSumInverse(List<NestedInteger> nestedList)
-    {
-        if (nestedList == null || nestedList.isEmpty())
-        {
-            return 0;
-        }
-
-        int level = getLv(nestedList);
-        int sum = getSum(nestedList, level);
-        return sum;
-    }
-
-    private int getLv(List<NestedInteger> nestedList)
-    {
-        if (nestedList == null || nestedList.isEmpty())
-        {
-            return 0;
-        }
-
-        int level = 0;
-        boolean hasInt = false;
-
-        for (NestedInteger ni : nestedList)
-        {
-            if (!ni.isInteger())
-            {
-                int curLv = getLv(ni.getList());
-
-                if (curLv > level)
-                {
-                    level = curLv;
-                }
-            }
-            else
-            {
-                hasInt = true;
-            }
-        }
-
-        return (level > 0 || hasInt) ? level + 1 : 0;
-    }
-
-    private int getSum(List<NestedInteger> nestedList, int level)
-    {
-        if (level == 0 || nestedList == null || nestedList.isEmpty())
-        {
-            return 0;
-        }
-
-        int sum = 0;
-
-        for (NestedInteger ni : nestedList)
-        {
-            if (ni.isInteger())
-            {
-                sum += ni.getInteger() * level;
-            }
-            else
-            {
-                sum += getSum(ni.getList(), level - 1);
-            }
-        }
-
-        return sum;
-    }
-}
diff --git a/364.nested-list-weight-sum-ii.95926743.Accepted.leetcode.java b/364.nested-list-weight-sum-ii.95926743.Accepted.leetcode.java
deleted file mode 100644
index 34b3a347..00000000
--- ./364.nested-list-weight-sum-ii.95926743.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/**
- * // This is the interface that allows for creating nested lists.
- * // You should not implement it, or speculate about its implementation
- * public interface NestedInteger {
- *
- *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
- *     public boolean isInteger();
- *
- *     // @return the single integer that this NestedInteger holds, if it holds a single integer
- *     // Return null if this NestedInteger holds a nested list
- *     public Integer getInteger();
- *
- *     // @return the nested list that this NestedInteger holds, if it holds a nested list
- *     // Return null if this NestedInteger holds a single integer
- *     public List<NestedInteger> getList();
- * }
- */
-public class Solution
-{
-    public int depthSumInverse(List<NestedInteger> nestedList)
-    {
-        int unweighted = 0;
-        int weighted = 0;
-        List<NestedInteger> next = new ArrayList<NestedInteger>();
-
-        while (nestedList.size() != 0)
-        {
-            for (NestedInteger temp : nestedList)
-            {
-                if (temp.isInteger())
-                {
-                    unweighted += temp.getInteger();
-                }
-                else
-                {
-                    next.addAll(temp.getList());
-                }
-            }
-
-            weighted += unweighted;
-            nestedList = next;
-            next = new ArrayList<NestedInteger>();
-        }
-
-        return weighted;
-    }
-}
diff --git a/364.nested-list-weight-sum-ii.95980781.Accepted.leetcode.java b/364.nested-list-weight-sum-ii.95980781.Accepted.leetcode.java
deleted file mode 100644
index d88f5005..00000000
--- ./364.nested-list-weight-sum-ii.95980781.Accepted.leetcode.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/**
- * // This is the interface that allows for creating nested lists.
- * // You should not implement it, or speculate about its implementation
- * public interface NestedInteger {
- *
- *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
- *     public boolean isInteger();
- *
- *     // @return the single integer that this NestedInteger holds, if it holds a single integer
- *     // Return null if this NestedInteger holds a nested list
- *     public Integer getInteger();
- *
- *     // @return the nested list that this NestedInteger holds, if it holds a nested list
- *     // Return null if this NestedInteger holds a single integer
- *     public List<NestedInteger> getList();
- * }
- */
-public class Solution
-{
-    private int maxDepth(List<NestedInteger> nestedList, int depth)
-    {
-        int max = depth;
-
-        for (NestedInteger ni : nestedList)
-        {
-            if (!ni.isInteger())
-            {
-                max = Math.max(max, maxDepth(ni.getList(), depth + 1));
-            }
-        }
-
-        return max;
-    }
-    private int sum(List<NestedInteger> nestedList, int depth)
-    {
-        int sum = 0;
-
-        for (NestedInteger ni : nestedList)
-        {
-            if (ni.isInteger())
-            {
-                sum += ni.getInteger() * depth;
-            }
-            else
-            {
-                sum += sum(ni.getList(), depth - 1);
-            }
-        }
-
-        return sum;
-    }
-    public int depthSumInverse(List<NestedInteger> nestedList)
-    {
-        if (nestedList == null || nestedList.isEmpty())
-        {
-            return 0;
-        }
-
-        int max = maxDepth(nestedList, 1);
-        return sum(nestedList, max);
-    }
-}
diff --git a/365.water-and-jug-problem.65543310.Accepted.leetcode.java b/365.water-and-jug-problem.65543310.Accepted.leetcode.java
deleted file mode 100644
index 3d05391b..00000000
--- ./365.water-and-jug-problem.65543310.Accepted.leetcode.java
+++ /dev/null
@@ -1,13 +0,0 @@
-  public class Solution
-  {
-    public boolean canMeasureWater(int x, int y, int z)
-    {
-      return x + y == z || (x + y > z) && z % gcd(x, y) == 0;
-    }
-
-    private int gcd(int a, int b)
-    {
-      return b == 0 ? a : gcd(b, a % b);
-    }
-  }
-
diff --git a/366.find-leaves-of-binary-tree.67502680.Accepted.leetcode.java b/366.find-leaves-of-binary-tree.67502680.Accepted.leetcode.java
deleted file mode 100644
index 3a1d3994..00000000
--- ./366.find-leaves-of-binary-tree.67502680.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution {
-    public List<List<Integer>> findLeaves(TreeNode root) {
-        List<List<Integer>> list = new ArrayList<>();
-        helper(list, root);
-        return list;
-    }
-
-//calculate the index of this root passed in and put it in that index, at last return where this root was put
-    private int helper(List<List<Integer>> list, TreeNode root) {
-        if (root == null)
-            return -1;
-        int left = helper(list, root.left);
-        int right = helper(list, root.right);
-        int cur = Math.max(left, right) + 1;
-        if (list.size() == cur)
-            list.add(new ArrayList<Integer>());
-        list.get(cur).add(root.val);
-        return cur;
-    }
-}
diff --git a/366.find-leaves-of-binary-tree.69550216.Accepted.leetcode.java b/366.find-leaves-of-binary-tree.69550216.Accepted.leetcode.java
deleted file mode 100644
index b64451ad..00000000
--- ./366.find-leaves-of-binary-tree.69550216.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-  public class Solution
-  {
-    public List<List<Integer>> findLeaves(TreeNode root)
-    {
-      List<List<Integer>> result = new ArrayList<>();
-      dfs(result, root);
-      return result;
-    }
-    private int dfs(List<List<Integer>> result, TreeNode root)
-    {
-      if (root == null)
-      {
-        return -1;
-      }
-
-      int depth = Math.max(dfs(result, root.left), dfs(result, root.right)) + 1;
-
-      if (result.size() == depth)
-      {
-        result.add(new ArrayList<Integer>());
-      }
-
-      result.get(depth).add(root.val);
-      return depth;
-    }
-  }
-
diff --git a/366.find-leaves-of-binary-tree.96514899.Accepted.leetcode.java b/366.find-leaves-of-binary-tree.96514899.Accepted.leetcode.java
deleted file mode 100644
index 81a025b8..00000000
--- ./366.find-leaves-of-binary-tree.96514899.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> findLeaves(TreeNode root)
-    {
-        List<List<Integer>> result = new ArrayList<>();
-        dfs(result, root);
-        return result;
-    }
-    private int dfs(List<List<Integer>> result, TreeNode root)
-    {
-        if (root == null)
-        {
-            return -1;
-        }
-
-        int depth = Math.max(dfs(result, root.left), dfs(result, root.right)) + 1;
-
-        if (result.size() == depth)
-        {
-            result.add(new ArrayList<Integer>());
-        }
-
-        result.get(depth).add(root.val);
-        return depth;
-    }
-}
diff --git a/367.valid-perfect-square.65420420.Accepted.leetcode.java b/367.valid-perfect-square.65420420.Accepted.leetcode.java
deleted file mode 100644
index 93698d3b..00000000
--- ./367.valid-perfect-square.65420420.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-  public class Solution
-  {
-    public boolean isPerfectSquare(int num)
-    {
-      long L = 1, R = (num >> 1) + 1;
-
-      while (L <= R)
-      {
-        long  m = L + ((R - L) >> 1);
-        long  mul = m * m;
-
-        if (mul == num)
-        {
-          return true;
-        }
-        else if (mul > num)
-        {
-          R = m - 1;
-        }
-        else
-        {
-          L = m + 1;
-        }
-      }
-
-      return false;
-    }
-  }
-
diff --git a/367.valid-perfect-square.96514715.Accepted.leetcode.java b/367.valid-perfect-square.96514715.Accepted.leetcode.java
deleted file mode 100644
index 36b40c24..00000000
--- ./367.valid-perfect-square.96514715.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public boolean isPerfectSquare(int num)
-    {
-        long L = 1, R = (num >> 1) + 1;
-
-        while (L <= R)
-        {
-            long  m = L + ((R - L) >> 1);
-            long  mul = m * m;
-
-            if (mul == num)
-            {
-                return true;
-            }
-            else if (mul > num)
-            {
-                R = m - 1;
-            }
-            else
-            {
-                L = m + 1;
-            }
-        }
-
-        return false;
-    }
-}
diff --git a/368.largest-divisible-subset.65539962.Accepted.leetcode.java b/368.largest-divisible-subset.65539962.Accepted.leetcode.java
deleted file mode 100644
index ef74cd81..00000000
--- ./368.largest-divisible-subset.65539962.Accepted.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-  public class Solution
-  {
-    public List<Integer> largestDivisibleSubset(int[] nums)
-    {
-      List<Integer> ans = new ArrayList<Integer>();
-
-      if (nums.length == 0)
-      {
-        return ans;
-      }
-
-      Arrays.sort(nums);
-      int n = nums.length;
-      int[] dp = new int[n], index = new int[n];
-      Arrays.fill(dp, 1);
-      Arrays.fill(index, -1);
-      int max_index = 0, max_dp = 1;
-
-      for (int i = 0; i < n; i++)
-      {
-        for (int j = 0; j < i; j++)
-        {
-          if (nums[i] % nums[j] == 0 && dp[j] + 1 > dp[i])
-          {
-            dp[i] = dp[j] + 1;
-            index[i] = j;
-          }
-        }
-
-        if (max_dp < dp[i])
-        {
-          max_dp = dp[i];
-          max_index = i;
-        }
-      }
-
-      for (int i = max_index; i != -1; i = index[i])
-      {
-        ans.add(nums[i]);
-      }
-
-      return ans;
-    }
-  }
-
diff --git a/369.plus-one-linked-list.71926046.Accepted.leetcode.java b/369.plus-one-linked-list.71926046.Accepted.leetcode.java
deleted file mode 100644
index b992b7f5..00000000
--- ./369.plus-one-linked-list.71926046.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution {  
-    private ListNode reverse(ListNode head) {  
-        ListNode prev = null;  
-        ListNode current = head;  
-        while (current != null) {  
-            ListNode next = current.next;  
-            current.next = prev;  
-            prev = current;  
-            current = next;  
-        }  
-        return prev;  
-    }  
-    public ListNode plusOne(ListNode head) {  
-        if (head == null) return null;  
-        ListNode reversed = reverse(head);  
-        reversed.val ++;  
-        ListNode current = reversed;  
-        while (current != null && current.val >= 10) {  
-            current.val -= 10;  
-            if (current.next == null) {  
-                current.next = new ListNode(1);  
-            } else {  
-                current.next.val ++;  
-            }  
-            current = current.next;  
-        }  
-        reversed = reverse(reversed);  
-        return reversed;  
-    }  
-}
diff --git a/369.plus-one-linked-list.85280886.Accepted.leetcode.java b/369.plus-one-linked-list.85280886.Accepted.leetcode.java
deleted file mode 100644
index 9b733dd1..00000000
--- ./369.plus-one-linked-list.85280886.Accepted.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-public class Solution 
-{  
-    private ListNode reverse(ListNode head) 
-    {  
-        ListNode prev = null;  
-        ListNode current = head;  
-    
-        while (current != null) 
-        {  
-            ListNode next = current.next;  
-            current.next = prev;  
-            prev = current;  
-            current = next;  
-        }  
-        
-        return prev;  
-    }  
-    public ListNode plusOne(ListNode head) 
-    {  
-        if (head == null) 
-        {   
-            return null;  
-        }
-        
-        ListNode reversed = reverse(head);  
-        reversed.val++;  
-        ListNode current = reversed;  
-        
-        while (current != null && current.val >= 10) 
-        {  
-            current.val -= 10;  
-        
-            if (current.next == null) 
-            {  
-                current.next = new ListNode(1);  
-            } 
-            else 
-            {  
-                current.next.val++;  
-            }  
-            
-            current = current.next;  
-        }  
-        
-        reversed = reverse(reversed);  
-        return reversed;  
-    }  
-}
diff --git a/369.plus-one-linked-list.85294477.Accepted.leetcode.java b/369.plus-one-linked-list.85294477.Accepted.leetcode.java
deleted file mode 100644
index 12990694..00000000
--- ./369.plus-one-linked-list.85294477.Accepted.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-public class Solution 
-{  
-    private ListNode reverse(ListNode head) 
-    {  
-        ListNode prev = null;  
-        
-        while (head != null) 
-        {  
-            ListNode temp = head.next;  
-            head.next = prev;  
-            prev = head;  
-            head = temp;  
-        }  
-        
-        return prev;  
-    }
-    
-    public ListNode plusOne(ListNode head) 
-    {  
-        if (head == null) 
-        {   
-            return null;  
-        }
-        
-        ListNode reversed = reverse(head);  
-        reversed.val++;  
-        ListNode current = reversed;  
-        
-        while (current != null && current.val >= 10) 
-        {  
-            current.val -= 10;  
-        
-            if (current.next == null) 
-            {  
-                current.next = new ListNode(1);  
-            } 
-            else 
-            {  
-                current.next.val++;  
-            }  
-            
-            current = current.next;  
-        }  
-        
-        reversed = reverse(reversed);  
-        return reversed;  
-    }  
-}
diff --git a/369.plus-one-linked-list.85294728.Accepted.leetcode.java b/369.plus-one-linked-list.85294728.Accepted.leetcode.java
deleted file mode 100644
index 71a3e58d..00000000
--- ./369.plus-one-linked-list.85294728.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution 
-{  
-    private ListNode reverse(ListNode head) 
-    {  
-        ListNode prev = null;  
-        
-        while (head != null) 
-        {  
-            ListNode temp = head.next;  
-            head.next = prev;  
-            prev = head;  
-            head = temp;  
-        }  
-        
-        return prev;  
-    }
-    
-    public ListNode plusOne(ListNode head) 
-    {  
-        if (head == null) 
-        {   
-            return null;  
-        }
-        
-        ListNode reversed = reverse(head);  
-        reversed.val++;  
-        ListNode current = reversed;  
-        
-        while (current != null && current.val >= 10) 
-        {  
-            current.val -= 10;  
-        
-            if (current.next == null) 
-            {  
-                current.next = new ListNode(1);  
-            } 
-            else 
-            {  
-                current.next.val++;  
-            }  
-            
-            current = current.next;  
-        }  
-        
-        return reverse(reversed);  
-    }  
-}
diff --git a/369.plus-one-linked-list.85294813.Accepted.leetcode.java b/369.plus-one-linked-list.85294813.Accepted.leetcode.java
deleted file mode 100644
index 40d11158..00000000
--- ./369.plus-one-linked-list.85294813.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution 
-{  
-    private ListNode reverse(ListNode head) 
-    {  
-        ListNode prev = null;  
-        
-        while (head != null) 
-        {  
-            ListNode temp = head.next;  
-            head.next = prev;  
-            prev = head;  
-            head = temp;  
-        }  
-        
-        return prev;  
-    }
-    
-    public ListNode plusOne(ListNode head) 
-    {  
-        if (head == null) 
-        {   
-            return null;  
-        }
-        
-        head = reverse(head);  
-        head.val++;  
-        ListNode current = head;  
-        
-        while (current != null && current.val >= 10) 
-        {  
-            current.val -= 10;  
-        
-            if (current.next == null) 
-            {  
-                current.next = new ListNode(1);  
-            } 
-            else 
-            {  
-                current.next.val++;  
-            }  
-            
-            current = current.next;  
-        }  
-        
-        return reverse(head);  
-    }  
-}
diff --git a/369.plus-one-linked-list.85383614.Accepted.leetcode.java b/369.plus-one-linked-list.85383614.Accepted.leetcode.java
deleted file mode 100644
index ac9e8df4..00000000
--- ./369.plus-one-linked-list.85383614.Accepted.leetcode.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/**
- * Definition for singly-linked list.
- * public class ListNode {
- *     int val;
- *     ListNode next;
- *     ListNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{  
-    private ListNode reverse(ListNode head) 
-    {  
-        ListNode prev = null;  
-        
-        while (head != null) 
-        {  
-            ListNode temp = head.next;  
-            head.next = prev;  
-            prev = head;  
-            head = temp;  
-        }  
-        
-        return prev;  
-    }
-    
-    public ListNode plusOne(ListNode head) 
-    {  
-        if (head == null) 
-        {   
-            return null;  
-        }
-        
-        head = reverse(head);  
-        head.val++;  
-        ListNode current = head;  
-        
-        while (current != null && current.val >= 10)
-        {
-            current.val -= 10;
-            
-            if (current.next != null)
-            {
-                current.next.val++;    
-            }
-            else
-            {
-                current.next = new ListNode(1);
-            }
-            
-            current = current.next;
-        }
-        
-        return reverse(head);  
-    }  
-}
diff --git a/37.sudoku-solver.29665194.Accepted.leetcode.java b/37.sudoku-solver.29665194.Accepted.leetcode.java
deleted file mode 100644
index 46597fd0..00000000
--- ./37.sudoku-solver.29665194.Accepted.leetcode.java
+++ /dev/null
@@ -1,62 +0,0 @@
-  public class Solution
-  {
-    private boolean isValid(char[][] board, int row, int column, char c)
-    {
-      int cellRow = row - row % 3;
-      int cellColumn = column - column % 3;
-
-      for (int i = 0; i < 9; i++ )
-      {
-        if (board[i][column] == c || board[row][i] == c
-          || board[cellRow + i / 3][cellColumn + i % 3] == c)
-        {
-          return false;
-        }
-      }
-
-      return true;
-    }
-
-    private boolean search(char[][] board, int pos)
-    {
-      while (pos < 81)
-      {
-        if (board[pos / 9][pos % 9] == '.')
-        {
-          break;
-        }
-
-        pos++ ;
-      }
-
-      if (pos == 81)
-      {
-        return true;
-      }
-
-      int row = pos / 9;
-      int column = pos % 9;
-
-      for (char c = '1'; c <= '9'; c++ )
-      {
-        if (isValid(board, row, column, c))
-        {
-          board[row][column] = c;
-
-          if (search(board, pos + 1))
-          {
-            return true;
-          }
-        }
-      }
-
-      board[row][column] = '.';
-      return false;
-    }
-
-    public void solveSudoku(char[][] board)
-    {
-      search(board, 0);
-    }
-  }
-
diff --git a/37.sudoku-solver.29666312.Wrong-Answer.leetcode.java b/37.sudoku-solver.29666312.Wrong-Answer.leetcode.java
deleted file mode 100644
index 04cf0f59..00000000
--- ./37.sudoku-solver.29666312.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,62 +0,0 @@
-  public class Solution
-  {
-    private boolean isValid(char[][] board, int row, int column, char c)
-    {
-      int cellRow = row - row % 3;
-      int cellColumn = column - column % 3;
-
-      for (int i = 0; i < 9; i++ )
-      {
-        if (board[i][column] == c || board[row][i] == c
-          || board[cellRow + i / 3][cellColumn + i % 3] == c)
-        {
-          return false;
-        }
-      }
-
-      return true;
-    }
-
-    private boolean search(char[][] board, int pos)
-    {
-      int row = pos / 9;
-      int column = pos % 9;
-
-      while (pos < 81)
-      {
-        if (board[row][column] == '.')
-        {
-          break;
-        }
-
-        pos++ ;
-      }
-
-      if (pos == 81)
-      {
-        return true;
-      }
-
-      for (char c = '1'; c <= '9'; c++ )
-      {
-        if (isValid(board, row, column, c))
-        {
-          board[row][column] = c;
-
-          if (search(board, pos + 1))
-          {
-            return true;
-          }
-        }
-      }
-
-      board[row][column] = '.';
-      return false;
-    }
-
-    public void solveSudoku(char[][] board)
-    {
-      search(board, 0);
-    }
-  }
-
diff --git a/37.sudoku-solver.34761115.Accepted.leetcode.java b/37.sudoku-solver.34761115.Accepted.leetcode.java
deleted file mode 100644
index c11b8aa5..00000000
--- ./37.sudoku-solver.34761115.Accepted.leetcode.java
+++ /dev/null
@@ -1,62 +0,0 @@
-  public class Solution
-  {
-    private boolean isValid(char[][] board, int row, int column, char c)
-    {
-      int cellRow = row - row % 3;
-      int cellColumn = column - column % 3;
-
-      for (int i = 0; i < 9; i++ )
-      {
-        if (board[i][column] == c || board[row][i] == c
-          || board[cellRow + i / 3][cellColumn + i % 3] == c)
-        {
-          return false;
-        }
-      }
-
-      return true;
-    }
-
-    private boolean dfs(char[][] board, int pos)
-    {
-      while (pos < 81)
-      {
-        if (board[pos / 9][pos % 9] == '.')
-        {
-          break;
-        }
-
-        pos++ ;
-      }
-
-      if (pos == 81)
-      {
-        return true;
-      }
-
-      int row = pos / 9;
-      int column = pos % 9;
-
-      for (char c = '1'; c <= '9'; c++ )
-      {
-        if (isValid(board, row, column, c))
-        {
-          board[row][column] = c;
-
-          if (dfs(board, pos + 1))
-          {
-            return true;
-          }
-        }
-      }
-
-      board[row][column] = '.';
-      return false;
-    }
-
-    public void solveSudoku(char[][] board)
-    {
-      dfs(board, 0);
-    }
-  }
-
diff --git a/37.sudoku-solver.34790397.Accepted.leetcode.java b/37.sudoku-solver.34790397.Accepted.leetcode.java
deleted file mode 100644
index 61c22239..00000000
--- ./37.sudoku-solver.34790397.Accepted.leetcode.java
+++ /dev/null
@@ -1,54 +0,0 @@
-  public class Solution
-  {
-    private boolean isValid(char[][] board, int row, int column, char c)
-    {
-      for (int i = 0; i < 9; i++)
-      {
-        if (board[i][column] == c || board[row][i] == c
-            || board[row - row % 3 + i / 3][column - column % 3 + i % 3] == c)
-        {
-          return false;
-        }
-      }
-
-      return true;
-    }
-
-    private boolean dfs(char[][] board, int pos)
-    {
-      while (pos < 81 && board[pos / 9][pos % 9] != '.')
-      {
-        pos++ ;
-      }
-
-      if (pos == 81)
-      {
-        return true;
-      }
-
-      int row = pos / 9;
-      int column = pos % 9;
-
-      for (char c = '1'; c <= '9'; c++)
-      {
-        if (isValid(board, row, column, c))
-        {
-          board[row][column] = c;
-
-          if (dfs(board, pos + 1))
-          {
-            return true;
-          }
-        }
-      }
-
-      board[row][column] = '.';
-      return false;
-    }
-
-    public void solveSudoku(char[][] board)
-    {
-      dfs(board, 0);
-    }
-  }
-
diff --git a/37.sudoku-solver.35135463.Wrong-Answer.leetcode.java b/37.sudoku-solver.35135463.Wrong-Answer.leetcode.java
deleted file mode 100644
index b0eb3812..00000000
--- ./37.sudoku-solver.35135463.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-  public class Solution
-  {
-    private boolean isValid(char[][] board, int row, int column, char c)
-    {
-      for (int i = 0; i < 9; i++)
-      {
-        if (board[i][column] == c || board[row][i] == c
-            || board[row - row % 3 + i / 3][column - column % 3 + i % 3] == c)
-        {
-          return false;
-        }
-      }
-
-      return true;
-    }
-
-    private boolean dfs(char[][] board, int pos)
-    {
-      while (pos < 81 && board[pos / 9][pos % 9] != '.')
-      {
-        pos++ ;
-      }
-
-      if (pos == 81)
-      {
-        return true;
-      }
-
-      int row = pos / 9;
-      int column = pos % 9;
-
-      for (char c = '1'; c <= '9'; c++)
-      {
-        if (isValid(board, row, column, c))
-        {
-          board[row][column] = c;
-
-          if (dfs(board, pos + 1))
-          {
-            return true;
-          }
-        }
-      }
-
-      return false;
-    }
-
-    public void solveSudoku(char[][] board)
-    {
-      dfs(board, 0);
-    }
-  }
-
diff --git a/37.sudoku-solver.35135556.Wrong-Answer.leetcode.java b/37.sudoku-solver.35135556.Wrong-Answer.leetcode.java
deleted file mode 100644
index 8e97fc52..00000000
--- ./37.sudoku-solver.35135556.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-  public class Solution
-  {
-    private boolean isValid(char[][] board, int row, int column, char c)
-    {
-      for (int i = 0; i < 9; i++)
-      {
-        if (board[i][column] == c || board[row][i] == c
-            || board[row - row % 3 + i / 3][column - column % 3 + i % 3] == c)
-        {
-          return false;
-        }
-      }
-
-      return true;
-    }
-
-    private boolean dfs(char[][] board, int pos)
-    {
-      while (pos < 81 && board[pos / 9][pos % 9] != '.')
-      {
-        pos++ ;
-      }
-
-      if (pos == 81)
-      {
-        return true;
-      }
-
-      int row = pos / 9;
-      int column = pos % 9;
-
-      for (char c = '1'; c <= '9'; c++)
-      {
-        if (isValid(board, row, column, c))
-        {
-          board[row][column] = c;
-          dfs(board, pos + 1);
-        }
-      }
-
-      board[row][column] = '.';
-      return false;
-    }
-
-    public void solveSudoku(char[][] board)
-    {
-      dfs(board, 0);
-    }
-  }
-
diff --git a/370.range-addition.71363084.Accepted.leetcode.java b/370.range-addition.71363084.Accepted.leetcode.java
deleted file mode 100644
index 6b8e96ad..00000000
--- ./370.range-addition.71363084.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution {
-    public int[] getModifiedArray(int length, int[][] updates) {
-    int[] result = new int[length];
-    if(updates==null||updates.length==0)
-        return result;
- 
-    for(int i=0; i<updates.length; i++){
-        result[updates[i][0]] += updates[i][2];
-        if(updates[i][1]<length-1){
-            result[updates[i][1]+1] -=updates[i][2];
-        }
-    }
- 
-    int v=0;
-    for(int i=0; i<length; i++){
-        v += result[i];
-        result[i]=v;
-    }
- 
-    return result;
-}
-}
diff --git a/371.sum-of-two-integers.72239131.Accepted.leetcode.java b/371.sum-of-two-integers.72239131.Accepted.leetcode.java
deleted file mode 100644
index a2c17a4c..00000000
--- ./371.sum-of-two-integers.72239131.Accepted.leetcode.java
+++ /dev/null
@@ -1,12 +0,0 @@
-public class Solution {
-    public int getSum(int a, int b) {
- 
-   while(b!=0){
-       int c = a&b;
-       a=a^b;
-       b=c<<1;
-   }
- 
-   return a;
-}
-}
diff --git a/372.super-pow.71864023.Accepted.leetcode.java b/372.super-pow.71864023.Accepted.leetcode.java
deleted file mode 100644
index 8d10a9c7..00000000
--- ./372.super-pow.71864023.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution {
-    private int mod = 1337;
-    public int superPow(int a, int[] b) {
-        int n = b.length;
-		int ans = 1;
-		for (int i = n - 1; i >= 0; i--) {
-			ans = ans * quick_pow(a, b[i]) % mod;
-			a = quick_pow(a, 10);
-		}
-		return ans;
-	}
-	
-	int quick_pow(int a, int b) {
-		int ans = 1;
-		a %= mod;
-		while (b > 0) {
-			if ((b & 1) !=0) ans = ans * a % mod;
-			a = a * a % mod;
-			b >>= 1;
-		}
-		return ans;
-	
-    }
-}
diff --git a/373.find-k-pairs-with-smallest-sums.71229521.Runtime-Error.leetcode.java b/373.find-k-pairs-with-smallest-sums.71229521.Runtime-Error.leetcode.java
deleted file mode 100644
index bdcd61a1..00000000
--- ./373.find-k-pairs-with-smallest-sums.71229521.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution {
-    public List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {  
-    List<int[]> res = new ArrayList<int[]>();  
-    boolean visit[][] = new boolean[nums1.length][nums2.length];  
-    Queue<int[]> heap = new PriorityQueue<int[]>(new Comparator<int[]>(){  
-        public int compare(int[] i, int[] j) {  
-            return (nums1[i[0]] + nums2[i[1]] -( nums1[j[0]] + nums2[j[1]]));  
-        }  
-    });  
-  
-    heap.add(new int[] { 0, 0 });  
-    visit[0][0] = true;  
-  
-    while (!heap.isEmpty() && res.size() < k) {  
-        int d[] = heap.poll();  
-        res.add(new int[] { nums1[d[0]], nums2[d[1]] });  
-  
-        if (d[1] + 1 < nums2.length && visit[d[0]][d[1] + 1] == false) {  
-            heap.add(new int[] { d[0], d[1] + 1 });  
-            visit[d[0]][d[1] + 1] = true;  
-        }  
-        if (d[0] + 1 < nums1.length && visit[d[0]+1][d[1]] == false) {  
-            heap.add(new int[] { d[0]+1, d[1]});  
-            visit[d[0]+1][d[1]] = true;  
-        }  
-    }  
-    return res;  
-}
-}
diff --git a/373.find-k-pairs-with-smallest-sums.71234181.Accepted.leetcode.java b/373.find-k-pairs-with-smallest-sums.71234181.Accepted.leetcode.java
deleted file mode 100644
index 75b6452a..00000000
--- ./373.find-k-pairs-with-smallest-sums.71234181.Accepted.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-public class Solution {
-    public List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {
-        List<int[]> res = new ArrayList<>();
-        if(nums1 == null || nums1.length == 0 || 
-                nums2 == null || nums2.length == 0) return res;
-
-        class Pair{
-            int x;
-            int y;
-            Pair(int x, int y){
-                this.x = x;
-                this.y =y;
-            }
-        }   
-
-        Comparator<Pair> comp = new Comparator<Pair>(){
-            @Override
-            public int compare(Pair p1, Pair p2){
-                return nums1[p1.x] + nums2[p1.y]
-                        - nums1[p2.x] - nums2[p2.y];
-            }
-        };
-
-        PriorityQueue<Pair> queue = new PriorityQueue<Pair>(k, comp);
-
-        boolean[][] visited = new boolean[nums1.length][nums2.length];
-
-        queue.offer(new Pair(0, 0));
-        visited[0][0] = true;
-
-        int[][] close = new int[][]{{0,1},{1,0}};
-        while(k > 0 && !queue.isEmpty()){
-            k--;
-            Pair p = queue.poll();
-            res.add(new int[]{nums1[p.x], nums2[p.y]});
-            for(int i=0; i< 2;i++){
-                int tx = p.x + close[i][0];
-                int ty = p.y + close[i][1];
-                if(tx < nums1.length && ty <nums2.length && !visited[tx][ty]){
-                    queue.offer(new Pair(tx, ty));
-                    visited[tx][ty] = true;
-
-                }
-
-            }
-        }
-
-        return res;
-    }
-}
diff --git a/373.find-k-pairs-with-smallest-sums.71234506.Accepted.leetcode.java b/373.find-k-pairs-with-smallest-sums.71234506.Accepted.leetcode.java
deleted file mode 100644
index 939e16fc..00000000
--- ./373.find-k-pairs-with-smallest-sums.71234506.Accepted.leetcode.java
+++ /dev/null
@@ -1,63 +0,0 @@
-  public class Solution
-  {
-    public List<int[]> kSmallestPairs(final int[] nums1, final int[] nums2,
-                                      int k)
-    {
-      List<int[]> res = new ArrayList<>();
-
-      if (nums1 == null || nums1.length == 0 || nums2 == null
-          || nums2.length == 0)
-      {
-        return res;
-      }
-
-      class Pair
-      {
-        int x;
-        int y;
-        Pair(int x, int y)
-        {
-          this.x = x;
-          this.y = y;
-        }
-      }
-
-      Comparator<Pair> comp = new Comparator<Pair>()
-      {
-        @Override
-        public int compare(Pair p1, Pair p2)
-        {
-          return nums1[p1.x] + nums2[p1.y] - nums1[p2.x]
-                 - nums2[p2.y];
-        }
-      };
-      PriorityQueue<Pair> queue = new PriorityQueue<Pair>(k, comp);
-      boolean[][] visited = new boolean[nums1.length][nums2.length];
-      queue.offer(new Pair(0, 0));
-      visited[0][0] = true;
-      int[][] close = new int[][] { { 0, 1 }, { 1, 0 } };
-
-      while (k > 0 && !queue.isEmpty())
-      {
-        k-- ;
-        Pair p = queue.poll();
-        res.add(new int[] { nums1[p.x], nums2[p.y] });
-
-        for (int i = 0; i < 2; i++)
-        {
-          int tx = p.x + close[i][0];
-          int ty = p.y + close[i][1];
-
-          if (tx < nums1.length && ty < nums2.length
-              && !visited[tx][ty])
-          {
-            queue.offer(new Pair(tx, ty));
-            visited[tx][ty] = true;
-          }
-        }
-      }
-
-      return res;
-    }
-  }
-
diff --git a/374.guess-number-higher-or-lower.79364850.Accepted.leetcode.java b/374.guess-number-higher-or-lower.79364850.Accepted.leetcode.java
deleted file mode 100644
index faec0ce1..00000000
--- ./374.guess-number-higher-or-lower.79364850.Accepted.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-/* The guess API is defined in the parent class GuessGame.
-   @param num, your guess
-   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0
-      int guess(int num); */
-
-public class Solution extends GuessGame {
-    public int guessNumber(int n) {
-        int L = 1,R = n;
-        while(L <= R){
-            int mid = L + ((R - L) >> 1);
-            int res = guess(mid);
-            if(res == 0) return mid;
-            else if(res == 1)  L = mid + 1;
-            else R = mid - 1;
-        }
-        return L;
-    }
-}
diff --git a/375.guess-number-higher-or-lower-ii.72105495.Accepted.leetcode.java b/375.guess-number-higher-or-lower-ii.72105495.Accepted.leetcode.java
deleted file mode 100644
index a30ef7b3..00000000
--- ./375.guess-number-higher-or-lower-ii.72105495.Accepted.leetcode.java
+++ /dev/null
@@ -1,15 +0,0 @@
-public class Solution {
-    public int getMoneyAmount(int n) {
-        int[][] dp = new int[n+1][n+1];
-        return solve(dp, 1, n);
-    }
-    int solve(int[][] dp, int L, int R) {
-		if (L >= R) return 0;
-		if (dp[L][R] != 0) return dp[L][R];
-		dp[L][R] = 0x7FFFFFFF;
-		for (int i = L; i <= R; i++) {
-			dp[L][R] = Math.min(dp[L][R], i + Math.max(solve(dp,L,i-1),solve(dp,i+1,R)));
-		}
-		return dp[L][R];
-	}
-}
diff --git a/376.wiggle-subsequence.72235037.Accepted.leetcode.java b/376.wiggle-subsequence.72235037.Accepted.leetcode.java
deleted file mode 100644
index 5616ac6c..00000000
--- ./376.wiggle-subsequence.72235037.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution {
-    public int wiggleMaxLength(int[] nums) {
-    if(nums == null || nums.length==0)
-        return 0;
-    if(nums.length<2){
-        return nums.length;
-    }    
- 
-    int count=1;
- 
- 
-    for(int i=1, j=0; i<nums.length; j=i, i++){
-        if(nums[j]<nums[i]){
-            count++;
-            while(i<nums.length-1 && nums[i]<=nums[i+1]){
-                i++;
-            }
-        }else if(nums[j]>nums[i]){
-            count++;
-            while(i<nums.length-1 && nums[i]>=nums[i+1]){
-                i++;
-            }
-        }
-    }
- 
-    return count;
-}
-}
diff --git a/376.wiggle-subsequence.85152907.Accepted.leetcode.java b/376.wiggle-subsequence.85152907.Accepted.leetcode.java
deleted file mode 100644
index d7c30839..00000000
--- ./376.wiggle-subsequence.85152907.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution 
-{
-    public int wiggleMaxLength(int[] nums) 
-    {
-        if (nums == null || nums.length==0)
-        {
-            return 0;    
-        }
-        
-        if (nums.length < 2)
-        {
-            return nums.length;
-        }    
- 
-        int count = 1;
-
-        for (int i = 1, j = 0; i < nums.length; j = i, i++)
-        {
-            if (nums[j] < nums[i])
-            {
-                count++;
-            
-                while (i < nums.length - 1 && nums[i] <= nums[i + 1])
-                {
-                    i++;
-                }
-            }
-            else if (nums[j] > nums[i])
-            {
-                count++;
-    
-                while (i < nums.length - 1 && nums[i] >= nums[i + 1])
-                {
-                    i++;
-                }
-            }
-        }
- 
-        return count;
-    }
-}
diff --git a/376.wiggle-subsequence.85195893.Accepted.leetcode.java b/376.wiggle-subsequence.85195893.Accepted.leetcode.java
deleted file mode 100644
index b208826e..00000000
--- ./376.wiggle-subsequence.85195893.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution 
-{
-    public int wiggleMaxLength(int[] nums) 
-    {
-        if (nums == null || nums.length==0)
-        {
-            return 0;    
-        }
-        
-        if (nums.length < 2)
-        {
-            return nums.length;
-        }    
- 
-        int count = 1;
-
-        for (int i = 1, j = 0; i < nums.length; j = i, i++)
-        {
-            if (nums[j] < nums[i])
-            {
-                count++;
-                
-                while(i + 1 < nums.length && nums[i] <= nums[i + 1])
-                {
-                    i++;
-                }
-            }
-            else if (nums[j] > nums[i])
-            {
-                count++;
-                
-                while(i + 1 < nums.length && nums[i] >= nums[i + 1])
-                {
-                    i++;
-                }
-            }
-        }
-        
-        return count;
-    }
-}
diff --git a/377.combination-sum-iv.70416818.Accepted.leetcode.java b/377.combination-sum-iv.70416818.Accepted.leetcode.java
deleted file mode 100644
index 1d0302b8..00000000
--- ./377.combination-sum-iv.70416818.Accepted.leetcode.java
+++ /dev/null
@@ -1,12 +0,0 @@
-public class Solution {
-    public int combinationSum4(int[] nums, int target) {
-        int[] dp= new int[target+1];
-        dp[0] = 1;
-        for(int i = 1; i <= target;i++){
-            for(int num:nums){
-                if(i >= num) dp[i] += dp[i - num];
-            }
-        }
-        return dp[target];
-    }
-}
diff --git a/377.combination-sum-iv.97987583.Accepted.leetcode.java b/377.combination-sum-iv.97987583.Accepted.leetcode.java
deleted file mode 100644
index 5c44bd39..00000000
--- ./377.combination-sum-iv.97987583.Accepted.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution
-{
-    public int combinationSum4(int[] nums, int target)
-    {
-        int[] dp = new int[target + 1];
-        dp[0] = 1;
-
-        for (int i = 1; i <= target; i++)
-        {
-            for (int num : nums)
-            {
-                if (i >= num)
-                {
-                    dp[i] += dp[i - num];
-                }
-            }
-        }
-
-        return dp[target];
-    }
-}
diff --git a/377.combination-sum-iv.97994159.Accepted.leetcode.java b/377.combination-sum-iv.97994159.Accepted.leetcode.java
deleted file mode 100644
index f1f90911..00000000
--- ./377.combination-sum-iv.97994159.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int combinationSum4(int[] nums, int target)
-    {
-        int[] dp = new int[target + 1];
-        dp[0] = 1;
-
-        for (int i = 1; i <= target; i++)
-        {
-            for (int num : nums)
-            {
-                if (i >= num)
-                {
-                    dp[i] += dp[i - num];
-                    System.out.println(i + " --> " + dp[i]);
-                }
-            }
-        }
-
-        return dp[target];
-    }
-}
diff --git a/378.kth-smallest-element-in-a-sorted-matrix.88306138.Wrong-Answer.leetcode.java b/378.kth-smallest-element-in-a-sorted-matrix.88306138.Wrong-Answer.leetcode.java
deleted file mode 100644
index 84898365..00000000
--- ./378.kth-smallest-element-in-a-sorted-matrix.88306138.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution 
-{
-    public int kthSmallest(int[][] matrix, int k) 
-    {
-        int m = matrix.length;
-        int lower = matrix[0][0];
-        int upper = matrix[m - 1][m - 1];
- 
-        while (lower + 1 < upper)
-        {
-            int mid = (lower + upper) / 2;
-            int count = count(matrix, mid);
-     
-            if (count > k)
-            {
-                upper = mid;
-            }
-            else
-            {
-                lower = mid;
-            }
-        }
- 
-        return lower;
-    }
- 
-    private int count(int[][] matrix, int target)
-    {
-        int m = matrix.length;
-        int i = m - 1;
-        int j = 0;
-        int count = 0;
- 
-        while (i >= 0 && j < m)
-        {
-            if (matrix[i][j] <= target)
-            {
-                count += i + 1;
-                j++;
-            }
-            else
-            {
-                i--;
-            }
-        }
- 
-        return count;
-    }
-}
diff --git a/378.kth-smallest-element-in-a-sorted-matrix.88306366.Wrong-Answer.leetcode.java b/378.kth-smallest-element-in-a-sorted-matrix.88306366.Wrong-Answer.leetcode.java
deleted file mode 100644
index 45da3541..00000000
--- ./378.kth-smallest-element-in-a-sorted-matrix.88306366.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-public class Solution 
-{
-    public int kthSmallest(int[][] matrix, int k) 
-    {
-        int m = matrix.length;
-        int lower = matrix[0][0];
-        int upper = matrix[m - 1][m - 1];
-        int mid = 0;
- 
-        while (lower + 1 < upper)
-        {
-            mid = (lower + upper) / 2;
-            int count = count(matrix, mid);
-     
-            if (count > k)
-            {
-                upper = mid;
-            }
-            else
-            {
-                lower = mid;
-            }
-        }
- 
-        return lower == mid ? lower : upper;
-    }
- 
-    private int count(int[][] matrix, int target)
-    {
-        int m = matrix.length;
-        int i = m - 1;
-        int j = 0;
-        int count = 0;
- 
-        while (i >= 0 && j < m)
-        {
-            if (matrix[i][j] <= target)
-            {
-                count += i + 1;
-                j++;
-            }
-            else
-            {
-                i--;
-            }
-        }
- 
-        return count;
-    }
-}
diff --git a/378.kth-smallest-element-in-a-sorted-matrix.88306407.Wrong-Answer.leetcode.java b/378.kth-smallest-element-in-a-sorted-matrix.88306407.Wrong-Answer.leetcode.java
deleted file mode 100644
index 5540803e..00000000
--- ./378.kth-smallest-element-in-a-sorted-matrix.88306407.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-public class Solution 
-{
-    public int kthSmallest(int[][] matrix, int k) 
-    {
-        int m = matrix.length;
-        int lower = matrix[0][0];
-        int upper = matrix[m - 1][m - 1];
-        int mid = 0;
- 
-        while (lower + 1 < upper)
-        {
-            mid = (lower + upper) / 2;
-            int count = count(matrix, mid);
-     
-            if (count > k)
-            {
-                upper = mid;
-            }
-            else
-            {
-                lower = mid;
-            }
-        }
- 
-        return mid;
-    }
- 
-    private int count(int[][] matrix, int target)
-    {
-        int m = matrix.length;
-        int i = m - 1;
-        int j = 0;
-        int count = 0;
- 
-        while (i >= 0 && j < m)
-        {
-            if (matrix[i][j] <= target)
-            {
-                count += i + 1;
-                j++;
-            }
-            else
-            {
-                i--;
-            }
-        }
- 
-        return count;
-    }
-}
diff --git a/378.kth-smallest-element-in-a-sorted-matrix.88310392.Accepted.leetcode.java b/378.kth-smallest-element-in-a-sorted-matrix.88310392.Accepted.leetcode.java
deleted file mode 100644
index ddece68f..00000000
--- ./378.kth-smallest-element-in-a-sorted-matrix.88310392.Accepted.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution 
-{
-    public int kthSmallest(int[][] matrix, int k) 
-    {
-        int m = matrix.length;
-        int lower = matrix[0][0];
-        int upper = matrix[m - 1][m - 1];
- 
-        while (lower < upper)
-        {
-            int mid = (lower + upper) / 2;
-            int count = count(matrix, mid);
-            
-            if (count < k)
-            {
-                lower = mid + 1;
-            }
-            else
-            {
-                upper = mid;
-            }
-        }
- 
-        return upper;
-    }
- 
-    private int count(int[][] matrix, int target)
-    {
-        int m = matrix.length;
-        int i = m - 1;
-        int j = 0;
-        int count = 0;
- 
-        while (i >= 0 && j < m)
-        {
-            if (matrix[i][j] <= target)
-            {
-                count += i + 1;
-                j++;
-            }
-            else
-            {
-                i--;
-            }
-        }
- 
-        return count;
-    }
-}
diff --git a/378.kth-smallest-element-in-a-sorted-matrix.88310487.Time-Limit-Exceeded.leetcode.java b/378.kth-smallest-element-in-a-sorted-matrix.88310487.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 98a88095..00000000
--- ./378.kth-smallest-element-in-a-sorted-matrix.88310487.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution 
-{
-    public int kthSmallest(int[][] matrix, int k) 
-    {
-        int m = matrix.length;
-        int lower = matrix[0][0];
-        int upper = matrix[m - 1][m - 1];
- 
-        while (lower < upper)
-        {
-            int mid = (lower + upper) / 2;
-            int count = count(matrix, mid);
-            
-            if (count > k)
-            {
-                upper = mid - 1;
-            }
-            else
-            {
-                lower = mid;
-            }
-        }
- 
-        return lower;
-    }
- 
-    private int count(int[][] matrix, int target)
-    {
-        int m = matrix.length;
-        int i = m - 1;
-        int j = 0;
-        int count = 0;
- 
-        while (i >= 0 && j < m)
-        {
-            if (matrix[i][j] <= target)
-            {
-                count += i + 1;
-                j++;
-            }
-            else
-            {
-                i--;
-            }
-        }
- 
-        return count;
-    }
-}
diff --git a/378.kth-smallest-element-in-a-sorted-matrix.88310794.Accepted.leetcode.java b/378.kth-smallest-element-in-a-sorted-matrix.88310794.Accepted.leetcode.java
deleted file mode 100644
index eb9b44fd..00000000
--- ./378.kth-smallest-element-in-a-sorted-matrix.88310794.Accepted.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution 
-{
-    public int kthSmallest(int[][] matrix, int k) 
-    {
-        int m = matrix.length;
-        int lower = matrix[0][0];
-        int upper = matrix[m - 1][m - 1];
- 
-        while (lower < upper)
-        {
-            int mid = (lower + upper) / 2;
-            int count = count(matrix, mid);
-            
-            if (count < k)
-            {
-                lower = mid + 1;
-            }
-            else
-            {
-                upper = mid;
-            }
-        }
- 
-        return lower;
-    }
- 
-    private int count(int[][] matrix, int target)
-    {
-        int m = matrix.length;
-        int i = m - 1;
-        int j = 0;
-        int count = 0;
- 
-        while (i >= 0 && j < m)
-        {
-            if (matrix[i][j] <= target)
-            {
-                count += i + 1;
-                j++;
-            }
-            else
-            {
-                i--;
-            }
-        }
- 
-        return count;
-    }
-}
diff --git a/378.kth-smallest-element-in-a-sorted-matrix.88439421.Accepted.leetcode.java b/378.kth-smallest-element-in-a-sorted-matrix.88439421.Accepted.leetcode.java
deleted file mode 100644
index a4834bf8..00000000
--- ./378.kth-smallest-element-in-a-sorted-matrix.88439421.Accepted.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-public class Solution 
-{
-    public int kthSmallest(int[][] matrix, int k) 
-    {
-        int m = matrix.length;
-        int lower = matrix[0][0];
-        int upper = matrix[m - 1][m - 1];
-        int mid = 0;
- 
-        while (lower < upper)
-        {
-            mid = (lower + upper) / 2;
-            int count = count(matrix, mid);
-     
-            if (count >= k)
-            {
-                upper = mid;
-            }
-            else
-            {
-                lower = mid + 1;
-            }
-        }
- 
-        return lower;
-    }
- 
-    private int count(int[][] matrix, int target)
-    {
-        int m = matrix.length;
-        int i = m - 1;
-        int j = 0;
-        int count = 0;
- 
-        while (i >= 0 && j < m)
-        {
-            if (matrix[i][j] <= target)
-            {
-                count += i + 1;
-                j++;
-            }
-            else
-            {
-                i--;
-            }
-        }
- 
-        return count;
-    }
-}
diff --git a/378.kth-smallest-element-in-a-sorted-matrix.88446800.Wrong-Answer.leetcode.java b/378.kth-smallest-element-in-a-sorted-matrix.88446800.Wrong-Answer.leetcode.java
deleted file mode 100644
index 894660c1..00000000
--- ./378.kth-smallest-element-in-a-sorted-matrix.88446800.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,57 +0,0 @@
-public class Solution 
-{
-    public int kthSmallest(int[][] matrix, int k) 
-    {
-        int m = matrix.length;
-        int lower = matrix[0][0];
-        int upper = matrix[m - 1][m - 1];
-        int mid = 0;
- 
-        while (lower  + 1 < upper)
-        {
-            mid = (lower + upper) / 2;
-            int count = count(matrix, mid);
-     
-            if (count >= k)
-            {
-                upper = mid;
-            }
-            else
-            {
-                lower = mid;
-            }
-        }
- 
-        if (count(matrix, lower) == k)
-        {
-            return lower;
-        }
-        else
-        {
-            return upper;
-        }
-    }
- 
-    private int count(int[][] matrix, int target)
-    {
-        int m = matrix.length;
-        int i = m - 1;
-        int j = 0;
-        int count = 0;
- 
-        while (i >= 0 && j < m)
-        {
-            if (matrix[i][j] <= target)
-            {
-                count += i + 1;
-                j++;
-            }
-            else
-            {
-                i--;
-            }
-        }
- 
-        return count;
-    }
-}
diff --git a/378.kth-smallest-element-in-a-sorted-matrix.88447428.Accepted.leetcode.java b/378.kth-smallest-element-in-a-sorted-matrix.88447428.Accepted.leetcode.java
deleted file mode 100644
index c96b8c51..00000000
--- ./378.kth-smallest-element-in-a-sorted-matrix.88447428.Accepted.leetcode.java
+++ /dev/null
@@ -1,62 +0,0 @@
-public class Solution 
-{
-    public int kthSmallest(int[][] matrix, int k) 
-    {
-        int m = matrix.length;
-        int lower = matrix[0][0];
-        int upper = matrix[m - 1][m - 1];
-        int mid = 0;
-        
-        if (k == 1)
-        {
-            return matrix[0][0];
-        }
- 
-        while (lower  + 1 < upper)
-        {
-            mid = (lower + upper) / 2;
-            int count = count(matrix, mid);
-     
-            if (count >= k)
-            {
-                upper = mid;
-            }
-            else
-            {
-                lower = mid;
-            }
-        }
- 
-        if (count(matrix, lower) == k)
-        {
-            return lower;
-        }
-        else
-        {
-            return upper;
-        }
-    }
- 
-    private int count(int[][] matrix, int target)
-    {
-        int m = matrix.length;
-        int i = m - 1;
-        int j = 0;
-        int count = 0;
- 
-        while (i >= 0 && j < m)
-        {
-            if (matrix[i][j] <= target)
-            {
-                count += i + 1;
-                j++;
-            }
-            else
-            {
-                i--;
-            }
-        }
- 
-        return count;
-    }
-}
diff --git a/379.design-phone-directory.71907509.Accepted.leetcode.java b/379.design-phone-directory.71907509.Accepted.leetcode.java
deleted file mode 100644
index 790df6e5..00000000
--- ./379.design-phone-directory.71907509.Accepted.leetcode.java
+++ /dev/null
@@ -1,40 +0,0 @@
-public class PhoneDirectory {
-    int max;
-    HashSet<Integer> set;
-    LinkedList<Integer> queue;
- 
-    /** Initialize your data structure here
-        @param maxNumbers - The maximum numbers that can be stored in the phone directory. */
-    public PhoneDirectory(int maxNumbers) {
-        set = new HashSet<Integer>();
-        queue = new LinkedList<Integer>();
-        for(int i=0; i<maxNumbers; i++){
-            queue.offer(i);
-        }
-        max=maxNumbers-1;
-    }
- 
-    /** Provide a number which is not assigned to anyone.
-        @return - Return an available number. Return -1 if none is available. */
-    public int get() {
-        if(queue.isEmpty())
-            return -1;
- 
-        int e = queue.poll();
-        set.add(e);
-        return e;
-    }
- 
-    /** Check if a number is available or not. */
-    public boolean check(int number) {
-        return !set.contains(number) && number<=max;
-    }
- 
-    /** Recycle or release a number. */
-    public void release(int number) {
-        if(set.contains(number)){
-            set.remove(number);
-            queue.offer(number);
-        }
-    }
-}
diff --git a/38.count-and-say.102774874.Wrong-Answer.leetcode.java b/38.count-and-say.102774874.Wrong-Answer.leetcode.java
deleted file mode 100644
index 21edf2f3..00000000
--- ./38.count-and-say.102774874.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public String countAndSay(int n)
-    {
-        String str = "1";
-
-        for (int i = 1; i < n; i++)
-        {
-            int count = 1;
-            StringBuilder sb = new StringBuilder();
-
-            for (int nav = 0; nav < str.length(); nav++)
-            {
-                if (nav + 1 < str.length() && str.charAt(nav) == str.charAt(nav + 1))
-                {
-                    count++;
-                }
-                else
-                {
-                    sb.append("" + count).append(str.charAt(nav));
-                    count = 0;
-                }
-            }
-
-            str = sb.toString();
-        }
-
-        return str;
-    }
-}
diff --git a/38.count-and-say.102774969.Accepted.leetcode.java b/38.count-and-say.102774969.Accepted.leetcode.java
deleted file mode 100644
index d0b94d7a..00000000
--- ./38.count-and-say.102774969.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public String countAndSay(int n)
-    {
-        String str = "1";
-
-        for (int i = 1; i < n; i++)
-        {
-            int count = 1;
-            StringBuilder sb = new StringBuilder();
-
-            for (int nav = 0; nav < str.length(); nav++)
-            {
-                if (nav + 1 < str.length() && str.charAt(nav) == str.charAt(nav + 1))
-                {
-                    count++;
-                }
-                else
-                {
-                    sb.append("" + count).append(str.charAt(nav));
-                    count = 1;
-                }
-            }
-
-            str = sb.toString();
-        }
-
-        return str;
-    }
-}
diff --git a/38.count-and-say.102775424.Wrong-Answer.leetcode.java b/38.count-and-say.102775424.Wrong-Answer.leetcode.java
deleted file mode 100644
index bd228785..00000000
--- ./38.count-and-say.102775424.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public String countAndSay(int n)
-    {
-        String str = "1";
-
-        for (int i = 1; i < n; i++)
-        {
-            int count = 1;
-            StringBuilder sb = new StringBuilder();
-
-            for (int nav = 0; nav < str.length(); nav++)
-            {
-                if (nav + 1 < str.length() && str.charAt(nav) == str.charAt(nav + 1))
-                {
-                    count++;
-                }
-                else
-                {
-                    count = 1;
-                }
-            }
-
-            str = sb.toString();
-        }
-
-        return str;
-    }
-}   
diff --git a/38.count-and-say.102775450.Wrong-Answer.leetcode.java b/38.count-and-say.102775450.Wrong-Answer.leetcode.java
deleted file mode 100644
index e455795e..00000000
--- ./38.count-and-say.102775450.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public String countAndSay(int n)
-    {
-        String str = "1";
-
-        for (int i = 1; i < n; i++)
-        {
-            int count = 1;
-            StringBuilder sb = new StringBuilder();
-
-            for (int nav = 0; nav < str.length(); nav++)
-            {
-                if (nav + 1 < str.length() && str.charAt(nav) == str.charAt(nav + 1))
-                {
-                    count++;
-                }
-                else
-                {
-                    sb.append("" + count).append(str.charAt(nav));
-                    count = 1;
-                }
-            }
-        }
-
-        return str;
-    }
-}   
diff --git a/38.count-and-say.102775479.Runtime-Error.leetcode.java b/38.count-and-say.102775479.Runtime-Error.leetcode.java
deleted file mode 100644
index 352ba7f5..00000000
--- ./38.count-and-say.102775479.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public String countAndSay(int n)
-    {
-        String str = "1";
-
-        for (int i = 1; i < n; i++)
-        {
-            int count = 1;
-            StringBuilder sb = new StringBuilder();
-
-            for (int nav = 0; nav < str.length(); nav++)
-            {
-                if (str.charAt(nav) == str.charAt(nav + 1))
-                {
-                    count++;
-                }
-                else
-                {
-                    sb.append("" + count).append(str.charAt(nav));
-                    count = 1;
-                }
-            }
-
-            str = sb.toString();
-        }
-
-        return str;
-    }
-}   
diff --git a/38.count-and-say.102775585.Accepted.leetcode.java b/38.count-and-say.102775585.Accepted.leetcode.java
deleted file mode 100644
index 8a70db59..00000000
--- ./38.count-and-say.102775585.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public String countAndSay(int n)
-    {
-        String str = "1";
-        int count = 1;
-
-        for (int i = 1; i < n; i++)
-        {
-            StringBuilder sb = new StringBuilder();
-
-            for (int nav = 0; nav < str.length(); nav++)
-            {
-                if (nav + 1 < str.length() && str.charAt(nav) == str.charAt(nav + 1))
-                {
-                    count++;
-                }
-                else
-                {
-                    sb.append("" + count).append(str.charAt(nav));
-                    count = 1;
-                }
-            }
-
-            str = sb.toString();
-        }
-
-        return str;
-    }
-}   
diff --git a/38.count-and-say.26115944.Wrong-Answer.leetcode.java b/38.count-and-say.26115944.Wrong-Answer.leetcode.java
deleted file mode 100644
index 976f8f34..00000000
--- ./38.count-and-say.26115944.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution {
-    public String countAndSay(int n) {
-        String str = "1";
-        if(n==1)
-        {
-            return str;
-        }
-        for(int i=0;i<n;i++)
-        {
-            int count = 0;
-            StringBuilder sb = new StringBuilder();
-            for(int nav=0;nav<str.length();nav++)
-            {
-                
-                if(nav+1<str.length() && str.charAt(nav) == str.charAt(nav+1))
-                {
-                    count++;
-                }
-                else
-                {
-                    sb.append(""+count).append(str.charAt(nav));
-                    count=0;
-                }
-            }
-            str = sb.toString();
-        }
-        return str;
-    }
-}
diff --git a/38.count-and-say.26115999.Wrong-Answer.leetcode.java b/38.count-and-say.26115999.Wrong-Answer.leetcode.java
deleted file mode 100644
index 8f4489a3..00000000
--- ./38.count-and-say.26115999.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution {
-    public String countAndSay(int n) {
-        String str = "1";
-        if(n==1)
-        {
-            return str;
-        }
-        for(int i=0;i<n;i++)
-        {
-            int count = 1;
-            StringBuilder sb = new StringBuilder();
-            for(int nav=0;nav<str.length();nav++)
-            {
-                
-                if(nav+1 < str.length() && str.charAt(nav) == str.charAt(nav+1))
-                {
-                    count++;
-                }
-                else
-                {
-                    sb.append(""+count).append(str.charAt(nav));
-                    count=0;
-                }
-            }
-            str = sb.toString();
-        }
-        return str;
-    }
-}
diff --git a/38.count-and-say.26116084.Wrong-Answer.leetcode.java b/38.count-and-say.26116084.Wrong-Answer.leetcode.java
deleted file mode 100644
index 88e56b02..00000000
--- ./38.count-and-say.26116084.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution {
-    public String countAndSay(int n) {
-        String str = "1";
-        for(int i=1;i<n;i++)
-        {
-            int count = 1;
-            StringBuilder sb = new StringBuilder();
-            for(int nav=0;nav<str.length();nav++)
-            {
-                
-                if(nav+1 < str.length() && str.charAt(nav) == str.charAt(nav+1))
-                {
-                    count++;
-                }
-                else
-                {
-                    sb.append(""+count).append(str.charAt(nav));
-                    count=0;
-                }
-            }
-            str = sb.toString();
-        }
-        return str;
-    }
-}
diff --git a/38.count-and-say.26116101.Accepted.leetcode.java b/38.count-and-say.26116101.Accepted.leetcode.java
deleted file mode 100644
index de94ce2c..00000000
--- ./38.count-and-say.26116101.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution {
-    public String countAndSay(int n) {
-        String str = "1";
-        for(int i=1;i<n;i++)
-        {
-            int count = 1;
-            StringBuilder sb = new StringBuilder();
-            for(int nav=0;nav<str.length();nav++)
-            {
-                
-                if(nav+1 < str.length() && str.charAt(nav) == str.charAt(nav+1))
-                {
-                    count++;
-                }
-                else
-                {
-                    sb.append(""+count).append(str.charAt(nav));
-                    count=1;
-                }
-            }
-            str = sb.toString();
-        }
-        return str;
-    }
-}
diff --git a/380.insert-delete-getrandom-o1.102042503.Accepted.leetcode.java b/380.insert-delete-getrandom-o1.102042503.Accepted.leetcode.java
deleted file mode 100644
index 5c3d715f..00000000
--- ./380.insert-delete-getrandom-o1.102042503.Accepted.leetcode.java
+++ /dev/null
@@ -1,83 +0,0 @@
-public class RandomizedSet
-{
-
-    HashMap<Integer, Integer> map1;
-    HashMap<Integer, Integer> map2;
-    Random rand;
-
-    /** Initialize your data structure here. */
-    public RandomizedSet()
-    {
-        map1  = new HashMap<Integer, Integer>();
-        map2  = new HashMap<Integer, Integer>();
-        rand = new Random(System.currentTimeMillis());
-    }
-
-    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
-    public boolean insert(int val)
-    {
-        if (map1.containsKey(val))
-        {
-            return false;
-        }
-        else
-        {
-            map1.put(val, map1.size());
-            map2.put(map2.size(), val);
-        }
-
-        return true;
-    }
-
-    /** Removes a value from the set. Returns true if the set contained the specified element. */
-    public boolean remove(int val)
-    {
-        if (map1.containsKey(val))
-        {
-            int index = map1.get(val);
-            //remove the entry from both maps
-            map1.remove(val);
-            map2.remove(index);
-
-            if (map1.size() == 0)
-            {
-                return true;
-            }
-
-            //if last is deleted, do nothing
-            if (index == map1.size())
-            {
-                return true;
-            }
-
-            //update the last element's index
-            int key1 = map2.get(map2.size());
-            map1.put(key1, index);
-            map2.remove(map2.size());
-            map2.put(index, key1);
-        }
-        else
-        {
-            return false;
-        }
-
-        return true;
-    }
-
-    /** Get a random element from the set. */
-    public int getRandom()
-    {
-        if (map1.size() == 0)
-        {
-            return -1;
-        }
-
-        if (map1.size() == 1)
-        {
-            return map2.get(0);
-        }
-
-        return map2.get(new Random().nextInt(map1.size()));
-        //return 0;
-    }
-}
diff --git a/380.insert-delete-getrandom-o1.72046087.Accepted.leetcode.java b/380.insert-delete-getrandom-o1.72046087.Accepted.leetcode.java
deleted file mode 100644
index ac9536f7..00000000
--- ./380.insert-delete-getrandom-o1.72046087.Accepted.leetcode.java
+++ /dev/null
@@ -1,70 +0,0 @@
-public class RandomizedSet {
- 
-    HashMap<Integer, Integer> map1;
-    HashMap<Integer, Integer> map2;
-    Random rand;
- 
-    /** Initialize your data structure here. */
-    public RandomizedSet() {
-        map1  = new HashMap<Integer, Integer>();
-        map2  = new HashMap<Integer, Integer>();
-        rand = new Random(System.currentTimeMillis());
-    }
- 
-    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
-    public boolean insert(int val) {
-        if(map1.containsKey(val)){
-            return false;
-        }else{
-            map1.put(val, map1.size());
-            map2.put(map2.size(), val);
-        }
-        return true;
-    }
- 
-    /** Removes a value from the set. Returns true if the set contained the specified element. */
-    public boolean remove(int val) {
-        if(map1.containsKey(val)){
-            int index = map1.get(val);
- 
-            //remove the entry from both maps
-            map1.remove(val);
-            map2.remove(index);
- 
-            if(map1.size()==0){
-                return true;
-            }
- 
-            //if last is deleted, do nothing 
-            if(index==map1.size()){
-                return true;
-            }    
- 
-            //update the last element's index     
-            int key1 = map2.get(map2.size());
- 
-            map1.put(key1, index);
-            map2.remove(map2.size());
-            map2.put(index, key1);
- 
-        }else{
-            return false;
-        }
- 
-        return true;
-    }
- 
-    /** Get a random element from the set. */
-    public int getRandom() {
-        if(map1.size()==0){
-            return -1; 
-        }
- 
-        if(map1.size()==1){
-            return map2.get(0);    
-        }    
- 
-        return map2.get(new Random().nextInt(map1.size()));
-        //return 0;
-    }
-}
diff --git a/381.insert-delete-getrandom-o1-duplicates-allowed.72239757.Accepted.leetcode.java b/381.insert-delete-getrandom-o1-duplicates-allowed.72239757.Accepted.leetcode.java
deleted file mode 100644
index 67324dae..00000000
--- ./381.insert-delete-getrandom-o1-duplicates-allowed.72239757.Accepted.leetcode.java
+++ /dev/null
@@ -1,80 +0,0 @@
-public class RandomizedCollection {
-    HashMap<Integer, HashSet<Integer>> map1;
-    HashMap<Integer, Integer> map2;
-    Random r;
- 
-    /** Initialize your data structure here. */
-    public RandomizedCollection() {
-            map1 = new HashMap<Integer, HashSet<Integer>>();
-            map2 = new HashMap<Integer, Integer>();
-            r = new Random();
-    }
- 
-    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
-    public boolean insert(int val) {
-        //add to map2
-        int size2 = map2.size();
-        map2.put(size2+1, val);
- 
-        if(map1.containsKey(val)){
-            map1.get(val).add(size2+1);
-            return false;
-        }else{
-            HashSet<Integer> set = new HashSet<Integer>();
-            set.add(size2+1);
-            map1.put(val, set);
-            return true;
-        }
-    }
- 
-    /** Removes a value from the collection. Returns true if the collection contained the specified element. */
-    public boolean remove(int val) {
-        if(map1.containsKey(val)){
-            HashSet<Integer> set = map1.get(val);
-            int toRemove = set.iterator().next();
- 
- 
-            //remove from set of map1
-            set.remove(toRemove);
- 
-            if(set.size()==0){
-                map1.remove(val);
-            }
- 
-            if(toRemove == map2.size()){
-                map2.remove(toRemove);
-                return true;
-            }
- 
-            int size2 = map2.size();
-            int key = map2.get(size2);
- 
-            HashSet<Integer> setChange = map1.get(key);
-            setChange.remove(size2);
-            setChange.add(toRemove);
- 
- 
- 
-            map2.remove(size2);
-            map2.remove(toRemove);
- 
-            map2.put(toRemove, key);
- 
-            return true;
-        }
- 
-        return false;
-    }
- 
-    /** Get a random element from the collection. */
-    public int getRandom() {
-        if(map1.size()==0)
-            return -1;
- 
-         if(map2.size()==1){
-            return map2.get(1);    
-        }    
- 
-        return map2.get(r.nextInt(map2.size())+1); // nextInt() returns a random number in [0, n).
-    }
-}
diff --git a/382.linked-list-random-node.72104062.Accepted.leetcode.java b/382.linked-list-random-node.72104062.Accepted.leetcode.java
deleted file mode 100644
index 4176df91..00000000
--- ./382.linked-list-random-node.72104062.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution {
- 
-    /** @param head The linked list's head. Note that the head is guanranteed to be not null, so it contains at least one node. */
-    Random r=null;
-    ListNode h=null;
-    public Solution(ListNode head) {
-        r = new Random();
-        h = head;
-    }
- 
-    /** Returns a random node's value. */
-    public int getRandom() {
-        int count=1;
-        ListNode p = h;
-        int result = 0;
-        while(p!=null){
-            if(r.nextInt(count)==0)
-                result= p.val;
-            count++;
-            p = p.next;
-        }
-        return result;
-    }
-}
diff --git a/382.linked-list-random-node.72104194.Accepted.leetcode.java b/382.linked-list-random-node.72104194.Accepted.leetcode.java
deleted file mode 100644
index d03c708a..00000000
--- ./382.linked-list-random-node.72104194.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-        public class Solution
-        {
-            /**
-             * @param head
-             *            The linked list's head. Note that the head is
-             *            guanranteed to be not null, so it contains at least
-             *            one node.
-             */
-            Random r = null;
-            ListNode h = null;
-            public Solution(ListNode head)
-            {
-                r = new Random();
-                h = head;
-            }
-            /** Returns a random node's value. */
-            public int getRandom()
-            {
-                int count = 1;
-                ListNode p = h;
-                int result = 0;
-                while (p != null)
-                {
-                    if (r.nextInt(count) == 0)
-                    {
-                        result = p.val;
-                    }
-                    count++ ;
-                    p = p.next;
-                }
-                return result;
-            }
-        }
-
diff --git a/383.ransom-note.71473829.Accepted.leetcode.java b/383.ransom-note.71473829.Accepted.leetcode.java
deleted file mode 100644
index 1d5f9b3e..00000000
--- ./383.ransom-note.71473829.Accepted.leetcode.java
+++ /dev/null
@@ -1,8 +0,0 @@
-public class Solution {
-    public boolean canConstruct(String ransomNote, String magazine) {
-        int[] cnt = new int[26];
-        for (int i = 0; i < magazine.length(); i++) cnt[magazine.charAt(i) - 97]++;
-		for (int i = 0; i < ransomNote.length(); i++) if (--cnt[ransomNote.charAt(i) - 97] < 0) return false;
-		return true;
-    }
-}
diff --git a/384.shuffle-an-array.72233846.Accepted.leetcode.java b/384.shuffle-an-array.72233846.Accepted.leetcode.java
deleted file mode 100644
index ce53ab19..00000000
--- ./384.shuffle-an-array.72233846.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution {
-    int[] original;
-    int[] shuffled;  
-    Random r;
- 
-    public Solution(int[] nums) {
-        original = nums;
-        shuffled = Arrays.copyOf(nums,nums.length);
-        r = new Random();
-    }
- 
-    /** Resets the array to its original configuration and return it. */
-    public int[] reset() {
-        shuffled=Arrays.copyOf(original, original.length);
-        return shuffled;
-    }
- 
-    /** Returns a random shuffling of the array. */
-    public int[] shuffle() {
-        int len = shuffled.length;
- 
-        for(int i=0; i<len; i++){
-            int si = r.nextInt(len-i);
-            int temp = shuffled[i];
-            shuffled[i]=shuffled[si+i];
-            shuffled[si+i]=temp;
-        }
- 
-        return shuffled;
-    }
-}
diff --git a/384.shuffle-an-array.72234369.Accepted.leetcode.java b/384.shuffle-an-array.72234369.Accepted.leetcode.java
deleted file mode 100644
index 2203d321..00000000
--- ./384.shuffle-an-array.72234369.Accepted.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-  public class Solution
-  {
-    int[] original;
-    int[] shuffled;
-    Random r;
-    public Solution(int[] nums)
-    {
-      original = nums;
-      shuffled = Arrays.copyOf(nums, nums.length);
-      r = new Random();
-    }
-    public Solution()
-    {
-      // TODO Auto-generated constructor stub
-    }
-    /** Resets the array to its original configuration and return it. */
-    public int[] reset()
-    {
-      shuffled = Arrays.copyOf(original, original.length);
-      return shuffled;
-    }
-    /** Returns a random shuffling of the array. */
-    public int[] shuffle()
-    {
-      int len = shuffled.length;
-
-      for (int i = 0; i < len; i++)
-      {
-        int si = r.nextInt(len - i);
-        int temp = shuffled[i];
-        shuffled[i] = shuffled[si + i];
-        shuffled[si + i] = temp;
-      }
-
-      return shuffled;
-    }
-  }
-
diff --git a/385.mini-parser.71923044.Accepted.leetcode.java b/385.mini-parser.71923044.Accepted.leetcode.java
deleted file mode 100644
index d86ec4e5..00000000
--- ./385.mini-parser.71923044.Accepted.leetcode.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/**
- * // This is the interface that allows for creating nested lists.
- * // You should not implement it, or speculate about its implementation
- * public interface NestedInteger {
- *     // Constructor initializes an empty nested list.
- *     public NestedInteger();
- *
- *     // Constructor initializes a single integer.
- *     public NestedInteger(int value);
- *
- *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
- *     public boolean isInteger();
- *
- *     // @return the single integer that this NestedInteger holds, if it holds a single integer
- *     // Return null if this NestedInteger holds a nested list
- *     public Integer getInteger();
- *
- *     // Set this NestedInteger to hold a single integer.
- *     public void setInteger(int value);
- *
- *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
- *     public void add(NestedInteger ni);
- *
- *     // @return the nested list that this NestedInteger holds, if it holds a nested list
- *     // Return null if this NestedInteger holds a single integer
- *     public List<NestedInteger> getList();
- * }
- */
-public class Solution {
-    public NestedInteger deserialize(String s) {
- 
-    Stack<NestedInteger> stack = new Stack<NestedInteger>();
-    String temp = "";
- 
-    for(char c: s.toCharArray()){
-        switch(c){
-            case '[':
-                stack.push(new NestedInteger()); //start a new NI
-                break;
- 
-            case ']':
-                if(!temp.equals("")){
-                    stack.peek().add(new NestedInteger(Integer.parseInt(temp))); //add NI to parent
-                    temp="";
-                }
- 
-                NestedInteger top = stack.pop();
-                if(!stack.empty()){
-                    stack.peek().add(top);
-                }else{
-                    return top;
-                }
- 
-                break;
- 
-            case ',':
-                if(!temp.equals("")){
-                    stack.peek().add(new NestedInteger(Integer.parseInt(temp)));//add NI to parent
-                    temp="";
-                }
- 
-                break;
- 
-            default:
-                temp += c;
-        }
-    }
- 
-    if(!temp.equals("")){
-        return new NestedInteger(Integer.parseInt(temp));
-    }
- 
-    return null;
-}
-}
diff --git a/386.lexicographical-numbers.71354784.Accepted.leetcode.java b/386.lexicographical-numbers.71354784.Accepted.leetcode.java
deleted file mode 100644
index 0bd36431..00000000
--- ./386.lexicographical-numbers.71354784.Accepted.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-public class Solution {
-    public List<Integer> lexicalOrder(int n) {
-    int c=0;
-    int t=n;
-    while(t>0){
-        c++;
-        t=t/10;
-    }
- 
-    ArrayList<Integer> result = new ArrayList<Integer>();
-    char[] num = new char[c];
- 
-    helper(num, 0, n, result);
- 
-    return result;
-}
- 
-public void helper(char[] num, int i, int max, ArrayList<Integer> result){
-    if(i==num.length){
-        int val = convert(num);
-        if(val <=max)
-            result.add(val);
-        return;
-    }
- 
-    if(i==0){
-        for(char c='1'; c<='9'; c++){
-            num[i]=c;
-            helper(num, i+1, max, result);
-        }
-    }else{
-        num[i]='a';
-        helper(num, num.length, max, result);
- 
-        for(char c='0'; c<='9'; c++){
-            num[i]=c;
-            helper(num, i+1, max, result);
-        }
-    }
- 
-}
- 
-private int convert(char[] arr){
-    int result=0;
-    for(int i=0; i<arr.length; i++){
-        if(arr[i]>='0'&&arr[i]<='9')
-            result = result*10+arr[i]-'0';
-        else
-            break;
-    }
-    return result; 
-}
-}
diff --git a/387.first-unique-character-in-a-string.79365840.Wrong-Answer.leetcode.java b/387.first-unique-character-in-a-string.79365840.Wrong-Answer.leetcode.java
deleted file mode 100644
index e6b959df..00000000
--- ./387.first-unique-character-in-a-string.79365840.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public int firstUniqChar(String s)
-    {
-        Set<Character> m = new HashSet<Character>();
-        
-        for (char c : s.toCharArray())
-        {
-            m.add(c);
-        }
-        
-        for (int i = 0; i < s.length(); ++i)
-        {
-            if (m.contains(s.charAt(i)))
-                return i;
-        }
-
-        return -1;
-    }
-}
diff --git a/387.first-unique-character-in-a-string.79366075.Wrong-Answer.leetcode.java b/387.first-unique-character-in-a-string.79366075.Wrong-Answer.leetcode.java
deleted file mode 100644
index 89ed3e6f..00000000
--- ./387.first-unique-character-in-a-string.79366075.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public int firstUniqChar(String s)
-    {
-        Set<Character> m = new HashSet<Character>();
-        
-        for (char c : s.toCharArray())
-        {
-            m.add(c);
-        }
-        
-        for (int i = 0; i < s.length(); ++i)
-        {
-            if (!m.contains(s.charAt(i)))
-                return i;
-        }
-
-        return -1;
-    }
-}
diff --git a/387.first-unique-character-in-a-string.79366387.Wrong-Answer.leetcode.java b/387.first-unique-character-in-a-string.79366387.Wrong-Answer.leetcode.java
deleted file mode 100644
index 78d56c49..00000000
--- ./387.first-unique-character-in-a-string.79366387.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public int firstUniqChar(String s)
-    {
-        Set<Character> m = new HashSet<Character>();
-        
-        for (char c : s.toCharArray())
-        {
-            m.add(c);
-        }
-        
-        for (int i = 0; i < s.length(); ++i)
-        {
-            if (!m.contains(s.charAt(i)))
-                return i;
-        }
-
-        return 0;
-    }
-}
diff --git a/387.first-unique-character-in-a-string.79366716.Wrong-Answer.leetcode.java b/387.first-unique-character-in-a-string.79366716.Wrong-Answer.leetcode.java
deleted file mode 100644
index d19fb9e1..00000000
--- ./387.first-unique-character-in-a-string.79366716.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public int firstUniqChar(String s)
-    {
-        char[] chs = s.toCharArray();
-        Set<Character> m = new HashSet<Character>();
-
-        for (char c : chs)
-        {
-            m.add(c);
-        }
-
-        for (int i = 0; i < chs.length; ++i)
-        {
-            if (!m.contains(chs[i]))
-            {
-                return i;
-            }
-        }
-
-        return -1;
-    }
-}
diff --git a/387.first-unique-character-in-a-string.79366744.Wrong-Answer.leetcode.java b/387.first-unique-character-in-a-string.79366744.Wrong-Answer.leetcode.java
deleted file mode 100644
index 3089b394..00000000
--- ./387.first-unique-character-in-a-string.79366744.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public int firstUniqChar(String s)
-    {
-        char[] chs = s.toCharArray();
-        Set<Character> m = new HashSet<Character>();
-
-        for (char c : chs)
-        {
-            m.add(c);
-        }
-
-        for (int i = 0; i < chs.length; ++i)
-        {
-            if (!m.contains(chs[i]))
-            {
-                return i;
-            }
-        }
-
-        return 0;
-    }
-}
diff --git a/387.first-unique-character-in-a-string.79367203.Wrong-Answer.leetcode.java b/387.first-unique-character-in-a-string.79367203.Wrong-Answer.leetcode.java
deleted file mode 100644
index 8bddf7a1..00000000
--- ./387.first-unique-character-in-a-string.79367203.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public int firstUniqChar(String s)
-    {
-        char[] chs = s.toCharArray();
-        Set<Character> m = new HashSet<Character>();
-
-        for (int i = 0; i < chs.length; ++i)
-        {
-            m.add(chs[i]);
-        }
-
-        for (int i = 0; i < chs.length; ++i)
-        {
-            if (!m.contains(chs[i]))
-            {
-                return i;
-            }
-        }
-
-        return 0;
-    }
-}
diff --git a/387.first-unique-character-in-a-string.79394153.Accepted.leetcode.java b/387.first-unique-character-in-a-string.79394153.Accepted.leetcode.java
deleted file mode 100644
index 8bf9993a..00000000
--- ./387.first-unique-character-in-a-string.79394153.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int firstUniqChar(String s)
-    {
-        char[] chs = s.toCharArray();
-        Map<Character, Integer> m = new HashMap<Character, Integer>();
-
-        for (char c : chs)
-        {
-            if(!m.containsKey(c))
-            {
-                m.put(c, 0);
-            }
-            
-            m.put(c, m.get(c) + 1);
-        }
-
-        for (int i = 0; i < chs.length; ++i)
-        {
-            if (m.get(chs[i]) == 1)
-            {
-                return i;
-            }
-        }
-
-        return -1;
-    }
-}
diff --git a/388.longest-absolute-file-path.72067787.Accepted.leetcode.java b/388.longest-absolute-file-path.72067787.Accepted.leetcode.java
deleted file mode 100644
index 6b9b54ae..00000000
--- ./388.longest-absolute-file-path.72067787.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution {
-    public int lengthLongestPath(String s) {
-        if (s == null || s.length() == 0) {
-            return 0;
-        }
-        String[] files = s.split("\n");
-        int maxLen = 0;
-        int pathLen = 0;
-        Stack<Integer> dirLen = new Stack<>();
-        for (int i = 0; i < files.length; i++) {
-            String curLine = files[i];
-            int curLvl = findLvl(curLine);
-            int lvDiff = dirLen.size() - curLvl;
-            while (lvDiff > 0) {
-                pathLen -= dirLen.pop();
-                lvDiff -= 1;
-            }
-            int dotPos = curLine.indexOf('.');
-            if (dotPos > -1) {
-                maxLen = Math.max(maxLen, pathLen + curLine.length() - curLvl);
-            } else {
-                pathLen += curLine.length() - curLvl + 1;
-                dirLen.push(curLine.length() - curLvl + 1);
-            }
-        }
-        return maxLen;
-    }
- 
-    private int findLvl(String s) {
-        int count = 0;
-        while (s.charAt(count) == '\t') {
-            count += 1;
-        }
-        return count;
-    }
-}
diff --git a/389.find-the-difference.72235737.Accepted.leetcode.java b/389.find-the-difference.72235737.Accepted.leetcode.java
deleted file mode 100644
index b680ba99..00000000
--- ./389.find-the-difference.72235737.Accepted.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-public class Solution {
-    public char findTheDifference(String s, String t) {
-        Map<Character, Integer> map = new HashMap<>();
-        char[] schar = s.toCharArray();
-        char[] tchar = t.toCharArray();
-        for (int i = 0; i < s.length(); i++) {
-            if (map.containsKey(schar[i])) map.put(schar[i], map.get(schar[i])+1);
-            else map.put(schar[i], 1);
-        }
-        for (int i = 0; i < t.length(); i++) {
-            if (map.containsKey(tchar[i]) && map.get(tchar[i]) > 0) map.put(tchar[i], map.get(tchar[i])-1);
-            else return tchar[i];
-        }
-        return 'a';
-    }
-}
diff --git a/39.combination-sum.102700084.Accepted.leetcode.java b/39.combination-sum.102700084.Accepted.leetcode.java
deleted file mode 100644
index 40e055fe..00000000
--- ./39.combination-sum.102700084.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum(int[] datas, int target)
-    {
-        Arrays.sort(datas);
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        helper(datas, 0, result, new ArrayList<Integer>(), target);
-        return result;
-    }
-
-    public void helper(int[] datas, int start, List<List<Integer>> result, List<Integer> current, int target)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int i = start; i < datas.length; i++)
-        {
-            if (target < datas[i])
-            {
-                continue;
-            }
-
-            current.add(datas[i]);
-            helper(datas, i, result, current, target - datas[i]);
-            current.remove(current.size() - 1);
-        }
-    }
-}
diff --git a/39.combination-sum.102700236.Accepted.leetcode.java b/39.combination-sum.102700236.Accepted.leetcode.java
deleted file mode 100644
index 71ec5477..00000000
--- ./39.combination-sum.102700236.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum(int[] candidates, int target)
-    {
-        Arrays.sort(candidates);
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        helper(candidates, 0, result, new ArrayList<Integer>(), target);
-        return result;
-    }
-
-    public void helper(int[] candidates, int start, List<List<Integer>> result, List<Integer> current, int target)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-        }
-
-        for (int i = start; i < candidates.length; i++)
-        {
-            if (candidates[i] > target)
-            {
-                return;
-            }
-
-            current.add(candidates[i]);
-            helper(candidates, i, result, current, target - candidates[i]);
-            current.remove(current.size() - 1);
-        }
-    }
-}
diff --git a/39.combination-sum.158147009.Accepted.leetcode.java b/39.combination-sum.158147009.Accepted.leetcode.java
deleted file mode 100644
index 1a660c1f..00000000
--- ./39.combination-sum.158147009.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum(int[] num, int target)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        Arrays.sort(num);
-        dfs(num, 0, target, new ArrayList<Integer>(), result);
-        return result;
-    }
-    private void dfs(int[] num, int start, int target, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        if (target < 0)
-        {
-            return;
-        }
-
-        for (int index = start; index < num.length; index++)
-        {
-            current.add(num[index]);
-            dfs(num, index, target - num[index], current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/39.combination-sum.167494906.Wrong-Answer.leetcode.java b/39.combination-sum.167494906.Wrong-Answer.leetcode.java
deleted file mode 100644
index 5e67c78b..00000000
--- ./39.combination-sum.167494906.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum(int[] candidates, int target)
-    {
-        Arrays.sort(candidates);
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        helper(candidates, 0, result, new ArrayList<Integer>(), target);
-        return result;
-    }
-
-    public void helper(int[] candidates, int start, List<List<Integer>> result, List<Integer> current, int target)
-    {
-        if (target == 0)
-        {
-            result.add(current);
-        }
-
-        for (int i = start; i < candidates.length; i++)
-        {
-            if (candidates[i] > target)
-            {
-                return;
-            }
-
-            current.add(candidates[i]);
-            helper(candidates, i, result, current, target - candidates[i]);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/39.combination-sum.167495069.Accepted.leetcode.java b/39.combination-sum.167495069.Accepted.leetcode.java
deleted file mode 100644
index be240ca6..00000000
--- ./39.combination-sum.167495069.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum(int[] candidates, int target)
-    {
-        Arrays.sort(candidates);
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        helper(candidates, 0, result, new ArrayList<Integer>(), target);
-        return result;
-    }
-
-    public void helper(int[] candidates, int start, List<List<Integer>> result, List<Integer> current, int target)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-        }
-
-        for (int i = start; i < candidates.length; i++)
-        {
-            if (candidates[i] > target)
-            {
-                return;
-            }
-
-            current.add(candidates[i]);
-            helper(candidates, i, result, current, target - candidates[i]);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/39.combination-sum.167495513.Accepted.leetcode.java b/39.combination-sum.167495513.Accepted.leetcode.java
deleted file mode 100644
index 03d48e20..00000000
--- ./39.combination-sum.167495513.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum(int[] nums, int target)
-    {
-        Arrays.sort(nums);
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        helper(nums, 0, result, new ArrayList<Integer>(), target);
-        return result;
-    }
-
-    public void helper(int[] nums, int start, List<List<Integer>> result, List<Integer> current, int target)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-        }
-
-        for (int i = start; i < nums.length; i++)
-        {
-            if (nums[i] > target)
-            {
-                return;
-            }
-
-            current.add(nums[i]);
-            helper(nums, i, result, current, target - nums[i]);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/39.combination-sum.167495595.Accepted.leetcode.java b/39.combination-sum.167495595.Accepted.leetcode.java
deleted file mode 100644
index ec8f2f73..00000000
--- ./39.combination-sum.167495595.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum(int[] nums, int target)
-    {
-        Arrays.sort(nums);
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        helper(nums, 0, result, new ArrayList<Integer>(), target);
-        return result;
-    }
-
-    public void helper(int[] nums, int start, List<List<Integer>> result, List<Integer> current, int target)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int i = start; i < nums.length; i++)
-        {
-            if (nums[i] > target)
-            {
-                return;
-            }
-
-            current.add(nums[i]);
-            helper(nums, i, result, current, target - nums[i]);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/39.combination-sum.167495685.Wrong-Answer.leetcode.java b/39.combination-sum.167495685.Wrong-Answer.leetcode.java
deleted file mode 100644
index ba262d6d..00000000
--- ./39.combination-sum.167495685.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum(int[] nums, int target)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        helper(nums, 0, result, new ArrayList<Integer>(), target);
-        return result;
-    }
-
-    public void helper(int[] nums, int start, List<List<Integer>> result, List<Integer> current, int target)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-        }
-
-        for (int i = start; i < nums.length; i++)
-        {
-            if (target < nums[i])
-            {
-                return;
-            }
-
-            current.add(nums[i]);
-            helper(nums, i, result, current, target - nums[i]);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/39.combination-sum.167495857.Wrong-Answer.leetcode.java b/39.combination-sum.167495857.Wrong-Answer.leetcode.java
deleted file mode 100644
index 47c723cd..00000000
--- ./39.combination-sum.167495857.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum(int[] nums, int target)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        helper(nums, 0, result, new ArrayList<Integer>(), target);
-        return result;
-    }
-
-    public void helper(int[] nums, int start, List<List<Integer>> result, List<Integer> current, int target)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-        }
-
-        for (int i = start; i < nums.length; i++)
-        {
-            if (target < nums[i])
-            {
-                return;
-            }
-
-            current.add(nums[i]);
-            System.out.printf("current --> %s\n", current);
-            helper(nums, i, result, current, target - nums[i]);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/39.combination-sum.167495943.Accepted.leetcode.java b/39.combination-sum.167495943.Accepted.leetcode.java
deleted file mode 100644
index ec5c0bc7..00000000
--- ./39.combination-sum.167495943.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum(int[] nums, int target)
-    {
-        Arrays.sort(nums);
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        helper(nums, 0, result, new ArrayList<Integer>(), target);
-        return result;
-    }
-
-    public void helper(int[] nums, int start, List<List<Integer>> result, List<Integer> current, int target)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-        }
-
-        for (int i = start; i < nums.length; i++)
-        {
-            if (target < nums[i])
-            {
-                return;
-            }
-
-            current.add(nums[i]);
-            System.out.printf("current --> %s\n", current);
-            helper(nums, i, result, current, target - nums[i]);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/39.combination-sum.167496018.Accepted.leetcode.java b/39.combination-sum.167496018.Accepted.leetcode.java
deleted file mode 100644
index daed045c..00000000
--- ./39.combination-sum.167496018.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum(int[] nums, int target)
-    {
-        Arrays.sort(nums);
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        helper(nums, 0, result, new ArrayList<Integer>(), target);
-        return result;
-    }
-
-    public void helper(int[] nums, int start, List<List<Integer>> result, List<Integer> current, int target)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int i = start; i < nums.length; i++)
-        {
-            if (target < nums[i])
-            {
-                return;
-            }
-
-            current.add(nums[i]);
-            helper(nums, i, result, current, target - nums[i]);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/390.elimination-game.79399021.Accepted.leetcode.java b/390.elimination-game.79399021.Accepted.leetcode.java
deleted file mode 100644
index 731865a4..00000000
--- ./390.elimination-game.79399021.Accepted.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-public class Solution {
- public int lastRemaining(int n) {
-	boolean left = true;
-	int remain = n;
-	int step = 1;
-	int head = 1;
-	while(remain>1){
-		if(left||remain%2==1){
-			head +=step;
-			
-		}
-		remain /=2;
-		left =!left;
-		step *=2;
-	}
-	return head;
-}
-}
diff --git a/390.elimination-game.79399191.Accepted.leetcode.java b/390.elimination-game.79399191.Accepted.leetcode.java
deleted file mode 100644
index 30e808d9..00000000
--- ./390.elimination-game.79399191.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution 
-{
-    public int lastRemaining(int n) 
-    {
-	    boolean left = true;
-	    int remain = n;
-	    int step = 1;
-	    int head = 1;
-	    while(remain > 1)
-	    {
-		    if(left || remain % 2 == 1)
-		    {
-			    head += step;
-    		}
-	    
-	    	remain /= 2;
-		    left =! left;
-		    step *= 2;
-	    }
-	
-	    return head;
-    }
-}
diff --git a/392.is-subsequence.88572874.Accepted.leetcode.java b/392.is-subsequence.88572874.Accepted.leetcode.java
deleted file mode 100644
index 14d31965..00000000
--- ./392.is-subsequence.88572874.Accepted.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class Solution 
-{
-    public boolean isSubsequence(String s, String t) 
-    {
-        char[] ss = s.toCharArray();
-        char[] tt = t.toCharArray();
-        
-        int i = 0;
-        for (int j = 0; i < ss.length && j < tt.length; j++)
-        {
-            if (ss[i] == tt[j])
-            {
-                i++;
-            }
-        }
-        
-        return i == ss.length;
-    }
-}
diff --git a/392.is-subsequence.88574672.Accepted.leetcode.java b/392.is-subsequence.88574672.Accepted.leetcode.java
deleted file mode 100644
index 9f375921..00000000
--- ./392.is-subsequence.88574672.Accepted.leetcode.java
+++ /dev/null
@@ -1,17 +0,0 @@
-public class Solution 
-{
-    public boolean isSubsequence(String s, String t) 
-    {
-        int i = 0;
-        
-        for (int j = 0; i < s.length() && j < t.length(); j++)
-        {
-            if (s.charAt(i) == t.charAt(j))
-            {
-                i++;
-            }
-        }
-        
-        return i == s.length();
-    }
-}
diff --git a/394.decode-string.79408005.Accepted.leetcode.java b/394.decode-string.79408005.Accepted.leetcode.java
deleted file mode 100644
index 1f9b97e9..00000000
--- ./394.decode-string.79408005.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution {
-    public String decodeString(String s) {
-        String res="";
-        Stack<Integer> counts=new Stack<>();
-        Stack<String> strs=new Stack<>();
-        int i=0;
-        while(i<s.length()){
-            if(Character.isDigit(s.charAt(i))){
-                int num=0;
-                while(Character.isDigit(s.charAt(i))){
-                    num=num*10+(s.charAt(i)-'0');
-                    i++;
-                }
-                counts.push(num);
-            }else if(s.charAt(i)=='['){
-                strs.push(res);
-                res="";
-                i++;
-            }else if(s.charAt(i)==']'){
-                StringBuilder str=new StringBuilder(strs.pop());
-                int count=counts.pop();
-                for(int j=0;j<count;j++){
-                    str.append(res);
-                }
-                res=str.toString();
-                i++;
-            }else{
-                res+=s.charAt(i++);
-            }
-        }
-        return res;
-    }
-}
diff --git a/394.decode-string.79408238.Accepted.leetcode.java b/394.decode-string.79408238.Accepted.leetcode.java
deleted file mode 100644
index 62468515..00000000
--- ./394.decode-string.79408238.Accepted.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-public class Solution 
-{
-    public String decodeString(String s) 
-    {
-        String res = "";
-        Stack<Integer> counts = new Stack<>();
-        Stack<String> strs = new Stack<>();
-        int i = 0;
-        while(i < s.length())
-        {
-            if(Character.isDigit(s.charAt(i)))
-            {
-                int num=0;
-                
-                while(Character.isDigit(s.charAt(i)))
-                {
-                    num = num * 10 + (s.charAt(i) - '0');
-                    i++;
-                }
-                
-                counts.push(num);
-            }
-            else if(s.charAt(i) == '[')
-            {
-                strs.push(res);
-                res = "";
-                i++;
-            }
-            else if(s.charAt(i) == ']')
-            {
-                StringBuilder str = new StringBuilder(strs.pop());
-                int count = counts.pop();
-                
-                for(int j = 0; j < count; j++)
-                {
-                    str.append(res);
-                }
-                
-                res = str.toString();
-                i++;
-            }
-            else
-            {
-                res += s.charAt(i++);
-            }
-        }
-        
-        return res;
-    }
-}
diff --git a/395.longest-substring-with-at-least-k-repeating-characters.98146694.Accepted.leetcode.java b/395.longest-substring-with-at-least-k-repeating-characters.98146694.Accepted.leetcode.java
deleted file mode 100644
index cba866d0..00000000
--- ./395.longest-substring-with-at-least-k-repeating-characters.98146694.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution {
-    public int longestSubstring(String s, int k) {
-        //System.out.println(s);
-        int n = s.length();
-        if(n < k) return 0;
-        int counter[] = new int[26];
-        boolean valid[] = new boolean[26];
-        char ss[] = s.toCharArray();
-        //统计每个字符的长度
-        for(int i=0;i<n;i++) 
-            counter[ss[i] - 'a']++;
-        //检查当前字符串是否是完全满足的
-        boolean fullValid = true;
-        //判断每个字符的出现条件是否合适，即，要么不出现，要么出现了不少于k
-        for(int i=0;i<26;i++){
-            if(counter[i]>0 && counter[i]<k){
-                valid[i] = false;
-                fullValid = false;
-            }
-            else valid[i] = true;
-        }
-        if(fullValid) return s.length();
-        int max = 0;
-        int lastStart=0;
-        //把不符合要求的断开，然后依次检查 取最大
-        for(int i=0;i<n;i++){
-            if(valid[ss[i] - 'a'] == false){
-               // System.out.println(lastStart+"  "+i);
-                max = Math.max(max,longestSubstring(s.substring(lastStart,i),k));
-                lastStart = i + 1;
-            }
-        }
-        max = Math.max(max,longestSubstring(s.substring(lastStart,n),k));
-        return max;
-
-    }
-}
diff --git a/395.longest-substring-with-at-least-k-repeating-characters.98146920.Accepted.leetcode.java b/395.longest-substring-with-at-least-k-repeating-characters.98146920.Accepted.leetcode.java
deleted file mode 100644
index 4ab6f8d2..00000000
--- ./395.longest-substring-with-at-least-k-repeating-characters.98146920.Accepted.leetcode.java
+++ /dev/null
@@ -1,62 +0,0 @@
-public class Solution
-{
-    public int longestSubstring(String s, int k)
-    {
-        //System.out.println(s);
-        int n = s.length();
-
-        if (n < k)
-        {
-            return 0;
-        }
-
-        int counter[] = new int[26];
-        boolean valid[] = new boolean[26];
-        char ss[] = s.toCharArray();
-
-        //统计每个字符的长度
-        for (int i = 0; i < n; i++)
-        {
-            counter[ss[i] - 'a']++;
-        }
-
-        //检查当前字符串是否是完全满足的
-        boolean fullValid = true;
-
-        //判断每个字符的出现条件是否合适，即，要么不出现，要么出现了不少于k
-        for (int i = 0; i < 26; i++)
-        {
-            if (counter[i] > 0 && counter[i] < k)
-            {
-                valid[i] = false;
-                fullValid = false;
-            }
-            else
-            {
-                valid[i] = true;
-            }
-        }
-
-        if (fullValid)
-        {
-            return s.length();
-        }
-
-        int max = 0;
-        int lastStart = 0;
-
-        //把不符合要求的断开，然后依次检查 取最大
-        for (int i = 0; i < n; i++)
-        {
-            if (valid[ss[i] - 'a'] == false)
-            {
-                // System.out.println(lastStart+"  "+i);
-                max = Math.max(max, longestSubstring(s.substring(lastStart, i), k));
-                lastStart = i + 1;
-            }
-        }
-
-        max = Math.max(max, longestSubstring(s.substring(lastStart, n), k));
-        return max;
-    }
-}
diff --git a/395.longest-substring-with-at-least-k-repeating-characters.98149195.Wrong-Answer.leetcode.java b/395.longest-substring-with-at-least-k-repeating-characters.98149195.Wrong-Answer.leetcode.java
deleted file mode 100644
index 811e86d9..00000000
--- ./395.longest-substring-with-at-least-k-repeating-characters.98149195.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,58 +0,0 @@
-public class Solution
-{
-    public int longestSubstring(String s, int k)
-    {
-        //System.out.println(s);
-        int n = s.length();
-
-        if (n < k)
-        {
-            return 0;
-        }
-
-        int counter[] = new int[26];
-        boolean valid[] = new boolean[26];
-        char ss[] = s.toCharArray();
-
-        //统计每个字符的长度
-        
-        //检查当前字符串是否是完全满足的
-        boolean fullValid = true;
-
-        //判断每个字符的出现条件是否合适，即，要么不出现，要么出现了不少于k
-        for (int i = 0; i < 26; i++)
-        {
-            if (counter[i] > 0 && counter[i] < k)
-            {
-                valid[i] = false;
-                fullValid = false;
-            }
-            else
-            {
-                valid[i] = true;
-            }
-        }
-
-        if (fullValid)
-        {
-            return s.length();
-        }
-
-        int max = 0;
-        int lastStart = 0;
-
-        //把不符合要求的断开，然后依次检查 取最大
-        for (int i = 0; i < n; i++)
-        {
-            if (valid[ss[i] - 'a'] == false)
-            {
-                // System.out.println(lastStart+"  "+i);
-                max = Math.max(max, longestSubstring(s.substring(lastStart, i), k));
-                lastStart = i + 1;
-            }
-        }
-
-        max = Math.max(max, longestSubstring(s.substring(lastStart, n), k));
-        return max;
-    }
-}
diff --git a/395.longest-substring-with-at-least-k-repeating-characters.98149260.Wrong-Answer.leetcode.java b/395.longest-substring-with-at-least-k-repeating-characters.98149260.Wrong-Answer.leetcode.java
deleted file mode 100644
index 04c63d94..00000000
--- ./395.longest-substring-with-at-least-k-repeating-characters.98149260.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,61 +0,0 @@
-public class Solution
-{
-    public int longestSubstring(String s, int k)
-    {
-        //System.out.println(s);
-        int n = s.length();
-
-        if (n < k)
-        {
-            return 0;
-        }
-
-        int counter[] = new int[26];
-        boolean valid[] = new boolean[26];
-        char ss[] = s.toCharArray();
-
-        //统计每个字符的长度
-        for (int i = 0; i < n; i++)
-        {
-            counter[ss[i] - 'a']++;
-        }
-
-        //检查当前字符串是否是完全满足的
-        boolean fullValid = true;
-
-        //判断每个字符的出现条件是否合适，即，要么不出现，要么出现了不少于k
-        for (int i = 0; i < 26; i++)
-        {
-            if (counter[i] > 0 && counter[i] < k)
-            {
-                valid[i] = false;
-                fullValid = false;
-            }
-            else
-            {
-                valid[i] = true;
-            }
-        }
-
-        if (fullValid)
-        {
-            return s.length();
-        }
-
-        int max = 0;
-        int lastStart = 0;
-
-        //把不符合要求的断开，然后依次检查 取最大
-        for (int i = 0; i < n; i++)
-        {
-            if (valid[ss[i] - 'a'] == false)
-            {
-                // System.out.println(lastStart+"  "+i);
-                max = Math.max(max, longestSubstring(s.substring(lastStart, i), k));
-                lastStart = i + 1;
-            }
-        }
-
-        return max;
-    }
-}
diff --git a/395.longest-substring-with-at-least-k-repeating-characters.98149300.Runtime-Error.leetcode.java b/395.longest-substring-with-at-least-k-repeating-characters.98149300.Runtime-Error.leetcode.java
deleted file mode 100644
index 8275212e..00000000
--- ./395.longest-substring-with-at-least-k-repeating-characters.98149300.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,58 +0,0 @@
-public class Solution
-{
-    public int longestSubstring(String s, int k)
-    {
-        //System.out.println(s);
-        int n = s.length();
-
-        if (n < k)
-        {
-            return 0;
-        }
-
-        int counter[] = new int[26];
-        boolean valid[] = new boolean[26];
-        char ss[] = s.toCharArray();
-
-        //统计每个字符的长度
-        for (int i = 0; i < n; i++)
-        {
-            counter[ss[i] - 'a']++;
-        }
-
-        //检查当前字符串是否是完全满足的
-        boolean fullValid = true;
-
-        //判断每个字符的出现条件是否合适，即，要么不出现，要么出现了不少于k
-        for (int i = 0; i < 26; i++)
-        {
-            if (counter[i] > 0 && counter[i] < k)
-            {
-                valid[i] = false;
-                fullValid = false;
-            }
-            else
-            {
-                valid[i] = true;
-            }
-        }
-
-
-        int max = 0;
-        int lastStart = 0;
-
-        //把不符合要求的断开，然后依次检查 取最大
-        for (int i = 0; i < n; i++)
-        {
-            if (valid[ss[i] - 'a'] == false)
-            {
-                // System.out.println(lastStart+"  "+i);
-                max = Math.max(max, longestSubstring(s.substring(lastStart, i), k));
-                lastStart = i + 1;
-            }
-        }
-
-        max = Math.max(max, longestSubstring(s.substring(lastStart, n), k));
-        return max;
-    }
-}
diff --git a/395.longest-substring-with-at-least-k-repeating-characters.98149336.Runtime-Error.leetcode.java b/395.longest-substring-with-at-least-k-repeating-characters.98149336.Runtime-Error.leetcode.java
deleted file mode 100644
index 2661133b..00000000
--- ./395.longest-substring-with-at-least-k-repeating-characters.98149336.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,56 +0,0 @@
-public class Solution
-{
-    public int longestSubstring(String s, int k)
-    {
-        //System.out.println(s);
-        int n = s.length();
-
-        if (n < k)
-        {
-            return 0;
-        }
-
-        int counter[] = new int[26];
-        boolean valid[] = new boolean[26];
-        char ss[] = s.toCharArray();
-
-        //统计每个字符的长度
-        for (int i = 0; i < n; i++)
-        {
-            counter[ss[i] - 'a']++;
-        }
-
-        //检查当前字符串是否是完全满足的
-        boolean fullValid = true;
-
-        //判断每个字符的出现条件是否合适，即，要么不出现，要么出现了不少于k
-        for (int i = 0; i < 26; i++)
-        {
-            if (counter[i] > 0 && counter[i] < k)
-            {
-                valid[i] = false;
-                fullValid = false;
-            }
-            else
-            {
-                valid[i] = true;
-            }
-        }
-
-        if (fullValid)
-        {
-            return s.length();
-        }
-
-        int max = 0;
-        int lastStart = 0;
-
-        //把不符合要求的断开，然后依次检查 取最大
-        for (int i = 0; i < n; i++)
-        {
-        }
-
-        max = Math.max(max, longestSubstring(s.substring(lastStart, n), k));
-        return max;
-    }
-}
diff --git a/395.longest-substring-with-at-least-k-repeating-characters.98149671.Accepted.leetcode.java b/395.longest-substring-with-at-least-k-repeating-characters.98149671.Accepted.leetcode.java
deleted file mode 100644
index cb532569..00000000
--- ./395.longest-substring-with-at-least-k-repeating-characters.98149671.Accepted.leetcode.java
+++ /dev/null
@@ -1,56 +0,0 @@
-public class Solution
-{
-    public int longestSubstring(String s, int k)
-    {
-        //System.out.println(s);
-        int n = s.length();
-        int counter[] = new int[26];
-        boolean valid[] = new boolean[26];
-        char ss[] = s.toCharArray();
-
-        //统计每个字符的长度
-        for (int i = 0; i < n; i++)
-        {
-            counter[ss[i] - 'a']++;
-        }
-
-        //检查当前字符串是否是完全满足的
-        boolean fullValid = true;
-
-        //判断每个字符的出现条件是否合适，即，要么不出现，要么出现了不少于k
-        for (int i = 0; i < 26; i++)
-        {
-            if (counter[i] > 0 && counter[i] < k)
-            {
-                valid[i] = false;
-                fullValid = false;
-            }
-            else
-            {
-                valid[i] = true;
-            }
-        }
-
-        if (fullValid)
-        {
-            return s.length();
-        }
-
-        int max = 0;
-        int lastStart = 0;
-
-        //把不符合要求的断开，然后依次检查 取最大
-        for (int i = 0; i < n; i++)
-        {
-            if (valid[ss[i] - 'a'] == false)
-            {
-                // System.out.println(lastStart+"  "+i);
-                max = Math.max(max, longestSubstring(s.substring(lastStart, i), k));
-                lastStart = i + 1;
-            }
-        }
-
-        max = Math.max(max, longestSubstring(s.substring(lastStart, n), k));
-        return max;
-    }
-}
diff --git a/395.longest-substring-with-at-least-k-repeating-characters.98149724.Runtime-Error.leetcode.java b/395.longest-substring-with-at-least-k-repeating-characters.98149724.Runtime-Error.leetcode.java
deleted file mode 100644
index bd30c1d1..00000000
--- ./395.longest-substring-with-at-least-k-repeating-characters.98149724.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-public class Solution
-{
-    public int longestSubstring(String s, int k)
-    {
-        int n = s.length();
-        int counter[] = new int[26];
-        boolean valid[] = new boolean[26];
-        char ss[] = s.toCharArray();
-
-        //统计每个字符的长度
-        for (int i = 0; i < n; i++)
-        {
-            counter[ss[i] - 'a']++;
-        }
-
-        //检查当前字符串是否是完全满足的
-        boolean fullValid = true;
-
-        //判断每个字符的出现条件是否合适，即，要么不出现，要么出现了不少于k
-        for (int i = 0; i < 26; i++)
-        {
-            if (counter[i] > 0 && counter[i] < k)
-            {
-                valid[i] = false;
-                fullValid = false;
-            }
-            else
-            {
-                valid[i] = true;
-            }
-        }
-
-        if (fullValid)
-        {
-            return s.length();
-        }
-
-        int max = 0;
-        int lastStart = 0;
-
-        //把不符合要求的断开，然后依次检查 取最大
-        for (int i = 0; i < n; i++)
-        {
-            if (valid[ss[i] - 'a'] == false)
-            {
-                max = Math.max(max, longestSubstring(s.substring(lastStart, i), k));
-            }
-        }
-
-        max = Math.max(max, longestSubstring(s.substring(lastStart, n), k));
-        return max;
-    }
-}
diff --git a/396.rotate-function.79363066.Accepted.leetcode.java b/396.rotate-function.79363066.Accepted.leetcode.java
deleted file mode 100644
index 8193acf7..00000000
--- ./396.rotate-function.79363066.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution 
-{
-    public int maxRotateFunction(int[] A) 
-    {  
-        int max=Integer.MIN_VALUE;  
-        int sum = 0;  
-        int pre = 0;  
-      
-        for(int i=0;i<A.length;i++) 
-        {  
-            pre +=A[i]*i;  
-            sum+=A[i];  
-        }  
-        
-        max = Math.max(pre, max);  
-  
-        int k=1;  
-        while(k<A.length) 
-        {  
-            int res = pre+sum-A.length*A[A.length-k];  
-            max = Math.max(max, res);  
-            pre = res;  
-            k++;  
-        }  
-      
-        return max;  
-    } 
-}
diff --git a/396.rotate-function.79363225.Accepted.leetcode.java b/396.rotate-function.79363225.Accepted.leetcode.java
deleted file mode 100644
index 051816b9..00000000
--- ./396.rotate-function.79363225.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution 
-{
-    public int maxRotateFunction(int[] A) 
-    {  
-        int max = Integer.MIN_VALUE;  
-        int sum = 0;  
-        int pre = 0;  
-      
-        for(int i = 0; i < A.length; i++) 
-        {  
-            pre += A[i]*i;  
-            sum += A[i];  
-        }  
-        
-        max = Math.max(pre, max);  
-  
-        int k = 1;  
-        while(k < A.length) 
-        {  
-            int res = pre + sum - A.length * A[A.length - k];  
-            max = Math.max(max, res);  
-            pre = res;  
-            k++;  
-        }  
-      
-        return max;  
-    } 
-}
diff --git a/4.median-of-two-sorted-arrays.73076098.Accepted.leetcode.java b/4.median-of-two-sorted-arrays.73076098.Accepted.leetcode.java
deleted file mode 100644
index 4cac7002..00000000
--- ./4.median-of-two-sorted-arrays.73076098.Accepted.leetcode.java
+++ /dev/null
@@ -1,40 +0,0 @@
-public class Solution {
-    public double findMedianSortedArrays(int A[], int B[]) {
-        int len = A.length + B.length;
-        if (len % 2 == 1) {
-            return findKth(A, 0, B, 0, len / 2 + 1);
-        }
-        return (
-            findKth(A, 0, B, 0, len / 2) + findKth(A, 0, B, 0, len / 2 + 1)
-        ) / 2.0;
-    }
-
-    // find kth number of two sorted array
-    public int findKth(int[] A, int A_start,
-                              int[] B, int B_start,
-                              int k){		
-		if (A_start >= A.length) {
-			return B[B_start + k - 1];
-		}
-		if (B_start >= B.length) {
-			return A[A_start + k - 1];
-		}
-
-		if (k == 1) {
-			return Math.min(A[A_start], B[B_start]);
-		}
-		
-		int A_key = A_start + k / 2 - 1 < A.length
-		            ? A[A_start + k / 2 - 1]
-		            : Integer.MAX_VALUE;
-		int B_key = B_start + k / 2 - 1 < B.length
-		            ? B[B_start + k / 2 - 1]
-		            : Integer.MAX_VALUE; 
-		
-		if (A_key < B_key) {
-			return findKth(A, A_start + k / 2, B, B_start, k - k / 2);
-		} else {
-			return findKth(A, A_start, B, B_start + k / 2, k - k / 2);
-		}
-	}
-}
diff --git a/4.median-of-two-sorted-arrays.73302338.Accepted.leetcode.java b/4.median-of-two-sorted-arrays.73302338.Accepted.leetcode.java
deleted file mode 100644
index d8e8a78b..00000000
--- ./4.median-of-two-sorted-arrays.73302338.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution {
-    public double findMedianSortedArrays(int A[], int B[]) {
-        int len = A.length + B.length;
-        if (len % 2 == 1) {
-            return findKth(A, 0, B, 0, len / 2 + 1);
-        }
-        return (
-            findKth(A, 0, B, 0, len / 2) + findKth(A, 0, B, 0, len / 2 + 1)
-        ) / 2.0;
-    }
-
-    // find kth number of two sorted array
-    public int findKth(int[] A, int A_start,
-                              int[] B, int B_start,
-                              int k){		
-		if (A_start >= A.length) {
-			return B[B_start + k - 1];
-		}
-		if (B_start >= B.length) {
-			return A[A_start + k - 1];
-		}
-
-		if (k == 1) {
-			return Math.min(A[A_start], B[B_start]);
-		}
-		
-		int A_key = A_start + k / 2 - 1 < A.length ? A[A_start + k / 2 - 1] : Integer.MAX_VALUE;
-		int B_key = B_start + k / 2 - 1 < B.length ? B[B_start + k / 2 - 1] : Integer.MAX_VALUE;
-		
-		if (A_key < B_key) {
-			return findKth(A, A_start + k / 2, B, B_start, k - k / 2);
-		} else {
-			return findKth(A, A_start, B, B_start + k / 2, k - k / 2);
-		}
-	}
-}
diff --git a/4.median-of-two-sorted-arrays.73302429.Accepted.leetcode.java b/4.median-of-two-sorted-arrays.73302429.Accepted.leetcode.java
deleted file mode 100644
index 40ada43a..00000000
--- ./4.median-of-two-sorted-arrays.73302429.Accepted.leetcode.java
+++ /dev/null
@@ -1,54 +0,0 @@
-public class Solution
-{
-    public double findMedianSortedArrays(int A[], int B[])
-    {
-        int len = A.length + B.length;
-
-        if (len % 2 == 1)
-        {
-            return findKth(A, 0, B, 0, len / 2 + 1);
-        }
-
-        return (
-                    findKth(A, 0, B, 0, len / 2) + findKth(A, 0, B, 0, len / 2 + 1)
-                ) / 2.0;
-    }
-
-    // find kth number of two sorted array
-    public int findKth(int[] A, int A_start,
-                        int[] B, int B_start,
-                        int k)
-    {
-        if (A_start >= A.length)
-        {
-            return B[B_start + k - 1];
-        }
-
-        if (B_start >= B.length)
-        {
-            return A[A_start + k - 1];
-        }
-
-        if (k == 1)
-        {
-            return Math.min(A[A_start], B[B_start]);
-        }
-
-        int A_key = A_start + k / 2 - 1 < A.length
-                    ? A[A_start + k / 2 - 1]
-                    : Integer.MAX_VALUE;
-        int B_key = B_start + k / 2 - 1 < B.length
-                    ? B[B_start + k / 2 - 1]
-                    : Integer.MAX_VALUE;
-
-        if (A_key < B_key)
-        {
-            return findKth(A, A_start + k / 2, B, B_start, k - k / 2);
-        }
-        else
-        {
-            return findKth(A, A_start, B, B_start + k / 2, k - k / 2);
-        }
-    }
-}
-
diff --git a/4.median-of-two-sorted-arrays.73302701.Accepted.leetcode.java b/4.median-of-two-sorted-arrays.73302701.Accepted.leetcode.java
deleted file mode 100644
index 22d86e35..00000000
--- ./4.median-of-two-sorted-arrays.73302701.Accepted.leetcode.java
+++ /dev/null
@@ -1,54 +0,0 @@
-public class Solution
-{
-    public double findMedianSortedArrays(int A[], int B[])
-    {
-        int len = A.length + B.length;
-
-        if (len % 2 == 1)
-        {
-            return findKth(A, 0, B, 0, len / 2 + 1);
-        }
-
-        return (
-                    findKth(A, 0, B, 0, len / 2) + findKth(A, 0, B, 0, len / 2 + 1)
-                ) / 2.0;
-    }
-
-    // find kth number of two sorted array
-    public int findKth(int[] A, int A_start,
-                        int[] B, int B_start,
-                        int k)
-    {
-        if(A_start >= A.length)
-        {
-            return B[B_start + k - 1];
-        }
-        
-        if(B_start >= B.length)
-        {
-            return A[A_start + k - 1];
-        }
-        
-        if (k == 1)
-        {
-            return Math.min(A[A_start], B[B_start]);
-        }
-
-        int A_key = A_start + k / 2 - 1 < A.length
-                    ? A[A_start + k / 2 - 1]
-                    : Integer.MAX_VALUE;
-        int B_key = B_start + k / 2 - 1 < B.length
-                    ? B[B_start + k / 2 - 1]
-                    : Integer.MAX_VALUE;
-
-        if (A_key < B_key)
-        {
-            return findKth(A, A_start + k / 2, B, B_start, k - k / 2);
-        }
-        else
-        {
-            return findKth(A, A_start, B, B_start + k / 2, k - k / 2);
-        }
-    }
-}
-
diff --git a/4.median-of-two-sorted-arrays.73302822.Accepted.leetcode.java b/4.median-of-two-sorted-arrays.73302822.Accepted.leetcode.java
deleted file mode 100644
index fd386df0..00000000
--- ./4.median-of-two-sorted-arrays.73302822.Accepted.leetcode.java
+++ /dev/null
@@ -1,55 +0,0 @@
-public class Solution
-{
-    public double findMedianSortedArrays(int A[], int B[])
-    {
-        int len = A.length + B.length;
-
-        if (len % 2 == 1)
-        {
-            return findKth(A, 0, B, 0, len / 2 + 1);
-        }
-
-        return (
-                    findKth(A, 0, B, 0, len / 2) + findKth(A, 0, B, 0, len / 2 + 1)
-                ) / 2.0;
-    }
-
-    // find kth number of two sorted array
-    public int findKth(int[] A, int A_start,
-                        int[] B, int B_start,
-                        int k)
-    {
-        if(A_start >= A.length)
-        {
-            return B[B_start + k - 1];
-        }
-        
-        if(B_start >= B.length)
-        {
-            return A[A_start + k - 1];
-        }
-        
-        if(k == 1)
-        {
-            return Math.min(A[A_start], B[B_start]);
-        }
-        
-        
-        int A_key = A_start + k / 2 - 1 < A.length
-                    ? A[A_start + k / 2 - 1]
-                    : Integer.MAX_VALUE;
-        int B_key = B_start + k / 2 - 1 < B.length
-                    ? B[B_start + k / 2 - 1]
-                    : Integer.MAX_VALUE;
-
-        if (A_key < B_key)
-        {
-            return findKth(A, A_start + k / 2, B, B_start, k - k / 2);
-        }
-        else
-        {
-            return findKth(A, A_start, B, B_start + k / 2, k - k / 2);
-        }
-    }
-}
-
diff --git a/4.median-of-two-sorted-arrays.73305002.Wrong-Answer.leetcode.java b/4.median-of-two-sorted-arrays.73305002.Wrong-Answer.leetcode.java
deleted file mode 100644
index a5835777..00000000
--- ./4.median-of-two-sorted-arrays.73305002.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,52 +0,0 @@
-public class Solution
-{
-    public double findMedianSortedArrays(int A[], int B[])
-    {
-        int len = A.length + B.length;
-
-        if(len % 2 == 1)
-        {
-            return findKth(A, 0, B, 0, len / 2 + 1);
-        }
-        return (findKth(A, 0, B, 0, len / 2) + findKth(A, 0, B, 0, len / 2)) / 2;
-    }
-
-    // find kth number of two sorted array
-    public int findKth(int[] A, int A_start,
-                        int[] B, int B_start,
-                        int k)
-    {
-        if(A_start >= A.length)
-        {
-            return B[B_start + k - 1];
-        }
-        
-        if(B_start >= B.length)
-        {
-            return A[A_start + k - 1];
-        }
-        
-        if(k == 1)
-        {
-            return Math.min(A[A_start], B[B_start]);
-        }
-        
-        
-        int A_key = A_start + k / 2 - 1 < A.length
-                    ? A[A_start + k / 2 - 1]
-                    : Integer.MAX_VALUE;
-        int B_key = B_start + k / 2 - 1 < B.length
-                    ? B[B_start + k / 2 - 1]
-                    : Integer.MAX_VALUE;
-
-        if (A_key < B_key)
-        {
-            return findKth(A, A_start + k / 2, B, B_start, k - k / 2);
-        }
-        else
-        {
-            return findKth(A, A_start, B, B_start + k / 2, k - k / 2);
-        }
-    }
-}
-
diff --git a/4.median-of-two-sorted-arrays.73305172.Wrong-Answer.leetcode.java b/4.median-of-two-sorted-arrays.73305172.Wrong-Answer.leetcode.java
deleted file mode 100644
index 635419b7..00000000
--- ./4.median-of-two-sorted-arrays.73305172.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,52 +0,0 @@
-public class Solution
-{
-    public double findMedianSortedArrays(int A[], int B[])
-    {
-        int len = A.length + B.length;
-
-        if(len % 2 == 1)
-        {
-            return findKth(A, 0, B, 0, len / 2 + 1);
-        }
-        return (findKth(A, 0, B, 0, len / 2) + findKth(A, 0, B, 0, len / 2 + 1)) / 2;
-    }
-
-    // find kth number of two sorted array
-    public int findKth(int[] A, int A_start,
-                        int[] B, int B_start,
-                        int k)
-    {
-        if(A_start >= A.length)
-        {
-            return B[B_start + k - 1];
-        }
-        
-        if(B_start >= B.length)
-        {
-            return A[A_start + k - 1];
-        }
-        
-        if(k == 1)
-        {
-            return Math.min(A[A_start], B[B_start]);
-        }
-        
-        
-        int A_key = A_start + k / 2 - 1 < A.length
-                    ? A[A_start + k / 2 - 1]
-                    : Integer.MAX_VALUE;
-        int B_key = B_start + k / 2 - 1 < B.length
-                    ? B[B_start + k / 2 - 1]
-                    : Integer.MAX_VALUE;
-
-        if (A_key < B_key)
-        {
-            return findKth(A, A_start + k / 2, B, B_start, k - k / 2);
-        }
-        else
-        {
-            return findKth(A, A_start, B, B_start + k / 2, k - k / 2);
-        }
-    }
-}
-
diff --git a/4.median-of-two-sorted-arrays.73305238.Accepted.leetcode.java b/4.median-of-two-sorted-arrays.73305238.Accepted.leetcode.java
deleted file mode 100644
index 440f74f0..00000000
--- ./4.median-of-two-sorted-arrays.73305238.Accepted.leetcode.java
+++ /dev/null
@@ -1,52 +0,0 @@
-public class Solution
-{
-    public double findMedianSortedArrays(int A[], int B[])
-    {
-        int len = A.length + B.length;
-
-        if(len % 2 == 1)
-        {
-            return findKth(A, 0, B, 0, len / 2 + 1);
-        }
-        return (findKth(A, 0, B, 0, len / 2) + findKth(A, 0, B, 0, len / 2 + 1)) / 2.0;
-    }
-
-    // find kth number of two sorted array
-    public int findKth(int[] A, int A_start,
-                        int[] B, int B_start,
-                        int k)
-    {
-        if(A_start >= A.length)
-        {
-            return B[B_start + k - 1];
-        }
-        
-        if(B_start >= B.length)
-        {
-            return A[A_start + k - 1];
-        }
-        
-        if(k == 1)
-        {
-            return Math.min(A[A_start], B[B_start]);
-        }
-        
-        
-        int A_key = A_start + k / 2 - 1 < A.length
-                    ? A[A_start + k / 2 - 1]
-                    : Integer.MAX_VALUE;
-        int B_key = B_start + k / 2 - 1 < B.length
-                    ? B[B_start + k / 2 - 1]
-                    : Integer.MAX_VALUE;
-
-        if (A_key < B_key)
-        {
-            return findKth(A, A_start + k / 2, B, B_start, k - k / 2);
-        }
-        else
-        {
-            return findKth(A, A_start, B, B_start + k / 2, k - k / 2);
-        }
-    }
-}
-
diff --git a/40.combination-sum-ii.167500863.Wrong-Answer.leetcode.java b/40.combination-sum-ii.167500863.Wrong-Answer.leetcode.java
deleted file mode 100644
index c2e55b94..00000000
--- ./40.combination-sum-ii.167500863.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum2(int[] num, int target)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (num == null || num.length == 0)
-        {
-            return result;
-        }
-
-        Arrays.sort(num);
-        dfs(num, 0, target, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] num, int start, int target, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        if (target < 0 || start >= num.length)
-        {
-            return;
-        }
-
-        for (int index = start; index < num.length; index++)
-        {
-            if (index + 1 < num.length && num[index] == num[index + 1])
-            {
-                continue;
-            }
-
-            current.add(num[index]);
-            System.out.printf("current --> %s\n", current);
-            dfs(num, index + 1, target - num[index], current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/40.combination-sum-ii.167501035.Time-Limit-Exceeded.leetcode.java b/40.combination-sum-ii.167501035.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 8f1ee713..00000000
--- ./40.combination-sum-ii.167501035.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum2(int[] num, int target)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (num == null || num.length == 0)
-        {
-            return result;
-        }
-
-        Arrays.sort(num);
-        dfs(num, 0, target, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] num, int start, int target, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        if (target < 0 || start >= num.length)
-        {
-            return;
-        }
-
-        for (int index = start; index < num.length; index++)
-        {
-            if (index > start && num[index] == num[index - 1])
-            {
-                continue;
-            }
-
-            current.add(num[index]);
-            System.out.printf("current --> %s\n", current);
-            dfs(num, index + 1, target - num[index], current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/40.combination-sum-ii.167501073.Accepted.leetcode.java b/40.combination-sum-ii.167501073.Accepted.leetcode.java
deleted file mode 100644
index 8d5dd3e1..00000000
--- ./40.combination-sum-ii.167501073.Accepted.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum2(int[] num, int target)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (num == null || num.length == 0)
-        {
-            return result;
-        }
-
-        Arrays.sort(num);
-        dfs(num, 0, target, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] num, int start, int target, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        if (target < 0 || start >= num.length)
-        {
-            return;
-        }
-
-        for (int index = start; index < num.length; index++)
-        {
-            if (index > start && num[index] == num[index - 1])
-            {
-                continue;
-            }
-
-            current.add(num[index]);
-            dfs(num, index + 1, target - num[index], current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/40.combination-sum-ii.167501119.Accepted.leetcode.java b/40.combination-sum-ii.167501119.Accepted.leetcode.java
deleted file mode 100644
index 9090c948..00000000
--- ./40.combination-sum-ii.167501119.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum2(int[] num, int target)
-    {
-        Arrays.sort(num);
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        dfs(num, 0, target, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] num, int start, int target, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        if (target < 0 || start >= num.length)
-        {
-            return;
-        }
-
-        for (int index = start; index < num.length; index++)
-        {
-            if (index > start && num[index] == num[index - 1])
-            {
-                continue;
-            }
-
-            current.add(num[index]);
-            dfs(num, index + 1, target - num[index], current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/40.combination-sum-ii.167501187.Wrong-Answer.leetcode.java b/40.combination-sum-ii.167501187.Wrong-Answer.leetcode.java
deleted file mode 100644
index 1a555ccd..00000000
--- ./40.combination-sum-ii.167501187.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum2(int[] num, int target)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (num == null || num.length == 0)
-        {
-            return result;
-        }
-
-        Arrays.sort(num);
-        dfs(num, 0, target, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] num, int start, int target, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        if (target < 0 || start >= num.length)
-        {
-            return;
-        }
-
-        for (int index = start; index < num.length; index++)
-        {
-            current.add(num[index]);
-            dfs(num, index + 1, target - num[index], current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/40.combination-sum-ii.167501494.Accepted.leetcode.java b/40.combination-sum-ii.167501494.Accepted.leetcode.java
deleted file mode 100644
index 80c8b45c..00000000
--- ./40.combination-sum-ii.167501494.Accepted.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum2(int[] nums, int target)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (nums == null || nums.length == 0)
-        {
-            return result;
-        }
-
-        Arrays.sort(nums);
-        dfs(nums, 0, target, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] nums, int start, int target, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        if (target < 0 || start >= nums.length)
-        {
-            return;
-        }
-
-        for (int index = start; index < nums.length; index++)
-        {
-            if (index > start && nums[index] == nums[index - 1])
-            {
-                continue;
-            }
-
-            current.add(nums[index]);
-            dfs(nums, index + 1, target - nums[index], current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/40.combination-sum-ii.167808638.Accepted.leetcode.java b/40.combination-sum-ii.167808638.Accepted.leetcode.java
deleted file mode 100644
index 3a347ac4..00000000
--- ./40.combination-sum-ii.167808638.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum2(int[] num, int target)
-    {
-        Arrays.sort(num);
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        dfs(num, 0, target, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] num, int start, int target, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        if (target < 0 || start >= num.length)
-        {
-            return;
-        }
-
-        for (int index = start; index < num.length; index++)
-        {
-            if (index - 1 >= start && num[index] == num[index - 1])
-            {
-                continue;
-            }
-
-            current.add(num[index]);
-            dfs(num, index + 1, target - num[index], current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/40.combination-sum-ii.167808892.Accepted.leetcode.java b/40.combination-sum-ii.167808892.Accepted.leetcode.java
deleted file mode 100644
index cad8d531..00000000
--- ./40.combination-sum-ii.167808892.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combinationSum2(int[] nums, int target)
-    {
-        Arrays.sort(nums);
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        dfs(nums, 0, target, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] nums, int start, int target, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (target == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        if (target < 0 || start >= nums.length)
-        {
-            return;
-        }
-
-        for (int index = start; index < nums.length; index++)
-        {
-            if (index - 1 >= start && nums[index] == nums[index - 1])
-            {
-                continue;
-            }
-
-            current.add(nums[index]);
-            dfs(nums, index + 1, target - nums[index], current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/402.remove-k-digits.90547741.Wrong-Answer.leetcode.java b/402.remove-k-digits.90547741.Wrong-Answer.leetcode.java
deleted file mode 100644
index 26087c4f..00000000
--- ./402.remove-k-digits.90547741.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution 
-{
-    public String removeKdigits(String A, int k) 
-    {
-        Stack<Integer> stack = new Stack<Integer>();
-        
-        for (char c : A.toCharArray())
-        {
-            int num = c - '0';
-            
-            while (!stack.isEmpty() && stack.peek() > num && k-- > 0)
-            {
-                stack.pop();
-            }
-            
-            if (stack.size() < A.length() - k)
-            {
-                stack.push(num);    
-            }
-        }
-
-        StringBuilder sb = new StringBuilder();
-        
-        while (!stack.isEmpty())
-        {
-            sb.append(stack.pop());    
-        }
-        
-        System.out.println("sb -->" + sb);
-        
-        while (sb.length() >= 1 && sb.charAt(sb.length() - 1) == '0')
-        {
-            sb.deleteCharAt(sb.length() - 1);    
-        }
-        
-        if (sb.length() == 0)
-        {
-            return "0";
-        }
-        
-        return sb.reverse().toString();
-    }
-}
diff --git a/402.remove-k-digits.90548081.Wrong-Answer.leetcode.java b/402.remove-k-digits.90548081.Wrong-Answer.leetcode.java
deleted file mode 100644
index 482cef3f..00000000
--- ./402.remove-k-digits.90548081.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,46 +0,0 @@
-public class Solution 
-{
-    public String removeKdigits(String A, int k) 
-    {
-        Stack<Integer> stack = new Stack<Integer>();
-        
-        for (char c : A.toCharArray())
-        {
-            int num = c - '0';
-            
-            while (!stack.isEmpty() && stack.peek() > num && k-- > 0)
-            {
-                System.out.println("k 1 -->" + k);
-                stack.pop();
-            }
-            
-            if (stack.size() < A.length() - k)
-            {
-                stack.push(num);    
-                System.out.println("k 2 -->" + k);
-                System.out.println("num -->" + num);
-            }
-        }
-
-        StringBuilder sb = new StringBuilder();
-        
-        while (!stack.isEmpty())
-        {
-            sb.append(stack.pop());    
-        }
-        
-        System.out.println("sb -->" + sb);
-        
-        while (sb.length() >= 1 && sb.charAt(sb.length() - 1) == '0')
-        {
-            sb.deleteCharAt(sb.length() - 1);    
-        }
-        
-        if (sb.length() == 0)
-        {
-            return "0";
-        }
-        
-        return sb.reverse().toString();
-    }
-}
diff --git a/402.remove-k-digits.90548514.Wrong-Answer.leetcode.java b/402.remove-k-digits.90548514.Wrong-Answer.leetcode.java
deleted file mode 100644
index 7f0482b1..00000000
--- ./402.remove-k-digits.90548514.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-public class Solution 
-{
-    public String removeKdigits(String A, int k) 
-    {
-        Stack<Integer> stack = new Stack<Integer>();
-        
-        for (char c : A.toCharArray())
-        {
-            int num = c - '0';
-            
-            while (!stack.isEmpty() && stack.peek() > num && k-- > 0)
-            {
-                System.out.println("k 1 --> " + k);
-                stack.pop();
-            }
-            
-            if (stack.size() < A.length() - k)
-            {
-                System.out.println("stack.size() --> " + stack.size());
-                System.out.println("A.length() - k --> " + (A.length() - k));
-                System.out.println("k 2 --> " + k);
-                System.out.println("num --> " + num);
-                stack.push(num);    
-            }
-        }
-
-        StringBuilder sb = new StringBuilder();
-        
-        while (!stack.isEmpty())
-        {
-            sb.append(stack.pop());    
-        }
-        
-        System.out.println("sb -->" + sb);
-        
-        while (sb.length() >= 1 && sb.charAt(sb.length() - 1) == '0')
-        {
-            sb.deleteCharAt(sb.length() - 1);    
-        }
-        
-        if (sb.length() == 0)
-        {
-            return "0";
-        }
-        
-        return sb.reverse().toString();
-    }
-}
diff --git a/402.remove-k-digits.90548630.Wrong-Answer.leetcode.java b/402.remove-k-digits.90548630.Wrong-Answer.leetcode.java
deleted file mode 100644
index 24f2e62a..00000000
--- ./402.remove-k-digits.90548630.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution 
-{
-    public String removeKdigits(String A, int k) 
-    {
-        Stack<Integer> stack = new Stack<Integer>();
-        
-        for (char c : A.toCharArray())
-        {
-            int num = c - '0';
-            
-            while (!stack.isEmpty() && stack.peek() > num && stack.size() + k > A.length())
-            {
-                stack.pop();
-            }
-            
-            if (stack.size() < A.length() - k)
-            {
-                System.out.println("stack.size() --> " + stack.size());
-                System.out.println("A.length() - k --> " + (A.length() - k));
-                System.out.println("k 2 --> " + k);
-                System.out.println("num --> " + num);
-                stack.push(num);    
-            }
-        }
-
-        StringBuilder sb = new StringBuilder();
-        
-        while (!stack.isEmpty())
-        {
-            sb.append(stack.pop());    
-        }
-        
-        System.out.println("sb -->" + sb);
-        
-        while (sb.length() >= 1 && sb.charAt(sb.length() - 1) == '0')
-        {
-            sb.deleteCharAt(sb.length() - 1);    
-        }
-        
-        if (sb.length() == 0)
-        {
-            return "0";
-        }
-        
-        return sb.reverse().toString();
-    }
-}
diff --git a/402.remove-k-digits.90549600.Wrong-Answer.leetcode.java b/402.remove-k-digits.90549600.Wrong-Answer.leetcode.java
deleted file mode 100644
index 2d907bd2..00000000
--- ./402.remove-k-digits.90549600.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution 
-{
-    public String removeKdigits(String A, int k) 
-    {
-        Stack<Integer> stack = new Stack<Integer>();
-        
-        for (char c : A.toCharArray())
-        {
-            int num = c - '0';
-            
-            while (!stack.isEmpty() && (stack.peek() > num || stack.size() + k > A.length()))
-            {
-                stack.pop();
-            }
-            
-            if (stack.size() + k < A.length())
-            {
-                System.out.println("stack.size() --> " + stack.size());
-                System.out.println("A.length() - k --> " + (A.length() - k));
-                System.out.println("k --> " + k);
-                System.out.println("num --> " + num);
-                stack.push(num);    
-            }
-        }
-
-        StringBuilder sb = new StringBuilder();
-        
-        while (!stack.isEmpty())
-        {
-            sb.append(stack.pop());    
-        }
-        
-        System.out.println("sb -->" + sb);
-        
-        while (sb.length() >= 1 && sb.charAt(sb.length() - 1) == '0')
-        {
-            sb.deleteCharAt(sb.length() - 1);    
-        }
-        
-        if (sb.length() == 0)
-        {
-            return "0";
-        }
-        
-        return sb.reverse().toString();
-    }
-}
diff --git a/402.remove-k-digits.90550305.Time-Limit-Exceeded.leetcode.java b/402.remove-k-digits.90550305.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index d2d884b1..00000000
--- ./402.remove-k-digits.90550305.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution 
-{
-    public String removeKdigits(String A, int k) 
-    {
-        Stack<Integer> stack = new Stack<Integer>();
-        
-        for (int i = 0; i < A.length(); i++)
-        {
-            int num = A.charAt(i) - '0';
-            
-            while (!stack.isEmpty() && stack.peek() > num && stack.size() + A.length() - i > A.length() - k)
-            {
-                stack.pop();
-            }
-            
-            if (stack.size() + k < A.length())
-            {
-                System.out.println("stack.size() --> " + stack.size());
-                System.out.println("A.length() - k --> " + (A.length() - k));
-                System.out.println("k --> " + k);
-                System.out.println("num --> " + num);
-                stack.push(num);    
-            }
-        }
-
-        StringBuilder sb = new StringBuilder();
-        
-        while (!stack.isEmpty())
-        {
-            sb.append(stack.pop());    
-        }
-        
-        System.out.println("sb -->" + sb);
-        
-        while (sb.length() >= 1 && sb.charAt(sb.length() - 1) == '0')
-        {
-            sb.deleteCharAt(sb.length() - 1);    
-        }
-        
-        if (sb.length() == 0)
-        {
-            return "0";
-        }
-        
-        return sb.reverse().toString();
-    }
-}
diff --git a/402.remove-k-digits.90550357.Accepted.leetcode.java b/402.remove-k-digits.90550357.Accepted.leetcode.java
deleted file mode 100644
index 49ead53e..00000000
--- ./402.remove-k-digits.90550357.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution 
-{
-    public String removeKdigits(String A, int k) 
-    {
-        Stack<Integer> stack = new Stack<Integer>();
-        
-        for (int i = 0; i < A.length(); i++)
-        {
-            int num = A.charAt(i) - '0';
-            
-            while (!stack.isEmpty() && stack.peek() > num && stack.size() + A.length() - i > A.length() - k)
-            {
-                stack.pop();
-            }
-            
-            if (stack.size() + k < A.length())
-            {
-                stack.push(num);    
-            }
-        }
-
-        StringBuilder sb = new StringBuilder();
-        
-        while (!stack.isEmpty())
-        {
-            sb.append(stack.pop());    
-        }
-        
-        while (sb.length() >= 1 && sb.charAt(sb.length() - 1) == '0')
-        {
-            sb.deleteCharAt(sb.length() - 1);    
-        }
-        
-        if (sb.length() == 0)
-        {
-            return "0";
-        }
-        
-        return sb.reverse().toString();
-    }
-}
diff --git a/402.remove-k-digits.90550442.Accepted.leetcode.java b/402.remove-k-digits.90550442.Accepted.leetcode.java
deleted file mode 100644
index 80d91281..00000000
--- ./402.remove-k-digits.90550442.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution 
-{
-    public String removeKdigits(String A, int k) 
-    {
-        Stack<Integer> stack = new Stack<Integer>();
-        
-        for (int i = 0; i < A.length(); i++)
-        {
-            int num = A.charAt(i) - '0';
-            
-            while (!stack.isEmpty() && stack.peek() > num && stack.size() + A.length() - i > A.length() - k)
-            {
-                stack.pop();
-            }
-            
-            if (stack.size() < A.length() - k)
-            {
-                stack.push(num);    
-            }
-        }
-
-        StringBuilder sb = new StringBuilder();
-        
-        while (!stack.isEmpty())
-        {
-            sb.append(stack.pop());    
-        }
-        
-        while (sb.length() >= 1 && sb.charAt(sb.length() - 1) == '0')
-        {
-            sb.deleteCharAt(sb.length() - 1);    
-        }
-        
-        if (sb.length() == 0)
-        {
-            return "0";
-        }
-        
-        return sb.reverse().toString();
-    }
-}
diff --git a/404.sum-of-left-leaves.89935473.Wrong-Answer.leetcode.java b/404.sum-of-left-leaves.89935473.Wrong-Answer.leetcode.java
deleted file mode 100644
index 92a09295..00000000
--- ./404.sum-of-left-leaves.89935473.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public int sumOfLeftLeaves(TreeNode root) 
-    {
-        return sumOfLeftLeaves(root, false);
-    }
-    
-    public int sumOfLeftLeaves(TreeNode root, boolean isLeft)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-        
-        int left = sumOfLeftLeaves(root.left, true);
-        int right = sumOfLeftLeaves(root.right, false);
-        
-        if (left == 0 && right == 0 && isLeft)
-        {
-            return root.val;
-        }
-        else
-        {
-            return left + right;
-        }
-    }
-}
diff --git a/404.sum-of-left-leaves.89935787.Accepted.leetcode.java b/404.sum-of-left-leaves.89935787.Accepted.leetcode.java
deleted file mode 100644
index c94ec19c..00000000
--- ./404.sum-of-left-leaves.89935787.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public int sumOfLeftLeaves(TreeNode root) 
-    {
-        return sumOfLeftLeaves(root, false);
-    }
-    
-    public int sumOfLeftLeaves(TreeNode root, boolean isLeft)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-        
-        if (root.left == null && root.right == null && isLeft)
-        {
-            return root.val;
-        }
-        
-        int left = sumOfLeftLeaves(root.left, true);
-        int right = sumOfLeftLeaves(root.right, false);
-        
-        return left + right;
-    }
-}
diff --git a/406.queue-reconstruction-by-height.79321784.Accepted.leetcode.java b/406.queue-reconstruction-by-height.79321784.Accepted.leetcode.java
deleted file mode 100644
index a31a1f61..00000000
--- ./406.queue-reconstruction-by-height.79321784.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution {
-    public int[][] reconstructQueue(int[][] people) {
-        int size = people.length;
-        LinkedList<int[]> list = new LinkedList<int[]>();
-        for (int i = 0; i < size; i++) {
-            list.add(new int[]{people[i][0], people[i][1], 0});
-        }
-        int ans[][] = new int[size][];
-        for (int i = 0; i < size; i++) {
-            Collections.sort(list, new Comparator<int[]>() {
-                public int compare (int[] a, int[] b) {
-                    if (a[1] == b[1])
-                        return a[0] - b[0];
-                    return a[1] - b[1];
-                }
-            });
-            int[] head = list.removeFirst();
-            ans[i] = new int[]{head[0], head[1] + head[2]};
-            for (int[] p : list) {
-                if (p[0] <= head[0]) {
-                    p[1] -= 1;
-                    p[2] += 1;
-                }
-            }
-        }
-        return ans;
-    }
-}
diff --git a/406.queue-reconstruction-by-height.79322310.Accepted.leetcode.java b/406.queue-reconstruction-by-height.79322310.Accepted.leetcode.java
deleted file mode 100644
index 5bf6509a..00000000
--- ./406.queue-reconstruction-by-height.79322310.Accepted.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class Solution 
-{
-    public int[][] reconstructQueue(int[][] people) 
-    {
-        int size = people.length;
-        LinkedList<int[]> list = new LinkedList<int[]>();
-        
-        for (int i = 0; i < size; i++) 
-        {
-            list.add(new int[]{people[i][0], people[i][1], 0});
-        }
-        
-        int ans[][] = new int[size][];
-        for (int i = 0; i < size; i++) 
-        {
-            Collections.sort(list, new Comparator<int[]>() {
-                public int compare (int[] a, int[] b) {
-                    if (a[1] == b[1])
-                        return a[0] - b[0];
-                    return a[1] - b[1];
-                }
-            });
-            int[] head = list.removeFirst();
-            ans[i] = new int[]{head[0], head[1] + head[2]};
-            
-            for (int[] p : list) 
-            {
-                if (p[0] <= head[0]) 
-                {
-                    p[1] -= 1;
-                    p[2] += 1;
-                }
-            }
-        }
-        
-        return ans;
-    }
-}
diff --git a/406.queue-reconstruction-by-height.79322457.Wrong-Answer.leetcode.java b/406.queue-reconstruction-by-height.79322457.Wrong-Answer.leetcode.java
deleted file mode 100644
index 5fef9574..00000000
--- ./406.queue-reconstruction-by-height.79322457.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution 
-{
-    public int[][] reconstructQueue(int[][] people) 
-    {
-        int size = people.length;
-        LinkedList<int[]> list = new LinkedList<int[]>();
-        
-        for (int i = 0; i < size; i++) 
-        {
-            list.add(new int[]{people[i][0], people[i][1], 0});
-        }
-        
-        int ans[][] = new int[size][];
-        for (int i = 0; i < size; i++) 
-        {
-            Collections.sort(list, new Comparator<int[]>() {
-                public int compare (int[] a, int[] b) {
-                    if (a[1] == b[1])
-                        return a[0] - b[0];
-                    return a[1] - b[1];
-                }
-            });
-            int[] head = list.removeFirst();
-            ans[i] = new int[]{head[0], head[1] + head[2]};
-            
-            
-        }
-        
-        return ans;
-    }
-}
diff --git a/406.queue-reconstruction-by-height.79349690.Accepted.leetcode.java b/406.queue-reconstruction-by-height.79349690.Accepted.leetcode.java
deleted file mode 100644
index 5f5b475c..00000000
--- ./406.queue-reconstruction-by-height.79349690.Accepted.leetcode.java
+++ /dev/null
@@ -1,40 +0,0 @@
-public class Solution 
-{
-    public int[][] reconstructQueue(int[][] people) 
-    {
-        int size = people.length;
-        LinkedList<int[]> list = new LinkedList<int[]>();
-        
-        for (int i = 0; i < size; i++) 
-        {
-            list.add(new int[]{people[i][0], people[i][1], people[i][1]});
-        }
-        
-        int ans[][] = new int[size][];
-        for (int i = 0; i < size; i++) 
-        {
-            Collections.sort(list, new Comparator<int[]>() 
-            {
-                public int compare (int[] a, int[] b) 
-                {
-                    if (a[1] == b[1])
-                        return a[0] - b[0];
-                    return a[1] - b[1];
-                }
-            });
-            
-            int[] head = list.removeFirst();
-            ans[i] = new int[]{head[0], head[2]};
-            
-            for (int[] p : list) 
-            {
-                if (p[0] <= head[0]) 
-                {
-                    p[1] -= 1;
-                }
-            }
-        }
-        
-        return ans;
-    }
-}
diff --git a/409.longest-palindrome.102608957.Accepted.leetcode.java b/409.longest-palindrome.102608957.Accepted.leetcode.java
deleted file mode 100644
index e7312f58..00000000
--- ./409.longest-palindrome.102608957.Accepted.leetcode.java
+++ /dev/null
@@ -1,17 +0,0 @@
-public class Solution {
-    public int longestPalindrome(String s) {
-        if(s==null || s.length()==0) return 0;
-        HashSet<Character> hs = new HashSet<Character>();
-        int count = 0;
-        for(int i=0; i<s.length(); i++){
-            if(hs.contains(s.charAt(i))){
-                hs.remove(s.charAt(i));
-                count++;
-            }else{
-                hs.add(s.charAt(i));
-            }
-        }
-        if(!hs.isEmpty()) return count*2+1;
-        return count*2;
-}
-}
diff --git a/409.longest-palindrome.102609020.Accepted.leetcode.java b/409.longest-palindrome.102609020.Accepted.leetcode.java
deleted file mode 100644
index a807bad7..00000000
--- ./409.longest-palindrome.102609020.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public int longestPalindrome(String s)
-    {
-        if (s == null || s.length() == 0)
-        {
-            return 0;
-        }
-
-        HashSet<Character> hs = new HashSet<Character>();
-        int count = 0;
-
-        for (int i = 0; i < s.length(); i++)
-        {
-            if (hs.contains(s.charAt(i)))
-            {
-                hs.remove(s.charAt(i));
-                count++;
-            }
-            else
-            {
-                hs.add(s.charAt(i));
-            }
-        }
-
-        if (!hs.isEmpty())
-        {
-            return count * 2 + 1;
-        }
-
-        return count * 2;
-    }
-}
diff --git a/409.longest-palindrome.102609059.Wrong-Answer.leetcode.java b/409.longest-palindrome.102609059.Wrong-Answer.leetcode.java
deleted file mode 100644
index e82ffc72..00000000
--- ./409.longest-palindrome.102609059.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int longestPalindrome(String s)
-    {
-        if (s == null || s.length() == 0)
-        {
-            return 0;
-        }
-
-        HashSet<Character> hs = new HashSet<Character>();
-        int count = 0;
-
-        for (int i = 0; i < s.length(); i++)
-        {
-            if (hs.contains(s.charAt(i)))
-            {
-                hs.remove(s.charAt(i));
-                count++;
-            }
-            else
-            {
-                hs.add(s.charAt(i));
-            }
-        }
-
- 
-        return count * 2;
-    }
-}
diff --git a/409.longest-palindrome.102609084.Wrong-Answer.leetcode.java b/409.longest-palindrome.102609084.Wrong-Answer.leetcode.java
deleted file mode 100644
index c9acb814..00000000
--- ./409.longest-palindrome.102609084.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public int longestPalindrome(String s)
-    {
-        if (s == null || s.length() == 0)
-        {
-            return 0;
-        }
-
-        HashSet<Character> hs = new HashSet<Character>();
-        int count = 0;
-
-        for (int i = 0; i < s.length(); i++)
-        {
-            if (hs.contains(s.charAt(i)))
-            {
-                hs.remove(s.charAt(i));
-            }
-            else
-            {
-                hs.add(s.charAt(i));
-            }
-        }
-
-        if (!hs.isEmpty())
-        {
-            return count * 2 + 1;
-        }
-
-        return count * 2;
-    }
-}
diff --git a/409.longest-palindrome.102609115.Wrong-Answer.leetcode.java b/409.longest-palindrome.102609115.Wrong-Answer.leetcode.java
deleted file mode 100644
index 29ef41db..00000000
--- ./409.longest-palindrome.102609115.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int longestPalindrome(String s)
-    {
-        if (s == null || s.length() == 0)
-        {
-            return 0;
-        }
-
-        HashSet<Character> hs = new HashSet<Character>();
-        int count = 0;
-
-        for (int i = 0; i < s.length(); i++)
-        {
-            if (hs.contains(s.charAt(i)))
-            {
-                hs.remove(s.charAt(i));
-                count++;
-            }
-        }
-
-        if (!hs.isEmpty())
-        {
-            return count * 2 + 1;
-        }
-
-        return count * 2;
-    }
-}
diff --git a/41.first-missing-positive.24621183.Accepted.leetcode.java b/41.first-missing-positive.24621183.Accepted.leetcode.java
deleted file mode 100644
index a617c657..00000000
--- ./41.first-missing-positive.24621183.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-  public class Solution {
-    public int firstMissingPositive(int[] A) {
-      int n = A.length;
-      int i = 0;
-
-      while (i < n) {
-        if (A[i] > 0 && A[i] <= n && A[i] - 1 != i && A[A[i] - 1] != A[i]) {
-          int temp = A[A[i] - 1];
-          A[A[i] - 1] = A[i];
-          A[i] = temp;
-        }
-        else {
-          i++;
-        }
-      }
-
-      for (i = 0; i < n; i++) {
-        if (A[i] != i + 1) {
-          return i + 1;
-        }
-      }
-
-      return n + 1;
-    }
-  }
-
diff --git a/41.first-missing-positive.35495998.Accepted.leetcode.java b/41.first-missing-positive.35495998.Accepted.leetcode.java
deleted file mode 100644
index eaba87b9..00000000
--- ./41.first-missing-positive.35495998.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-  public class Solution
-  {
-    public int firstMissingPositive(int[] A)
-    {
-      int n = A.length;
-
-      for (int i = 0; i < n ;)
-      {
-        if (A[i] > 0 && A[i] <= n && A[i] - 1 != i && A[A[i] - 1] != A[i])
-        {
-          int temp = A[A[i] - 1];
-          A[A[i] - 1] = A[i];
-          A[i] = temp;
-        }
-        else
-        {
-          i++;
-        }
-      }
-
-      for (int i = 0; i < n; i++)
-      {
-        if (A[i] != i + 1)
-        {
-          return i + 1;
-        }
-      }
-
-      return n + 1;
-    }
-  }
-
diff --git a/41.first-missing-positive.9807584.Accepted.leetcode.java b/41.first-missing-positive.9807584.Accepted.leetcode.java
deleted file mode 100644
index d4348847..00000000
--- ./41.first-missing-positive.9807584.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-	public class Solution {
-		public int firstMissingPositive(int[] A) {
-			int n = A.length;
-
-			int i = 0;
-			while (i < n) {
-				if (A[i] > 0 && A[i] <= n && A[i] - 1 != i && A[A[i] - 1] != A[i]) {
-					int temp = A[A[i] - 1];
-					A[A[i] - 1] = A[i];
-					A[i] = temp;
-				}
-				else
-					i++;
-			}
-			for (i = 0; i < n; i++) {
-				if (A[i] != i + 1)
-					return i + 1;
-			}
-			return n + 1;
-		}
-	}
-
diff --git a/413.arithmetic-slices.79350137.Accepted.leetcode.java b/413.arithmetic-slices.79350137.Accepted.leetcode.java
deleted file mode 100644
index b430bf6d..00000000
--- ./413.arithmetic-slices.79350137.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution 
-{
-    public int numberOfArithmeticSlices(int[] A) 
-    {
-        if (A == null || A.length < 3)
-        {
-            return 0;    
-        }
-        
-        int[] dp = new int[A.length];
-        int ans = 0;
-        
-        for (int i = 2; i < A.length; i++) 
-        {
-            if (A[i] - A[i - 1] == A[i - 1] - A[i - 2]) 
-            {
-                dp[i] = dp[i - 1] + 1;
-            }
-        
-            ans += dp[i];
-        }
-    
-        return ans;
-    }
-}
diff --git a/413.arithmetic-slices.79350658.Accepted.leetcode.java b/413.arithmetic-slices.79350658.Accepted.leetcode.java
deleted file mode 100644
index dea4c399..00000000
--- ./413.arithmetic-slices.79350658.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution 
-{
-    public int numberOfArithmeticSlices(int[] A) 
-    {
-        if (A == null || A.length < 3)
-        {
-            return 0;    
-        }
-        
-        //dp[i] means the number of arithmetic slices ends with A[i]
-        int[] dp = new int[A.length];
-        int ans = 0;
-        
-        for (int i = 2; i < A.length; i++) 
-        {
-            if (A[i] - A[i - 1] == A[i - 1] - A[i - 2]) 
-            {
-                dp[i] = dp[i - 1] + 1;
-            }
-        
-            ans += dp[i];
-        }
-    
-        return ans;
-    }
-}
diff --git a/415.add-strings.149764884.Accepted.leetcode.java b/415.add-strings.149764884.Accepted.leetcode.java
deleted file mode 100644
index 18c2a757..00000000
--- ./415.add-strings.149764884.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public String addStrings(String num1, String num2)
-    {
-        int i = num1.length() - 1, j = num2.length() - 1, carry = 0;
-        String res = "";
-
-        while (i >= 0 || j >= 0)
-        {
-            if (i >= 0)
-            {
-                carry += num1.charAt(i) - '0';
-            }
-
-            if (j >= 0)
-            {
-                carry += num2.charAt(j) - '0';
-            }
-
-            res = Integer.toString(carry % 10) + res;
-            carry /= 10;
-            i--;
-            j--;
-        }
-
-        return carry != 0 ? "1" + res : res;
-    }
-}
-
-
diff --git a/415.add-strings.149765062.Wrong-Answer.leetcode.java b/415.add-strings.149765062.Wrong-Answer.leetcode.java
deleted file mode 100644
index c76c90f9..00000000
--- ./415.add-strings.149765062.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public String addStrings(String num1, String num2)
-    {
-        int i = num1.length() - 1, j = num2.length() - 1, carry = 0;
-        String res = "";
-
-        while (i >= 0 || j >= 0)
-        {
-            if (i >= 0)
-            {
-                carry = num1.charAt(i) - '0';
-            }
-
-            if (j >= 0)
-            {
-                carry += num2.charAt(j) - '0';
-            }
-
-            res = Integer.toString(carry % 10) + res;
-            carry /= 10;
-            i--;
-            j--;
-        }
-
-        return carry != 0 ? "1" + res : res;
-    }
-}
-
diff --git a/415.add-strings.97998099.Accepted.leetcode.java b/415.add-strings.97998099.Accepted.leetcode.java
deleted file mode 100644
index 14370360..00000000
--- ./415.add-strings.97998099.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public String addStrings(String num1, String num2)
-    {
-        int i = num1.length() - 1, j = num2.length() - 1, carry = 0;
-        String res = "";
-
-        while (i >= 0 || j >= 0)
-        {
-            if (i >= 0)
-            {
-                carry += num1.charAt(i--) - '0';
-            }
-
-            if (j >= 0)
-            {
-                carry += num2.charAt(j--) - '0';
-            }
-
-            res = Integer.toString(carry % 10) + res;
-            carry /= 10;
-        }
-
-        return carry != 0 ? "1" + res : res;
-    }
-}
diff --git a/415.add-strings.97998289.Wrong-Answer.leetcode.java b/415.add-strings.97998289.Wrong-Answer.leetcode.java
deleted file mode 100644
index 53487788..00000000
--- ./415.add-strings.97998289.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public String addStrings(String num1, String num2)
-    {
-        int i = num1.length() - 1, j = num2.length() - 1, carry = 0;
-        String res = "";
-
-        while (i >= 0 && j >= 0)
-        {
-            if (i >= 0)
-            {
-                carry += num1.charAt(i--) - '0';
-            }
-
-            if (j >= 0)
-            {
-                carry += num2.charAt(j--) - '0';
-            }
-
-            res = Integer.toString(carry % 10) + res;
-            carry /= 10;
-        }
-
-        return carry != 0 ? "1" + res : res;
-    }
-}
diff --git a/415.add-strings.97998342.Runtime-Error.leetcode.java b/415.add-strings.97998342.Runtime-Error.leetcode.java
deleted file mode 100644
index 37f4ca66..00000000
--- ./415.add-strings.97998342.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-public class Solution
-{
-    public String addStrings(String num1, String num2)
-    {
-        int i = num1.length() - 1, j = num2.length() - 1, carry = 0;
-        String res = "";
-
-        while (i >= 0 || j >= 0)
-        {
-            carry += num1.charAt(i--) - '0';
-            carry += num2.charAt(j--) - '0';
-            res = Integer.toString(carry % 10) + res;
-            carry /= 10;
-        }
-
-        return carry != 0 ? "1" + res : res;
-    }
-}
diff --git a/415.add-strings.97998387.Accepted.leetcode.java b/415.add-strings.97998387.Accepted.leetcode.java
deleted file mode 100644
index 5b2e664e..00000000
--- ./415.add-strings.97998387.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public String addStrings(String num1, String num2)
-    {
-        int i = num1.length() - 1, j = num2.length() - 1, carry = 0;
-        String res = "";
-
-        while (i >= 0 || j >= 0)
-        {
-            if (i >= 0)
-            {
-                carry += num1.charAt(i) - '0';
-            }
-
-            if (j >= 0)
-            {
-                carry += num2.charAt(j) - '0';
-            }
-
-            res = Integer.toString(carry % 10) + res;
-            carry /= 10;
-            i--;
-            j--;
-        }
-
-        return carry != 0 ? "1" + res : res;
-    }
-}
-
diff --git a/42.trapping-rain-water.102369149.Wrong-Answer.leetcode.java b/42.trapping-rain-water.102369149.Wrong-Answer.leetcode.java
deleted file mode 100644
index fee1004b..00000000
--- ./42.trapping-rain-water.102369149.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int trap(int[] heights) 
-    {
-        if (heights == null || heights.length == 0)
-        {
-            return 0;   
-        }
-        
-        int[] leftMax = new int[heights.length];
-        leftMax[0] = heights[0];
-        
-        for (int i = 1; i < heights.length; i++) 
-        {
-            leftMax[i] = Math.max(leftMax[i - 1], heights[i - 1]);
-        }
-        
-        int rightMax = heights[heights.length - 1], result = 0;
-        
-        for (int i = heights.length - 2; i - 1 >= 0; i--) 
-        {
-            rightMax = Math.max(rightMax, heights[i - 1]);
-            result += Math.max(Math.min(rightMax, leftMax[i]) - heights[i], 0);
-        }
-        
-        return result;
-    }
-}
diff --git a/42.trapping-rain-water.102369306.Accepted.leetcode.java b/42.trapping-rain-water.102369306.Accepted.leetcode.java
deleted file mode 100644
index 5f86c87a..00000000
--- ./42.trapping-rain-water.102369306.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int trap(int[] heights) 
-    {
-        if (heights == null || heights.length == 0)
-        {
-            return 0;   
-        }
-        
-        int[] leftMax = new int[heights.length];
-        leftMax[0] = heights[0];
-        
-        for (int i = 1; i < heights.length; i++) 
-        {
-            leftMax[i] = Math.max(leftMax[i - 1], heights[i - 1]);
-        }
-        
-        int rightMax = heights[heights.length - 1], result = 0;
-        
-        for (int i = heights.length - 2; i >= 0; i--) 
-        {
-            rightMax = Math.max(rightMax, heights[i + 1]);
-            result += Math.max(Math.min(rightMax, leftMax[i]) - heights[i], 0);
-        }
-        
-        return result;
-    }
-}
diff --git a/42.trapping-rain-water.102369385.Runtime-Error.leetcode.java b/42.trapping-rain-water.102369385.Runtime-Error.leetcode.java
deleted file mode 100644
index 0a9688c6..00000000
--- ./42.trapping-rain-water.102369385.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public int trap(int[] heights) 
-    {
-        int[] leftMax = new int[heights.length];
-        leftMax[0] = heights[0];
-        
-        for (int i = 1; i < heights.length; i++) 
-        {
-            leftMax[i] = Math.max(leftMax[i - 1], heights[i - 1]);
-        }
-        
-        int rightMax = heights[heights.length - 1], result = 0;
-        
-        for (int i = heights.length - 2; i >= 0; i--) 
-        {
-            rightMax = Math.max(rightMax, heights[i + 1]);
-            result += Math.max(Math.min(rightMax, leftMax[i]) - heights[i], 0);
-        }
-        
-        return result;
-    }
-}
diff --git a/42.trapping-rain-water.102369494.Accepted.leetcode.java b/42.trapping-rain-water.102369494.Accepted.leetcode.java
deleted file mode 100644
index 38df080d..00000000
--- ./42.trapping-rain-water.102369494.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int trap(int[] heights) 
-    {
-        if (heights == null || heights.length == 0)
-        {
-            return 0;
-        }
-        
-        int[] leftMax = new int[heights.length];
-        leftMax[0] = heights[0];
-        
-        for (int i = 1; i < heights.length; i++) 
-        {
-            leftMax[i] = Math.max(leftMax[i - 1], heights[i - 1]);
-        }
-        
-        int rightMax = heights[heights.length - 1], result = 0;
-        
-        for (int i = heights.length - 2; i >= 0; i--) 
-        {
-            rightMax = Math.max(rightMax, heights[i + 1]);
-            result += Math.max(Math.min(rightMax, leftMax[i]) - heights[i], 0);
-        }
-        
-        return result;
-    }
-}
diff --git a/42.trapping-rain-water.102369620.Accepted.leetcode.java b/42.trapping-rain-water.102369620.Accepted.leetcode.java
deleted file mode 100644
index 22cddd87..00000000
--- ./42.trapping-rain-water.102369620.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public int trap(int[] heights) 
-    {
-        if (heights == null || heights.length == 0)
-        {
-            return 0;
-        }
-        
-        int[] leftMax = new int[heights.length];
-        leftMax[0] = heights[0];
-        
-        for (int i = 1; i < heights.length; i++) 
-        {
-            leftMax[i] = Math.max(leftMax[i - 1], heights[i - 1]);
-        }
-        
-        int rightMax = heights[heights.length - 1], result = 0;
-        
-        for (int i = heights.length - 2; i >= 0; i--) 
-        {
-            rightMax = Math.max(rightMax, heights[i + 1]);
-            result += Math.min(rightMax, leftMax[i]) > heights[i]
-                    ? Math.min(rightMax, leftMax[i]) - heights[i]
-                    : 0;
-        }
-        
-        return result;
-    }
-}
diff --git a/42.trapping-rain-water.158076096.Accepted.leetcode.java b/42.trapping-rain-water.158076096.Accepted.leetcode.java
deleted file mode 100644
index 59577954..00000000
--- ./42.trapping-rain-water.158076096.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int trap(int[] heights)
-    {
-        if (heights.length == 0)
-        {
-            return 0;
-        }
-
-        int[] leftMax = new int[heights.length];
-        leftMax[0] = heights[0];
-
-        for (int i = 1; i < heights.length; i++)
-        {
-            leftMax[i] = Math.max(leftMax[i - 1], heights[i - 1]);
-        }
-
-        int rightMax = heights[heights.length - 1], area = 0;
-
-        for (int i = heights.length - 1; i >= 0; i--)
-        {
-            rightMax = Math.max(rightMax, heights[i]);
-            area += Math.max(Math.min(rightMax, leftMax[i]) - heights[i], 0);
-        }
-
-        return area;
-    }
-}
-
diff --git a/42.trapping-rain-water.158076320.Accepted.leetcode.java b/42.trapping-rain-water.158076320.Accepted.leetcode.java
deleted file mode 100644
index b1c66a04..00000000
--- ./42.trapping-rain-water.158076320.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int trap(int[] heights)
-    {
-        if (heights.length == 0)
-        {
-            return 0;
-        }
-
-        int[] leftMax = new int[heights.length];
-        leftMax[0] = heights[0];
-
-        for (int i = 1; i < heights.length; i++)
-        {
-            leftMax[i] = Math.max(leftMax[i - 1], heights[i - 1]);
-        }
-
-        int rightMax = heights[heights.length - 1], area = 0;
-
-        for (int i = heights.length - 2; i >= 0; i--)
-        {
-            rightMax = Math.max(rightMax, heights[i]);
-            area += Math.max(Math.min(rightMax, leftMax[i]) - heights[i], 0);
-        }
-
-        return area;
-    }
-}
-
diff --git a/42.trapping-rain-water.158076389.Runtime-Error.leetcode.java b/42.trapping-rain-water.158076389.Runtime-Error.leetcode.java
deleted file mode 100644
index b4ff1327..00000000
--- ./42.trapping-rain-water.158076389.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution
-{
-    public int trap(int[] heights)
-    {
-        int[] leftMax = new int[heights.length];
-        leftMax[0] = heights[0];
-
-        for (int i = 1; i < heights.length; i++)
-        {
-            leftMax[i] = Math.max(leftMax[i - 1], heights[i - 1]);
-        }
-
-        int rightMax = heights[heights.length - 1], area = 0;
-
-        for (int i = heights.length - 2; i >= 0; i--)
-        {
-            rightMax = Math.max(rightMax, heights[i]);
-            area += Math.max(Math.min(rightMax, leftMax[i]) - heights[i], 0);
-        }
-
-        return area;
-    }
-}
-
diff --git a/42.trapping-rain-water.158076700.Accepted.leetcode.java b/42.trapping-rain-water.158076700.Accepted.leetcode.java
deleted file mode 100644
index b2e951e7..00000000
--- ./42.trapping-rain-water.158076700.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int trap(int[] heights)
-    {
-        if (heights.length == 0)
-        {
-            return 0;
-        }
-
-        int[] leftMax = new int[heights.length];
-        leftMax[0] = heights[0];
-
-        for (int i = 1; i < heights.length; i++)
-        {
-            leftMax[i] = Math.max(leftMax[i - 1], heights[i - 1]);
-        }
-
-        int max = 0, area = 0;
-
-        for (int i = heights.length - 1; i >= 0; i--)
-        {
-            area += Math.max(Math.min(max, leftMax[i]) - heights[i], 0);
-            max = Math.max(max, heights[i]);
-        }
-
-        return area;
-    }
-}
-
diff --git a/420.strong-password-checker.79364076.Wrong-Answer.leetcode.java b/420.strong-password-checker.79364076.Wrong-Answer.leetcode.java
deleted file mode 100644
index 14d5dac0..00000000
--- ./420.strong-password-checker.79364076.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,87 +0,0 @@
-public class Solution {
-
-    public int strongPasswordChecker(String s) {
-        int sLen = s.length();
-        if (sLen < 4) {
-            return 6 - sLen;
-        }
-
-        int lnum = 1; // need lower
-        int unum = 1; // need upper
-        int dnum = 1; // need digit
-
-        int rcount = 0;  // count need to replace repeated seq
-        int ricount = 0; // count need to add in repeated seq
-        int rdcount = 0; // count need to remove from repeated seq
-        int sameseq = 0; // count of chars in repeated seq
-
-        for (int i=0; i<sLen; i++) {
-            char ch = s.charAt(i);
-            if (ch>='a' && ch<='z') {
-                lnum = 0;
-            }
-            if (ch>='A' && ch<='Z') {
-                unum = 0;
-            }
-            if (ch>='0' && ch<='9') {
-                dnum = 0;
-            }
-
-            // check repeated seq
-            if (i == 0) {
-                sameseq = 1;
-            }
-            else if (ch != s.charAt(i-1)) {
-                if (sameseq >= 3) {
-                    // if shorter length, add char into repeated seq
-                    while (sLen + ricount < 6 && sameseq >= 3) {
-                        ricount++;
-                        sameseq -= 2;
-                    }
-                    // if longer length, remove char from repeated seq
-                    while (sLen - rdcount > 20 && sameseq >= 3) {
-                        rdcount++;
-                        sameseq --;
-                    }
-                    // if length matches, replace char in repeated seq
-                    rcount += sameseq / 3;
-                }
-                sameseq = 1;
-            }
-            else {
-                sameseq++;
-            }
-        }
-
-        // need check repeated seq after loop
-        if (sameseq >= 3) {
-            // as previous process
-            while (sLen + ricount < 6 && sameseq >= 3) {
-                ricount++;
-                sameseq -= 2;
-            }
-            while (sLen - rdcount > 20 && sameseq >= 3) {
-                rdcount++;
-                sameseq --;
-            }
-            rcount += sameseq / 3;
-        }
-
-        int update = lnum + unum + dnum;
-        int must = ricount + rcount;
-        if (sLen + ricount < 6) {
-            must += 6 - sLen - ricount;
-        }
-        if (sLen < 20) {
-            return must > update ? must : update;
-        }
-
-        // if longer length, use below process
-        if (sLen - rdcount > 20) {
-            rdcount += sLen - rdcount - 20;
-        }
-        return rcount >= update ? rcount + rdcount : update + rdcount;
-
-    }
-    
-}
diff --git a/43.multiply-strings.102708133.Wrong-Answer.leetcode.java b/43.multiply-strings.102708133.Wrong-Answer.leetcode.java
deleted file mode 100644
index 406a264b..00000000
--- ./43.multiply-strings.102708133.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution
-{
-    public String multiply(String num1, String num2)
-    {
-        String n1 = new StringBuilder(num1).reverse().toString();
-        String n2 = new StringBuilder(num2).reverse().toString();
-        int[] d = new int[n1.length() + n2.length()];
-
-        for (int i = 0; i < n1.length(); i++)
-        {
-            for (int j = 0; j < n2.length(); j++)
-            {
-                d[i + j] += (n1.charAt(i) - '0') * (n2.charAt(j) - '0');
-            }
-        }
-
-        StringBuilder sb = new StringBuilder();
-
-        for (int i = 0; i < d.length; i++)
-        {
-            int digit = d[i] % 10;
-            int carry = d[i] / 10;
-
-            if (i + 1 < d.length)
-            {
-                d[i + 1] += carry;
-            }
-
-            sb.append(digit);
-        }
-
-        while (sb.length() > 0 && sb.charAt(sb.length() - 1) == '0')
-        {
-            sb.deleteCharAt(sb.length() - 1);
-        }
-
-        return sb.reverse().toString();
-    }
-}
diff --git a/43.multiply-strings.102708427.Accepted.leetcode.java b/43.multiply-strings.102708427.Accepted.leetcode.java
deleted file mode 100644
index cd94bd12..00000000
--- ./43.multiply-strings.102708427.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution
-{
-    public String multiply(String num1, String num2)
-    {
-        String n1 = new StringBuilder(num1).reverse().toString();
-        String n2 = new StringBuilder(num2).reverse().toString();
-        int[] d = new int[n1.length() + n2.length()];
-
-        for (int i = 0; i < n1.length(); i++)
-        {
-            for (int j = 0; j < n2.length(); j++)
-            {
-                d[i + j] += (n1.charAt(i) - '0') * (n2.charAt(j) - '0');
-            }
-        }
-
-        StringBuilder sb = new StringBuilder();
-
-        for (int i = 0; i < d.length; i++)
-        {
-            int digit = d[i] % 10;
-            int carry = d[i] / 10;
-
-            if (i + 1 < d.length)
-            {
-                d[i + 1] += carry;
-            }
-
-            sb.append(digit);
-        }
-
-        while (sb.length() > 1 && sb.charAt(sb.length() - 1) == '0')
-        {
-            sb.deleteCharAt(sb.length() - 1);
-        }
-
-        return sb.reverse().toString();
-    }
-}
diff --git a/43.multiply-strings.102708521.Runtime-Error.leetcode.java b/43.multiply-strings.102708521.Runtime-Error.leetcode.java
deleted file mode 100644
index 963d415e..00000000
--- ./43.multiply-strings.102708521.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution
-{
-    public String multiply(String num1, String num2)
-    {
-        String n1 = new StringBuilder(num1).reverse().toString();
-        String n2 = new StringBuilder(num2).reverse().toString();
-        int[] d = new int[n1.length() + n2.length()];
-
-        for (int i = 0; i < n1.length(); i++)
-        {
-            for (int j = 0; j < n2.length(); j++)
-            {
-                d[i + j] += (n1.charAt(i) - '0') * (n2.charAt(j) - '0');
-            }
-        }
-
-        StringBuilder sb = new StringBuilder();
-
-        for (int i = 0; i < d.length; i++)
-        {
-            int digit = d[i] % 10;
-            int carry = d[i] / 10;
-
-            if (i + 1 < d.length)
-            {
-                d[i + 1] += carry;
-            }
-
-            sb.append(digit);
-        }
-
-        while (sb.charAt(sb.length() - 1) == '0')
-        {
-            sb.deleteCharAt(sb.length() - 1);
-        }
-
-        return sb.reverse().toString();
-    }
-}
diff --git a/43.multiply-strings.102708611.Wrong-Answer.leetcode.java b/43.multiply-strings.102708611.Wrong-Answer.leetcode.java
deleted file mode 100644
index 07b6d6c5..00000000
--- ./43.multiply-strings.102708611.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution
-{
-    public String multiply(String num1, String num2)
-    {
-        String n1 = new StringBuilder(num1).reverse().toString();
-        String n2 = new StringBuilder(num2).reverse().toString();
-        int[] d = new int[n1.length() + n2.length()];
-
-        for (int i = 0; i < n1.length(); i++)
-        {
-            for (int j = 0; j < n2.length(); j++)
-            {
-                d[i + j] += (n1.charAt(i) - '0') * (n2.charAt(j) - '0');
-            }
-        }
-
-        StringBuilder sb = new StringBuilder();
-
-        for (int i = 0; i < d.length; i++)
-        {
-            int digit = d[i] % 10;
-            int carry = d[i] / 10;
-
-
-            sb.append(digit);
-        }
-
-        while (sb.length() > 1 && sb.charAt(sb.length() - 1) == '0')
-        {
-            sb.deleteCharAt(sb.length() - 1);
-        }
-
-        return sb.reverse().toString();
-    }
-}
diff --git a/43.multiply-strings.102708654.Runtime-Error.leetcode.java b/43.multiply-strings.102708654.Runtime-Error.leetcode.java
deleted file mode 100644
index 5be28ede..00000000
--- ./43.multiply-strings.102708654.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    public String multiply(String num1, String num2)
-    {
-        String n1 = new StringBuilder(num1).reverse().toString();
-        String n2 = new StringBuilder(num2).reverse().toString();
-        int[] d = new int[n1.length() + n2.length()];
-
-        for (int i = 0; i < n1.length(); i++)
-        {
-            for (int j = 0; j < n2.length(); j++)
-            {
-                d[i + j] += (n1.charAt(i) - '0') * (n2.charAt(j) - '0');
-            }
-        }
-
-        StringBuilder sb = new StringBuilder();
-
-        for (int i = 0; i < d.length; i++)
-        {
-            int digit = d[i] % 10;
-            int carry = d[i] / 10;
-            d[i + 1] += carry;
-            sb.append(digit);
-        }
-
-        while (sb.length() > 1 && sb.charAt(sb.length() - 1) == '0')
-        {
-            sb.deleteCharAt(sb.length() - 1);
-        }
-
-        return sb.reverse().toString();
-    }
-}
diff --git a/43.multiply-strings.86839455.Wrong-Answer.leetcode.java b/43.multiply-strings.86839455.Wrong-Answer.leetcode.java
deleted file mode 100644
index e98246c6..00000000
--- ./43.multiply-strings.86839455.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution
-{
-    public String multiply(String num1, String num2)
-    {
-        String n1 = new StringBuilder(num1).reverse().toString();
-        String n2 = new StringBuilder(num2).reverse().toString();
-        int[] d = new int[n1.length() + n2.length()];
-
-        for (int i = 0; i < n1.length(); i++)
-        {
-            for (int j = 0; j < n2.length(); j++)
-            {
-                d[i + j] += (n1.charAt(i) - '0') * (n2.charAt(j) - '0');
-            }
-        }
-
-        StringBuilder sb = new StringBuilder();
-
-        for (int i = 0; i < d.length; i++)
-        {
-            int digit = d[i] % 10;
-            int carry = d[i] / 10;
-
-            if (i + 1 < d.length)
-            {
-                d[i + 1] += carry;
-            }
-
-            sb.append(digit);
-        }
-        
-        while (sb.length() > 0 && sb.charAt(sb.length() - 1) == '0')
-        {
-            sb.deleteCharAt(sb.length() - 1);
-        }
-
-        return sb.reverse().toString();
-    }
-}
diff --git a/43.multiply-strings.86839524.Accepted.leetcode.java b/43.multiply-strings.86839524.Accepted.leetcode.java
deleted file mode 100644
index f77a3b45..00000000
--- ./43.multiply-strings.86839524.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution
-{
-    public String multiply(String num1, String num2)
-    {
-        String n1 = new StringBuilder(num1).reverse().toString();
-        String n2 = new StringBuilder(num2).reverse().toString();
-        int[] d = new int[n1.length() + n2.length()];
-
-        for (int i = 0; i < n1.length(); i++)
-        {
-            for (int j = 0; j < n2.length(); j++)
-            {
-                d[i + j] += (n1.charAt(i) - '0') * (n2.charAt(j) - '0');
-            }
-        }
-
-        StringBuilder sb = new StringBuilder();
-
-        for (int i = 0; i < d.length; i++)
-        {
-            int digit = d[i] % 10;
-            int carry = d[i] / 10;
-
-            if (i + 1 < d.length)
-            {
-                d[i + 1] += carry;
-            }
-
-            sb.append(digit);
-        }
-        
-        while (sb.length() > 1 && sb.charAt(sb.length() - 1) == '0')
-        {
-            sb.deleteCharAt(sb.length() - 1);
-        }
-
-        return sb.reverse().toString();
-    }
-}
diff --git a/43.multiply-strings.86947075.Accepted.leetcode.java b/43.multiply-strings.86947075.Accepted.leetcode.java
deleted file mode 100644
index 24aaff09..00000000
--- ./43.multiply-strings.86947075.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public String multiply(String num1, String num2)
-    {
-        String n1 = new StringBuilder(num1).reverse().toString();
-        String n2 = new StringBuilder(num2).reverse().toString();
-        int[] d = new int[n1.length() + n2.length()];
-
-        for (int i = 0; i < n1.length(); i++)
-        {
-            for (int j = 0; j < n2.length(); j++)
-            {
-                d[i + j] += (n1.charAt(i) - '0') * (n2.charAt(j) - '0');
-            }
-        }
-
-        StringBuilder sb = new StringBuilder();
-
-        for (int i = 0; i < d.length; i++)
-        {
-            int digit = d[i] % 10;
-            sb.append(digit);
-            
-            if (i + 1 < d.length)
-            {
-                d[i + 1] += d[i] / 10;    
-            }
-        }
-        
-        while (sb.length() > 1 && sb.charAt(sb.length() - 1) == '0')
-        {
-            sb.deleteCharAt(sb.length() - 1);
-        }
-
-        return sb.reverse().toString();
-    }
-}
diff --git a/432.all-oone-data-structure.96911652.Accepted.leetcode.java b/432.all-oone-data-structure.96911652.Accepted.leetcode.java
deleted file mode 100644
index 16dca564..00000000
--- ./432.all-oone-data-structure.96911652.Accepted.leetcode.java
+++ /dev/null
@@ -1,212 +0,0 @@
-public class AllOne
-{
-
-    private ValueNode head;// largest
-    private ValueNode tail;// smallest
-    private Map<String, ValueNode> elements;
-
-    /** Initialize your data structure here. */
-    public AllOne()
-    {
-        head = null;
-        tail = null;
-        this.elements = new HashMap<>();
-    }
-
-    /**
-     * Inserts a new key <key> with value 1. Or increments an existing key by 1.
-     */
-    public void inc(String key)
-    {
-        // if no element in the map, add the element to tail with value 1
-        if (!elements.containsKey(key))
-        {
-            if (tail == null || tail.value > 1)
-            {
-                ValueNode prevTail = null;
-
-                if (tail != null)
-                {
-                    prevTail = tail;
-                }
-
-                tail = new ValueNode(1, key);
-
-                if (head == null)
-                {
-                    head = tail;
-                }
-
-                if (prevTail != null)
-                {
-                    prevTail.next = tail;
-                    tail.prev = prevTail;
-                }
-            }
-            else
-            {
-                tail.keys.add(key);
-            }
-
-            elements.put(key, tail);
-        }
-        else
-        {
-            ValueNode curr = elements.get(key);
-
-            if (curr.prev != null && curr.prev.value == curr.value + 1)
-            {
-                curr.prev.keys.add(key);
-                elements.put(key, curr.prev);
-            }
-            else
-            {
-                ValueNode prev = new ValueNode(curr.value + 1, key);
-
-                if (curr.prev != null)
-                {
-                    ValueNode prevprev = curr.prev;
-                    prevprev.next = prev;
-                    prev.prev = prevprev;
-                    // which means curr is head
-                }
-                else
-                {
-                    head = prev;
-                }
-
-                curr.prev = prev;
-                prev.next = curr;
-                elements.put(key, prev);
-            }
-
-            curr.keys.remove(key);
-
-            if (!checkEmpty(curr))
-            {
-                curr.updateOneKey(key);
-            }
-        }
-    }
-
-    /**
-     * Decrements an existing key by 1. If Key's value is 1, remove it from the
-     * data structure.
-     */
-    public void dec(String key)
-    {
-        if (elements.containsKey(key))
-        {
-            ValueNode curr = elements.get(key);
-
-            if (curr.next != null && curr.next.value == curr.value - 1)
-            {
-                curr.next.keys.add(key);
-                elements.put(key, curr.next);
-            }
-            else
-            {
-                if (curr.value > 1)
-                {
-                    ValueNode next = new ValueNode(curr.value - 1, key);
-
-                    if (curr.next != null)
-                    {
-                        ValueNode nextnext = curr.next;
-                        next.next = nextnext;
-                        nextnext.prev = next;
-                    }
-                    else
-                    {
-                        tail = next;
-                    }
-
-                    curr.next = next;
-                    next.prev = curr;
-                    elements.put(key, next);
-                }
-                else
-                {
-                    elements.remove(key);
-                }
-            }
-
-            curr.keys.remove(key);
-
-            if (!checkEmpty(curr))
-            {
-                curr.updateOneKey(key);
-            }
-        }
-    }
-
-    /** Returns one of the keys with maximal value. */
-    public String getMaxKey()
-    {
-        return head != null ? head.oneKey : "";
-    }
-
-    /** Returns one of the keys with Minimal value. */
-    public String getMinKey()
-    {
-        return tail != null ? tail.oneKey : "";
-    }
-
-    private boolean checkEmpty(ValueNode node)
-    {
-        if (node.keys.isEmpty())
-        {
-            if (node == head)
-            {
-                head = node.next;
-                node.next.prev = null;
-            }
-            else if (node == tail)
-            {
-                tail = node.prev;
-                node.prev.next = null;
-            }
-            else
-            {
-                node.prev.next = node.next;
-                node.next.prev = node.prev;
-            }
-
-            node = null;
-            return true;
-        }
-        else
-        {
-            return false;
-        }
-    }
-
-    // Doubly linked list node
-    private class ValueNode
-    {
-        int value;
-        Set<String> keys;
-        ValueNode prev;
-        ValueNode next;
-        String oneKey; // any key with the value
-
-        public ValueNode(int value, String key)
-        {
-            this.value = value;
-            keys = new HashSet<>();
-            keys.add(key);
-            oneKey = key;
-            prev = null;
-            next = null;
-        }
-
-        public void updateOneKey(String key)
-        {
-            if (oneKey.equals(key))
-            {
-                Iterator<String> it = keys.iterator();
-                oneKey = it.next();
-            }
-        }
-    }
-}
diff --git a/438.find-all-anagrams-in-a-string.102400654.Accepted.leetcode.java b/438.find-all-anagrams-in-a-string.102400654.Accepted.leetcode.java
deleted file mode 100644
index b9305215..00000000
--- ./438.find-all-anagrams-in-a-string.102400654.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution {
-    public List<Integer> findAnagrams(String s, String t) {
-        List<Integer> result = new LinkedList<>();
-        if(t.length()> s.length()) return result;
-        Map<Character, Integer> map = new HashMap<>();
-        for(char c : t.toCharArray()){
-            map.put(c, map.getOrDefault(c, 0) + 1);
-        }
-        int counter = map.size();
-        
-        int begin = 0, end = 0;
-        int head = 0;
-        int len = Integer.MAX_VALUE;
-        
-        
-        while(end < s.length()){
-            char c = s.charAt(end);
-            if( map.containsKey(c) ){
-                map.put(c, map.get(c)-1);
-                if(map.get(c) == 0) counter--;
-            }
-            end++;
-            
-            while(counter == 0){
-                char tempc = s.charAt(begin);
-                if(map.containsKey(tempc)){
-                    map.put(tempc, map.get(tempc) + 1);
-                    if(map.get(tempc) > 0){
-                        counter++;
-                    }
-                }
-                if(end-begin == t.length()){
-                    result.add(begin);
-                }
-                begin++;
-            }
-            
-        }
-        return result;
-    }
-}
diff --git a/438.find-all-anagrams-in-a-string.102400703.Accepted.leetcode.java b/438.find-all-anagrams-in-a-string.102400703.Accepted.leetcode.java
deleted file mode 100644
index 649c31c1..00000000
--- ./438.find-all-anagrams-in-a-string.102400703.Accepted.leetcode.java
+++ /dev/null
@@ -1,65 +0,0 @@
-public class Solution
-{
-    public List<Integer> findAnagrams(String s, String t)
-    {
-        List<Integer> result = new LinkedList<>();
-
-        if (t.length() > s.length())
-        {
-            return result;
-        }
-
-        Map<Character, Integer> map = new HashMap<>();
-
-        for (char c : t.toCharArray())
-        {
-            map.put(c, map.getOrDefault(c, 0) + 1);
-        }
-
-        int counter = map.size();
-        int begin = 0, end = 0;
-        int head = 0;
-        int len = Integer.MAX_VALUE;
-
-        while (end < s.length())
-        {
-            char c = s.charAt(end);
-
-            if (map.containsKey(c))
-            {
-                map.put(c, map.get(c) - 1);
-
-                if (map.get(c) == 0)
-                {
-                    counter--;
-                }
-            }
-
-            end++;
-
-            while (counter == 0)
-            {
-                char tempc = s.charAt(begin);
-
-                if (map.containsKey(tempc))
-                {
-                    map.put(tempc, map.get(tempc) + 1);
-
-                    if (map.get(tempc) > 0)
-                    {
-                        counter++;
-                    }
-                }
-
-                if (end - begin == t.length())
-                {
-                    result.add(begin);
-                }
-
-                begin++;
-            }
-        }
-
-        return result;
-    }
-}
diff --git a/439.ternary-expression-parser.91140195.Accepted.leetcode.java b/439.ternary-expression-parser.91140195.Accepted.leetcode.java
deleted file mode 100644
index f9d43b0c..00000000
--- ./439.ternary-expression-parser.91140195.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution 
-{
-    public String parseTernary(String expression) 
-    {
-        if (expression == null || expression.length() == 0)
-        {
-            return "";
-        }
-    
-        Stack<Character> stack = new Stack<>();
-        
-        for (int i = expression.length() - 1; i >= 0; i--) 
-        {
-            char c = expression.charAt(i);
-        
-            if (!stack.isEmpty() && stack.peek() == '?') 
-            {
-                stack.pop(); //pop '?'
-                char first = stack.pop();
-                stack.pop(); //pop ':'
-                char second = stack.pop();
-         
-                if (c == 'T')
-                {
-                    stack.push(first);    
-                }
-                else
-                {
-                    stack.push(second);    
-                }
-                
-            }
-            else 
-            {
-                stack.push(c);
-            }
-        }
-    
-        return String.valueOf(stack.peek());
-    }
-}
diff --git a/439.ternary-expression-parser.91142784.Time-Limit-Exceeded.leetcode.java b/439.ternary-expression-parser.91142784.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index a1b0f988..00000000
--- ./439.ternary-expression-parser.91142784.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-public class Solution 
-{
-    public String parseTernary(String expression) 
-    {
-        if (expression == null || expression.length() == 0)
-        {
-            return "";
-        }
-    
-        Stack<Character> stack = new Stack<>();
-        
-        for (int i = expression.length() - 1; i >= 0; i--) 
-        {
-            char c = expression.charAt(i);
-        
-            if (!stack.isEmpty() && stack.peek() == '?') 
-            {
-                stack.pop(); //pop '?'
-                char first = stack.pop();
-                stack.pop(); //pop ':'
-                char second = stack.pop();
-         
-                if (c == 'T')
-                {
-                    System.out.println("push first --> " + first);
-                    stack.push(first);    
-                }
-                else
-                {
-                    System.out.println("push second --> " + second);
-                    stack.push(second);    
-                }
-                
-            }
-            else 
-            {
-                System.out.println("push c --> " + c);
-                stack.push(c);
-            }
-        }
-    
-        return String.valueOf(stack.peek());
-    }
-}
diff --git a/439.ternary-expression-parser.91143753.Wrong-Answer.leetcode.java b/439.ternary-expression-parser.91143753.Wrong-Answer.leetcode.java
deleted file mode 100644
index c1365afc..00000000
--- ./439.ternary-expression-parser.91143753.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-public class Solution 
-{
-    public String parseTernary(String expression) 
-    {
-        if (expression == null || expression.length() == 0)
-        {
-            return "";
-        }
-    
-        Stack<Character> stack = new Stack<>();
-        
-        for (int i = expression.length() - 1; i >= 0; i--) 
-        {
-            char c = expression.charAt(i);
-        
-            if (!stack.isEmpty() && stack.peek() == '?') 
-            {
-                stack.pop(); //pop '?'
-                char first = stack.pop();
-                stack.pop(); //pop ':'
-                char second = stack.pop();
-         
-                if (c == 'T')
-                {
-                    System.out.println("push first --> " + first);
-                    stack.push(first);    
-                }
-                else
-                {
-                    System.out.println("push second --> " + second);
-                    stack.push(second);    
-                }
-                
-            }
-            else 
-            {
-                System.out.println("push c --> " + c);
-                stack.push(c);
-            }
-        }
-    
-        //return String.valueOf(stack.peek());
-        return "a";
-    }
-}
diff --git a/439.ternary-expression-parser.92179537.Runtime-Error.leetcode.java b/439.ternary-expression-parser.92179537.Runtime-Error.leetcode.java
deleted file mode 100644
index 016424b2..00000000
--- ./439.ternary-expression-parser.92179537.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution 
-{
-    public String parseTernary(String expression) 
-    {
-        if (expression == null || expression.length() == 0)
-        {
-            return "";
-        }
-    
-        Stack<Character> stack = new Stack<>();
-        char first, second;
-        
-        for (int i = expression.length() - 1; i >= 0; i--) 
-        {
-            char c = expression.charAt(i);
-            
-            if ('0' <= c && c <= '9')
-            {
-                stack.push(c);
-            }
-            else if (c == '?' || c == ':')
-            {
-                continue;
-            }
-            else if (c == 'T')
-            {
-                first = stack.pop();
-                second = stack.pop();
-                stack.push(first);
-            }
-            else
-            {
-                first = stack.pop();
-                second = stack.pop();
-                stack.push(second);
-            }
-        }
-        
-        return String.valueOf(stack.pop());
-    }
-}
diff --git a/439.ternary-expression-parser.92180031.Runtime-Error.leetcode.java b/439.ternary-expression-parser.92180031.Runtime-Error.leetcode.java
deleted file mode 100644
index 6e04a83f..00000000
--- ./439.ternary-expression-parser.92180031.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution 
-{
-    public String parseTernary(String expression) 
-    {
-        if (expression == null || expression.length() == 0)
-        {
-            return "";
-        }
-    
-        Stack<Character> stack = new Stack<>();
-        char first, second;
-        
-        for (int i = expression.length() - 1; i >= 0; i--) 
-        {
-            char c = expression.charAt(i);
-            
-            if ('0' <= c && c <= '9')
-            {
-                stack.push(c);
-            }
-            else if (c == '?')
-            {
-                first = stack.pop();
-                second = stack.pop();
-                    
-                if (expression.charAt(i + 1) == 'T')
-                {
-                    stack.push(first);
-                }
-                else
-                {
-                    stack.push(second);
-                }
-            }
-            else
-            {
-                continue;
-            }
-        }
-        
-        return String.valueOf(stack.pop());
-    }
-}
diff --git a/439.ternary-expression-parser.92180588.Wrong-Answer.leetcode.java b/439.ternary-expression-parser.92180588.Wrong-Answer.leetcode.java
deleted file mode 100644
index 435332f0..00000000
--- ./439.ternary-expression-parser.92180588.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-public class Solution 
-{
-    public String parseTernary(String expression) 
-    {
-        if (expression == null || expression.length() == 0)
-        {
-            return "";
-        }
-    
-        Stack<Character> stack = new Stack<>();
-        char first, second;
-        
-        for (int i = expression.length() - 1; i >= 0; i--) 
-        {
-            char c = expression.charAt(i);
-            
-            if ('0' <= c && c <= '9' || c == 'T' || c == 'F')
-            {
-                stack.push(c);
-            }
-            else if (c == '?')
-            {
-                first = stack.pop();
-                second = stack.pop();
-                    
-                if (expression.charAt(i + 1) == 'T')
-                {
-                    stack.push(first);
-                }
-                else
-                {
-                    stack.push(second);
-                }
-            }
-            else
-            {
-                continue;
-            }
-        }
-        
-        return String.valueOf(stack.pop());
-    }
-}
diff --git a/439.ternary-expression-parser.92391416.Runtime-Error.leetcode.java b/439.ternary-expression-parser.92391416.Runtime-Error.leetcode.java
deleted file mode 100644
index 199c01e6..00000000
--- ./439.ternary-expression-parser.92391416.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,51 +0,0 @@
-public class Solution 
-{
-    public String parseTernary(String expression) 
-    {
-        if (expression == null || expression.length() == 0)
-        {
-            return "";
-        }
-    
-        Stack<Character> stack = new Stack<>();
-        char first, second;
-        
-        for (int i = expression.length() - 1; i >= 0; i--) 
-        {
-            char c = expression.charAt(i);
-            
-            if ('0' <= c && c <= '9')
-            {
-                stack.push(c);
-            }
-            else if (c == '?')
-            {
-                continue;
-                
-            }
-            else
-            {
-                if (expression.charAt(i + 1) == ':')
-                {
-                    first = stack.pop();
-                    second = stack.pop();
-                    
-                    if (expression.charAt(i) == 'T')
-                    {
-                        stack.push(first);
-                    }
-                    else
-                    {
-                        stack.push(second);
-                    }    
-                }
-                else
-                {
-                    stack.push(c);    
-                }
-            }
-        }
-        
-        return String.valueOf(stack.pop());
-    }
-}
diff --git a/439.ternary-expression-parser.92391515.Wrong-Answer.leetcode.java b/439.ternary-expression-parser.92391515.Wrong-Answer.leetcode.java
deleted file mode 100644
index 0f073dd7..00000000
--- ./439.ternary-expression-parser.92391515.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,51 +0,0 @@
-public class Solution 
-{
-    public String parseTernary(String expression) 
-    {
-        if (expression == null || expression.length() == 0)
-        {
-            return "";
-        }
-    
-        Stack<Character> stack = new Stack<>();
-        char first, second;
-        
-        for (int i = expression.length() - 1; i >= 0; i--) 
-        {
-            char c = expression.charAt(i);
-            
-            if ('0' <= c && c <= '9')
-            {
-                stack.push(c);
-            }
-            else if (c == '?')
-            {
-                continue;
-                
-            }
-            else
-            {
-                if (i + 1 < expression.length() && expression.charAt(i + 1) == ':')
-                {
-                    first = stack.pop();
-                    second = stack.pop();
-                    
-                    if (expression.charAt(i) == 'T')
-                    {
-                        stack.push(first);
-                    }
-                    else
-                    {
-                        stack.push(second);
-                    }    
-                }
-                else
-                {
-                    stack.push(c);    
-                }
-            }
-        }
-        
-        return String.valueOf(stack.pop());
-    }
-}
diff --git a/439.ternary-expression-parser.92392366.Runtime-Error.leetcode.java b/439.ternary-expression-parser.92392366.Runtime-Error.leetcode.java
deleted file mode 100644
index fa9d2566..00000000
--- ./439.ternary-expression-parser.92392366.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-public class Solution 
-{
-    public String parseTernary(String expression) 
-    {
-        if (expression == null || expression.length() == 0)
-        {
-            return "";
-        }
-    
-        Stack<Character> stack = new Stack<>();
-        char first, second;
-        
-        for (int i = expression.length() - 1; i >= 0; i--) 
-        {
-            char c = expression.charAt(i);
-            
-            if ('0' <= c && c <= '9')
-            {
-                stack.push(c);
-            }
-            else if (c == 'T' || c == 'F')
-            {
-                if (i + 1 < expression.length() && expression.charAt(i + 1) == ':')
-                {
-                    first = stack.pop();
-                    second = stack.pop();
-                    
-                    if (expression.charAt(i) == 'T')
-                    {
-                        stack.push(first);
-                    }
-                    else
-                    {
-                        stack.push(second);
-                    }    
-                }
-                else
-                {
-                    stack.push(c);    
-                }
-            }
-            else
-            {
-                continue;
-            }
-        }
-        
-        return String.valueOf(stack.pop());
-    }
-}
diff --git a/439.ternary-expression-parser.92393198.Runtime-Error.leetcode.java b/439.ternary-expression-parser.92393198.Runtime-Error.leetcode.java
deleted file mode 100644
index 15c34f8e..00000000
--- ./439.ternary-expression-parser.92393198.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,52 +0,0 @@
-public class Solution 
-{
-    public String parseTernary(String expression) 
-    {
-        if (expression == null || expression.length() == 0)
-        {
-            return "";
-        }
-    
-        Stack<Character> stack = new Stack<>();
-        char first, second;
-        
-        for (int i = expression.length() - 1; i >= 0; i--) 
-        {
-            char c = expression.charAt(i);
-            
-            if ('0' <= c && c <= '9')
-            {
-                stack.push(c);
-            }
-            else if (c == 'T' || c == 'F')
-            {
-                if (i + 1 < expression.length() && expression.charAt(i + 1) == ':')
-                {
-                    System.out.println("i --> " + i);
-                    System.out.println("char --> " + expression.charAt(i));
-                    first = stack.pop();
-                    second = stack.pop();
-                    
-                    if (expression.charAt(i) == 'T')
-                    {
-                        stack.push(first);
-                    }
-                    else
-                    {
-                        stack.push(second);
-                    }    
-                }
-                else
-                {
-                    stack.push(c);    
-                }
-            }
-            else
-            {
-                continue;
-            }
-        }
-        
-        return String.valueOf(stack.pop());
-    }
-}
diff --git a/439.ternary-expression-parser.92393388.Accepted.leetcode.java b/439.ternary-expression-parser.92393388.Accepted.leetcode.java
deleted file mode 100644
index 55d43332..00000000
--- ./439.ternary-expression-parser.92393388.Accepted.leetcode.java
+++ /dev/null
@@ -1,54 +0,0 @@
-public class Solution 
-{
-    public String parseTernary(String expression) 
-    {
-        if (expression == null || expression.length() == 0)
-        {
-            return "";
-        }
-    
-        Stack<Character> stack = new Stack<>();
-        char first, second;
-        
-        for (int i = expression.length() - 1; i >= 0; i--) 
-        {
-            char c = expression.charAt(i);
-            
-            if ('0' <= c && c <= '9')
-            {
-                stack.push(c);
-            }
-            else if (c == 'T' || c == 'F')
-            {
-                if (i + 1 < expression.length() && expression.charAt(i + 1) == '?')
-                {
-                    /*
-                    System.out.println("i --> " + i);
-                    System.out.println("char --> " + expression.charAt(i));
-                    */
-                    first = stack.pop();
-                    second = stack.pop();
-                    
-                    if (expression.charAt(i) == 'T')
-                    {
-                        stack.push(first);
-                    }
-                    else
-                    {
-                        stack.push(second);
-                    }    
-                }
-                else
-                {
-                    stack.push(c);    
-                }
-            }
-            else
-            {
-                continue;
-            }
-        }
-        
-        return String.valueOf(stack.pop());
-    }
-}
diff --git a/439.ternary-expression-parser.92393447.Accepted.leetcode.java b/439.ternary-expression-parser.92393447.Accepted.leetcode.java
deleted file mode 100644
index 5aba162a..00000000
--- ./439.ternary-expression-parser.92393447.Accepted.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-public class Solution 
-{
-    public String parseTernary(String expression) 
-    {
-        if (expression == null || expression.length() == 0)
-        {
-            return "";
-        }
-    
-        Stack<Character> stack = new Stack<>();
-        char first, second;
-        
-        for (int i = expression.length() - 1; i >= 0; i--) 
-        {
-            char c = expression.charAt(i);
-            
-            if ('0' <= c && c <= '9')
-            {
-                stack.push(c);
-            }
-            else if (c == 'T' || c == 'F')
-            {
-                if (i + 1 < expression.length() && expression.charAt(i + 1) == '?')
-                {
-                    first = stack.pop();
-                    second = stack.pop();
-                    
-                    if (expression.charAt(i) == 'T')
-                    {
-                        stack.push(first);
-                    }
-                    else
-                    {
-                        stack.push(second);
-                    }    
-                }
-                else
-                {
-                    stack.push(c);    
-                }
-            }
-            else
-            {
-                continue;
-            }
-        }
-        
-        return String.valueOf(stack.pop());
-    }
-}
diff --git a/44.wildcard-matching.31083557.Accepted.leetcode.java b/44.wildcard-matching.31083557.Accepted.leetcode.java
deleted file mode 100644
index 429fd4cd..00000000
--- ./44.wildcard-matching.31083557.Accepted.leetcode.java
+++ /dev/null
@@ -1,57 +0,0 @@
-  public class Solution
-  {
-    private int minLength(String p)
-    {
-      int len = 0;
-
-      for (int i = 0; i < p.length(); i++)
-      {
-        if (p.charAt(i) != '*')
-        {
-          len++;
-        }
-      }
-
-      return len;
-    }
-
-    public boolean isMatch(String s, String p)
-    {
-      if (s.length() < minLength(p))
-      {
-        return false;
-      }
-
-      boolean[] dp = new boolean[s.length() + 1];
-      dp[0] = true;
-
-      for (int i = 1; i <= p.length(); i++)
-      {
-        for (int j = s.length(); j > 0; j--)
-        {
-          if (p.charAt(i - 1) == '*')
-          {
-            for (int k = 0; k <= j; k++)
-            {
-              if (dp[k])
-              {
-                dp[j] = true;
-                break;
-              }
-            }
-          }
-          else
-          {
-            dp[j] = dp[j - 1]
-                    && (p.charAt(i - 1) == '?' || p.charAt(i - 1) == s
-                        .charAt(j - 1));
-          }
-        }
-
-        dp[0] = p.charAt(i - 1) == '*' && dp[0];
-      }
-
-      return dp[s.length()];
-    }
-  }
-
diff --git a/44.wildcard-matching.35377858.Accepted.leetcode.java b/44.wildcard-matching.35377858.Accepted.leetcode.java
deleted file mode 100644
index adcb72a1..00000000
--- ./44.wildcard-matching.35377858.Accepted.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-  public class Solution
-  {
-    public boolean isMatch(String s, String p)
-    {
-      int i = 0;
-      int j = 0;
-      int starIndex = -1;
-      int iIndex = -1;
-
-      while (i < s.length())
-      {
-        if (j < p.length() && (p.charAt(j) == '?' || p.charAt(j) == s.charAt(i)))
-        {
-          ++i;
-          ++j;
-        }
-        else if (j < p.length() && p.charAt(j) == '*')
-        {
-          starIndex = j;
-          iIndex = i;
-          j++;
-        }
-        else if (starIndex != -1)
-        {
-          j = starIndex + 1;
-          i = iIndex + 1;
-          iIndex++;
-        }
-        else
-        {
-          return false;
-        }
-      }
-
-      while (j < p.length() && p.charAt(j) == '*')
-      {
-        ++j;
-      }
-
-      return j == p.length();
-    }
-  }
-
diff --git a/44.wildcard-matching.35378278.Accepted.leetcode.java b/44.wildcard-matching.35378278.Accepted.leetcode.java
deleted file mode 100644
index ae68710e..00000000
--- ./44.wildcard-matching.35378278.Accepted.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-  public class Solution
-  {
-    public boolean isMatch(String s, String p)
-    {
-      if (p.length() == 0)
-      {
-        return s.length() == 0;
-      }
-
-      if (s.length() > 300 && p.charAt(0) == '*' && p.charAt(p.length() - 1) == '*')
-      {
-        return false;
-      }
-
-      boolean[] res = new boolean[s.length() + 1];
-      res[0] = true;
-
-      for (int j = 0; j < p.length(); j++)
-      {
-        if (p.charAt(j) != '*')
-        {
-          for (int i = s.length() - 1; i >= 0; i--)
-          {
-            res[i + 1] = res[i] && (p.charAt(j) == '?' || s.charAt(i) == p.charAt(j));
-          }
-        }
-        else
-        {
-          int i = 0;
-
-          while (i <= s.length() && !res[i])
-          {
-            i++;
-          }
-
-          for (; i <= s.length(); i++)
-          {
-            res[i] = true;
-          }
-        }
-
-        res[0] = res[0] && p.charAt(j) == '*';
-      }
-
-      return res[s.length()];
-    }
-  }
-
diff --git a/442.find-all-duplicates-in-an-array.86970496.Wrong-Answer.leetcode.java b/442.find-all-duplicates-in-an-array.86970496.Wrong-Answer.leetcode.java
deleted file mode 100644
index 376c9a9f..00000000
--- ./442.find-all-duplicates-in-an-array.86970496.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution 
-{
-    public List<Integer> findDuplicates(int[] nums) 
-    {
-        List<Integer> result = new ArrayList<Integer>();
-        
-        for (int i = 0; i < nums.length; i++)
-        {
-            if (nums[i] != nums[nums[i] - 1])
-            {
-                swap(nums, i, nums[i] - 1);
-                i--;
-            }
-        }
-        
-        for (int i = 0; i < nums.length; i++)
-        {
-            if (nums[i] != nums[nums[i] - 1])
-            {
-                result.add(i + 1);
-            }
-        }
-        
-        return result;
-    }
-    
-    public void swap(int[] nums, int i, int j)
-    {
-        int temp = nums[i];
-        nums[i] = nums[j];
-        nums[j] = temp;
-    }
-}
diff --git a/442.find-all-duplicates-in-an-array.86970675.Wrong-Answer.leetcode.java b/442.find-all-duplicates-in-an-array.86970675.Wrong-Answer.leetcode.java
deleted file mode 100644
index 6955e66b..00000000
--- ./442.find-all-duplicates-in-an-array.86970675.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution 
-{
-    public List<Integer> findDuplicates(int[] nums) 
-    {
-        List<Integer> result = new ArrayList<Integer>();
-        
-        for (int i = 0; i < nums.length; i++)
-        {
-            if (nums[i] != nums[nums[i] - 1])
-            {
-                swap(nums, i, nums[i] - 1);
-                i--;
-            }
-        }
-        
-        for (int i = 0; i < nums.length; i++)
-        {
-            if (nums[i] != nums[nums[i] - 1])
-            {
-                result.add(nums[i]);
-            }
-        }
-        
-        return result;
-    }
-    
-    public void swap(int[] nums, int i, int j)
-    {
-        int temp = nums[i];
-        nums[i] = nums[j];
-        nums[j] = temp;
-    }
-}
diff --git a/442.find-all-duplicates-in-an-array.86971368.Accepted.leetcode.java b/442.find-all-duplicates-in-an-array.86971368.Accepted.leetcode.java
deleted file mode 100644
index 2a1a1ded..00000000
--- ./442.find-all-duplicates-in-an-array.86971368.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution 
-{
-    public List<Integer> findDuplicates(int[] nums) 
-    {
-        List<Integer> result = new ArrayList<Integer>();
-        
-        for (int i = 0; i < nums.length; i++)
-        {
-            if (nums[i] != nums[nums[i] - 1])
-            {
-                swap(nums, i, nums[i] - 1);
-                i--;
-            }
-        }
-        
-        for (int i = 0; i < nums.length; i++)
-        {
-            if (nums[i] != i + 1)
-            {
-                result.add(nums[i]);
-            }
-        }
-        
-        return result;
-    }
-    
-    public void swap(int[] nums, int i, int j)
-    {
-        int temp = nums[i];
-        nums[i] = nums[j];
-        nums[j] = temp;
-    }
-}
diff --git a/448.find-all-numbers-disappeared-in-an-array.151596789.Wrong-Answer.leetcode.java b/448.find-all-numbers-disappeared-in-an-array.151596789.Wrong-Answer.leetcode.java
deleted file mode 100644
index cc103b20..00000000
--- ./448.find-all-numbers-disappeared-in-an-array.151596789.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution 
-{
-    public List<Integer> findDisappearedNumbers(int[] nums) 
-    {
-        List<Integer> result = new ArrayList<Integer>();
-        
-        for (int i = 0; i < nums.length; i++)
-        {
-            if (nums[i] != nums[nums[i] - 1])
-            {
-                swap(nums, i, nums[i] - 1);
-                i--;
-            }
-        }
-        
-        for (int i = 0; i < nums.length; i++)
-        {
-            if (nums[i] != nums[nums[i] - 1])
-            {
-                result.add(i + 1);
-            }
-        }
-        
-        return result;       
-    }
-    
-    public void swap(int[] nums, int i, int j)
-    {
-        int temp = nums[i];
-        nums[i] = nums[j];
-        nums[j] = temp;
-    }
-}
-
diff --git a/448.find-all-numbers-disappeared-in-an-array.86970967.Wrong-Answer.leetcode.java b/448.find-all-numbers-disappeared-in-an-array.86970967.Wrong-Answer.leetcode.java
deleted file mode 100644
index 5494393b..00000000
--- ./448.find-all-numbers-disappeared-in-an-array.86970967.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution 
-{
-    public List<Integer> findDisappearedNumbers(int[] nums) 
-    {
-        List<Integer> result = new ArrayList<Integer>();
-        
-        for (int i = 0; i < nums.length; i++)
-        {
-            if (nums[i] != nums[nums[i] - 1])
-            {
-                swap(nums, i, nums[i] - 1);
-                i--;
-            }
-        }
-        
-        for (int i = 0; i < nums.length; i++)
-        {
-            if (nums[i] != nums[nums[i] - 1])
-            {
-                result.add(i + 1);
-            }
-        }
-        
-        return result;       
-    }
-    
-    public void swap(int[] nums, int i, int j)
-    {
-        int temp = nums[i];
-        nums[i] = nums[j];
-        nums[j] = temp;
-    }
-}
diff --git a/448.find-all-numbers-disappeared-in-an-array.86971134.Accepted.leetcode.java b/448.find-all-numbers-disappeared-in-an-array.86971134.Accepted.leetcode.java
deleted file mode 100644
index 96ccf210..00000000
--- ./448.find-all-numbers-disappeared-in-an-array.86971134.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution 
-{
-    public List<Integer> findDisappearedNumbers(int[] nums) 
-    {
-        List<Integer> result = new ArrayList<Integer>();
-        
-        for (int i = 0; i < nums.length; i++)
-        {
-            if (nums[i] != nums[nums[i] - 1])
-            {
-                swap(nums, i, nums[i] - 1);
-                i--;
-            }
-        }
-        
-        for (int i = 0; i < nums.length; i++)
-        {
-            if (nums[i] != i + 1)
-            {
-                result.add(i + 1);
-            }
-        }
-        
-        return result;       
-    }
-    
-    public void swap(int[] nums, int i, int j)
-    {
-        int temp = nums[i];
-        nums[i] = nums[j];
-        nums[j] = temp;
-    }
-}
diff --git a/45.jump-game-ii.158173152.Accepted.leetcode.java b/45.jump-game-ii.158173152.Accepted.leetcode.java
deleted file mode 100644
index 19496141..00000000
--- ./45.jump-game-ii.158173152.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution
-{
-    public int jump(int[] nums)
-    {
-        int lastReach = 0;
-        int reach = 0;
-        int step = 0;
-
-        for (int i = 0; i <= reach && i < nums.length; i++)
-        {
-            if (i > lastReach)
-            {
-                step++;
-                lastReach = reach;
-            }
-
-            reach = Math.max(reach, nums[i] + i);
-        }
-
-        return step;
-    }
-}
-
diff --git a/45.jump-game-ii.98268146.Accepted.leetcode.java b/45.jump-game-ii.98268146.Accepted.leetcode.java
deleted file mode 100644
index dad08b3a..00000000
--- ./45.jump-game-ii.98268146.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public int jump(int[] nums)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return 0;
-        }
-
-        int lastReach = 0;
-        int reach = 0;
-        int step = 0;
-
-        for (int i = 0; i <= reach && i < nums.length; i++)
-        {
-            if (lastReach < i)
-            {
-                step++;
-                lastReach = reach;
-            }
-
-            reach = Math.max(reach, nums[i] + i);
-        }
-
-        return reach >= nums.length - 1 ? step : 0;
-    }
-}
diff --git a/45.jump-game-ii.98268508.Accepted.leetcode.java b/45.jump-game-ii.98268508.Accepted.leetcode.java
deleted file mode 100644
index 2ec91573..00000000
--- ./45.jump-game-ii.98268508.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public int jump(int[] nums)
-    {
-        if (nums == null || nums.length == 0)
-        {
-            return 0;
-        }
-
-        int lastReach = 0;
-        int reach = 0;
-        int step = 0;
-
-        for (int i = 0; i <= reach && i < nums.length; i++)
-        {
-            if (i > lastReach)
-            {
-                step++;
-                lastReach = reach;
-            }
-
-            reach = Math.max(reach, nums[i] + i);
-        }
-
-        return reach >= nums.length - 1 ? step : 0;
-    }
-}
diff --git a/45.jump-game-ii.98268678.Accepted.leetcode.java b/45.jump-game-ii.98268678.Accepted.leetcode.java
deleted file mode 100644
index 8492de50..00000000
--- ./45.jump-game-ii.98268678.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int jump(int[] nums)
-    {
-        int lastReach = 0;
-        int reach = 0;
-        int step = 0;
-
-        for (int i = 0; i <= reach && i < nums.length; i++)
-        {
-            if (i > lastReach)
-            {
-                step++;
-                lastReach = reach;
-            }
-
-            reach = Math.max(reach, nums[i] + i);
-        }
-
-        return reach >= nums.length - 1 ? step : 0;
-    }
-}
diff --git a/45.jump-game-ii.98268721.Wrong-Answer.leetcode.java b/45.jump-game-ii.98268721.Wrong-Answer.leetcode.java
deleted file mode 100644
index 04732f91..00000000
--- ./45.jump-game-ii.98268721.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution
-{
-    public int jump(int[] nums)
-    {
-        int lastReach = 0;
-        int reach = 0;
-        int step = 0;
-
-        for (int i = 0; i <= reach && i < nums.length; i++)
-        {
-            if (i > lastReach)
-            {
-                step++;
-            }
-
-            reach = Math.max(reach, nums[i] + i);
-        }
-
-        return reach >= nums.length - 1 ? step : 0;
-    }
-}
diff --git a/45.jump-game-ii.98268750.Wrong-Answer.leetcode.java b/45.jump-game-ii.98268750.Wrong-Answer.leetcode.java
deleted file mode 100644
index 879aebd4..00000000
--- ./45.jump-game-ii.98268750.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution
-{
-    public int jump(int[] nums)
-    {
-        int lastReach = 0;
-        int reach = 0;
-        int step = 0;
-
-        for (int i = 0; i <= reach && i < nums.length; i++)
-        {
-            if (i > lastReach)
-            {
-                lastReach = reach;
-            }
-
-            reach = Math.max(reach, nums[i] + i);
-        }
-
-        return reach >= nums.length - 1 ? step : 0;
-    }
-}
diff --git a/45.jump-game-ii.98268777.Wrong-Answer.leetcode.java b/45.jump-game-ii.98268777.Wrong-Answer.leetcode.java
deleted file mode 100644
index 86adee01..00000000
--- ./45.jump-game-ii.98268777.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int jump(int[] nums)
-    {
-        int lastReach = 0;
-        int reach = 0;
-        int step = 0;
-
-        for (int i = 0; i <= reach && i < nums.length; i++)
-        {
-            if (i >= lastReach)
-            {
-                step++;
-                lastReach = reach;
-            }
-
-            reach = Math.max(reach, nums[i] + i);
-        }
-
-        return reach >= nums.length - 1 ? step : 0;
-    }
-}
diff --git a/45.jump-game-ii.98268836.Accepted.leetcode.java b/45.jump-game-ii.98268836.Accepted.leetcode.java
deleted file mode 100644
index cb858157..00000000
--- ./45.jump-game-ii.98268836.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int jump(int[] nums)
-    {
-        int lastReach = 0;
-        int reach = 0;
-        int step = 0;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            if (i > lastReach)
-            {
-                step++;
-                lastReach = reach;
-            }
-
-            reach = Math.max(reach, nums[i] + i);
-        }
-
-        return reach >= nums.length - 1 ? step : 0;
-    }
-}
diff --git a/45.jump-game-ii.98269772.Accepted.leetcode.java b/45.jump-game-ii.98269772.Accepted.leetcode.java
deleted file mode 100644
index a2763528..00000000
--- ./45.jump-game-ii.98269772.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int jump(int[] nums)
-    {
-        int lastReach = 0;
-        int reach = 0;
-        int step = 0;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            if (i > lastReach)
-            {
-                step++;
-                lastReach = reach;
-            }
-
-            reach = Math.max(reach, nums[i] + i);
-        }
-
-        return step;
-    }
-}
diff --git a/45.jump-game-ii.98269836.Wrong-Answer.leetcode.java b/45.jump-game-ii.98269836.Wrong-Answer.leetcode.java
deleted file mode 100644
index 438115b9..00000000
--- ./45.jump-game-ii.98269836.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int jump(int[] nums)
-    {
-        int lastReach = 0;
-        int reach = 0;
-        int step = 0;
-
-        for (int i = 0; i < nums.length; i++)
-        {
-            if (i > lastReach)
-            {
-                step++;
-                lastReach = reach;
-            }
-
-            reach = Math.max(reach, nums[i]);
-        }
-
-        return step;
-    }
-}
diff --git a/450.delete-node-in-a-bst.92866420.Wrong-Answer.leetcode.java b/450.delete-node-in-a-bst.92866420.Wrong-Answer.leetcode.java
deleted file mode 100644
index 961c713b..00000000
--- ./450.delete-node-in-a-bst.92866420.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public TreeNode deleteNode(TreeNode root, int key) 
-    {
-        if (root == null || (root.left == null && root.right == null))
-        {
-            return root;    
-        }
-        
-        if (root.val == key)
-        {
-            if (root.left != null)
-            {
-                root.val = root.left.val;
-                root.left = null;
-            }
-            else if (root.right != null)
-            {
-                root.val = root.right.val;
-                root.right = null;
-            }
-        }
-        else if (root.val < key)
-        {
-            root.right = deleteNode(root.right, key);   
-        }
-        else
-        {
-            root.left = deleteNode(root.left, key);   
-        }
-        
-        return root;
-    }
-}
diff --git a/450.delete-node-in-a-bst.92866587.Wrong-Answer.leetcode.java b/450.delete-node-in-a-bst.92866587.Wrong-Answer.leetcode.java
deleted file mode 100644
index 8a9604fd..00000000
--- ./450.delete-node-in-a-bst.92866587.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public TreeNode deleteNode(TreeNode root, int key) 
-    {
-        if (root == null)
-        {
-            return root;    
-        }
-        
-        if (root.val == key)
-        {
-            if (root.left != null)
-            {
-                root.val = root.left.val;
-                root.left = null;
-            }
-            else if (root.right != null)
-            {
-                root.val = root.right.val;
-                root.right = null;
-            }
-            else
-            {
-                return null;
-            }
-        }
-        else if (root.val < key)
-        {
-            root.right = deleteNode(root.right, key);   
-        }
-        else
-        {
-            root.left = deleteNode(root.left, key);   
-        }
-        
-        return root;
-    }
-}
diff --git a/450.delete-node-in-a-bst.92954517.Runtime-Error.leetcode.java b/450.delete-node-in-a-bst.92954517.Runtime-Error.leetcode.java
deleted file mode 100644
index d7690112..00000000
--- ./450.delete-node-in-a-bst.92954517.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public TreeNode deleteNode(TreeNode root, int value) 
-    {
-        TreeNode dummy = new TreeNode (-1), pre = dummy, cur = root;
-        dummy.right = root;
-        while (cur != null) {
-            if (cur.val == value) {
-                if(pre.left == cur) {
-                    pre.left = makenew(cur);
-                }
-                else pre.right = makenew(cur);
-                break;
-            }
-            else if (cur.val < value) {
-                pre = cur;
-                cur = cur.right;
-            }
-            else {
-                pre = cur;
-                cur = cur.left;
-            }
-        }
-        return dummy.right;  
-    }
-    
-    private TreeNode makenew(TreeNode node) {
-        if (node.left == null || node.right == null) {
-            return node.left == null ? node.right : node.left;
-        }
-        TreeNode left = node.left.right;
-        TreeNode right = node.right.left;
-        while (right.left != null) {
-            right = right.left;
-        }
-        right.left = left;
-        node.left.right = node.right;
-        return node.left;
-    }
-}
diff --git a/450.delete-node-in-a-bst.92954613.Runtime-Error.leetcode.java b/450.delete-node-in-a-bst.92954613.Runtime-Error.leetcode.java
deleted file mode 100644
index 431efd82..00000000
--- ./450.delete-node-in-a-bst.92954613.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public TreeNode deleteNode(TreeNode root, int value) 
-    {
-        TreeNode dummy = new TreeNode (-1), pre = dummy, cur = root;
-        dummy.right = root;
-        while (cur != null) {
-            if (cur.val == value) {
-                if(pre.left == cur) {
-                    pre.left = makenew(cur);
-                }
-                else pre.right = makenew(cur);
-                break;
-            }
-            else if (cur.val < value) {
-                pre = cur;
-                cur = cur.right;
-            }
-            else {
-                pre = cur;
-                cur = cur.left;
-            }
-        }
-        return dummy.right;  
-    }
-    
-    private TreeNode makenew(TreeNode node) {
-        if (node.left == null || node.right == null) {
-            return node.left == null ? node.right : node.left;
-        }
-        TreeNode left = node.left.right;
-        TreeNode right = node.right.left;
-        while (right != null && right.left != null) {
-            right = right.left;
-        }
-        right.left = left;
-        node.left.right = node.right;
-        return node.left;
-    }
-}
diff --git a/450.delete-node-in-a-bst.92954776.Runtime-Error.leetcode.java b/450.delete-node-in-a-bst.92954776.Runtime-Error.leetcode.java
deleted file mode 100644
index 960395a6..00000000
--- ./450.delete-node-in-a-bst.92954776.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public TreeNode deleteNode(TreeNode root, int value) 
-    {
-        TreeNode dummy = new TreeNode (-1), pre = dummy, cur = root;
-        dummy.right = root;
-        
-        while (cur != null) 
-        {
-            if (cur.val == value) 
-            {
-                if(pre.left == cur) 
-                {
-                    pre.left = makenew(cur);
-                }
-                else
-                {
-                    pre.right = makenew(cur);    
-                }
-                
-                break;
-            }
-            else if (cur.val < value) 
-            {
-                pre = cur;
-                cur = cur.right;
-            }
-            else 
-            {
-                pre = cur;
-                cur = cur.left;
-            }
-        }
-        
-        return dummy.right;  
-    }
-    
-    private TreeNode makenew(TreeNode node) 
-    {
-        if (node.left == null || node.right == null) 
-        {
-            return node.left == null ? node.right : node.left;
-        }
-        
-        TreeNode left = node.left.right;
-        TreeNode right = node.right.left;
-        
-        while (right != null && right.left != null) 
-        {
-            right = right.left;
-        }
-        
-        right.left = left;
-        node.left.right = node.right;
-        return node.left;
-    }
-}
diff --git a/450.delete-node-in-a-bst.92955068.Wrong-Answer.leetcode.java b/450.delete-node-in-a-bst.92955068.Wrong-Answer.leetcode.java
deleted file mode 100644
index 22df57bd..00000000
--- ./450.delete-node-in-a-bst.92955068.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public TreeNode deleteNode(TreeNode root, int value) 
-    {
-        TreeNode dummy = new TreeNode (-1), pre = dummy, cur = root;
-        dummy.right = root;
-        
-        while (cur != null) 
-        {
-            if (cur.val == value) 
-            {
-                if(pre.left == cur) 
-                {
-                    pre.left = makenew(cur);
-                }
-                else
-                {
-                    pre.right = makenew(cur);    
-                }
-                
-                break;
-            }
-            else if (cur.val < value) 
-            {
-                pre = cur;
-                cur = cur.right;
-            }
-            else 
-            {
-                pre = cur;
-                cur = cur.left;
-            }
-        }
-        
-        return dummy.right;  
-    }
-    
-    private TreeNode makenew(TreeNode node) 
-    {
-        if (node.left == null || node.right == null) 
-        {
-            return node.left == null ? node.right : node.left;
-        }
-        
-        TreeNode left = node.left.right;
-        TreeNode right = node.right.left;
-        
-        while (right != null && right.left != null) 
-        {
-            right = right.left;
-        }
-        
-        if (right != null)
-            right.left = left;
-        node.left.right = node.right;
-        return node.left;
-    }
-}
diff --git a/450.delete-node-in-a-bst.92956920.Accepted.leetcode.java b/450.delete-node-in-a-bst.92956920.Accepted.leetcode.java
deleted file mode 100644
index 12d87e7a..00000000
--- ./450.delete-node-in-a-bst.92956920.Accepted.leetcode.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public TreeNode deleteNode(TreeNode root, int value) 
-    {
-        TreeNode dummy = new TreeNode (-1), pre = dummy, cur = root;
-        dummy.right = root;
-        
-        while (cur != null) 
-        {
-            if (cur.val == value) 
-            {
-                if(pre.left == cur) 
-                {
-                    pre.left = makenew(cur);
-                }
-                else
-                {
-                    pre.right = makenew(cur);    
-                }
-                
-                break;
-            }
-            else if (cur.val < value) 
-            {
-                pre = cur;
-                cur = cur.right;
-            }
-            else 
-            {
-                pre = cur;
-                cur = cur.left;
-            }
-        }
-        
-        return dummy.right;  
-    }
-    
-    private TreeNode makenew(TreeNode node) 
-    {
-        if (node.left == null || node.right == null) 
-        {
-            return node.left == null ? node.right : node.left;
-        }
-        
-        TreeNode left = node.left.right;
-        TreeNode right = node.right.left == null ? node.right : node.right.left;
-        
-        while (right != null && right.left != null) 
-        {
-            right = right.left;
-        }
-        
-        
-        right.left = left;
-        node.left.right = node.right;
-        return node.left;
-    }
-}
diff --git a/450.delete-node-in-a-bst.92956949.Accepted.leetcode.java b/450.delete-node-in-a-bst.92956949.Accepted.leetcode.java
deleted file mode 100644
index 5367f43e..00000000
--- ./450.delete-node-in-a-bst.92956949.Accepted.leetcode.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public TreeNode deleteNode(TreeNode root, int value) 
-    {
-        TreeNode dummy = new TreeNode (-1), pre = dummy, cur = root;
-        dummy.right = root;
-        
-        while (cur != null) 
-        {
-            if (cur.val == value) 
-            {
-                if(pre.left == cur) 
-                {
-                    pre.left = makenew(cur);
-                }
-                else
-                {
-                    pre.right = makenew(cur);    
-                }
-                
-                break;
-            }
-            else if (cur.val < value) 
-            {
-                pre = cur;
-                cur = cur.right;
-            }
-            else 
-            {
-                pre = cur;
-                cur = cur.left;
-            }
-        }
-        
-        return dummy.right;  
-    }
-    
-    private TreeNode makenew(TreeNode node) 
-    {
-        if (node.left == null || node.right == null) 
-        {
-            return node.left == null ? node.right : node.left;
-        }
-        
-        TreeNode left = node.left.right;
-        TreeNode right = node.right.left == null ? node.right : node.right.left;
-        
-        while (right.left != null) 
-        {
-            right = right.left;
-        }
-        
-        
-        right.left = left;
-        node.left.right = node.right;
-        return node.left;
-    }
-}
diff --git a/450.delete-node-in-a-bst.93218634.Accepted.leetcode.java b/450.delete-node-in-a-bst.93218634.Accepted.leetcode.java
deleted file mode 100644
index 3f40d185..00000000
--- ./450.delete-node-in-a-bst.93218634.Accepted.leetcode.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution 
-{
-    public TreeNode deleteNode(TreeNode root, int value) 
-    {
-        TreeNode dummy = new TreeNode (-1), pre = dummy, cur = root;
-        dummy.right = root;
-        
-        while (cur != null) 
-        {
-            if (cur.val == value) 
-            {
-                if(pre.left == cur) 
-                {
-                    pre.left = makeNew(cur);
-                }
-                else
-                {
-                    pre.right = makeNew(cur);    
-                }
-                
-                break;
-            }
-            else if (cur.val < value) 
-            {
-                pre = cur;
-                cur = cur.right;
-            }
-            else 
-            {
-                pre = cur;
-                cur = cur.left;
-            }
-        }
-        
-        return dummy.right;  
-    }
-    
-    private TreeNode makeNew(TreeNode node) 
-    {
-        if (node.left == null || node.right == null) 
-        {
-            return node.left == null ? node.right : node.left;
-        }
-        
-        TreeNode left = node.left.right;
-        TreeNode right = node.right.left == null ? node.right : node.right.left;
-        
-        while (right.left != null) 
-        {
-            right = right.left;
-        }
-        
-        
-        right.left = left;
-        node.left.right = node.right;
-        return node.left;
-    }
-}
diff --git a/46.permutations.206075203.Wrong-Answer.leetcode.java b/46.permutations.206075203.Wrong-Answer.leetcode.java
deleted file mode 100644
index 7b4278a4..00000000
--- ./46.permutations.206075203.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> permute(int[] num)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        dfs(num, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    public void dfs(int[] num, List<Integer> current, List<List<Integer>> result)
-    {
-        for (int i = 0; i < num.length; i++)
-        {
-            if (current.contains(num[i]))
-            {
-                continue;
-            }
-
-            current.add(num[i]);
-            dfs(num, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/460.lfu-cache.151597749.Accepted.leetcode.java b/460.lfu-cache.151597749.Accepted.leetcode.java
deleted file mode 100644
index 9df6f99c..00000000
--- ./460.lfu-cache.151597749.Accepted.leetcode.java
+++ /dev/null
@@ -1,82 +0,0 @@
-public class LFUCache {
-    Node head = null;
-    final int capacity;
-    Map<Integer, Integer> valueMap;
-    Map<Integer, Node> nodeMap;
-
-    public LFUCache (int capacity) {
-        this.capacity = capacity;
-        valueMap = new HashMap<>(this.capacity, 1f);
-        nodeMap = new HashMap<>(this.capacity, 1f);
-    }
-
-    public int get(int key) {
-        if (valueMap.containsKey(key)) increase(key, valueMap.get(key));
-        return valueMap.getOrDefault(key, -1);
-    }
-
-    private void increase(int key, int value) {
-        Node node = nodeMap.get(key);
-        node.keys.remove(key);
-        if (Objects.isNull(node.next)) node.next = new Node(node, null, 1 + node.count, key);
-        else if (node.next.count == node.count + 1) node.next.keys.add(key);
-        else node.next = node.next.prev = new Node(node, node.next, node.count + 1, key);
-        nodeMap.put(key, node.next);
-        valueMap.put(key, value);
-        if (node.keys.isEmpty()) remove(node);
-    }
-
-    private void remove(Node node) {
-        if (head == node) head = node.next;
-        else node.prev.next = node.next;
-        if (Objects.nonNull(node.next)) node.next.prev = node.prev;
-    }
-
-    public void put(int key, int value) {
-        if (0 == this.capacity) return;
-        if (valueMap.containsKey(key)) {
-            increase(key, value);
-        } else {
-            if (valueMap.size() == this.capacity) remove();
-            valueMap.put(key, value);
-            add(key);
-        }
-    }
-
-    private void add(int key) {
-        if (Objects.isNull(head)) head = new Node(null, null, 1, key);
-        else if (head.count == 1) head.keys.add(key);
-        else head = head.prev = new Node(null, head, 1, key);
-        nodeMap.put(key, head);
-    }
-
-    private void remove() {
-        if (Objects.isNull(head)) return;
-        int oldest = head.keys.iterator().next();
-        head.keys.remove(oldest);
-        if (head.keys.isEmpty()) remove(head);
-        nodeMap.remove(oldest);
-        valueMap.remove(oldest);
-    }
-
-    class Node {
-        public Node prev, next;
-        public final int count;
-        public LinkedHashSet<Integer> keys = new LinkedHashSet<>();
-
-        public Node(Node prev, Node next, int count, int key) {
-            this.prev = prev;
-            this.next = next;
-            this.count = count;
-            keys.add(key);
-        }
-    }
-}
-
-/**
- * Your LFUCache object will be instantiated and called as such:
- * LFUCache obj = new LFUCache(capacity);
- * int param_1 = obj.get(key);
- * obj.set(key,value);
- */
-
diff --git a/460.lfu-cache.93292603.Accepted.leetcode.java b/460.lfu-cache.93292603.Accepted.leetcode.java
deleted file mode 100644
index b1a8d41c..00000000
--- ./460.lfu-cache.93292603.Accepted.leetcode.java
+++ /dev/null
@@ -1,81 +0,0 @@
-public class LFUCache {
-    Node head = null;
-    final int capacity;
-    Map<Integer, Integer> valueMap;
-    Map<Integer, Node> nodeMap;
-
-    public LFUCache (int capacity) {
-        this.capacity = capacity;
-        valueMap = new HashMap<>(this.capacity, 1f);
-        nodeMap = new HashMap<>(this.capacity, 1f);
-    }
-
-    public int get(int key) {
-        if (valueMap.containsKey(key)) increase(key, valueMap.get(key));
-        return valueMap.getOrDefault(key, -1);
-    }
-
-    private void increase(int key, int value) {
-        Node node = nodeMap.get(key);
-        node.keys.remove(key);
-        if (Objects.isNull(node.next)) node.next = new Node(node, null, 1 + node.count, key);
-        else if (node.next.count == node.count + 1) node.next.keys.add(key);
-        else node.next = node.next.prev = new Node(node, node.next, node.count + 1, key);
-        nodeMap.put(key, node.next);
-        valueMap.put(key, value);
-        if (node.keys.isEmpty()) remove(node);
-    }
-
-    private void remove(Node node) {
-        if (head == node) head = node.next;
-        else node.prev.next = node.next;
-        if (Objects.nonNull(node.next)) node.next.prev = node.prev;
-    }
-
-    public void put(int key, int value) {
-        if (0 == this.capacity) return;
-        if (valueMap.containsKey(key)) {
-            increase(key, value);
-        } else {
-            if (valueMap.size() == this.capacity) remove();
-            valueMap.put(key, value);
-            add(key);
-        }
-    }
-
-    private void add(int key) {
-        if (Objects.isNull(head)) head = new Node(null, null, 1, key);
-        else if (head.count == 1) head.keys.add(key);
-        else head = head.prev = new Node(null, head, 1, key);
-        nodeMap.put(key, head);
-    }
-
-    private void remove() {
-        if (Objects.isNull(head)) return;
-        int oldest = head.keys.iterator().next();
-        head.keys.remove(oldest);
-        if (head.keys.isEmpty()) remove(head);
-        nodeMap.remove(oldest);
-        valueMap.remove(oldest);
-    }
-
-    class Node {
-        public Node prev, next;
-        public final int count;
-        public LinkedHashSet<Integer> keys = new LinkedHashSet<>();
-
-        public Node(Node prev, Node next, int count, int key) {
-            this.prev = prev;
-            this.next = next;
-            this.count = count;
-            keys.add(key);
-        }
-    }
-}
-
-/**
- * Your LFUCache object will be instantiated and called as such:
- * LFUCache obj = new LFUCache(capacity);
- * int param_1 = obj.get(key);
- * obj.set(key,value);
- */
diff --git a/460.lfu-cache.93293115.Accepted.leetcode.java b/460.lfu-cache.93293115.Accepted.leetcode.java
deleted file mode 100644
index d1c64e86..00000000
--- ./460.lfu-cache.93293115.Accepted.leetcode.java
+++ /dev/null
@@ -1,144 +0,0 @@
-public class LFUCache
-{
-    Node head = null;
-    final int capacity;
-    Map<Integer, Integer> valueMap;
-    Map<Integer, Node> nodeMap;
-
-    public LFUCache(int capacity)
-    {
-        this.capacity = capacity;
-        valueMap = new HashMap<>(this.capacity, 1f);
-        nodeMap = new HashMap<>(this.capacity, 1f);
-    }
-
-    public int get(int key)
-    {
-        if (valueMap.containsKey(key))
-        {
-            increase(key, valueMap.get(key));
-        }
-
-        return valueMap.getOrDefault(key, -1);
-    }
-
-    private void increase(int key, int value)
-    {
-        Node node = nodeMap.get(key);
-        node.keys.remove(key);
-
-        if (Objects.isNull(node.next))
-        {
-            node.next = new Node(node, null, 1 + node.count, key);
-        }
-        else if (node.next.count == node.count + 1)
-        {
-            node.next.keys.add(key);
-        }
-        else
-        {
-            node.next = node.next.prev = new Node(node, node.next, node.count + 1, key);
-        }
-
-        nodeMap.put(key, node.next);
-        valueMap.put(key, value);
-
-        if (node.keys.isEmpty())
-        {
-            remove(node);
-        }
-    }
-
-    private void remove(Node node)
-    {
-        if (head == node)
-        {
-            head = node.next;
-        }
-        else
-        {
-            node.prev.next = node.next;
-        }
-
-        if (Objects.nonNull(node.next))
-        {
-            node.next.prev = node.prev;
-        }
-    }
-
-    public void put(int key, int value)
-    {
-        if (0 == this.capacity)
-        {
-            return;
-        }
-
-        if (valueMap.containsKey(key))
-        {
-            increase(key, value);
-        }
-        else
-        {
-            if (valueMap.size() == this.capacity)
-            {
-                remove();
-            }
-
-            valueMap.put(key, value);
-            add(key);
-        }
-    }
-
-    private void add(int key)
-    {
-        if (Objects.isNull(head))
-        {
-            head = new Node(null, null, 1, key);
-        }
-        else if (head.count == 1)
-        {
-            head.keys.add(key);
-        }
-        else
-        {
-            head = head.prev = new Node(null, head, 1, key);
-        }
-
-        nodeMap.put(key, head);
-    }
-
-    private void remove()
-    {
-        if (Objects.isNull(head))
-        {
-            return;
-        }
-
-        int oldest = head.keys.iterator().next();
-        head.keys.remove(oldest);
-
-        if (head.keys.isEmpty())
-        {
-            remove(head);
-        }
-
-        nodeMap.remove(oldest);
-        valueMap.remove(oldest);
-    }
-
-    class Node
-    {
-        public Node prev, next;
-        public final int count;
-        public LinkedHashSet<Integer> keys = new LinkedHashSet<>();
-
-        public Node(Node prev, Node next, int count, int key)
-        {
-            this.prev = prev;
-            this.next = next;
-            this.count = count;
-            keys.add(key);
-        }
-    }
-}
-
diff --git a/464.can-i-win.96483257.Accepted.leetcode.java b/464.can-i-win.96483257.Accepted.leetcode.java
deleted file mode 100644
index 3f4ca80a..00000000
--- ./464.can-i-win.96483257.Accepted.leetcode.java
+++ /dev/null
@@ -1,56 +0,0 @@
-public class Solution
-{
-    public boolean canIWin(int maxChoosableInteger, int desiredTotal)
-    {
-        if (desiredTotal <= 0)
-        {
-            return true;
-        }
-
-        //如果1到最大能选的值所有和都不能满足目标值，那么肯定失败
-        if (maxChoosableInteger * (maxChoosableInteger + 1) / 2 < desiredTotal)
-        {
-            return false;
-        }
-
-        char state[] = new char[maxChoosableInteger];
-
-        for (int i = 0; i < maxChoosableInteger; i++)
-        {
-            state[i] = '0';
-        }
-
-        return dfs(desiredTotal, state, new HashMap<>());
-    }
-    private boolean dfs(int total, char[] state, HashMap<String, Boolean> hashMap)
-    {
-        String key = new String(state);
-
-        if (hashMap.containsKey(key))
-        {
-            return hashMap.get(key);
-        }
-
-        for (int i = 0; i < state.length; i++)
-        {
-            if (state[i] == '0')
-            {
-                state[i] = '1';
-
-                if (total <= i + 1 || !dfs(total - (i + 1), state, hashMap))
-                {
-                    hashMap.put(key, true);
-                    state[i] = '0';
-                    return true;
-                }
-
-                state[i] = '0';
-            }
-        }
-
-        hashMap.put(key, false);
-        return false;
-    }
-
-
-}
diff --git a/47.permutations-ii.80431837.Wrong-Answer.leetcode.java b/47.permutations-ii.80431837.Wrong-Answer.leetcode.java
deleted file mode 100644
index 021cb9fb..00000000
--- ./47.permutations-ii.80431837.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> permuteUnique(int[] num)
-    {
-        if (num == null)
-        {
-            return null;
-        }
-
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (num.length == 0)
-        {
-            return result;
-        }
-
-        Arrays.sort(num);
-        dfs(num, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] num, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (current.size() == num.length)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int i = 0; i < num.length; i++)
-        {
-            if (i > 0 && num[i] == num[i - 1])
-            {
-                continue;
-            }
-
-            current.add(num[i]);
-            dfs(num, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
diff --git a/47.permutations-ii.80493252.Wrong-Answer.leetcode.java b/47.permutations-ii.80493252.Wrong-Answer.leetcode.java
deleted file mode 100644
index 04b9e343..00000000
--- ./47.permutations-ii.80493252.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> permuteUnique(int[] num)
-    {
-        if (num == null)
-        {
-            return null;
-        }
-
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (num.length == 0)
-        {
-            return result;
-        }
-
-        Arrays.sort(num);
-        dfs(num, new boolean[num.length], new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] num, boolean[] visited, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (current.size() == num.length)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int i = 0; i < num.length; i++)
-        {
-            if (i > 0 && !visited[i] && num[i] == num[i - 1])
-            {
-                continue;
-            }
-
-            current.add(num[i]);
-            visited[i] = true;
-            dfs(num, visited, current, result);
-            current.remove(current.size() - 1);
-            visited[i] = false;
-        }
-    }
-}
diff --git a/47.permutations-ii.80493392.Wrong-Answer.leetcode.java b/47.permutations-ii.80493392.Wrong-Answer.leetcode.java
deleted file mode 100644
index 17e855be..00000000
--- ./47.permutations-ii.80493392.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,44 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> permuteUnique(int[] num)
-    {
-        if (num == null)
-        {
-            return null;
-        }
-
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (num.length == 0)
-        {
-            return result;
-        }
-
-        Arrays.sort(num);
-        dfs(num, new boolean[num.length], new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] num, boolean[] visited, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (current.size() == num.length)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int i = 0; i < num.length; i++)
-        {
-            if (i > 0 && visited[i - 1] && num[i] == num[i - 1])
-            {
-                continue;
-            }
-
-            current.add(num[i]);
-            visited[i] = true;
-            dfs(num, visited, current, result);
-            current.remove(current.size() - 1);
-            visited[i] = false;
-        }
-    }
-}
diff --git a/47.permutations-ii.80493547.Accepted.leetcode.java b/47.permutations-ii.80493547.Accepted.leetcode.java
deleted file mode 100644
index 7ca0ef2f..00000000
--- ./47.permutations-ii.80493547.Accepted.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> permuteUnique(int[] num)
-    {
-        if (num == null)
-        {
-            return null;
-        }
-
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (num.length == 0)
-        {
-            return result;
-        }
-
-        Arrays.sort(num);
-        dfs(num, new boolean[num.length], new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] num, boolean[] visited, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (current.size() == num.length)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int i = 0; i < num.length; i++)
-        {
-            if (i > 0 && visited[i - 1] && num[i] == num[i - 1])
-            {
-                continue;
-            }
-            
-            if(visited[i])
-            {
-                continue;
-            }
-
-            current.add(num[i]);
-            visited[i] = true;
-            dfs(num, visited, current, result);
-            current.remove(current.size() - 1);
-            visited[i] = false;
-        }
-    }
-}
diff --git a/47.permutations-ii.96231425.Wrong-Answer.leetcode.java b/47.permutations-ii.96231425.Wrong-Answer.leetcode.java
deleted file mode 100644
index d70c795b..00000000
--- ./47.permutations-ii.96231425.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> permuteUnique(int[] num)
-    {
-        if (num == null)
-        {
-            return null;
-        }
-
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (num.length == 0)
-        {
-            return result;
-        }
-
-        Arrays.sort(num);
-        dfs(num, new boolean[num.length], new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] num, boolean[] visited, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (current.size() == num.length)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int i = 0; i < num.length; i++)
-        {
-            if (i > 0 && visited[i - 1] && num[i] == num[i - 1])
-            {
-                continue;
-            }
-
-            current.add(num[i]);
-            System.out.println("current --> " + current);
-            visited[i] = true;
-            dfs(num, visited, current, result);
-            current.remove(current.size() - 1);
-            visited[i] = false;
-        }
-    }
-}
diff --git a/47.permutations-ii.96231764.Accepted.leetcode.java b/47.permutations-ii.96231764.Accepted.leetcode.java
deleted file mode 100644
index c9b8c762..00000000
--- ./47.permutations-ii.96231764.Accepted.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> permuteUnique(int[] num)
-    {
-        if (num == null)
-        {
-            return null;
-        }
-
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (num.length == 0)
-        {
-            return result;
-        }
-
-        Arrays.sort(num);
-        dfs(num, new boolean[num.length], new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] num, boolean[] visited, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (current.size() == num.length)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int i = 0; i < num.length; i++)
-        {
-            if (i > 0 && visited[i - 1] && num[i] == num[i - 1])
-            {
-                continue;
-            }
-
-            if (visited[i])
-            {
-                continue;    
-            }
-            
-            current.add(num[i]);
-            visited[i] = true;
-            dfs(num, visited, current, result);
-            current.remove(current.size() - 1);
-            visited[i] = false;
-        }
-    }
-}
diff --git a/47.permutations-ii.96232492.Wrong-Answer.leetcode.java b/47.permutations-ii.96232492.Wrong-Answer.leetcode.java
deleted file mode 100644
index 93e07643..00000000
--- ./47.permutations-ii.96232492.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> permuteUnique(int[] num)
-    {
-        if (num == null)
-        {
-            return null;
-        }
-
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (num.length == 0)
-        {
-            return result;
-        }
-
-        Arrays.sort(num);
-        dfs(num, new boolean[num.length], new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] num, boolean[] visited, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (current.size() == num.length)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int i = 0; i < num.length; i++)
-        {
-            if (i > 0 && !visited[i] && num[i] == num[i - 1])
-            {
-                continue;
-            }
-
-            if (visited[i])
-            {
-                continue;
-            }
-            
-            current.add(num[i]);
-            visited[i] = true;
-            dfs(num, visited, current, result);
-            current.remove(current.size() - 1);
-            visited[i] = false;
-        }
-    }
-}
diff --git a/47.permutations-ii.96232862.Accepted.leetcode.java b/47.permutations-ii.96232862.Accepted.leetcode.java
deleted file mode 100644
index f2fd5d1d..00000000
--- ./47.permutations-ii.96232862.Accepted.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> permuteUnique(int[] num)
-    {
-        if (num == null)
-        {
-            return null;
-        }
-
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (num.length == 0)
-        {
-            return result;
-        }
-
-        Arrays.sort(num);
-        dfs(num, new boolean[num.length], new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] num, boolean[] visited, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (current.size() == num.length)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int i = 0; i < num.length; i++)
-        {
-            if (i > 0 && visited[i - 1] && num[i] == num[i - 1])
-            {
-                continue;
-            }
-
-            if (visited[i])
-            {
-                continue;
-            }
-            
-            current.add(num[i]);
-            visited[i] = true;
-            dfs(num, visited, current, result);
-            current.remove(current.size() - 1);
-            visited[i] = false;
-        }
-    }
-}
diff --git a/47.permutations-ii.96233075.Accepted.leetcode.java b/47.permutations-ii.96233075.Accepted.leetcode.java
deleted file mode 100644
index e1860dd3..00000000
--- ./47.permutations-ii.96233075.Accepted.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> permuteUnique(int[] num)
-    {
-        if (num == null)
-        {
-            return null;
-        }
-
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (num.length == 0)
-        {
-            return result;
-        }
-
-        Arrays.sort(num);
-        dfs(num, new boolean[num.length], new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] num, boolean[] visited, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (current.size() == num.length)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int i = 0; i < num.length; i++)
-        {
-            if (i > 0 && visited[i - 1] && num[i] == num[i - 1])
-            {
-                continue;
-            }
-            
-            if (visited[i])
-            {
-                continue;
-            }
-            
-            current.add(num[i]);
-            visited[i] = true;
-            dfs(num, visited, current, result);
-            current.remove(current.size() - 1);
-            visited[i] = false;
-        }
-    }
-}
diff --git a/47.permutations-ii.96233209.Accepted.leetcode.java b/47.permutations-ii.96233209.Accepted.leetcode.java
deleted file mode 100644
index 34c1294d..00000000
--- ./47.permutations-ii.96233209.Accepted.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> permuteUnique(int[] num)
-    {
-        if (num == null)
-        {
-            return null;
-        }
-
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (num.length == 0)
-        {
-            return result;
-        }
-
-        Arrays.sort(num);
-        dfs(num, new boolean[num.length], new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    private void dfs(int[] num, boolean[] visited, ArrayList<Integer> current, List<List<Integer>> result)
-    {
-        if (current.size() == num.length)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int i = 0; i < num.length; i++)
-        {
-            if (i > 0 && visited[i - 1] && num[i] == num[i - 1])
-            {
-                continue;
-            }
-
-            if (visited[i])
-            {
-                continue;
-            }
-
-            current.add(num[i]);
-            visited[i] = true;
-            dfs(num, visited, current, result);
-            current.remove(current.size() - 1);
-            visited[i] = false;
-        }
-    }
-}
diff --git a/48.rotate-image.28019109.Time-Limit-Exceeded.leetcode.java b/48.rotate-image.28019109.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 2a49ca27..00000000
--- ./48.rotate-image.28019109.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution {
-    public void rotate(int[][] matrix) {
-        int n = matrix.length;
-        for(int i = 1;i < n;i++)
-        {
-            for(int j = 0;j < i;j++)
-            {
-                matrix[i][j] ^= matrix[j][i];
-                matrix[j][i] ^= matrix[i][j];
-                matrix[i][j] ^= matrix[j][i];
-            }
-        }
-        for(int i = 0;i < n;i++)
-        {
-            int left = 0, right = n - 1;
-            while(left < right)
-            {
-                matrix[i][left] ^= matrix[i][right];
-                matrix[i][right] ^= matrix[i][left];
-                matrix[i][left] ^= matrix[i][right];
-            }
-        }
-    }
-}
diff --git a/48.rotate-image.35682804.Accepted.leetcode.java b/48.rotate-image.35682804.Accepted.leetcode.java
deleted file mode 100644
index ccd9ed0d..00000000
--- ./48.rotate-image.35682804.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-  public class Solution
-  {
-    public void rotate(int[][] matrix)
-    {
-      if (matrix == null)
-      {
-        return;
-      }
-
-      int n = matrix.length;
-      int i, j;
-
-      for (i = 0; i < n; i++)
-      {
-        for (j = 0; j < i; j++)
-        {
-          int tmp = matrix[i][j];
-          matrix[i][j] = matrix[j][i];
-          matrix[j][i] = tmp;
-        }
-      }
-
-      for (i = 0; i < n; i++)
-      {
-        for (j = 0; j < n / 2; j++)
-        {
-          int tmp = matrix[i][n - 1 - j];
-          matrix[i][n - 1 - j] = matrix[i][j];
-          matrix[i][j] = tmp;
-        }
-      }
-    }
-  }
-
diff --git a/48.rotate-image.35688592.Accepted.leetcode.java b/48.rotate-image.35688592.Accepted.leetcode.java
deleted file mode 100644
index 0e8b678e..00000000
--- ./48.rotate-image.35688592.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-  public class Solution
-  {
-    public void rotate(int[][] matrix)
-    {
-      if (matrix == null)
-      {
-        return;
-      }
-
-      int n = matrix.length;
-      int i, j;
-
-      for (i = 1; i < n; i++)
-      {
-        for (j = 0; j < i; j++)
-        {
-          int tmp = matrix[i][j];
-          matrix[i][j] = matrix[j][i];
-          matrix[j][i] = tmp;
-        }
-      }
-
-      for (i = 0; i < n; i++)
-      {
-        for (j = 0; j < n / 2; j++)
-        {
-          int tmp = matrix[i][n - 1 - j];
-          matrix[i][n - 1 - j] = matrix[i][j];
-          matrix[i][j] = tmp;
-        }
-      }
-    }
-  }
-
diff --git a/48.rotate-image.9430234.Accepted.leetcode.java b/48.rotate-image.9430234.Accepted.leetcode.java
deleted file mode 100644
index 81f75f24..00000000
--- ./48.rotate-image.9430234.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-  public class Solution {
-    public void rotate(int[][] matrix) {
-      if (matrix == null) {
-        return;
-      }
-
-      int n = matrix.length;
-      int i, j;
-
-      for (i = 0; i < n; i++)
-        for (j = 0; j < i; j++) {
-          int tmp = matrix[i][j];
-          matrix[i][j] = matrix[j][i];
-          matrix[j][i] = tmp;
-        }
-
-      for (i = 0; i < n; i++)
-        for (j = 0; j < n / 2; j++) {
-          int tmp = matrix[i][n - 1 - j];
-          matrix[i][n - 1 - j] = matrix[i][j];
-          matrix[i][j] = tmp;
-        }
-    }
-  }
-
diff --git a/49.group-anagrams.102397344.Wrong-Answer.leetcode.java b/49.group-anagrams.102397344.Wrong-Answer.leetcode.java
deleted file mode 100644
index 2fb6d113..00000000
--- ./49.group-anagrams.102397344.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class Solution
-{
-    public List<List<String>> groupAnagrams(String[] strs)
-    {
-        Map<String, List<String>> dict = new HashMap<String, List<String>>();
-
-        for (String str : strs)
-        {
-            char[] cs = str.toCharArray();
-            Arrays.sort(cs);
-            String anagram = new String(cs);
-            List<String> l = dict.get(anagram);
-
-            if (l == null)
-            {
-                l = new ArrayList<String>();
-                dict.put(anagram, l);
-            }
-
-            l.add(str);
-        }
-
-        List<List<String>> ans = new ArrayList<List<String>>();
-        Iterator<List<String>> iter = dict.values().iterator();
-
-        while (iter.hasNext())
-        {
-            List<String> item = (ArrayList<String>) iter.next();
-
-            if (item.size() > 1)
-            {
-                ans.add(item);
-            }
-        }
-
-        return ans;
-    }
-}
diff --git a/49.group-anagrams.102398357.Wrong-Answer.leetcode.java b/49.group-anagrams.102398357.Wrong-Answer.leetcode.java
deleted file mode 100644
index 1dda5acf..00000000
--- ./49.group-anagrams.102398357.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution
-{
-    public List<List<String>> groupAnagrams(String[] strs)
-    {
-        Map<String, List<String>> dict =
-            new HashMap<String, List<String>>();
-
-        for (String str : strs)
-        {
-            char[] cs = str.toCharArray();
-            Arrays.sort(cs);
-            String anagram = new String(cs);
-            List<String> l = dict.get(anagram);
-
-            if (l == null)
-            {
-                l = new ArrayList<String>();
-                dict.put(anagram, l);
-            }
-
-            l.add(str);
-        }
-
-        List<List<String>> ans = new ArrayList<List<String>>();
-        Iterator<List<String>> iter = dict.values().iterator();
-
-        while (iter.hasNext())
-        {
-            ArrayList<String> item = (ArrayList<String>) iter.next();
-
-            if (item.size() > 1)
-            {
-                ans.add(item);
-            }
-        }
-
-        return ans;
-    }
-}
diff --git a/49.group-anagrams.102398486.Accepted.leetcode.java b/49.group-anagrams.102398486.Accepted.leetcode.java
deleted file mode 100644
index 50328099..00000000
--- ./49.group-anagrams.102398486.Accepted.leetcode.java
+++ /dev/null
@@ -1,14 +0,0 @@
-public class Solution {
-    public List<List<String>> groupAnagrams(String[] strs) {
-        if (strs == null || strs.length == 0) return new ArrayList<List<String>>();
-        Map<String, List<String>> map = new HashMap<String, List<String>>();
-        for (String s : strs) {
-            char[] ca = s.toCharArray();
-            Arrays.sort(ca);
-            String keyStr = String.valueOf(ca);
-            if (!map.containsKey(keyStr)) map.put(keyStr, new ArrayList<String>());
-            map.get(keyStr).add(s);
-        }
-        return new ArrayList<List<String>>(map.values());
-    }
-}
diff --git a/49.group-anagrams.102398525.Accepted.leetcode.java b/49.group-anagrams.102398525.Accepted.leetcode.java
deleted file mode 100644
index 49bedae2..00000000
--- ./49.group-anagrams.102398525.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public List<List<String>> groupAnagrams(String[] strs)
-    {
-        if (strs == null || strs.length == 0)
-        {
-            return new ArrayList<List<String>>();
-        }
-
-        Map<String, List<String>> map = new HashMap<String, List<String>>();
-
-        for (String s : strs)
-        {
-            char[] ca = s.toCharArray();
-            Arrays.sort(ca);
-            String keyStr = String.valueOf(ca);
-
-            if (!map.containsKey(keyStr))
-            {
-                map.put(keyStr, new ArrayList<String>());
-            }
-
-            map.get(keyStr).add(s);
-        }
-
-        return new ArrayList<List<String>>(map.values());
-    }
-}
diff --git a/49.group-anagrams.102398803.Accepted.leetcode.java b/49.group-anagrams.102398803.Accepted.leetcode.java
deleted file mode 100644
index 404e53fb..00000000
--- ./49.group-anagrams.102398803.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public List<List<String>> groupAnagrams(String[] strs)
-    {
-        Map<String, List<String>> dict = new HashMap<String, List<String>>();
-
-        for (String str : strs)
-        {
-            char[] cs = str.toCharArray();
-            Arrays.sort(cs);
-            String anagram = new String(cs);
-            List<String> l = dict.get(anagram);
-
-            if (l == null)
-            {
-                l = new ArrayList<String>();
-                dict.put(anagram, l);
-            }
-
-            l.add(str);
-        }
-
-        return new ArrayList<List<String>>(dict.values());
-    }
-}
diff --git a/49.group-anagrams.35782855.Wrong-Answer.leetcode.java b/49.group-anagrams.35782855.Wrong-Answer.leetcode.java
deleted file mode 100644
index 58ef9ee1..00000000
--- ./49.group-anagrams.35782855.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-  public class Solution
-  {
-    public List<List<String>> groupAnagrams(String[] strs)
-    {
-      Map<String, List<String>> dict = new HashMap<String, List<String>>();
-
-      for (String str : strs)
-      {
-        char[] cs = str.toCharArray();
-        Arrays.sort(cs);
-        String anagram = new String(cs);
-        List<String> l = dict.get(anagram);
-
-        if (l == null)
-        {
-          l = new ArrayList<String>();
-          dict.put(anagram, l);
-        }
-
-        l.add(str);
-      }
-
-      List<List<String>> ans = new ArrayList<List<String>>();
-      Iterator<List<String>> iter = dict.values().iterator();
-
-      while (iter.hasNext())
-      {
-        List<String> item = (ArrayList<String>) iter.next();
-
-        if (item.size() > 1)
-        {
-          ans.add(item);
-        }
-      }
-
-      return ans;
-    }
-  }
-
diff --git a/49.group-anagrams.8239093.Accepted.leetcode.java b/49.group-anagrams.8239093.Accepted.leetcode.java
deleted file mode 100644
index 33204482..00000000
--- ./49.group-anagrams.8239093.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-  public class Solution {
-    public ArrayList<String> anagrams(String[] strs) {
-      Map<String, List<String>> dict = new HashMap<String, List<String>>();
-
-      for (String str : strs) {
-        char[] cs = str.toCharArray();
-        Arrays.sort(cs);
-        String anagram = new String(cs);
-        List<String> l = dict.get(anagram);
-
-        if (l == null) {
-          l = new ArrayList<String>();
-          dict.put(anagram, l);
-        }
-
-        l.add(str);
-      }
-
-      ArrayList<String> ans = new ArrayList<String>();
-      Iterator<List<String>> iter = dict.values().iterator();
-
-      while (iter.hasNext()) {
-        ArrayList<String> item = (ArrayList<String>) iter.next();
-
-        if (item.size() > 1) {
-          ans.addAll(item);
-        }
-      }
-
-      return ans;
-    }
-  }
-
diff --git a/5.longest-palindromic-substring.102040306.Wrong-Answer.leetcode.java b/5.longest-palindromic-substring.102040306.Wrong-Answer.leetcode.java
deleted file mode 100644
index a437e696..00000000
--- ./5.longest-palindromic-substring.102040306.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public String longestPalindrome(String s)
-    {
-        if (s == null || s.length() == 0)
-        {
-            return "";
-        }
-
-        boolean[][] dp = new boolean[s.length()][s.length()];
-        String res = "";
-        int maxLen = 0;
-
-        for (int left = 0; left < s.length(); left++)
-        {
-            for (int right = left; right < s.length(); right++)
-            {
-                if (s.charAt(left) == s.charAt(right) && (right - left <= 2 || dp[left + 1][right - 1]))
-                {
-                    dp[left][right] = true;
-
-                    if (maxLen < right - left + 1)
-                    {
-                        maxLen = right - left + 1;
-                        res = s.substring(left, right + 1);
-                    }
-                }
-            }
-        }
-
-        return res;
-    }
-}
diff --git a/5.longest-palindromic-substring.102040462.Wrong-Answer.leetcode.java b/5.longest-palindromic-substring.102040462.Wrong-Answer.leetcode.java
deleted file mode 100644
index 101485c3..00000000
--- ./5.longest-palindromic-substring.102040462.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public String longestPalindrome(String s)
-    {
-        if (s == null || s.length() == 0)
-        {
-            return "";
-        }
-
-        boolean[][] palin = new boolean[s.length()][s.length()];
-        String res = "";
-        int maxLen = 0;
-
-        for (int i = 0; i < s.length(); i++)
-        {
-            for (int j = i; j < s.length(); j++)
-            {
-                if (s.charAt(i) == s.charAt(j) && (j - i <= 2 || palin[i + 1][j - 1]))
-                {
-                    palin[i][j] = true;
-
-                    if (maxLen < j - i + 1)
-                    {
-                        maxLen = j - i + 1;
-                        res = s.substring(i, j + 1);
-                    }
-                }
-            }
-        }
-
-        return res;
-    }
-}
diff --git a/5.longest-palindromic-substring.102040591.Runtime-Error.leetcode.java b/5.longest-palindromic-substring.102040591.Runtime-Error.leetcode.java
deleted file mode 100644
index 89a5c7c9..00000000
--- ./5.longest-palindromic-substring.102040591.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,52 +0,0 @@
-public class Solution
-{
-    String longestPalindrome(String s)
-    {
-        int n = s.length();
-
-        if (n <= 1)
-        {
-            return s;
-        }
-
-        int maxlen = 1, k, j, a = 0;
-        int l;
-
-        for (int i = 1; i < n;)
-        {
-            k = i - 1;
-            j = i + 1;
-
-            while (k >= 0 && s.charAt(k) == s.charAt(i))
-            {
-                k-- ;
-            }
-
-            while (j < n && s.charAt(j) == s.charAt(i))
-            {
-                j++ ;
-            }
-
-            i = j;// 这个地方i=j 为了防止 s.charAt(i)出现多次，后面的一些判断就是多余。例如 baaaabc, 当i=1,此时
-            // j=5
-
-            // 从k和j开始向两边扩展
-
-            while (k >= 0 && j < n && s.charAt(k) == s.charAt(j))
-            {
-                k-- ;
-                j++ ;
-            }
-
-            l = j - k - 1;
-
-            if (maxlen < l)
-            {
-                a = k + 1;
-                maxlen = l;
-            }
-        }
-
-        return s.substring(a, maxlen);
-    }
-}
diff --git a/5.longest-palindromic-substring.102040675.Runtime-Error.leetcode.java b/5.longest-palindromic-substring.102040675.Runtime-Error.leetcode.java
deleted file mode 100644
index d0b484a2..00000000
--- ./5.longest-palindromic-substring.102040675.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public String longestPalindrome(String s)
-    {
-        int len = s.length();
-        Boolean[][] P = new Boolean[len][len];
-        int maxL = 0, start = 0, end = 0;
-
-        for (int i = 0; i < s.length(); i++)
-        {
-            for (int j = 0; j < i; j++)
-            {
-                P[j][i] = (s.charAt(j) == s.charAt(i) && (i - j < 2 || P[j + 1][i - 1]));
-
-                if (P[j][i] && maxL < (i - j + 1))
-                {
-                    maxL = i - j + 1;
-                    start = j;
-                    end = i;
-                }
-            }
-
-            P[i][i] = true;
-        }
-
-        return s.substring(start, end - start + 1);
-    }
-}
diff --git a/5.longest-palindromic-substring.102041094.Wrong-Answer.leetcode.java b/5.longest-palindromic-substring.102041094.Wrong-Answer.leetcode.java
deleted file mode 100644
index d1837f28..00000000
--- ./5.longest-palindromic-substring.102041094.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public String longestPalindrome(String s) {
-    if(s==null || s.length()<=1)
-        return s;
- 
-    int len = s.length();
-    int maxLen = 1;
-    boolean [][] dp = new boolean[len][len];
- 
-    String longest = null;
-    for(int l=0; l<s.length(); l++){
-        for(int i=0; i<len-l; i++){
-            int j = i+l;
-            if(s.charAt(i)==s.charAt(j) && (j-i<=2||dp[i+1][j-1])){
-                dp[i][j]=true;
- 
-                if(j-i+1>maxLen){
-                   maxLen = j-i+1; 
-                   longest = s.substring(i, j+1);
-                }
-            }
-        }
-    }
- 
-    return longest;
-}
-}
diff --git a/5.longest-palindromic-substring.102041119.Wrong-Answer.leetcode.java b/5.longest-palindromic-substring.102041119.Wrong-Answer.leetcode.java
deleted file mode 100644
index e972e591..00000000
--- ./5.longest-palindromic-substring.102041119.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public String longestPalindrome(String s)
-    {
-        if (s == null || s.length() <= 1)
-        {
-            return s;
-        }
-
-        int len = s.length();
-        int maxLen = 1;
-        boolean [][] dp = new boolean[len][len];
-        String longest = null;
-
-        for (int l = 0; l < s.length(); l++)
-        {
-            for (int i = 0; i < len - l; i++)
-            {
-                int j = i + l;
-
-                if (s.charAt(i) == s.charAt(j) && (j - i <= 2 || dp[i + 1][j - 1]))
-                {
-                    dp[i][j] = true;
-
-                    if (j - i + 1 > maxLen)
-                    {
-                        maxLen = j - i + 1;
-                        longest = s.substring(i, j + 1);
-                    }
-                }
-            }
-        }
-
-        return longest;
-    }
-}
diff --git a/5.longest-palindromic-substring.102041409.Accepted.leetcode.java b/5.longest-palindromic-substring.102041409.Accepted.leetcode.java
deleted file mode 100644
index eda4be6a..00000000
--- ./5.longest-palindromic-substring.102041409.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public String longestPalindrome(String s)
-    {
-        if (s == null || s.length() == 0)
-        {
-            return "";
-        }
-
-        boolean[][] dp = new boolean[s.length()][s.length()];
-        String res = "";
-        int maxLen = 0;
-
-        for (int left = s.length() - 1; left >= 0; left--)
-        {
-            for (int right = left; right < s.length(); right++)
-            {
-                if (s.charAt(left) == s.charAt(right) && (right - left <= 2 || dp[left + 1][right - 1]))
-                {
-                    dp[left][right] = true;
-
-                    if (maxLen < right - left + 1)
-                    {
-                        maxLen = right - left + 1;
-                        res = s.substring(left, right + 1);
-                    }
-                }
-            }
-        }
-
-        return res;
-    }
-}
diff --git a/5.longest-palindromic-substring.33344334.Accepted.leetcode.java b/5.longest-palindromic-substring.33344334.Accepted.leetcode.java
deleted file mode 100644
index 7dde2689..00000000
--- ./5.longest-palindromic-substring.33344334.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-  public class Solution
-  {
-    public String longestPalindrome(String s)
-    {
-      if (s == null || s.length() == 0)
-      {
-        return "";
-      }
-
-      boolean[][] palin = new boolean[s.length()][s.length()];
-      String res = "";
-      int maxLen = 0;
-
-      for (int i = s.length() - 1; i >= 0; i--)
-      {
-        for (int j = i; j < s.length(); j++)
-        {
-          if (s.charAt(i) == s.charAt(j) && (j - i <= 2 || palin[i + 1][j - 1]))
-          {
-            palin[i][j] = true;
-
-            if (maxLen < j - i + 1)
-            {
-              maxLen = j - i + 1;
-              res = s.substring(i, j + 1);
-            }
-          }
-        }
-      }
-
-      return res;
-    }
-  }
-
diff --git a/5.longest-palindromic-substring.33348857.Wrong-Answer.leetcode.java b/5.longest-palindromic-substring.33348857.Wrong-Answer.leetcode.java
deleted file mode 100644
index 003b03df..00000000
--- ./5.longest-palindromic-substring.33348857.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-  public class Solution
-  {
-    public String longestPalindrome(String s)
-    {
-      if (s == null || s.length() == 0)
-      {
-        return "";
-      }
-
-      boolean[][] palin = new boolean[s.length()][s.length()];
-      String res = "";
-      int maxLen = 0;
-
-      for (int i = 0; i < s.length(); i++)
-      {
-        for (int j = i; j < s.length(); j++)
-        {
-          if (s.charAt(i) == s.charAt(j) && (j - i <= 2 || palin[i + 1][j - 1]))
-          {
-            palin[i][j] = true;
-
-            if (maxLen < j - i + 1)
-            {
-              maxLen = j - i + 1;
-              res = s.substring(i, j + 1);
-            }
-          }
-        }
-      }
-
-      return res;
-    }
-  }
-
diff --git a/5.longest-palindromic-substring.33349601.Wrong-Answer.leetcode.java b/5.longest-palindromic-substring.33349601.Wrong-Answer.leetcode.java
deleted file mode 100644
index e8b7b8e7..00000000
--- ./5.longest-palindromic-substring.33349601.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-  public class Solution
-  {
-    public String longestPalindrome(String s)
-    {
-      if (s == null || s.length() == 0)
-      {
-        return "";
-      }
-
-      boolean[][] dp = new boolean[s.length()][s.length()];
-      String res = "";
-      int maxLen = 0;
-
-      for (int left = 0; left < s.length(); left++)
-      {
-        for (int right = left; right < s.length(); right++)
-        {
-          if (s.charAt(left) == s.charAt(right)
-              && (right - left <= 2 || dp[left + 1][right - 1]))
-          {
-            dp[left][right] = true;
-
-            if (maxLen < right - left + 1)
-            {
-              maxLen = right - left + 1;
-              res = s.substring(left, right + 1);
-            }
-          }
-        }
-      }
-
-      return res;
-    }
-  }
-
diff --git a/50.powx-n.10111908.Accepted.leetcode.java b/50.powx-n.10111908.Accepted.leetcode.java
deleted file mode 100644
index dc360e5a..00000000
--- ./50.powx-n.10111908.Accepted.leetcode.java
+++ /dev/null
@@ -1,15 +0,0 @@
-	public class Solution {
-		public double power(double x, int n) {
-			if (n == 0) {
-				return 1;
-			}
-
-			double v = power(x, n / 2);
-			return n % 2 == 0 ? v * v : v * v * x;
-		}
-
-		public double pow(double x, int n) {
-			return n < 0 ? 1 / power(x, -n) : power(x, n);
-		}
-	}
-
diff --git a/50.powx-n.35892560.Accepted.leetcode.java b/50.powx-n.35892560.Accepted.leetcode.java
deleted file mode 100644
index 578f72b3..00000000
--- ./50.powx-n.35892560.Accepted.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-  public class Solution
-  {
-    public double power(double x, int n)
-    {
-      if (n == 0)
-      {
-        return 1;
-      }
-
-      double v = power(x, n / 2);
-      return n % 2 == 0 ? v * v : v * v * x;
-    }
-
-    public double myPow(double x, int n)
-    {
-      return n < 0 ? 1 / power(x, -n) : power(x, n);
-    }
-  }
-
diff --git a/50.powx-n.7651462.Runtime-Error.leetcode.java b/50.powx-n.7651462.Runtime-Error.leetcode.java
deleted file mode 100644
index 4a0ab296..00000000
--- ./50.powx-n.7651462.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,14 +0,0 @@
-	public class Solution {
-		public double pow(double x, int n) {
-			if (n < 0)
-				return 1.0 / pow(x, -n);
-			if (n == 0)
-				return 1;
-			double v = pow(x, n / 2);
-			if (n % 2 == 0)
-				return v * v;
-			else
-				return v * v * x;
-		}
-	}
-
diff --git a/50.powx-n.7651551.Wrong-Answer.leetcode.java b/50.powx-n.7651551.Wrong-Answer.leetcode.java
deleted file mode 100644
index b53a09c0..00000000
--- ./50.powx-n.7651551.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,12 +0,0 @@
-	public class Solution {
-		public double pow(double x, int n) {
-			if (n == 0)
-				return 1;
-			double v = pow(x, n / 2);
-			if (n % 2 == 0)
-				return v * v;
-			else
-				return v * v * x;
-		}
-	}
-
diff --git a/50.powx-n.7656546.Accepted.leetcode.java b/50.powx-n.7656546.Accepted.leetcode.java
deleted file mode 100644
index ad73327e..00000000
--- ./50.powx-n.7656546.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution {
-public double pow(double x, int n) {
-	if (n == 0)
-		return 1;
-	if (n == 1)
-		return x;
- 
-	int pn = n > 0 ? n : -n;// positive n
-	int pn2 = pn;
- 
-	double px = x > 0 ? x : -x;// positive x
-	double result = px;
- 
-	int k = 1;
-	//the key part of solving this problem
-	while (pn / 2 > 0) {
-		result = result * result;
-		pn = pn / 2;
-		k = k * 2;
-	}
- 
-	result = result * pow(px, pn2 - k);
- 
-	// handle negative result
-	if (x < 0 && n % 2 == 1)
-		result = -result;
- 
-	// handle negative power
-	if (n < 0)
-		result = 1 / result;
- 
-	return result;
-    }
-}
diff --git a/50.powx-n.7656921.Accepted.leetcode.java b/50.powx-n.7656921.Accepted.leetcode.java
deleted file mode 100644
index 95d8d463..00000000
--- ./50.powx-n.7656921.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution {
-    public double pow(double x, int n) {
-        // Start typing your Java solution below
-        // DO NOT write main() function
-         
-        double ans = 1;
-        double tmp = x;
-        boolean neg = false;
-        long m = n;
-        if (m < 0) {
-            neg = true;
-            m = -m;
-        }
-        long bound = m;
-         
-        while (bound != 0) {
-            long i = 1;
-            for (; i*2 <= bound; i*=2) {
-                tmp = tmp * tmp;
-            }
-            ans *= tmp;
-            tmp = x;
-            bound = bound - i;
-        }
-         
-        if (neg) return 1.0 / ans;
-         
-        return ans;
-    }
-}
diff --git a/50.powx-n.7657033.Time-Limit-Exceeded.leetcode.java b/50.powx-n.7657033.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 556c53e6..00000000
--- ./50.powx-n.7657033.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-  public class Solution {
-    public double pow(double x, int n) {
-      double ans = 1;
-      double tmp = x;
-      boolean neg = false;
-
-      if (n < 0) {
-        neg = true;
-        n = -n;
-      }
-
-      long bound = n;
-
-      while (bound != 0) {
-        long i = 1;
-
-        for (; i * 2 <= bound; i *= 2) {
-          tmp = tmp * tmp;
-        }
-
-        ans *= tmp;
-        tmp = x;
-        bound = bound - i;
-      }
-
-      if (neg) {
-        return 1.0 / ans;
-      }
-
-      return ans;
-    }
-  }
-
diff --git a/50.powx-n.7657058.Accepted.leetcode.java b/50.powx-n.7657058.Accepted.leetcode.java
deleted file mode 100644
index 39c0ec4a..00000000
--- ./50.powx-n.7657058.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-  public class Solution {
-    public double pow(double x, int n) {
-      double ans = 1;
-      double tmp = x;
-      boolean neg = false;
-      long m = n;
-
-      if (m < 0) {
-        neg = true;
-        m = -m;
-      }
-
-      long bound = m;
-
-      while (bound != 0) {
-        long i = 1;
-
-        for (; i * 2 <= bound; i *= 2) {
-          tmp = tmp * tmp;
-        }
-
-        ans *= tmp;
-        tmp = x;
-        bound = bound - i;
-      }
-
-      if (neg) {
-        return 1.0 / ans;
-      }
-
-      return ans;
-    }
-  }
-
diff --git a/50.powx-n.9008949.Accepted.leetcode.java b/50.powx-n.9008949.Accepted.leetcode.java
deleted file mode 100644
index bab0cc5d..00000000
--- ./50.powx-n.9008949.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-  public class Solution {
-    public double power(double x, int n) {
-	if (n == 0)
-		return 1;
- 
-	double v = power(x, n / 2);
- 
-	if (n % 2 == 0) {
-		return v * v;
-	} else {
-		return v * v * x;
-	}
-}
- 
-public double pow(double x, int n) {
-	if (n < 0) {
-		return 1 / power(x, -n);
-	} else {
-		return power(x, n);
-	}
-}
-  }
-
diff --git a/50.powx-n.9009037.Accepted.leetcode.java b/50.powx-n.9009037.Accepted.leetcode.java
deleted file mode 100644
index 33d2f310..00000000
--- ./50.powx-n.9009037.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-  public class Solution {
-    public double power(double x, int n) {
-      if (n == 0) {
-        return 1;
-      }
-
-      double v = power(x, n / 2);
-
-      if (n % 2 == 0) {
-        return v * v;
-      }
-      else {
-        return v * v * x;
-      }
-    }
-
-    public double pow(double x, int n) {
-      if (n < 0) {
-        return 1 / power(x, -n);
-      }
-      else {
-        return power(x, n);
-      }
-    }
-  }
-
diff --git a/508.most-frequent-subtree-sum.98152694.Accepted.leetcode.java b/508.most-frequent-subtree-sum.98152694.Accepted.leetcode.java
deleted file mode 100644
index 47a07195..00000000
--- ./508.most-frequent-subtree-sum.98152694.Accepted.leetcode.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution {
-    public int[] findFrequentTreeSum(TreeNode root) {
-        if(root == null) return new int[0];
-        
-        Map<Integer, Integer> map = new HashMap<>();
-        treeSum(map, root);
-        
-        int max = Integer.MIN_VALUE;
-        int count = 0;
-        for(int key : map.keySet()){
-            if(map.get(key) > max) {
-                max = map.get(key);
-                count = 1;
-            }
-            else if(map.get(key) == max) {
-                count++;
-            }
-        } 
-        
-        int[] res = new int[count];
-        count = 0;
-        for(int key : map.keySet()){
-            if(map.get(key) == max) res[count++] = key;
-        }
-        
-        return res;
-    }
-    
-    public int treeSum(Map<Integer, Integer> map, TreeNode root) {
-        if(root == null) return 0;
-        else {
-            root.val = root.val + treeSum(map, root.left) + treeSum(map, root.right);
-            if(map.containsKey(root.val)) {
-                map.put(root.val, map.get(root.val)+1);
-            }
-            else {
-                map.put(root.val, 1);
-            }
-            return root.val;
-        }
-    }
-}
diff --git a/508.most-frequent-subtree-sum.98153948.Accepted.leetcode.java b/508.most-frequent-subtree-sum.98153948.Accepted.leetcode.java
deleted file mode 100644
index 9f086c39..00000000
--- ./508.most-frequent-subtree-sum.98153948.Accepted.leetcode.java
+++ /dev/null
@@ -1,64 +0,0 @@
-public class Solution
-{
-    public int[] findFrequentTreeSum(TreeNode root)
-    {
-        if (root == null)
-        {
-            return new int[0];
-        }
-
-        Map<Integer, Integer> map = new HashMap<>();
-        treeSum(map, root);
-        int max = Integer.MIN_VALUE;
-        int count = 0;
-
-        for (int key : map.keySet())
-        {
-            if (map.get(key) > max)
-            {
-                max = map.get(key);
-                count = 1;
-            }
-            else if (map.get(key) == max)
-            {
-                count++;
-            }
-        }
-
-        int[] res = new int[count];
-        count = 0;
-
-        for (int key : map.keySet())
-        {
-            if (map.get(key) == max)
-            {
-                res[count++] = key;
-            }
-        }
-
-        return res;
-    }
-
-    public int treeSum(Map<Integer, Integer> map, TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-        else
-        {
-            root.val = root.val + treeSum(map, root.left) + treeSum(map, root.right);
-
-            if (map.containsKey(root.val))
-            {
-                map.put(root.val, map.get(root.val) + 1);
-            }
-            else
-            {
-                map.put(root.val, 1);
-            }
-
-            return root.val;
-        }
-    }
-}
diff --git a/508.most-frequent-subtree-sum.98154068.Wrong-Answer.leetcode.java b/508.most-frequent-subtree-sum.98154068.Wrong-Answer.leetcode.java
deleted file mode 100644
index 0134def6..00000000
--- ./508.most-frequent-subtree-sum.98154068.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,56 +0,0 @@
-public class Solution
-{
-    public int[] findFrequentTreeSum(TreeNode root)
-    {
-        if (root == null)
-        {
-            return new int[0];
-        }
-
-        Map<Integer, Integer> map = new HashMap<>();
-        treeSum(map, root);
-        int max = Integer.MIN_VALUE;
-        int count = 0;
-
-        for (int key : map.keySet())
-        {
-            if (map.get(key) > max)
-            {
-                max = map.get(key);
-                count = 1;
-            }
-            else if (map.get(key) == max)
-            {
-                count++;
-            }
-        }
-
-        int[] res = new int[count];
-        count = 0;
-
-        for (int key : map.keySet())
-        {
-            if (map.get(key) == max)
-            {
-                res[count++] = key;
-            }
-        }
-
-        return res;
-    }
-
-    public int treeSum(Map<Integer, Integer> map, TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-        else
-        {
-            root.val = root.val + treeSum(map, root.left) + treeSum(map, root.right);
-
-
-            return root.val;
-        }
-    }
-}
diff --git a/508.most-frequent-subtree-sum.98154181.Accepted.leetcode.java b/508.most-frequent-subtree-sum.98154181.Accepted.leetcode.java
deleted file mode 100644
index dacbf8c5..00000000
--- ./508.most-frequent-subtree-sum.98154181.Accepted.leetcode.java
+++ /dev/null
@@ -1,62 +0,0 @@
-public class Solution
-{
-    public int[] findFrequentTreeSum(TreeNode root)
-    {
-        if (root == null)
-        {
-            return new int[0];
-        }
-
-        Map<Integer, Integer> map = new HashMap<>();
-        treeSum(map, root);
-        int max = Integer.MIN_VALUE;
-        int count = 0;
-
-        for (int key : map.keySet())
-        {
-            if (map.get(key) > max)
-            {
-                max = map.get(key);
-                count = 1;
-            }
-            else if (map.get(key) == max)
-            {
-                count++;
-            }
-        }
-
-        int[] res = new int[count];
-        count = 0;
-
-        for (int key : map.keySet())
-        {
-            if (map.get(key) == max)
-            {
-                res[count++] = key;
-            }
-        }
-
-        return res;
-    }
-
-    public int treeSum(Map<Integer, Integer> map, TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        root.val = root.val + treeSum(map, root.left) + treeSum(map, root.right);
-
-        if (map.containsKey(root.val))
-        {
-            map.put(root.val, map.get(root.val) + 1);
-        }
-        else
-        {
-            map.put(root.val, 1);
-        }
-
-        return root.val;
-    }
-}
diff --git a/508.most-frequent-subtree-sum.98154214.Accepted.leetcode.java b/508.most-frequent-subtree-sum.98154214.Accepted.leetcode.java
deleted file mode 100644
index cee55c19..00000000
--- ./508.most-frequent-subtree-sum.98154214.Accepted.leetcode.java
+++ /dev/null
@@ -1,57 +0,0 @@
-public class Solution
-{
-    public int[] findFrequentTreeSum(TreeNode root)
-    {
-        Map<Integer, Integer> map = new HashMap<>();
-        treeSum(map, root);
-        int max = Integer.MIN_VALUE;
-        int count = 0;
-
-        for (int key : map.keySet())
-        {
-            if (map.get(key) > max)
-            {
-                max = map.get(key);
-                count = 1;
-            }
-            else if (map.get(key) == max)
-            {
-                count++;
-            }
-        }
-
-        int[] res = new int[count];
-        count = 0;
-
-        for (int key : map.keySet())
-        {
-            if (map.get(key) == max)
-            {
-                res[count++] = key;
-            }
-        }
-
-        return res;
-    }
-
-    public int treeSum(Map<Integer, Integer> map, TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        root.val = root.val + treeSum(map, root.left) + treeSum(map, root.right);
-
-        if (map.containsKey(root.val))
-        {
-            map.put(root.val, map.get(root.val) + 1);
-        }
-        else
-        {
-            map.put(root.val, 1);
-        }
-
-        return root.val;
-    }
-}
diff --git a/508.most-frequent-subtree-sum.98158790.Runtime-Error.leetcode.java b/508.most-frequent-subtree-sum.98158790.Runtime-Error.leetcode.java
deleted file mode 100644
index 4728e8ce..00000000
--- ./508.most-frequent-subtree-sum.98158790.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,52 +0,0 @@
-public class Solution
-{
-    public int[] findFrequentTreeSum(TreeNode root)
-    {
-        Map<Integer, Integer> map = new HashMap<>();
-        treeSum(map, root);
-        int max = Integer.MIN_VALUE;
-        int count = 0;
-
-        for (int key : map.keySet())
-        {
-            if (map.get(key) > max)
-            {
-                max = map.get(key);
-                count = 1;
-            }
-            else if (map.get(key) == max)
-            {
-                count++;
-            }
-        }
-
-        int[] res = new int[count];
-        count = 0;
-
-        for (int key : map.keySet())
-        {
-            if (map.get(key) == max)
-            {
-                res[count++] = key;
-            }
-        }
-
-        return res;
-    }
-
-    public int treeSum(Map<Integer, Integer> map, TreeNode root)
-    {
-        root.val = root.val + treeSum(map, root.left) + treeSum(map, root.right);
-
-        if (map.containsKey(root.val))
-        {
-            map.put(root.val, map.get(root.val) + 1);
-        }
-        else
-        {
-            map.put(root.val, 1);
-        }
-
-        return root.val;
-    }
-}
diff --git a/508.most-frequent-subtree-sum.98158906.Wrong-Answer.leetcode.java b/508.most-frequent-subtree-sum.98158906.Wrong-Answer.leetcode.java
deleted file mode 100644
index 04523695..00000000
--- ./508.most-frequent-subtree-sum.98158906.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,50 +0,0 @@
-public class Solution
-{
-    public int[] findFrequentTreeSum(TreeNode root)
-    {
-        Map<Integer, Integer> map = new HashMap<>();
-        treeSum(map, root);
-        int max = Integer.MIN_VALUE;
-        int count = 0;
-
-        for (int key : map.keySet())
-        {
-            if (map.get(key) > max)
-            {
-                max = map.get(key);
-                count = 1;
-            }
-            else if (map.get(key) == max)
-            {
-                count++;
-            }
-        }
-
-        int[] res = new int[count];
-        count = 0;
-
-        
-        return res;
-    }
-
-    public int treeSum(Map<Integer, Integer> map, TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        root.val = root.val + treeSum(map, root.left) + treeSum(map, root.right);
-
-        if (map.containsKey(root.val))
-        {
-            map.put(root.val, map.get(root.val) + 1);
-        }
-        else
-        {
-            map.put(root.val, 1);
-        }
-
-        return root.val;
-    }
-}
diff --git a/508.most-frequent-subtree-sum.98158935.Wrong-Answer.leetcode.java b/508.most-frequent-subtree-sum.98158935.Wrong-Answer.leetcode.java
deleted file mode 100644
index 2c40a2d2..00000000
--- ./508.most-frequent-subtree-sum.98158935.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-public class Solution
-{
-    public int[] findFrequentTreeSum(TreeNode root)
-    {
-        Map<Integer, Integer> map = new HashMap<>();
-        treeSum(map, root);
-        int max = Integer.MIN_VALUE;
-        int count = 0;
-
-        
-        int[] res = new int[count];
-        count = 0;
-
-        for (int key : map.keySet())
-        {
-            if (map.get(key) == max)
-            {
-                res[count++] = key;
-            }
-        }
-
-        return res;
-    }
-
-    public int treeSum(Map<Integer, Integer> map, TreeNode root)
-    {
-        if (root == null)
-        {
-            return 0;
-        }
-
-        root.val = root.val + treeSum(map, root.left) + treeSum(map, root.right);
-
-        if (map.containsKey(root.val))
-        {
-            map.put(root.val, map.get(root.val) + 1);
-        }
-        else
-        {
-            map.put(root.val, 1);
-        }
-
-        return root.val;
-    }
-}
diff --git a/51.n-queens.157943700.Accepted.leetcode.java b/51.n-queens.157943700.Accepted.leetcode.java
deleted file mode 100644
index 4d3a9077..00000000
--- ./51.n-queens.157943700.Accepted.leetcode.java
+++ /dev/null
@@ -1,58 +0,0 @@
-public class Solution
-{
-    public List<List<String>> solveNQueens(int n)
-    {
-        List<List<String>> result = new ArrayList<List<String>>();
-        dfs(n, 0, new int[n], result);
-        return result;
-    }
-
-    private void dfs(int n, int row, int[] columnForRow, List<List<String>> result)
-    {
-        if (row == n)
-        {
-            List<String> strRows = new ArrayList<String>();
-            char[] strRow = new char[n];
-            Arrays.fill(strRow, '.');
-
-            for (int i = 0; i < n; i++)
-            {
-                strRow[columnForRow[i]] = 'Q';
-                strRows.add(new String(strRow));
-                strRow[columnForRow[i]] = '.';
-            }
-
-            result.add(strRows);
-            return;
-        }
-
-        for (int col = 0; col < n; col++)
-        {
-            if (isValid(n, columnForRow, row, col))
-            {
-                columnForRow[row] = col;
-                dfs(n, row + 1, columnForRow, result);
-            }
-        }
-    }
-
-    private boolean isValid(int n, int[] columnForRow, int row, int col)
-    {
-        int leftTop = col;
-        int rightTop = col;
-
-        for (int i = row - 1; i >= 0; i--)
-        {
-            leftTop--;
-            rightTop++;
-
-            if (columnForRow[i] == col || columnForRow[i] == leftTop || columnForRow[i] == rightTop)
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-}
-
diff --git a/51.n-queens.157944762.Accepted.leetcode.java b/51.n-queens.157944762.Accepted.leetcode.java
deleted file mode 100644
index f77ee92f..00000000
--- ./51.n-queens.157944762.Accepted.leetcode.java
+++ /dev/null
@@ -1,66 +0,0 @@
-public class Solution
-{
-    public List<List<String>> solveNQueens(int n)
-    {
-        List<List<String>> res = new ArrayList<List<String>>();
-        dfs(res, new int[n], 0, n);
-        return res;
-    }
-
-    public void dfs(List<List<String>> res, int[] usedColumns, int curRow, int total)
-    {
-        if (curRow == total)
-        {
-            List<String> board = new ArrayList<String>();
-
-            for (int row = 0; row < total; row++)
-            {
-                StringBuilder sb = new StringBuilder();
-
-                for (int col = 0; col < total; col++)
-                {
-                    if (col == usedColumns[row])
-                    {
-                        sb.append("Q");
-                    }
-                    else
-                    {
-                        sb.append(".");
-                    }
-                }
-
-                board.add(sb.toString());
-            }
-
-            res.add(board);
-            return;
-        }
-
-        for (int col = 0; col < total; col++)
-        {
-            usedColumns[curRow] = col;
-
-            if (isValidSolution(curRow, usedColumns))
-            {
-                dfs(res, usedColumns, curRow + 1, total);
-            }
-
-            usedColumns[curRow] = -1;
-        }
-    }
-
-    private boolean isValidSolution(int curRow, int[] usedColumns)
-    {
-        for (int row = 0; row < curRow; row++)
-        {
-            if (usedColumns[row] == usedColumns[curRow]
-                    || curRow - row == Math.abs(usedColumns[row] - usedColumns[curRow]))
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-}
-
diff --git a/51.n-queens.157944834.Accepted.leetcode.java b/51.n-queens.157944834.Accepted.leetcode.java
deleted file mode 100644
index 4ce63247..00000000
--- ./51.n-queens.157944834.Accepted.leetcode.java
+++ /dev/null
@@ -1,64 +0,0 @@
-public class Solution
-{
-    public List<List<String>> solveNQueens(int n)
-    {
-        List<List<String>> result = new ArrayList<List<String>>();
-        dfs(n, 0, new int[n], result);
-        return result;
-    }
-
-    private void dfs(int n, int row, int[] columnForRow, List<List<String>> result)
-    {
-        if (row == n)
-        {
-            List<String> item = new ArrayList<String>();
-
-            for (int i = 0; i < n; i++)
-            {
-                StringBuilder strRow = new StringBuilder();
-
-                for (int j = 0; j < n; j++)
-                {
-                    if (columnForRow[i] == j)
-                    {
-                        strRow.append('Q');
-                    }
-                    else
-                    {
-                        strRow.append('.');
-                    }
-                }
-
-                item.add(strRow.toString());
-            }
-
-            result.add(item);
-            return;
-        }
-
-        for (int i = 0; i < n; i++)
-        {
-            columnForRow[row] = i;
-
-            if (isValid(row, columnForRow))
-            {
-                dfs(n, row + 1, columnForRow, result);
-            }
-        }
-    }
-
-    private boolean isValid(int row, int[] columnForRow)
-    {
-        for (int i = 0; i < row; i++)
-        {
-            if (columnForRow[row] == columnForRow[i]
-                    || Math.abs(columnForRow[row] - columnForRow[i]) == row - i)
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-}
-
diff --git a/51.n-queens.157944878.Accepted.leetcode.java b/51.n-queens.157944878.Accepted.leetcode.java
deleted file mode 100644
index db7916a6..00000000
--- ./51.n-queens.157944878.Accepted.leetcode.java
+++ /dev/null
@@ -1,63 +0,0 @@
-public class Solution
-{
-    public List<List<String>> solveNQueens(int n)
-    {
-        List<List<String>> result = new ArrayList<List<String>>();
-        dfs(n, 0, new int[n], result);
-        return result;
-    }
-
-    private void dfs(int n, int row, int[] columnForRow, List<List<String>> result)
-    {
-        if (row == n)
-        {
-            List<String> item = new ArrayList<String>();
-
-            for (int i = 0; i < n; i++)
-            {
-                StringBuilder strRow = new StringBuilder();
-
-                for (int j = 0; j < n; j++)
-                {
-                    if (columnForRow[i] == j)
-                    {
-                        strRow.append('Q');
-                    }
-                    else
-                    {
-                        strRow.append('.');
-                    }
-                }
-
-                item.add(strRow.toString());
-            }
-
-            result.add(item);
-            return;
-        }
-
-        for (int i = 0; i < n; i++)
-        {
-            columnForRow[row] = i;
-
-            if (isValid(row, columnForRow))
-            {
-                dfs(n, row + 1, columnForRow, result);
-            }
-        }
-    }
-
-    private boolean isValid(int row, int[] columnForRow)
-    {
-        for (int i = 0; i < row; i++)
-        {
-            if (columnForRow[row] == columnForRow[i] || Math.abs(columnForRow[row] - columnForRow[i]) == row - i)
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-}
-
diff --git a/51.n-queens.157944929.Accepted.leetcode.java b/51.n-queens.157944929.Accepted.leetcode.java
deleted file mode 100644
index 3a13f176..00000000
--- ./51.n-queens.157944929.Accepted.leetcode.java
+++ /dev/null
@@ -1,82 +0,0 @@
-class Solution
-{
-    List<List<String>> solveNQueens(int n)
-    {
-        List<List<String>> result = new ArrayList<>();
-
-        if (n <= 0)
-        {
-            return result;
-        }
-
-        int[] row = new int[n];
-        dfs(result, row, n, 0);
-        return result;
-    }
-
-    private void dfs(List<List<String>> result, int[] row, int n, int index)
-    {
-        if (index == n)
-        {
-            ArrayList<String> singleResult = translateString(row);
-            result.add(singleResult);
-            return;
-        }
-
-        for (int i = 0; i < n; i++)
-        {
-            if (isValid(row, index, i))
-            {
-                row[index] = i;
-                dfs(result, row, n, index + 1);
-                row[index] = 0;
-            }
-        }
-    }
-
-    private ArrayList<String> translateString(int[] row)
-    {
-        ArrayList<String> result = new ArrayList<>();
-
-        for (int i = 0; i < row.length; i++)
-        {
-            StringBuilder sb = new StringBuilder();
-
-            for (int j = 0; j < row.length; j++)
-            {
-                if (j == row[i])
-                {
-                    sb.append('Q');
-                }
-                else
-                {
-                    sb.append('.');
-                }
-            }
-
-            result.add(sb.toString());
-        }
-
-        return result;
-    }
-
-    private boolean isValid(int[] row, int rowNum, int columnNum)
-    {
-        for (int i = 0; i < rowNum; i++)
-        {
-            if (row[i] == columnNum)
-            {
-                return false;
-            }
-
-            if (Math.abs(row[i] - columnNum) == Math.abs(i - rowNum))
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-}
-
diff --git a/51.n-queens.157945128.Accepted.leetcode.java b/51.n-queens.157945128.Accepted.leetcode.java
deleted file mode 100644
index dfc3c4ef..00000000
--- ./51.n-queens.157945128.Accepted.leetcode.java
+++ /dev/null
@@ -1,81 +0,0 @@
-class Solution
-{
-    List<List<String>> solveNQueens(int n)
-    {
-        List<List<String>> result = new ArrayList<>();
-
-        if (n <= 0)
-        {
-            return result;
-        }
-
-        int[] row = new int[n];
-        dfs(result, row, n, 0);
-        return result;
-    }
-
-    private void dfs(List<List<String>> result, int[] row, int n, int index)
-    {
-        if (index == n)
-        {
-            result.add(translateString(row));
-            return;
-        }
-
-        for (int i = 0; i < n; i++)
-        {
-            if (isValid(row, index, i))
-            {
-                row[index] = i;
-                dfs(result, row, n, index + 1);
-                row[index] = 0;
-            }
-        }
-    }
-
-    private ArrayList<String> translateString(int[] row)
-    {
-        ArrayList<String> result = new ArrayList<>();
-
-        for (int i = 0; i < row.length; i++)
-        {
-            StringBuilder sb = new StringBuilder();
-
-            for (int j = 0; j < row.length; j++)
-            {
-                if (j == row[i])
-                {
-                    sb.append('Q');
-                }
-                else
-                {
-                    sb.append('.');
-                }
-            }
-
-            result.add(sb.toString());
-        }
-
-        return result;
-    }
-
-    private boolean isValid(int[] row, int rowNum, int columnNum)
-    {
-        for (int i = 0; i < rowNum; i++)
-        {
-            if (row[i] == columnNum)
-            {
-                return false;
-            }
-
-            if (Math.abs(row[i] - columnNum) == Math.abs(i - rowNum))
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-}
-
diff --git a/51.n-queens.157945219.Accepted.leetcode.java b/51.n-queens.157945219.Accepted.leetcode.java
deleted file mode 100644
index 80237ac4..00000000
--- ./51.n-queens.157945219.Accepted.leetcode.java
+++ /dev/null
@@ -1,81 +0,0 @@
-class Solution
-{
-    List<List<String>> solveNQueens(int n)
-    {
-        List<List<String>> result = new ArrayList<>();
-
-        if (n <= 0)
-        {
-            return result;
-        }
-
-        int[] rows = new int[n];
-        dfs(result, rows, n, 0);
-        return result;
-    }
-
-    private void dfs(List<List<String>> result, int[] rows, int n, int rowIndex)
-    {
-        if (rowIndex == n)
-        {
-            result.add(translateString(rows));
-            return;
-        }
-
-        for (int i = 0; i < n; i++)
-        {
-            if (isValid(rows, rowIndex, i))
-            {
-                rows[rowIndex] = i;
-                dfs(result, rows, n, rowIndex + 1);
-                rows[rowIndex] = 0;
-            }
-        }
-    }
-
-    private ArrayList<String> translateString(int[] rows)
-    {
-        ArrayList<String> result = new ArrayList<>();
-
-        for (int i = 0; i < rows.length; i++)
-        {
-            StringBuilder sb = new StringBuilder();
-
-            for (int j = 0; j < rows.length; j++)
-            {
-                if (j == rows[i])
-                {
-                    sb.append('Q');
-                }
-                else
-                {
-                    sb.append('.');
-                }
-            }
-
-            result.add(sb.toString());
-        }
-
-        return result;
-    }
-
-    private boolean isValid(int[] rows, int rowNum, int columnNum)
-    {
-        for (int i = 0; i < rowNum; i++)
-        {
-            if (rows[i] == columnNum)
-            {
-                return false;
-            }
-
-            if (Math.abs(rows[i] - columnNum) == Math.abs(i - rowNum))
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-}
-
diff --git a/51.n-queens.157945282.Accepted.leetcode.java b/51.n-queens.157945282.Accepted.leetcode.java
deleted file mode 100644
index ecce14be..00000000
--- ./51.n-queens.157945282.Accepted.leetcode.java
+++ /dev/null
@@ -1,81 +0,0 @@
-class Solution
-{
-    List<List<String>> solveNQueens(int n)
-    {
-        List<List<String>> result = new ArrayList<>();
-
-        if (n <= 0)
-        {
-            return result;
-        }
-
-        int[] rows = new int[n];
-        dfs(result, rows, n, 0);
-        return result;
-    }
-
-    private void dfs(List<List<String>> result, int[] rows, int n, int rowIndex)
-    {
-        if (rowIndex == n)
-        {
-            result.add(translateString(rows));
-            return;
-        }
-
-        for (int colIndex = 0; colIndex < n; colIndex++)
-        {
-            if (isValid(rows, rowIndex, colIndex))
-            {
-                rows[rowIndex] = colIndex;
-                dfs(result, rows, n, rowIndex + 1);
-                rows[rowIndex] = 0;
-            }
-        }
-    }
-
-    private ArrayList<String> translateString(int[] rows)
-    {
-        ArrayList<String> result = new ArrayList<>();
-
-        for (int i = 0; i < rows.length; i++)
-        {
-            StringBuilder sb = new StringBuilder();
-
-            for (int j = 0; j < rows.length; j++)
-            {
-                if (j == rows[i])
-                {
-                    sb.append('Q');
-                }
-                else
-                {
-                    sb.append('.');
-                }
-            }
-
-            result.add(sb.toString());
-        }
-
-        return result;
-    }
-
-    private boolean isValid(int[] rows, int rowIndex, int colIndex)
-    {
-        for (int i = 0; i < rowIndex; i++)
-        {
-            if (rows[i] == colIndex)
-            {
-                return false;
-            }
-
-            if (Math.abs(rows[i] - colIndex) == Math.abs(i - rowIndex))
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-}
-
diff --git a/51.n-queens.157945345.Accepted.leetcode.java b/51.n-queens.157945345.Accepted.leetcode.java
deleted file mode 100644
index 925dd362..00000000
--- ./51.n-queens.157945345.Accepted.leetcode.java
+++ /dev/null
@@ -1,82 +0,0 @@
-class Solution
-{
-    List<List<String>> solveNQueens(int n)
-    {
-        List<List<String>> result = new ArrayList<>();
-
-        if (n <= 0)
-        {
-            return result;
-        }
-
-        int[] rows = new int[n];
-        dfs(result, rows, n, 0);
-        return result;
-    }
-
-    private void dfs(List<List<String>> result, int[] rows, int n, int rowIndex)
-    {
-        if (rowIndex == n)
-        {
-            result.add(translateString(rows));
-            return;
-        }
-
-        for (int colIndex = 0; colIndex < n; colIndex++)
-        {
-            if (isValid(rows, rowIndex, colIndex))
-            {
-                rows[rowIndex] = colIndex;
-                dfs(result, rows, n, rowIndex + 1);
-                rows[rowIndex] = 0;
-            }
-        }
-    }
-
-    private ArrayList<String> translateString(int[] rows)
-    {
-        ArrayList<String> result = new ArrayList<>();
-
-        for (int i = 0; i < rows.length; i++)
-        {
-            StringBuilder sb = new StringBuilder();
-
-            for (int j = 0; j < rows.length; j++)
-            {
-                if (j == rows[i])
-                {
-                    sb.append('Q');
-                }
-                else
-                {
-                    sb.append('.');
-                }
-            }
-
-            result.add(sb.toString());
-        }
-
-        return result;
-    }
-
-    private boolean isValid(int[] rows, int rowIndex, int colIndex)
-    {
-        for (int i = 0; i < rowIndex; i++)
-        {
-            if (rows[i] == colIndex)
-            {
-                return false;
-            }
-
-            //(i, rows[i]) (rowIndex, colIndex)
-            if (Math.abs(rows[i] - colIndex) == Math.abs(i - rowIndex))
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-}
-
diff --git a/51.n-queens.81951958.Accepted.leetcode.java b/51.n-queens.81951958.Accepted.leetcode.java
deleted file mode 100644
index b8504e38..00000000
--- ./51.n-queens.81951958.Accepted.leetcode.java
+++ /dev/null
@@ -1,61 +0,0 @@
-public class Solution
-{
-    public List<List<String>> solveNQueens(int n)
-    {
-        List<List<String>> result = new ArrayList<List<String>>();
-        dfs(n, 0, new int[n], result);
-        return result;
-    }
-
-    private void dfs(int n, int row, int[] columnForRow, List<List<String>> result)
-    {
-        if (row == n)
-        {
-            List<String> strRows = new ArrayList<String>();
-
-            for (int i = 0; i < n; i++)
-            {
-                StringBuilder strRow = new StringBuilder();
-
-                for (int j = 0; j < n; j++)
-                {
-                    if (columnForRow[i] == j)
-                    {
-                        strRow.append('Q');
-                    }
-                    else
-                    {
-                        strRow.append('.');
-                    }
-                }
-
-                strRows.add(strRow.toString());
-            }
-
-            result.add(strRows);
-            return;
-        }
-
-        for (int i = 0; i < n; i++)
-        {
-            columnForRow[row] = i;
-            if (isValid(row, columnForRow))
-            {
-                dfs(n, row + 1, columnForRow, result);
-            }
-        }
-    }
-
-    private boolean isValid(int row, int[] columnForRow)
-    {
-        for (int i = 0; i < row; i++)
-        {
-            if (columnForRow[row] == columnForRow[i] || Math.abs(columnForRow[row] - columnForRow[i]) == row - i)
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-}
diff --git a/51.n-queens.81952225.Accepted.leetcode.java b/51.n-queens.81952225.Accepted.leetcode.java
deleted file mode 100644
index 5a331add..00000000
--- ./51.n-queens.81952225.Accepted.leetcode.java
+++ /dev/null
@@ -1,87 +0,0 @@
-class Solution 
-{
-    /**
-     * Get all distinct N-Queen solutions
-     * @param n: The number of queens
-     * @return: All distinct solutions
-     * For example, A string '...Q' shows a queen on forth position
-     */
-    List<List<String>> solveNQueens(int n) 
-    {
-        // write your code here
-        List<List<String>> result = new ArrayList<>();
-        
-        if (n <= 0) 
-        {
-            return result;
-        }
-        
-        int[] row = new int[n];
-        solveNQueensCore(result, row, n, 0);
-        return result;
-    }
-    
-    private void solveNQueensCore(List<List<String>> result,
-                              int[] row,
-                              int n,
-                              int index) 
-                              {
-        if (index == n) 
-        {
-            result.add(translateString(row));
-            return;
-        }
-        
-        for (int i = 0; i < n; i++) 
-        {
-            if (isValid(row, index, i)) 
-            {
-                row[index] = i;
-                solveNQueensCore(result, row, n, index + 1);
-                row[index] = 0;
-            }
-        }
-    }
-    
-    private ArrayList<String> translateString(int[] row) 
-    {
-        ArrayList<String> result = new ArrayList<>();
-        for (int i = 0; i < row.length; i++) 
-        {
-            StringBuilder sb = new StringBuilder();
-            for (int j = 0; j < row.length; j++) 
-            {
-                if (j == row[i]) 
-                {
-                    sb.append('Q');
-                }
-                else 
-                {
-                    sb.append('.');
-                }
-            }
-            
-            result.add(sb.toString());
-        }
-        
-        return result;
-    }
-    
-    private boolean isValid(int[] row, int rowNum, int columnNum) 
-    {
-        for (int i = 0; i < rowNum; i++) 
-        {
-            if (row[i] == columnNum) 
-            {
-                return false;
-            }
-            
-            if (Math.abs(row[i] - columnNum) == Math.abs(i - rowNum)) 
-            {
-                return false;
-            }
-        }
-        return true;
-    }
-    
-}
diff --git a/51.n-queens.81952311.Accepted.leetcode.java b/51.n-queens.81952311.Accepted.leetcode.java
deleted file mode 100644
index c2fddabd..00000000
--- ./51.n-queens.81952311.Accepted.leetcode.java
+++ /dev/null
@@ -1,88 +0,0 @@
-class Solution 
-{
-    /**
-     * Get all distinct N-Queen solutions
-     * @param n: The number of queens
-     * @return: All distinct solutions
-     * For example, A string '...Q' shows a queen on forth position
-     */
-    List<List<String>> solveNQueens(int n) 
-    {
-        // write your code here
-        List<List<String>> result = new ArrayList<>();
-        
-        if (n <= 0) 
-        {
-            return result;
-        }
-        
-        int[] row = new int[n];
-        solveNQueensCore(result, row, n, 0);
-        return result;
-    }
-    
-    private void solveNQueensCore(List<List<String>> result,
-                              int[] row,
-                              int n,
-                              int index) 
-                              {
-        if (index == n) 
-        {
-            result.add(translateString(row));
-            return;
-        }
-        
-        for (int i = 0; i < n; i++) 
-        {
-            if (isValid(row, index, i)) 
-            {
-                row[index] = i;
-                solveNQueensCore(result, row, n, index + 1);
-                row[index] = 0;
-            }
-        }
-    }
-    
-    private ArrayList<String> translateString(int[] row) 
-    {
-        ArrayList<String> result = new ArrayList<>();
-        for (int i = 0; i < row.length; i++) 
-        {
-            StringBuilder sb = new StringBuilder();
-            for (int j = 0; j < row.length; j++) 
-            {
-                if (j == row[i]) 
-                {
-                    sb.append('Q');
-                }
-                else 
-                {
-                    sb.append('.');
-                }
-            }
-            
-            result.add(sb.toString());
-        }
-        
-        return result;
-    }
-    
-    private boolean isValid(int[] row, int rowNum, int columnNum) 
-    {
-        for (int i = 0; i < rowNum; i++) 
-        {
-            if (row[i] == columnNum) 
-            {
-                return false;
-            }
-            
-            if (Math.abs(row[i] - columnNum) == Math.abs(i - rowNum)) 
-            {
-                return false;
-            }
-        }
-        
-        return true;
-    }
-    
-}
diff --git a/51.n-queens.81954862.Accepted.leetcode.java b/51.n-queens.81954862.Accepted.leetcode.java
deleted file mode 100644
index 234f2a6c..00000000
--- ./51.n-queens.81954862.Accepted.leetcode.java
+++ /dev/null
@@ -1,88 +0,0 @@
-class Solution 
-{
-    /**
-     * Get all distinct N-Queen solutions
-     * @param n: The number of queens
-     * @return: All distinct solutions
-     * For example, A string '...Q' shows a queen on forth position
-     */
-    List<List<String>> solveNQueens(int n) 
-    {
-        // write your code here
-        List<List<String>> result = new ArrayList<>();
-        
-        if (n <= 0) 
-        {
-            return result;
-        }
-        
-        int[] rows = new int[n];
-        solveNQueensCore(result, rows, n, 0);
-        return result;
-    }
-    
-    private void solveNQueensCore(List<List<String>> result,
-                              int[] rows,
-                              int n,
-                              int rowIndex) 
-                              {
-        if (rowIndex == n) 
-        {
-            result.add(translateString(rows));
-            return;
-        }
-        
-        for (int i = 0; i < n; i++) 
-        {
-            if (isValid(rows, rowIndex, i)) 
-            {
-                rows[rowIndex] = i;
-                solveNQueensCore(result, rows, n, rowIndex + 1);
-                rows[rowIndex] = 0;
-            }
-        }
-    }
-    
-    private ArrayList<String> translateString(int[] rows) 
-    {
-        ArrayList<String> result = new ArrayList<>();
-        for (int i = 0; i < rows.length; i++) 
-        {
-            StringBuilder sb = new StringBuilder();
-            for (int j = 0; j < rows.length; j++) 
-            {
-                if (j == rows[i]) 
-                {
-                    sb.append('Q');
-                }
-                else 
-                {
-                    sb.append('.');
-                }
-            }
-            
-            result.add(sb.toString());
-        }
-        
-        return result;
-    }
-    
-    private boolean isValid(int[] rows, int rowNum, int columnNum) 
-    {
-        for (int i = 0; i < rowNum; i++) 
-        {
-            if (rows[i] == columnNum) 
-            {
-                return false;
-            }
-            
-            if (Math.abs(rows[i] - columnNum) == Math.abs(i - rowNum)) 
-            {
-                return false;
-            }
-        }
-        
-        return true;
-    }
-    
-}
diff --git a/51.n-queens.81955155.Accepted.leetcode.java b/51.n-queens.81955155.Accepted.leetcode.java
deleted file mode 100644
index 962c248a..00000000
--- ./51.n-queens.81955155.Accepted.leetcode.java
+++ /dev/null
@@ -1,88 +0,0 @@
-class Solution 
-{
-    /**
-     * Get all distinct N-Queen solutions
-     * @param n: The number of queens
-     * @return: All distinct solutions
-     * For example, A string '...Q' shows a queen on forth position
-     */
-    List<List<String>> solveNQueens(int n) 
-    {
-        // write your code here
-        List<List<String>> result = new ArrayList<>();
-        
-        if (n <= 0) 
-        {
-            return result;
-        }
-        
-        int[] rows = new int[n];
-        solveNQueensCore(result, rows, n, 0);
-        return result;
-    }
-    
-    private void solveNQueensCore(List<List<String>> result,
-                              int[] rows,
-                              int n,
-                              int rowIndex) 
-                              {
-        if (rowIndex == n) 
-        {
-            result.add(translateString(rows));
-            return;
-        }
-        
-        for (int colIndex = 0; colIndex < n; colIndex++) 
-        {
-            if (isValid(rows, rowIndex, colIndex)) 
-            {
-                rows[rowIndex] = colIndex;
-                solveNQueensCore(result, rows, n, rowIndex + 1);
-                rows[rowIndex] = 0;
-            }
-        }
-    }
-    
-    private ArrayList<String> translateString(int[] rows) 
-    {
-        ArrayList<String> result = new ArrayList<>();
-        for (int i = 0; i < rows.length; i++) 
-        {
-            StringBuilder sb = new StringBuilder();
-            for (int j = 0; j < rows.length; j++) 
-            {
-                if (j == rows[i]) 
-                {
-                    sb.append('Q');
-                }
-                else 
-                {
-                    sb.append('.');
-                }
-            }
-            
-            result.add(sb.toString());
-        }
-        
-        return result;
-    }
-    
-    private boolean isValid(int[] rows, int rowIndex, int colIndex) 
-    {
-        for (int i = 0; i < rowIndex; i++) 
-        {
-            if (rows[i] == colIndex) 
-            {
-                return false;
-            }
-            
-            if (Math.abs(rows[i] - colIndex) == Math.abs(i - rowIndex)) 
-            {
-                return false;
-            }
-        }
-        
-        return true;
-    }
-    
-}
diff --git a/51.n-queens.81955685.Accepted.leetcode.java b/51.n-queens.81955685.Accepted.leetcode.java
deleted file mode 100644
index 093cc666..00000000
--- ./51.n-queens.81955685.Accepted.leetcode.java
+++ /dev/null
@@ -1,89 +0,0 @@
-class Solution 
-{
-    /**
-     * Get all distinct N-Queen solutions
-     * @param n: The number of queens
-     * @return: All distinct solutions
-     * For example, A string '...Q' shows a queen on forth position
-     */
-    List<List<String>> solveNQueens(int n) 
-    {
-        // write your code here
-        List<List<String>> result = new ArrayList<>();
-        
-        if (n <= 0) 
-        {
-            return result;
-        }
-        
-        int[] rows = new int[n];
-        solveNQueensCore(result, rows, n, 0);
-        return result;
-    }
-    
-    private void solveNQueensCore(List<List<String>> result,
-                              int[] rows,
-                              int n,
-                              int rowIndex) 
-                              {
-        if (rowIndex == n) 
-        {
-            result.add(translateString(rows));
-            return;
-        }
-        
-        for (int colIndex = 0; colIndex < n; colIndex++) 
-        {
-            if (isValid(rows, rowIndex, colIndex)) 
-            {
-                rows[rowIndex] = colIndex;
-                solveNQueensCore(result, rows, n, rowIndex + 1);
-                rows[rowIndex] = 0;
-            }
-        }
-    }
-    
-    private ArrayList<String> translateString(int[] rows) 
-    {
-        ArrayList<String> result = new ArrayList<>();
-        for (int i = 0; i < rows.length; i++) 
-        {
-            StringBuilder sb = new StringBuilder();
-            for (int j = 0; j < rows.length; j++) 
-            {
-                if (j == rows[i]) 
-                {
-                    sb.append('Q');
-                }
-                else 
-                {
-                    sb.append('.');
-                }
-            }
-            
-            result.add(sb.toString());
-        }
-        
-        return result;
-    }
-    
-    private boolean isValid(int[] rows, int rowIndex, int colIndex) 
-    {
-        for (int i = 0; i < rowIndex; i++) 
-        {
-            if (rows[i] == colIndex) 
-            {
-                return false;
-            }
-            
-            //(i, rows[i]) (rowIndex, colIndex)
-            if (Math.abs(rows[i] - colIndex) == Math.abs(i - rowIndex)) 
-            {
-                return false;
-            }
-        }
-        
-        return true;
-    }
-    
-}
diff --git a/515.find-largest-value-in-each-tree-row.151526566.Accepted.leetcode.java b/515.find-largest-value-in-each-tree-row.151526566.Accepted.leetcode.java
deleted file mode 100644
index 22a70ff0..00000000
--- ./515.find-largest-value-in-each-tree-row.151526566.Accepted.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution
-{
-    public List<Integer> largestValues(TreeNode root)
-    {
-        List<Integer> result = new ArrayList<>();
-        Queue<TreeNode> queue = new LinkedList<>();
-
-        if (root != null)
-        {
-            queue.add(root);
-        }
-
-        while (queue.size() > 0)
-        {
-            int n = queue.size(), max = Integer.MIN_VALUE;
-
-            for (int i = 0; i < n; i++)
-            {
-                TreeNode tmp = queue.poll();
-                max = Math.max(max, tmp.val);
-
-                if (tmp.left != null)
-                {
-                    queue.add(tmp.left);
-                }
-
-                if (tmp.right != null)
-                {
-                    queue.add(tmp.right);
-                }
-            }
-
-            result.add(max);
-        }
-
-        return result;
-    }
-}
-
diff --git a/515.find-largest-value-in-each-tree-row.96480900.Accepted.leetcode.java b/515.find-largest-value-in-each-tree-row.96480900.Accepted.leetcode.java
deleted file mode 100644
index 1d09f26e..00000000
--- ./515.find-largest-value-in-each-tree-row.96480900.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/**
- * Definition for a binary tree node.
- * public class TreeNode {
- *     int val;
- *     TreeNode left;
- *     TreeNode right;
- *     TreeNode(int x) { val = x; }
- * }
- */
-public class Solution
-{
-    public List<Integer> largestValues(TreeNode root)
-    {
-        List<Integer> result = new ArrayList<>();
-        Queue<TreeNode> queue = new LinkedList<>();
-
-        if (root != null)
-        {
-            queue.add(root);
-        }
-
-        while (queue.size() > 0)
-        {
-            int n = queue.size(), max = Integer.MIN_VALUE;
-
-            for (int i = 0; i < n; i++)
-            {
-                TreeNode tmp = queue.poll();
-                max = Math.max(max, tmp.val);
-
-                if (tmp.left != null)
-                {
-                    queue.add(tmp.left);
-                }
-
-                if (tmp.right != null)
-                {
-                    queue.add(tmp.right);
-                }
-            }
-
-            result.add(max);
-        }
-
-        return result;
-    }
-}
diff --git a/52.n-queens-ii.10574675.Accepted.leetcode.java b/52.n-queens-ii.10574675.Accepted.leetcode.java
deleted file mode 100644
index cf01b70f..00000000
--- ./52.n-queens-ii.10574675.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-	public class Solution {
-		int res;
-
-		public int totalNQueens(int n) {
-			res = 0;
-			if (n <= 0)
-				return res;
-			int[] loc = new int[n];
-			dfs(loc, 0, n);
-			return res;
-		}
-
-		public void dfs(int[] loc, int cur, int n) {
-			if (cur == n) {
-				res += 1;
-				return;
-			}
-			for (int i = 0; i < n; i++) {
-				loc[cur] = i;
-				if (isValid(loc, cur))
-					dfs(loc, cur + 1, n);
-			}
-		}
-
-		public boolean isValid(int[] loc, int cur) {
-			for (int i = 0; i < cur; i++) {
-				if (loc[i] == loc[cur] || Math.abs(loc[i] - loc[cur]) == (cur - i))
-					return false;
-			}
-			return true;
-		}
-	}
-
diff --git a/52.n-queens-ii.35091237.Accepted.leetcode.java b/52.n-queens-ii.35091237.Accepted.leetcode.java
deleted file mode 100644
index 05e0e9fc..00000000
--- ./52.n-queens-ii.35091237.Accepted.leetcode.java
+++ /dev/null
@@ -1,51 +0,0 @@
-  public class Solution
-  {
-    int result;
-
-    public int totalNQueens(int n)
-    {
-      result = 0;
-
-      if (n <= 0)
-      {
-        return result;
-      }
-
-      int[] columnForRow = new int[n];
-      dfs(columnForRow, 0, n);
-      return result;
-    }
-
-    public void dfs(int[] columnForRow, int row, int n)
-    {
-      if (row == n)
-      {
-        result += 1;
-        return;
-      }
-
-      for (int i = 0; i < n; i++ )
-      {
-        columnForRow[row] = i;
-
-        if (isValid(columnForRow, row))
-        {
-          dfs(columnForRow, row + 1, n);
-        }
-      }
-    }
-
-    public boolean isValid(int[] columnForRow, int row)
-    {
-      for (int i = 0; i < row; i++ )
-      {
-        if (columnForRow[i] == columnForRow[row] || Math.abs(columnForRow[i] - columnForRow[row]) == (row - i))
-        {
-          return false;
-        }
-      }
-
-      return true;
-    }
-  }
-
diff --git a/53.maximum-subarray.7645630.Accepted.leetcode.java b/53.maximum-subarray.7645630.Accepted.leetcode.java
deleted file mode 100644
index d695e2a2..00000000
--- ./53.maximum-subarray.7645630.Accepted.leetcode.java
+++ /dev/null
@@ -1,14 +0,0 @@
-  public class Solution {
-    public int maxSubArray(int[] A) {
-      int sum = A[0];
-      int maxSum = A[0];
-
-      for (int i = 1; i < A.length; i++) {
-        sum = Math.max(sum + A[i], A[i]);
-        maxSum = Math.max(maxSum, sum);
-      }
-
-      return maxSum;
-    }
-  }
-
diff --git a/53.maximum-subarray.85563683.Time-Limit-Exceeded.leetcode.java b/53.maximum-subarray.85563683.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index d455e345..00000000
--- ./53.maximum-subarray.85563683.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-public class Solution 
-{
-    public int maxSubArray(int[] A) 
-    {
-        int local = A[0];
-        int global = A[0];
-
-        for (int i = 1; i < A.length; i++) 
-        {
-            local = Math.max(local + A[i], A[i]);
-            global = Math.max(global, local);
-        }
-
-        return global;
-    }
-}
diff --git a/53.maximum-subarray.85759594.Accepted.leetcode.java b/53.maximum-subarray.85759594.Accepted.leetcode.java
deleted file mode 100644
index 1de5f6ce..00000000
--- ./53.maximum-subarray.85759594.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution {
-    public int maxSubArray(int[] A) {
-         return divide(A, 0, A.length-1); 
-    }
-    
-  public int divide(int A[], int low, int high){  
-        if(low == high)
-            return A[low];  
-        if(low == high-1)  
-            return Math.max(A[low]+A[high], Math.max(A[low], A[high]));
-            
-        int mid = (low+high)/2;  
-        int lmax = divide(A, low, mid-1);  
-        int rmax = divide(A, mid+1, high); 
-        
-        int mmax = A[mid];  
-        int tmp = mmax;  
-        for(int i = mid-1; i >=low; i--){  
-            tmp += A[i];  
-            if(tmp > mmax)
-                mmax = tmp;  
-        }  
-        tmp = mmax;  
-        for(int i = mid+1; i <= high; i++){  
-            tmp += A[i];  
-            if(tmp > mmax)
-                mmax = tmp;  
-        }  
-        return Math.max(mmax, Math.max(lmax, rmax));  
-          
-    }
-}
diff --git a/53.maximum-subarray.85760059.Accepted.leetcode.java b/53.maximum-subarray.85760059.Accepted.leetcode.java
deleted file mode 100644
index c814c483..00000000
--- ./53.maximum-subarray.85760059.Accepted.leetcode.java
+++ /dev/null
@@ -1,51 +0,0 @@
-public class Solution 
-{
-    public int maxSubArray(int[] A) 
-    {
-        return divide(A, 0, A.length - 1); 
-    }
-    
-    public int divide(int A[], int low, int high)
-    {  
-        if (low == high)
-        {
-            return A[low];  
-        }
-            
-        if (low == high - 1)
-        {
-            return Math.max(A[low] + A[high], Math.max(A[low], A[high]));
-        }
-            
-            
-        int mid = (low + high) / 2;  
-        int lmax = divide(A, low, mid - 1);  
-        int rmax = divide(A, mid + 1, high); 
-        int mmax = A[mid];  
-        int tmp = mmax;  
-
-        for (int i = mid - 1; i >= low; i--) 
-        {  
-            tmp += A[i];  
-            
-            if(tmp > mmax)
-            {
-                mmax = tmp;  
-            }
-        }  
-
-        tmp = mmax;  
-
-        for (int i = mid + 1; i <= high; i++)
-        {  
-            tmp += A[i];  
-
-            if(tmp > mmax)
-            {
-                mmax = tmp;  
-            }
-        }  
-
-        return Math.max(mmax, Math.max(lmax, rmax));  
-    }
-}
diff --git a/53.maximum-subarray.8719830.Accepted.leetcode.java b/53.maximum-subarray.8719830.Accepted.leetcode.java
deleted file mode 100644
index 826adb25..00000000
--- ./53.maximum-subarray.8719830.Accepted.leetcode.java
+++ /dev/null
@@ -1,14 +0,0 @@
-public class Solution {
-    public int maxSubArray(int[] A) {
-      int local = A[0];
-      int global = A[0];
-
-      for (int i = 1; i < A.length; i++) {
-        local = Math.max(local + A[i], A[i]);
-        global = Math.max(global, local);
-      }
-
-      return global;
-    }
-  }
-
diff --git a/53.maximum-subarray.95775326.Accepted.leetcode.java b/53.maximum-subarray.95775326.Accepted.leetcode.java
deleted file mode 100644
index becc12bf..00000000
--- ./53.maximum-subarray.95775326.Accepted.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-public class Solution
-{
-    public int maxSubArray(int[] A)
-    {
-        int local = A[0];
-        int global = A[0];
-
-        for (int i = 1; i < A.length; i++)
-        {
-            local = Math.max(local + A[i], A[i]);
-            global = Math.max(global, local);
-        }
-
-        return global;
-    }
-}
diff --git a/53.maximum-subarray.95915694.Accepted.leetcode.java b/53.maximum-subarray.95915694.Accepted.leetcode.java
deleted file mode 100644
index 512495af..00000000
--- ./53.maximum-subarray.95915694.Accepted.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-public class Solution
-{
-    public int maxSubArray(int[] A)
-    {
-        int local = A[0];
-        int global = A[0];
-
-        for (int i = 1; i < A.length; i++)
-        {
-            local = Math.max(A[i], local + A[i]);
-            global = Math.max(global, local);
-        }
-        
-        return global;
-    }
-}
diff --git a/54.spiral-matrix.9449065.Wrong-Answer.leetcode.java b/54.spiral-matrix.9449065.Wrong-Answer.leetcode.java
deleted file mode 100644
index ca99e454..00000000
--- ./54.spiral-matrix.9449065.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-  public class Solution {
-    public ArrayList<Integer> spiralOrder(int[][] matrix) {
-      int n = matrix.length;
-      ArrayList<Integer> res = new ArrayList<Integer>();
-      int k = 1;
-      int top = 0, bottom = n - 1, left = 0, right = n - 1;
-
-      while (left < right && top < bottom) {
-        for (int j = left; j < right; j++) {
-          res.add(k++);
-        }
-
-        for (int i = top; i < bottom; i++) {
-          res.add(k++);
-        }
-
-        for (int j = right; j > left; j--) {
-          res.add(k++);
-        }
-
-        for (int i = bottom; i > top; i--) {
-          res.add(k++);
-        }
-
-        left++;
-        right--;
-        top++;
-        bottom--;
-      }
-
-      if (n % 2 != 0) {
-        res.add(k++);
-      }
-
-      return res;
-    }
-  }
-
diff --git a/54.spiral-matrix.9449389.Accepted.leetcode.java b/54.spiral-matrix.9449389.Accepted.leetcode.java
deleted file mode 100644
index 509d8115..00000000
--- ./54.spiral-matrix.9449389.Accepted.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-  public class Solution {
-    public ArrayList<Integer> spiralOrder(int[][] matrix) {
-      int m = matrix.length, n = 0;
-
-      if (m != 0) {
-        n = matrix[0].length;
-      }
-
-      int cycle = m > n ? (n + 1) / 2 : (m + 1) / 2;
-      ArrayList<Integer> res = new ArrayList<Integer>();
-      int a = n, b = m;
-
-      for (int i = 0; i < cycle; i++, a -= 2, b -= 2) {
-        for (int column = i; column < i + a; column++) {
-          res.add(matrix[i][column]);
-        }
-
-        for (int row = i + 1; row < i + b; row++) {
-          res.add(matrix[row][i + a - 1]);
-        }
-
-        if (a == 1 || b == 1) {
-          break;
-        }
-
-        for (int column = i + a - 2; column >= i; column--) {
-          res.add(matrix[i + b - 1][column]);
-        }
-
-        for (int row = i + b - 2; row > i; row--) {
-          res.add(matrix[row][i]);
-        }
-      }
-
-      return res;
-    }
-  }
-
diff --git a/549.binary-tree-longest-consecutive-sequence-ii.102460778.Accepted.leetcode.java b/549.binary-tree-longest-consecutive-sequence-ii.102460778.Accepted.leetcode.java
deleted file mode 100644
index dd8073cf..00000000
--- ./549.binary-tree-longest-consecutive-sequence-ii.102460778.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution
-{
-    int maxval = 0;
-    public int longestConsecutive(TreeNode root)
-    {
-        longestPath(root);
-        return maxval;
-    }
-    public int[] longestPath(TreeNode root)
-    {
-        if (root == null)
-            return new int[] {0, 0};
-
-        int inr = 1, dcr = 1;
-
-        if (root.left != null)
-        {
-            int[] l = longestPath(root.left);
-
-            if (root.val == root.left.val + 1)
-            {
-                dcr = l[1] + 1;
-            }
-            else if (root.val == root.left.val - 1)
-            {
-                inr = l[0] + 1;
-            }
-        }
-
-        if (root.right != null)
-        {
-            int[] r = longestPath(root.right);
-
-            if (root.val == root.right.val + 1)
-            {
-                dcr = Math.max(dcr, r[1] + 1);
-            }
-            else if (root.val == root.right.val - 1)
-            {
-                inr = Math.max(inr, r[0] + 1);
-            }
-        }
-
-        maxval = Math.max(maxval, dcr + inr - 1);
-        return new int[] {inr, dcr};
-    }
-}
diff --git a/55.jump-game.98270513.Accepted.leetcode.java b/55.jump-game.98270513.Accepted.leetcode.java
deleted file mode 100644
index 0351b489..00000000
--- ./55.jump-game.98270513.Accepted.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class Solution
-{
-    public boolean canJump(int[] A)
-    {
-        int maxD = 0;
- 
-        for (int index = 0; index <= maxD && index < A.length; index++)
-        {
-            if (maxD >= A.length - 1)
-            {
-                return true;
-            }
-
-            maxD = Math.max(maxD, index + A[index]);
-        }
-
-        return false;
-    }
-}
diff --git a/55.jump-game.98270622.Time-Limit-Exceeded.leetcode.java b/55.jump-game.98270622.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index ff9da82e..00000000
--- ./55.jump-game.98270622.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution
-{
-    public boolean canJump(int[] A)
-    {
-        int maxD = 0;
-        int index = 0;
-
-        while (index <= Math.min(maxD, A.length - 1))
-        {
-            if (maxD >= A.length - 1)
-            {
-                return true;
-            }
-
-            maxD = Math.max(maxD, index + A[index++]);
-        }
-
-        return false;
-    }
-}
-
diff --git a/55.jump-game.98272624.Accepted.leetcode.java b/55.jump-game.98272624.Accepted.leetcode.java
deleted file mode 100644
index b1d7eb0e..00000000
--- ./55.jump-game.98272624.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public boolean canJump(int[] A)
-    {
-        int maxD = 0;
-        int index = 0;
-
-        while (index <= Math.min(maxD, A.length - 1))
-        {
-            if (maxD >= A.length - 1)
-            {
-                return true;
-            }
-
-            maxD = Math.max(maxD, index + A[index++]);
-        }
-
-        return false;
-    }
-}
diff --git a/551.student-attendance-record-i.103370675.Accepted.leetcode.java b/551.student-attendance-record-i.103370675.Accepted.leetcode.java
deleted file mode 100644
index 206a251f..00000000
--- ./551.student-attendance-record-i.103370675.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public boolean checkRecord(String s)
-    {
-        int cntA = 0, cntL = 0;
-
-        for (char c : s.toCharArray())
-        {
-            if (c == 'A')
-            {
-                if (++cntA > 1)
-                {
-                    return false;
-                }
-
-                cntL = 0;
-            }
-            else if (c == 'L')
-            {
-                if (++cntL > 2)
-                {
-                    return false;
-                }
-            }
-            else
-            {
-                cntL = 0;
-            }
-        }
-
-        return true;
-    }
-}
diff --git a/56.merge-intervals.102466486.Accepted.leetcode.java b/56.merge-intervals.102466486.Accepted.leetcode.java
deleted file mode 100644
index e3e7e4e6..00000000
--- ./56.merge-intervals.102466486.Accepted.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-public class Solution 
-{
-    public List<Interval> merge(List<Interval> intervals) 
-    {
-        Collections.sort(intervals, new Comparator<Interval>() 
-        {
-            @Override
-            public int compare(Interval i1, Interval i2) 
-            {
-                if (i1.start == i2.start) 
-                {
-                    return i1.end - i2.end;
-                }
-
-                return i1.start - i2.start;
-            }
-        });
-      
-        ArrayList<Interval> ans = new ArrayList<Interval>();
-        Interval newInterval = null;
-
-        for (Interval interval : intervals) 
-        {
-            if (newInterval == null) 
-            {
-                newInterval = new Interval(interval.start, interval.end);
-            }
-            else 
-            {
-                if (newInterval.end < interval.start)
-                {
-                    ans.add(newInterval);
-                    newInterval = new Interval(interval.start, interval.end);
-                }
-                else if (interval.end < newInterval.start)
-                {
-                    ans.add(interval);
-                }
-                else
-                {
-                    newInterval.end = Math.max(newInterval.end, interval.end);
-                }
-            }
-        }
-
-        if (newInterval != null)
-        {
-            ans.add(newInterval);    
-        }
-        
-        return ans;
-    }
-}
diff --git a/56.merge-intervals.102466638.Accepted.leetcode.java b/56.merge-intervals.102466638.Accepted.leetcode.java
deleted file mode 100644
index 45c4a17e..00000000
--- ./56.merge-intervals.102466638.Accepted.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution 
-{
-    public List<Interval> merge(List<Interval> intervals) 
-    {
-        Collections.sort(intervals, new Comparator<Interval>() 
-        {
-            @Override
-            public int compare(Interval i1, Interval i2) 
-            {
-                if (i1.start == i2.start) 
-                {
-                    return i1.end - i2.end;
-                }
-
-                return i1.start - i2.start;
-            }
-        });
-      
-        ArrayList<Interval> ans = new ArrayList<Interval>();
-        Interval newInterval = null;
-
-        for (Interval interval : intervals) 
-        {
-            if (newInterval == null) 
-            {
-                newInterval = interval;
-            }
-            else 
-            {
-                if (newInterval.end < interval.start)
-                {
-                    ans.add(newInterval);
-                    newInterval = new Interval(interval.start, interval.end);
-                }
-                else
-                {
-                    newInterval.end = Math.max(newInterval.end, interval.end);
-                }
-            }
-        }
-
-        if (newInterval != null)
-        {
-            ans.add(newInterval);    
-        }
-        
-        return ans;
-    }
-}
diff --git a/56.merge-intervals.102466667.Accepted.leetcode.java b/56.merge-intervals.102466667.Accepted.leetcode.java
deleted file mode 100644
index 9dbffd70..00000000
--- ./56.merge-intervals.102466667.Accepted.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution 
-{
-    public List<Interval> merge(List<Interval> intervals) 
-    {
-        Collections.sort(intervals, new Comparator<Interval>() 
-        {
-            @Override
-            public int compare(Interval i1, Interval i2) 
-            {
-                if (i1.start == i2.start) 
-                {
-                    return i1.end - i2.end;
-                }
-
-                return i1.start - i2.start;
-            }
-        });
-      
-        ArrayList<Interval> ans = new ArrayList<Interval>();
-        Interval newInterval = null;
-
-        for (Interval interval : intervals) 
-        {
-            if (newInterval == null) 
-            {
-                newInterval = interval;
-            }
-            else 
-            {
-                if (newInterval.end < interval.start)
-                {
-                    ans.add(newInterval);
-                    newInterval = interval;
-                }
-                else
-                {
-                    newInterval.end = Math.max(newInterval.end, interval.end);
-                }
-            }
-        }
-
-        if (newInterval != null)
-        {
-            ans.add(newInterval);    
-        }
-        
-        return ans;
-    }
-}
diff --git a/56.merge-intervals.102472226.Accepted.leetcode.java b/56.merge-intervals.102472226.Accepted.leetcode.java
deleted file mode 100644
index c13e2793..00000000
--- ./56.merge-intervals.102472226.Accepted.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution
-{
-    public List<Interval> merge(List<Interval> intervals)
-    {
-        Collections.sort(intervals, new Comparator<Interval>() 
-        {
-            @Override
-            public int compare(Interval o1, Interval o2)
-            {
-                if(o1.start == o2.start)
-                {
-                    return o1.end - o2.end;
-                }
-              
-                return o1.start - o2.start;
-            }
-        });
-      
-        ArrayList<Interval> ans = new ArrayList<Interval>();
-        Interval newInterval = null;
-
-        for (Interval interval : intervals)
-        {
-            if (newInterval == null)
-            {
-                newInterval = interval;
-            }
-            else
-            {
-                if (newInterval.end < interval.start)
-                {
-                    ans.add(newInterval);
-                    newInterval = interval;
-                }
-                else
-                {
-                    newInterval.end = Math.max(newInterval.end, interval.end);
-                }
-            }
-        }
-
-        if (newInterval != null)
-        {
-            ans.add(newInterval);
-        }
-
-        return ans;
-    }
-}
diff --git a/56.merge-intervals.102933605.Wrong-Answer.leetcode.java b/56.merge-intervals.102933605.Wrong-Answer.leetcode.java
deleted file mode 100644
index 3234b1ea..00000000
--- ./56.merge-intervals.102933605.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,45 +0,0 @@
-public class Solution
-{
-    public List<Interval> merge(List<Interval> intervals)
-    {
-        Collections.sort(intervals, new Comparator<Interval>()
-        {
-            @Override
-            public int compare(Interval i1, Interval i2)
-            {
-                if (i1.start == i2.start)
-                {
-                    return i1.end - i2.end;
-                }
-
-                return i1.start - i2.start;
-            }
-        });
-        
-        ArrayList<Interval> ans = new ArrayList<Interval>();
-        Interval newInterval = null;
-
-        for (Interval interval : intervals)
-        {
-            if (newInterval == null)
-            {
-                newInterval = new Interval(interval.start, interval.end);
-            }
-            else
-            {
-                if (newInterval.end < interval.start)
-                {
-                    ans.add(newInterval);
-                    newInterval = new Interval(interval.start, interval.end);
-                }
-                else
-                {
-                    newInterval.end = Math.max(newInterval.end, interval.end);
-                }
-            }
-        }
-
-        ans.add(newInterval);
-        return ans;
-    }
-}
diff --git a/56.merge-intervals.102933700.Time-Limit-Exceeded.leetcode.java b/56.merge-intervals.102933700.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index a25714d8..00000000
--- ./56.merge-intervals.102933700.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution
-{
-    public List<Interval> merge(List<Interval> intervals)
-    {
-        Collections.sort(intervals, new Comparator<Interval>()
-        {
-            @Override
-            public int compare(Interval i1, Interval i2)
-            {
-                if (i1.start == i2.start)
-                {
-                    return i1.end - i2.end;
-                }
-
-                return i1.start - i2.start;
-            }
-        });
-        
-        ArrayList<Interval> ans = new ArrayList<Interval>();
-        Interval newInterval = null;
-
-        for (Interval interval : intervals)
-        {
-            if (newInterval == null)
-            {
-                newInterval = new Interval(interval.start, interval.end);
-            }
-            else
-            {
-                if (newInterval.end < interval.start)
-                {
-                    ans.add(newInterval);
-                    newInterval = new Interval(interval.start, interval.end);
-                }
-                else
-                {
-                    newInterval.end = Math.max(newInterval.end, interval.end);
-                }
-            }
-        }
-
-        if (newInterval != null)
-        {
-            ans.add(newInterval);    
-        }
-        
-        return ans;
-    }
-}
diff --git a/56.merge-intervals.102933943.Accepted.leetcode.java b/56.merge-intervals.102933943.Accepted.leetcode.java
deleted file mode 100644
index 59b10537..00000000
--- ./56.merge-intervals.102933943.Accepted.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-public class Solution
-{
-    public List<Interval> merge(List<Interval> intervals)
-    {
-        Collections.sort(intervals, new Comparator<Interval>()
-        {
-            @Override
-            public int compare(Interval o1, Interval o2)
-            {
-                if (o1.start == o2.start)
-                {
-                    return o1.end - o2.end;
-                }
-
-                return o1.start - o2.start;
-            }
-        });
-        ArrayList<Interval> ans = new ArrayList<Interval>();
-        Interval newInterval = null;
-
-        for (Interval interval : intervals)
-        {
-            if (newInterval == null)
-            {
-                newInterval = interval;
-            }
-            else
-            {
-                if (newInterval.end < interval.start)
-                {
-                    ans.add(newInterval);
-                    newInterval = interval;
-                }
-                else
-                {
-                    newInterval.end = Math.max(newInterval.end, interval.end);
-                }
-            }
-        }
-
-        if (newInterval != null)
-        {
-            ans.add(newInterval);
-        }
-
-        return ans;
-    }
-}
diff --git a/56.merge-intervals.102933997.Accepted.leetcode.java b/56.merge-intervals.102933997.Accepted.leetcode.java
deleted file mode 100644
index 38289d6a..00000000
--- ./56.merge-intervals.102933997.Accepted.leetcode.java
+++ /dev/null
@@ -1,49 +0,0 @@
-public class Solution
-{
-    public List<Interval> merge(List<Interval> intervals)
-    {
-        Collections.sort(intervals, new Comparator<Interval>()
-        {
-            @Override
-            public int compare(Interval i1, Interval i2)
-            {
-                if (i1.start == i2.start)
-                {
-                    return i1.end - i2.end;
-                }
-
-                return i1.start - i2.start;
-            }
-        });
-        
-        ArrayList<Interval> ans = new ArrayList<Interval>();
-        Interval newInterval = null;
-
-        for (Interval interval : intervals)
-        {
-            if (newInterval == null)
-            {
-                newInterval = interval;
-            }
-            else
-            {
-                if (newInterval.end < interval.start)
-                {
-                    ans.add(newInterval);
-                    newInterval = interval;
-                }
-                else
-                {
-                    newInterval.end = Math.max(newInterval.end, interval.end);
-                }
-            }
-        }
-
-        if (newInterval != null)
-        {
-            ans.add(newInterval);    
-        }
-        
-        return ans;
-    }
-}
diff --git a/56.merge-intervals.85394736.Accepted.leetcode.java b/56.merge-intervals.85394736.Accepted.leetcode.java
deleted file mode 100644
index ce5e0f90..00000000
--- ./56.merge-intervals.85394736.Accepted.leetcode.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/**
- * Definition for an interval.
- * public class Interval {
- *     int start;
- *     int end;
- *     Interval() { start = 0; end = 0; }
- *     Interval(int s, int e) { start = s; end = e; }
- * }
- */
-public class Solution 
-{
-    public List<Interval> merge(List<Interval> intervals) 
-    {
-        Collections.sort(intervals, new Comparator<Interval>() 
-        {
-            @Override
-            public int compare(Interval i1, Interval i2) 
-            {
-                if (i1.start == i2.start) 
-                {
-                    return i1.end - i2.end;
-                }
-
-                return i1.start - i2.start;
-            }
-        });
-      
-        ArrayList<Interval> ans = new ArrayList<Interval>();
-        Interval newInterval = null;
-
-        for(Interval interval : intervals)
-        {
-            if (newInterval == null)
-            {
-                newInterval = interval;
-            }
-            else
-            {
-                if (newInterval.end < interval.start)
-                {
-                    ans.add(newInterval);
-                    newInterval = interval;
-                }
-                else
-                {
-                    newInterval = new Interval(newInterval.start, Math.max(newInterval.end, interval.end));
-                }
-            }
-        }
-
-        if (newInterval != null)
-        {
-            ans.add(newInterval);    
-        }
-        
-        return ans;
-    }
-}
diff --git a/57.insert-interval.102951352.Wrong-Answer.leetcode.java b/57.insert-interval.102951352.Wrong-Answer.leetcode.java
deleted file mode 100644
index dce24f16..00000000
--- ./57.insert-interval.102951352.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public List<Interval> insert(List<Interval> intervals, Interval newInterval)
-    {
-        for (int i = 0; i < intervals.size(); i++)
-        {
-            Interval interval = intervals.get(i);
-
-            if (newInterval.end < interval.start)
-            {
-                intervals.add(i, newInterval);
-                return intervals;
-            }
-            else if (newInterval.start > interval.end)
-            {
-                continue;
-            }
-            else
-            {
-                newInterval.start = Math.min(newInterval.start, interval.start);
-                newInterval.end = Math.max(newInterval.end, interval.end);
-            }
-        }
-
-        intervals.add(newInterval);
-        return intervals;
-    }
-}
diff --git a/57.insert-interval.102951791.Accepted.leetcode.java b/57.insert-interval.102951791.Accepted.leetcode.java
deleted file mode 100644
index d41303ec..00000000
--- ./57.insert-interval.102951791.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution
-{
-    public List<Interval> insert(List<Interval> intervals, Interval newInterval)
-    {
-        List<Interval> result = new ArrayList<Interval>();
-
-        if (newInterval == null)
-        {
-            return intervals;
-        }
-
-        if (intervals == null || intervals.size() == 0)
-        {
-            result.add(newInterval);
-            return result;
-        }
-
-        for (Interval interval : intervals)
-        {
-            if (interval.end < newInterval.start)
-            {
-                result.add(interval);
-            }
-            else if (interval.start > newInterval.end)
-            {
-                result.add(newInterval);
-                newInterval = interval;
-            }
-            else
-            {
-                newInterval.start = Math.min(newInterval.start, interval.start);
-                newInterval.end = Math.max(newInterval.end, interval.end);
-            }
-        }
-
-        result.add(newInterval);
-        return result;
-    }
-}
diff --git a/57.insert-interval.102951848.Accepted.leetcode.java b/57.insert-interval.102951848.Accepted.leetcode.java
deleted file mode 100644
index e63b2b1a..00000000
--- ./57.insert-interval.102951848.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    public List<Interval> insert(List<Interval> intervals, Interval newInterval)
-    {
-        List<Interval> result = new ArrayList<Interval>();
-
-        if (intervals == null || intervals.size() == 0)
-        {
-            result.add(newInterval);
-            return result;
-        }
-
-        for (Interval interval : intervals)
-        {
-            if (interval.end < newInterval.start)
-            {
-                result.add(interval);
-            }
-            else if (interval.start > newInterval.end)
-            {
-                result.add(newInterval);
-                newInterval = interval;
-            }
-            else
-            {
-                newInterval.start = Math.min(newInterval.start, interval.start);
-                newInterval.end = Math.max(newInterval.end, interval.end);
-            }
-        }
-
-        result.add(newInterval);
-        return result;
-    }
-}
diff --git a/57.insert-interval.102951876.Accepted.leetcode.java b/57.insert-interval.102951876.Accepted.leetcode.java
deleted file mode 100644
index a7cd21da..00000000
--- ./57.insert-interval.102951876.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public List<Interval> insert(List<Interval> intervals, Interval newInterval)
-    {
-        List<Interval> result = new ArrayList<Interval>();
-
-        for (Interval interval : intervals)
-        {
-            if (interval.end < newInterval.start)
-            {
-                result.add(interval);
-            }
-            else if (interval.start > newInterval.end)
-            {
-                result.add(newInterval);
-                newInterval = interval;
-            }
-            else
-            {
-                newInterval.start = Math.min(newInterval.start, interval.start);
-                newInterval.end = Math.max(newInterval.end, interval.end);
-            }
-        }
-
-        result.add(newInterval);
-        return result;
-    }
-}
diff --git a/57.insert-interval.102953805.Wrong-Answer.leetcode.java b/57.insert-interval.102953805.Wrong-Answer.leetcode.java
deleted file mode 100644
index 28f3b860..00000000
--- ./57.insert-interval.102953805.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public List<Interval> insert(List<Interval> intervals, Interval newInterval)
-    {
-        List<Interval> result = new ArrayList<Interval>();
-        
-        for (int i = 0; i < intervals.size(); i++)
-        {
-            Interval interval = intervals.get(i);
-
-            if (newInterval.end < interval.start)
-            {
-                result.add(newInterval);
-            }
-            else if (newInterval.start > interval.end)
-            {
-                result.add(interval);
-            }
-            else
-            {
-                newInterval.start = Math.min(newInterval.start, interval.start);
-                newInterval.end = Math.max(newInterval.end, interval.end);
-            }
-        }
-
-        result.add(newInterval);
-        return result;
-    }
-}
diff --git a/57.insert-interval.102954095.Accepted.leetcode.java b/57.insert-interval.102954095.Accepted.leetcode.java
deleted file mode 100644
index 72f56230..00000000
--- ./57.insert-interval.102954095.Accepted.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public List<Interval> insert(List<Interval> intervals, Interval newInterval)
-    {
-        List<Interval> result = new ArrayList<Interval>();
-        
-        for (int i = 0; i < intervals.size(); i++)
-        {
-            Interval interval = intervals.get(i);
-
-            if (newInterval.end < interval.start)
-            {
-                result.add(newInterval);
-                newInterval = interval;
-            }
-            else if (newInterval.start > interval.end)
-            {
-                result.add(interval);
-            }
-            else
-            {
-                newInterval.start = Math.min(newInterval.start, interval.start);
-                newInterval.end = Math.max(newInterval.end, interval.end);
-            }
-        }
-
-        result.add(newInterval);
-        return result;
-    }
-}
diff --git a/57.insert-interval.86553361.Accepted.leetcode.java b/57.insert-interval.86553361.Accepted.leetcode.java
deleted file mode 100644
index 3fb3b7ac..00000000
--- ./57.insert-interval.86553361.Accepted.leetcode.java
+++ /dev/null
@@ -1,40 +0,0 @@
-public class Solution 
-{
-
-    public List<Interval> insert(List<Interval> intervals, Interval newInterval) 
-    {
-        List<Interval> result = new ArrayList<Interval>();
-
-        if (newInterval == null) 
-        {
-            return intervals;
-        }
-
-        if (intervals == null || intervals.size() == 0) 
-        {
-            result.add(newInterval);
-            return result;
-        }
-
-        for (Interval interval : intervals) 
-        {
-            if (interval.end < newInterval.start) 
-            {
-                result.add(interval);
-            }
-            else if (interval.start > newInterval.end) 
-            {
-                result.add(newInterval);
-                newInterval = interval;
-            }
-            else 
-            {
-                newInterval.start = Math.min(newInterval.start, interval.start);
-                newInterval.end = Math.max(newInterval.end, interval.end);
-            }
-        }
-
-        result.add(newInterval);
-        return result;
-    }
-}
diff --git a/57.insert-interval.86553376.Accepted.leetcode.java b/57.insert-interval.86553376.Accepted.leetcode.java
deleted file mode 100644
index dbfa4797..00000000
--- ./57.insert-interval.86553376.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-public class Solution 
-{
-    public List<Interval> insert(List<Interval> intervals, Interval newInterval) 
-    {
-        List<Interval> result = new ArrayList<Interval>();
-
-        if (newInterval == null) 
-        {
-            return intervals;
-        }
-
-        if (intervals == null || intervals.size() == 0) 
-        {
-            result.add(newInterval);
-            return result;
-        }
-
-        for (Interval interval : intervals) 
-        {
-            if (interval.end < newInterval.start) 
-            {
-                result.add(interval);
-            }
-            else if (interval.start > newInterval.end) 
-            {
-                result.add(newInterval);
-                newInterval = interval;
-            }
-            else 
-            {
-                newInterval.start = Math.min(newInterval.start, interval.start);
-                newInterval.end = Math.max(newInterval.end, interval.end);
-            }
-        }
-
-        result.add(newInterval);
-        return result;
-    }
-}
diff --git a/57.insert-interval.86553789.Wrong-Answer.leetcode.java b/57.insert-interval.86553789.Wrong-Answer.leetcode.java
deleted file mode 100644
index 08ad77df..00000000
--- ./57.insert-interval.86553789.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution 
-{
-    public List<Interval> insert(List<Interval> intervals, Interval newInterval) 
-    {
-        for (int i = 0; i < intervals.size(); i++) 
-        {
-            Interval interval = intervals.get(i);
-
-            if (newInterval.end < interval.start) 
-            {
-                intervals.add(i, newInterval);
-                return intervals;
-            }
-            else if (newInterval.start > interval.end) 
-            {
-                continue;
-            }
-            else 
-            {
-                newInterval.start = Math.min(newInterval.start, interval.start);
-                newInterval.end = Math.max(newInterval.end, interval.end);
-            }
-        }
-
-        intervals.add(newInterval);
-        return intervals;
-    }
-}
diff --git a/58.length-of-last-word.26271871.Runtime-Error.leetcode.java b/58.length-of-last-word.26271871.Runtime-Error.leetcode.java
deleted file mode 100644
index 8d5733c4..00000000
--- ./58.length-of-last-word.26271871.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,7 +0,0 @@
-public class Solution {
-    public int lengthOfLastWord(String s) {
-        String[] strs = s.split("\\s+");
-        String word = strs[strs.length-1];
-        return word.length();
-    }
-}
diff --git a/58.length-of-last-word.26271911.Accepted.leetcode.java b/58.length-of-last-word.26271911.Accepted.leetcode.java
deleted file mode 100644
index 19627e7a..00000000
--- ./58.length-of-last-word.26271911.Accepted.leetcode.java
+++ /dev/null
@@ -1,7 +0,0 @@
-public class Solution {
-    public int lengthOfLastWord(String s) {
-        String[] strs = s.trim().split("\\s+");
-        String word = strs[strs.length-1];
-        return word.length();
-    }
-}
diff --git a/58.length-of-last-word.26271941.Accepted.leetcode.java b/58.length-of-last-word.26271941.Accepted.leetcode.java
deleted file mode 100644
index 69174005..00000000
--- ./58.length-of-last-word.26271941.Accepted.leetcode.java
+++ /dev/null
@@ -1,9 +0,0 @@
-  public class Solution
-  {
-    public int lengthOfLastWord(String s)
-    {
-      String[] splitted = s.trim().split("\\s+");
-      return splitted[splitted.length - 1].length();
-    }
-  }
-
diff --git a/58.length-of-last-word.7764050.Accepted.leetcode.java b/58.length-of-last-word.7764050.Accepted.leetcode.java
deleted file mode 100644
index 4a2d3c14..00000000
--- ./58.length-of-last-word.7764050.Accepted.leetcode.java
+++ /dev/null
@@ -1,8 +0,0 @@
-	public class Solution {
-		public int lengthOfLastWord(String s) {
-			String trimmed = s.trim();
-			String[] splitted = trimmed.split("\\s+");
-			return splitted[splitted.length - 1].length();
-		}
-	}
-
diff --git a/59.spiral-matrix-ii.9440760.Accepted.leetcode.java b/59.spiral-matrix-ii.9440760.Accepted.leetcode.java
deleted file mode 100644
index 391d4375..00000000
--- ./59.spiral-matrix-ii.9440760.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-  public class Solution {
-    public int[][] generateMatrix(int n) {
-      int[][] matrix = new int[n][n];
-      int a = n;
-      int val = 1;
-
-      for (int i = 0; i < n / 2; i++, a -= 2) {
-        for (int column = i; column < i + a; column++) {
-          matrix[i][column] = val++;
-        }
-
-        for (int row = i + 1; row < i + a; row++) {
-          matrix[row][i + a - 1] = val++;
-        }
-
-        for (int column = i + a - 2; column >= i; column--) {
-          matrix[i + a - 1][column] = val++;
-        }
-
-        for (int row = i + a - 2; row > i; row--) {
-          matrix[row][i] = val++;
-        }
-      }
-
-      if (n % 2 == 1) {
-        matrix[n / 2][n / 2] = val;
-      }
-
-      return matrix;
-    }
-  }
-
diff --git a/6.zigzag-conversion.31084199.Accepted.leetcode.java b/6.zigzag-conversion.31084199.Accepted.leetcode.java
deleted file mode 100644
index 770409e2..00000000
--- ./6.zigzag-conversion.31084199.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-  public class Solution
-  {
-    public String convert(String s, int nRows)
-    {
-      assert nRows >= 1;
-
-      if (nRows == 1)
-      {
-        return s;
-      }
-
-      String ans = "";
-
-      for (int j = 0; j < nRows; j++)
-      {
-        for (int i = 0; i + j < s.length(); i += 2 * (nRows - 1))
-        {
-          ans += s.charAt(i + j);
-
-          if (j == 0 || j == nRows - 1)
-          {
-            continue;
-          }
-
-          int anotherIndex = i + j + (nRows - j - 1) * 2;
-
-          if (anotherIndex < s.length())
-          {
-            ans += s.charAt(anotherIndex);
-          }
-        }
-      }
-
-      return ans;
-    }
-  }
-
diff --git a/60.permutation-sequence.36212347.Wrong-Answer.leetcode.java b/60.permutation-sequence.36212347.Wrong-Answer.leetcode.java
deleted file mode 100644
index ba3f02ff..00000000
--- ./60.permutation-sequence.36212347.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-  public class Solution
-  {
-    private int factorial(int n)
-    {
-      int r = 1;
-
-      for (int i = 1; i <= n; i++)
-      {
-        r *= i;
-      }
-
-      return r;
-    }
-
-    public String getPermutation(int n, int k)
-    {
-      k--; // 0 based
-      ArrayList<Integer> numbers = new ArrayList<Integer>();
-
-      for (int i = 1; i <= n; i++)
-      {
-        numbers.add(i);
-      }
-
-      StringBuilder ans = new StringBuilder();
-
-      while (numbers.size() > 1)
-      {
-        int m = factorial(numbers.size() - 1);
-        ans.append(k / m);
-        numbers.remove(k / m);
-        k %= m;
-      }
-
-      ans.append(numbers.get(0));
-      return ans.toString();
-    }
-  }
-
diff --git a/60.permutation-sequence.36212426.Accepted.leetcode.java b/60.permutation-sequence.36212426.Accepted.leetcode.java
deleted file mode 100644
index edef7286..00000000
--- ./60.permutation-sequence.36212426.Accepted.leetcode.java
+++ /dev/null
@@ -1,39 +0,0 @@
-  public class Solution
-  {
-    private int factorial(int n)
-    {
-      int r = 1;
-
-      for (int i = 1; i <= n; i++)
-      {
-        r *= i;
-      }
-
-      return r;
-    }
-
-    public String getPermutation(int n, int k)
-    {
-      k--; // 0 based
-      ArrayList<Integer> numbers = new ArrayList<Integer>();
-
-      for (int i = 1; i <= n; i++)
-      {
-        numbers.add(i);
-      }
-
-      StringBuilder ans = new StringBuilder();
-
-      while (numbers.size() > 1)
-      {
-        int m = factorial(numbers.size() - 1);
-        ans.append(numbers.get(k / m));
-        numbers.remove(k / m);
-        k = k % m;
-      }
-
-      ans.append(numbers.get(0));
-      return ans.toString();
-    }
-  }
-
diff --git a/60.permutation-sequence.8936714.Accepted.leetcode.java b/60.permutation-sequence.8936714.Accepted.leetcode.java
deleted file mode 100644
index e2d25e81..00000000
--- ./60.permutation-sequence.8936714.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-  public class Solution {
-    private int factorial(int n) {
-      int r = 1;
-
-      for (int i = 1; i <= n; i++) {
-        r *= i;
-      }
-
-      return r;
-    }
-
-    public String getPermutation(int n, int k) {
-      k--; // 0 based
-      ArrayList<Integer> numbers = new ArrayList<Integer>();
-
-      for (int i = 1; i <= n; i++) {
-        numbers.add(i);
-      }
-
-      StringBuilder ans = new StringBuilder();
-
-      while (numbers.size() > 1) {
-        int m = factorial(numbers.size() - 1);
-        ans.append(numbers.get(k / m));
-        numbers.remove(k / m);
-        k = k % m;
-      }
-
-      ans.append(numbers.get(0));
-      return ans.toString();
-    }
-  }
-
diff --git a/61.rotate-list.28100530.Runtime-Error.leetcode.java b/61.rotate-list.28100530.Runtime-Error.leetcode.java
deleted file mode 100644
index bbae3f6c..00000000
--- ./61.rotate-list.28100530.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/**
- * Definition for singly-linked list.
- * public class ListNode {
- *     int val;
- *     ListNode next;
- *     ListNode(int x) { val = x; }
- * }
- */
-public class Solution {
-    public ListNode rotateRight(ListNode head, int k) {
-        ListNode cur = head;
-        ListNode pre = head;
-        for(int i = 0;i<k;i++)
-        {
-            cur = cur.next;
-        }
-        while(cur.next != null)
-        {
-            pre = pre.next;
-            cur = cur.next;
-        }
-        cur.next = head;
-        head = pre.next;
-        pre.next = null;
-        return head;
-    }
-}
diff --git a/61.rotate-list.28100592.Runtime-Error.leetcode.java b/61.rotate-list.28100592.Runtime-Error.leetcode.java
deleted file mode 100644
index 17976a33..00000000
--- ./61.rotate-list.28100592.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/**
- * Definition for singly-linked list.
- * public class ListNode {
- *     int val;
- *     ListNode next;
- *     ListNode(int x) { val = x; }
- * }
- */
-public class Solution {
-    public ListNode rotateRight(ListNode head, int k) {
-        if(head == null || head.next == null)
-            return head;
-        ListNode cur = head;
-        ListNode pre = head;
-        for(int i = 0;i<k;i++)
-        {
-            cur = cur.next;
-        }
-        while(cur.next != null)
-        {
-            pre = pre.next;
-            cur = cur.next;
-        }
-        cur.next = head;
-        head = pre.next;
-        pre.next = null;
-        return head;
-    }
-}
diff --git a/61.rotate-list.28100645.Runtime-Error.leetcode.java b/61.rotate-list.28100645.Runtime-Error.leetcode.java
deleted file mode 100644
index b9424708..00000000
--- ./61.rotate-list.28100645.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/**
- * Definition for singly-linked list.
- * public class ListNode {
- *     int val;
- *     ListNode next;
- *     ListNode(int x) { val = x; }
- * }
- */
-public class Solution {
-    public ListNode rotateRight(ListNode head, int k) {
-        if(head == null || head.next == null)
-            return head;
-        ListNode cur = head;
-        ListNode pre = head;
-        for(int i = 0;i<k;i++)
-        {
-            cur = cur.next;
-        }
-        while(cur != null && cur.next != null)
-        {
-            pre = pre.next;
-            cur = cur.next;
-        }
-        cur.next = head;
-        head = pre.next;
-        pre.next = null;
-        return head;
-    }
-}
diff --git a/61.rotate-list.7802126.Accepted.leetcode.java b/61.rotate-list.7802126.Accepted.leetcode.java
deleted file mode 100644
index 0efd1b74..00000000
--- ./61.rotate-list.7802126.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution {
-    public ListNode rotateRight(ListNode head, int n) {
-      if (head == null || n == 0) {
-        return head;
-      }
-
-      int len = 1;
-      ListNode p = head;
-
-      while (p.next != null) {
-        len++;
-        p = p.next;
-      }
-
-      n = len - n % len;
-      p.next = head;
-
-      for (int step = 0; step < n; step++) {
-        p = p.next;
-      }
-
-      head = p.next;
-      p.next = null;
-      return head;
-    }
-  }
-
diff --git a/62.unique-paths.102782158.Accepted.leetcode.java b/62.unique-paths.102782158.Accepted.leetcode.java
deleted file mode 100644
index b9a1e036..00000000
--- ./62.unique-paths.102782158.Accepted.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-public class Solution
-{
-    public int uniquePaths(int m, int n)
-    {
-        int[] dp = new int[n];
-        dp[0] = 1;
-
-        for (int i = 0; i < m; i++)
-        {
-            for (int j = 1; j < n; j++)
-            {
-                dp[j] += dp[j - 1];
-            }
-        }
-
-        return dp[n - 1];
-    }
-}
diff --git a/62.unique-paths.35403580.Accepted.leetcode.java b/62.unique-paths.35403580.Accepted.leetcode.java
deleted file mode 100644
index f4089856..00000000
--- ./62.unique-paths.35403580.Accepted.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-  public class Solution
-  {
-    public int uniquePaths(int m, int n)
-    {
-      int[] dp = new int[n];
-      dp[0] = 1;
-
-      for (int i = 0; i < m; i++)
-      {
-        for (int j = 1; j < n; j++)
-        {
-          dp[j] += dp[j - 1];
-        }
-      }
-
-      return dp[n - 1];
-    }
-  }
-
diff --git a/62.unique-paths.7727584.Wrong-Answer.leetcode.java b/62.unique-paths.7727584.Wrong-Answer.leetcode.java
deleted file mode 100644
index 97382cba..00000000
--- ./62.unique-paths.7727584.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,15 +0,0 @@
-public class Solution {
-		public int uniquePaths(int m, int n) {
-			int[] dp = new int[n];
-			dp[0] = 1;
-
-			for (int i = 1; i < m; i++) {
-				for (int j = 1; j < n; j++) {
-					dp[j] += dp[j - 1];
-				}
-			}
-
-			return dp[n - 1];
-		}
-	}
-
diff --git a/62.unique-paths.7727616.Runtime-Error.leetcode.java b/62.unique-paths.7727616.Runtime-Error.leetcode.java
deleted file mode 100644
index 7802c0d4..00000000
--- ./62.unique-paths.7727616.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-	public class Solution {
-		public int uniquePaths(int m, int n) {
-			int[] dp = new int[n];
-			dp[0] = 1;
-			dp[1] = 1;
-
-			for (int i = 1; i < m; i++) {
-				for (int j = 1; j < n; j++) {
-					dp[j] += dp[j - 1];
-				}
-			}
-
-			return dp[n - 1];
-		}
-	}
-
diff --git a/62.unique-paths.7727632.Accepted.leetcode.java b/62.unique-paths.7727632.Accepted.leetcode.java
deleted file mode 100644
index 2a741551..00000000
--- ./62.unique-paths.7727632.Accepted.leetcode.java
+++ /dev/null
@@ -1,15 +0,0 @@
-	public class Solution {
-		public int uniquePaths(int m, int n) {
-			int[] dp = new int[n];
-			Arrays.fill(dp, 1);
-
-			for (int i = 1; i < m; i++) {
-				for (int j = 1; j < n; j++) {
-					dp[j] += dp[j - 1];
-				}
-			}
-
-			return dp[n - 1];
-		}
-	}
-
diff --git a/62.unique-paths.81605864.Runtime-Error.leetcode.java b/62.unique-paths.81605864.Runtime-Error.leetcode.java
deleted file mode 100644
index 47d776d2..00000000
--- ./62.unique-paths.81605864.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class Solution 
-{
-    public int uniquePaths(int m, int n) 
-    {
-	    int[] dp = new int[n];
-		dp[0] = 1;
-		dp[1] = 1;
-
-		for (int i = 1; i < m; i++) 
-		{
-		    for (int j = 1; j < n; j++) 
-		    {
-			    dp[j] += dp[j - 1];
-			}
-		}
-
-		return dp[n - 1];
-	}
-}
diff --git a/62.unique-paths.81606751.Accepted.leetcode.java b/62.unique-paths.81606751.Accepted.leetcode.java
deleted file mode 100644
index 61d118e3..00000000
--- ./62.unique-paths.81606751.Accepted.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-public class Solution 
-{
-    public int uniquePaths(int m, int n) 
-    {
-	    int[] dp = new int[n];
-		dp[0] = 1;
-
-		for (int i = 0; i < m; i++) 
-		{
-		    for (int j = 1; j < n; j++) 
-		    {
-			    dp[j] += dp[j - 1];
-			}
-		}
-
-		return dp[n - 1];
-	}
-}
diff --git a/62.unique-paths.81606840.Wrong-Answer.leetcode.java b/62.unique-paths.81606840.Wrong-Answer.leetcode.java
deleted file mode 100644
index 405499dc..00000000
--- ./62.unique-paths.81606840.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-public class Solution 
-{
-    public int uniquePaths(int m, int n) 
-    {
-	    int[] dp = new int[n];
-		dp[0] = 1;
-
-		for (int i = 1; i < m; i++) 
-		{
-		    for (int j = 1; j < n; j++) 
-		    {
-				dp[j] += dp[j - 1];
-			}
-		}
-
-		return dp[n - 1];
-	}
-}
diff --git a/62.unique-paths.81607013.Accepted.leetcode.java b/62.unique-paths.81607013.Accepted.leetcode.java
deleted file mode 100644
index 51235f59..00000000
--- ./62.unique-paths.81607013.Accepted.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-public class Solution 
-{
-    public int uniquePaths(int m, int n) 
-    {
-	    int[] dp = new int[n];
-		dp[0] = 1;
-
-		for (int i = 0; i < m; i++) 
-		{
-		    for (int j = 1; j < n; j++) 
-		    {
-				dp[j] += dp[j - 1];
-			}
-		}
-
-		return dp[n - 1];
-	}
-}
diff --git a/63.unique-paths-ii.102782496.Accepted.leetcode.java b/63.unique-paths-ii.102782496.Accepted.leetcode.java
deleted file mode 100644
index e0424291..00000000
--- ./63.unique-paths-ii.102782496.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int uniquePathsWithObstacles(int[][] data)
-    {
-        int m = data.length;
-        int n = data[0].length;
-        int[] dp = new int[n];
-        dp[0] = 1;
-
-        for (int i = 0; i < m; i++)
-        {
-            dp[0] = data[i][0] == 1 ? 0 : dp[0];
-
-            for (int j = 1; j < n; j++)
-            {
-                dp[j] = data[i][j] == 1 ? 0 : dp[j] + dp[j - 1];
-            }
-        }
-
-        return dp[n - 1];
-    }
-}
diff --git a/63.unique-paths-ii.35402541.Accepted.leetcode.java b/63.unique-paths-ii.35402541.Accepted.leetcode.java
deleted file mode 100644
index 51e4b314..00000000
--- ./63.unique-paths-ii.35402541.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-  public class Solution
-  {
-    public int uniquePathsWithObstacles(int[][] obstacleGrid)
-    {
-      int m = obstacleGrid.length;
-      int n = obstacleGrid[0].length;
-      int[] dp = new int[n];
-      dp[0] = obstacleGrid[0][0] == 1 ? 0 : 1;
-
-      for (int i = 0; i < m; i++)
-      {
-        dp[0] = obstacleGrid[i][0] == 1 ? 0 : dp[0];
-
-        for (int j = 1; j < n; j++)
-        {
-          dp[j] = obstacleGrid[i][j] == 1 ? 0 : dp[j - 1] + dp[j];
-        }
-      }
-
-      return dp[n - 1];
-    }
-  }
-
diff --git a/63.unique-paths-ii.35403372.Wrong-Answer.leetcode.java b/63.unique-paths-ii.35403372.Wrong-Answer.leetcode.java
deleted file mode 100644
index af4cab25..00000000
--- ./63.unique-paths-ii.35403372.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-  public class Solution
-  {
-    public int uniquePathsWithObstacles(int[][] obstacleGrid)
-    {
-      int m = obstacleGrid.length;
-      int n = obstacleGrid[0].length;
-      int[] dp = new int[n];
-
-      for (int i = 0; i < m; i++)
-      {
-        dp[0] = obstacleGrid[i][0] == 1 ? 0 : dp[0];
-
-        for (int j = 1; j < n; j++)
-        {
-          dp[j] = obstacleGrid[i][j] == 1 ? 0 : dp[j - 1] + dp[j];
-        }
-      }
-
-      return dp[n - 1];
-    }
-  }
-
diff --git a/63.unique-paths-ii.81678362.Wrong-Answer.leetcode.java b/63.unique-paths-ii.81678362.Wrong-Answer.leetcode.java
deleted file mode 100644
index e13fbb83..00000000
--- ./63.unique-paths-ii.81678362.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution
-{
-    public int uniquePathsWithObstacles(int[][] obstacleGrid)
-    {
-        int m = obstacleGrid.length;
-        int n = obstacleGrid[0].length;
-        int[] dp = new int[n];
-
-        for (int i = 0; i < m; i++)
-        {
-            dp[0] = obstacleGrid[i][0] == 1 ? 0 : dp[0];
-
-            for (int j = 1; j < n; j++)
-            {
-                dp[j] = obstacleGrid[i][j] == 1 ? 0 : dp[j - 1] + dp[j];
-            }
-        }
-
-        return dp[n - 1];
-    }
-}
diff --git a/63.unique-paths-ii.81679698.Accepted.leetcode.java b/63.unique-paths-ii.81679698.Accepted.leetcode.java
deleted file mode 100644
index 287b13ed..00000000
--- ./63.unique-paths-ii.81679698.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int uniquePathsWithObstacles(int[][] obstacleGrid)
-    {
-        int m = obstacleGrid.length;
-        int n = obstacleGrid[0].length;
-        int[] dp = new int[n];
-        dp[0] = 1;
-
-        for (int i = 0; i < m; i++)
-        {
-            dp[0] = obstacleGrid[i][0] == 1 ? 0 : dp[0];
-
-            for (int j = 1; j < n; j++)
-            {
-                dp[j] = obstacleGrid[i][j] == 1 ? 0 : dp[j - 1] + dp[j];
-            }
-        }
-
-        return dp[n - 1];
-    }
-}
diff --git a/63.unique-paths-ii.81680088.Wrong-Answer.leetcode.java b/63.unique-paths-ii.81680088.Wrong-Answer.leetcode.java
deleted file mode 100644
index 3b99e141..00000000
--- ./63.unique-paths-ii.81680088.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int uniquePathsWithObstacles(int[][] data)
-    {
-        int m = data.length;
-        int n = data[0].length;
-        int[] dp = new int[n];
-        dp[0] = 1;
-
-        for (int i = 0; i < m; i++)
-        {
-            dp[0] = data[i][0] == 1 ? 0 : dp[0];
-            
-            for(int j = 1; j < n; j++)
-            {
-                dp[j] = data[i][0] == 1 ? 0 : dp[j] + dp[j - 1];
-            }
-        }
-
-        return dp[n - 1];
-    }
-}
diff --git a/63.unique-paths-ii.81680175.Accepted.leetcode.java b/63.unique-paths-ii.81680175.Accepted.leetcode.java
deleted file mode 100644
index 4980e9cc..00000000
--- ./63.unique-paths-ii.81680175.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public int uniquePathsWithObstacles(int[][] data)
-    {
-        int m = data.length;
-        int n = data[0].length;
-        int[] dp = new int[n];
-        dp[0] = 1;
-
-        for (int i = 0; i < m; i++)
-        {
-            dp[0] = data[i][0] == 1 ? 0 : dp[0];
-            
-            for(int j = 1; j < n; j++)
-            {
-                dp[j] = data[i][j] == 1 ? 0 : dp[j] + dp[j - 1];
-            }
-        }
-
-        return dp[n - 1];
-    }
-}
diff --git a/63.unique-paths-ii.9207864.Accepted.leetcode.java b/63.unique-paths-ii.9207864.Accepted.leetcode.java
deleted file mode 100644
index 8f4ffec0..00000000
--- ./63.unique-paths-ii.9207864.Accepted.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-  public class Solution {
-    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
-      int m = obstacleGrid.length;
-      int n = obstacleGrid[0].length;
-      int[] dp = new int[n];
-      dp[0] = obstacleGrid[0][0] == 1 ? 0 : 1;
-
-      for (int i = 0; i < m; i++) {
-        dp[0] = obstacleGrid[i][0] == 1 ? 0 : dp[0];
-
-        for (int j = 1; j < n; j++) {
-          dp[j] = obstacleGrid[i][j] == 1 ? 0 : dp[j - 1] + dp[j];
-        }
-      }
-
-      return dp[n - 1];
-    }
-  }
-
diff --git a/64.minimum-path-sum.81598568.Accepted.leetcode.java b/64.minimum-path-sum.81598568.Accepted.leetcode.java
deleted file mode 100644
index ac654614..00000000
--- ./64.minimum-path-sum.81598568.Accepted.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution 
-{
-    public int minPathSum(int[][] grid) 
-    {
-	    int[] dp = new int[grid[0].length];
-		Arrays.fill(dp, Integer.MAX_VALUE);
-		dp[0] = 0;
-
-		for (int i = 0; i < grid.length; i++) 
-		{
-			dp[0] += grid[i][0];
-
-			for (int j = 1; j < grid[0].length; j++) 
-			{
-				dp[j] = Math.min(dp[j], dp[j - 1]) + grid[i][j];
-			}
-		}
-
-		return dp[grid[0].length - 1];
-	}
-}
diff --git a/64.minimum-path-sum.81598683.Wrong-Answer.leetcode.java b/64.minimum-path-sum.81598683.Wrong-Answer.leetcode.java
deleted file mode 100644
index cd815b1d..00000000
--- ./64.minimum-path-sum.81598683.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution 
-{
-    public int minPathSum(int[][] grid) 
-    {
-        int[] dp = new int[grid[0].length];
-        Arrays.fill(dp, 0);
-        dp[0] = 0;
-
-        for (int i = 0; i < grid.length; i++) 
-        {
-            dp[0] += grid[i][0];
-
-            for (int j = 1; j < grid[0].length; j++) 
-            {
-                dp[j] = Math.min(dp[j], dp[j - 1]) + grid[i][j];
-            }
-        }
-
-        return dp[grid[0].length - 1];
-    }
-}
diff --git a/64.minimum-path-sum.81599010.Accepted.leetcode.java b/64.minimum-path-sum.81599010.Accepted.leetcode.java
deleted file mode 100644
index f303f882..00000000
--- ./64.minimum-path-sum.81599010.Accepted.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution 
-{
-    public int minPathSum(int[][] grid) 
-    {
-        int[] dp = new int[grid[0].length];
-        Arrays.fill(dp, Integer.MAX_VALUE);
-        dp[0] = 0;
-
-        for (int i = 0; i < grid.length; i++) 
-        {
-            dp[0] += grid[i][0];
-
-            for (int j = 1; j < grid[0].length; j++) 
-            {
-                dp[j] = Math.min(dp[j], dp[j - 1]) + grid[i][j];
-            }
-        }
-
-        return dp[grid[0].length - 1];
-    }
-}
diff --git a/64.minimum-path-sum.83944837.Wrong-Answer.leetcode.java b/64.minimum-path-sum.83944837.Wrong-Answer.leetcode.java
deleted file mode 100644
index b9b7eb63..00000000
--- ./64.minimum-path-sum.83944837.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-public class Solution 
-{
-    public int minPathSum(int[][] grid) 
-    {
-		int[] dp = new int[grid[0].length + 1];
-		Arrays.fill(dp, Integer.MAX_VALUE);
-		
-        for (int i = 0; i < grid.length; i++) 
-        {
-		    for (int j = 1; j <= grid[0].length; j++) 
-		    {
-			    dp[j] = Math.min(dp[j - 1], dp[j]) + grid[i][j - 1];
-			}
-		}
-
-		return dp[grid[0].length];
-	}
-}
diff --git a/64.minimum-path-sum.83944961.Wrong-Answer.leetcode.java b/64.minimum-path-sum.83944961.Wrong-Answer.leetcode.java
deleted file mode 100644
index a9ee8198..00000000
--- ./64.minimum-path-sum.83944961.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-public class Solution 
-{
-    public int minPathSum(int[][] grid) 
-    {
-        if(grid[0].length == 1)
-        {
-            return grid[0][0];    
-        }
-        
-		int[] dp = new int[grid[0].length + 1];
-		Arrays.fill(dp, Integer.MAX_VALUE);
-		
-        for (int i = 0; i < grid.length; i++) 
-        {
-		    for (int j = 1; j <= grid[0].length; j++) 
-		    {
-			    dp[j] = Math.min(dp[j - 1], dp[j]) + grid[i][j - 1];
-			}
-		}
-
-		return dp[grid[0].length];
-	}
-}
diff --git a/64.minimum-path-sum.83945349.Wrong-Answer.leetcode.java b/64.minimum-path-sum.83945349.Wrong-Answer.leetcode.java
deleted file mode 100644
index 410e0e79..00000000
--- ./64.minimum-path-sum.83945349.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class Solution 
-{
-    public int minPathSum(int[][] grid) 
-    {
-        int[] dp = new int[grid[0].length + 1];
-		Arrays.fill(dp, Integer.MAX_VALUE);
-		dp[0] = 0;
-		
-        for (int i = 0; i < grid.length; i++) 
-        {
-		    for (int j = 1; j <= grid[0].length; j++) 
-		    {
-			    dp[j] = Math.min(dp[j - 1], dp[j]) + grid[i][j - 1];
-			}
-		}
-
-		return dp[grid[0].length];
-	}
-}
diff --git a/64.minimum-path-sum.83946239.Wrong-Answer.leetcode.java b/64.minimum-path-sum.83946239.Wrong-Answer.leetcode.java
deleted file mode 100644
index 22278a0b..00000000
--- ./64.minimum-path-sum.83946239.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution 
-{
-    public int minPathSum(int[][] grid) 
-    {
-		int[] dp = new int[grid[0].length + 1];
-		Arrays.fill(dp, Integer.MAX_VALUE);
-		dp[0] = 0;
-
-        for (int i = 0; i < grid.length; i++) 
-        {
-            dp[1] += grid[i][0];
-            
-		    for (int j = 2; j <= grid[0].length; j++) 
-		    {
-			    dp[j] = Math.min(dp[j - 1], dp[j]) + grid[i][j - 1];
-			}
-		}
-
-		return dp[grid[0].length];
-	}
-}
diff --git a/64.minimum-path-sum.83946307.Wrong-Answer.leetcode.java b/64.minimum-path-sum.83946307.Wrong-Answer.leetcode.java
deleted file mode 100644
index 04b6c1e0..00000000
--- ./64.minimum-path-sum.83946307.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution 
-{
-    public int minPathSum(int[][] grid) 
-    {
-		int[] dp = new int[grid[0].length + 1];
-		Arrays.fill(dp, Integer.MAX_VALUE);
-		dp[0] = 0;
-		dp[1] = grid[0][0];
-
-        for (int i = 0; i < grid.length; i++) 
-        {
-            dp[1] += grid[i][0];
-            
-		    for (int j = 2; j <= grid[0].length; j++) 
-		    {
-			    dp[j] = Math.min(dp[j - 1], dp[j]) + grid[i][j - 1];
-			}
-		}
-
-		return dp[grid[0].length];
-	}
-}
diff --git a/64.minimum-path-sum.83949039.Wrong-Answer.leetcode.java b/64.minimum-path-sum.83949039.Wrong-Answer.leetcode.java
deleted file mode 100644
index e4bb23bb..00000000
--- ./64.minimum-path-sum.83949039.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution 
-{
-    public int minPathSum(int[][] grid) 
-    {
-        if(grid[0].length == 1)
-        {
-            return grid[0][0];    
-        }
-        
-		int[] dp = new int[grid[0].length + 1];
-		Arrays.fill(dp, Integer.MAX_VALUE);
-		dp[0] = 0;
-		dp[1] = grid[0][0];
-
-        for (int i = 0; i < grid.length; i++) 
-        {
-            dp[1] += grid[i][0];
-            
-		    for (int j = 2; j <= grid[0].length; j++) 
-		    {
-			    dp[j] = Math.min(dp[j - 1], dp[j]) + grid[i][j - 1];
-			}
-		}
-
-		return dp[grid[0].length];
-	}
-}
diff --git a/65.valid-number.31082930.Accepted.leetcode.java b/65.valid-number.31082930.Accepted.leetcode.java
deleted file mode 100644
index 2115f2b2..00000000
--- ./65.valid-number.31082930.Accepted.leetcode.java
+++ /dev/null
@@ -1,157 +0,0 @@
-  public class Solution
-  {
-    enum Status
-    {
-      INIT, SYMBOL, INT, DOT, FRAC, E, SYMBOL_E, INT_E
-    }
-    public boolean isNumber(String s)
-    {
-      s = s.trim();
-      Status status = Status.INIT;
-      boolean hasInt = false;
-
-      for (int i = 0; i < s.length(); i++)
-      {
-        char c = s.charAt(i);
-
-        switch (status)
-        {
-        case INIT:
-          if (c == '+' || c == '-')
-          {
-            status = Status.SYMBOL;
-          }
-          else if (Character.isDigit(c))
-          {
-            status = Status.INT;
-            hasInt = true;
-          }
-          else if (c == '.')
-          {
-            status = Status.DOT;
-          }
-          else
-          {
-            return false;
-          }
-
-          break;
-
-        case SYMBOL:
-          if (Character.isDigit(c))
-          {
-            status = Status.INT;
-            hasInt = true;
-          }
-          else if (c == '.')
-          {
-            status = Status.DOT;
-          }
-          else
-          {
-            return false;
-          }
-
-          break;
-
-        case INT:
-          if (Character.isDigit(c))
-          {
-          }
-          else if (c == '.')
-          {
-            status = Status.DOT;
-          }
-          else if (c == 'E' || c == 'e')
-          {
-            status = Status.E;
-          }
-          else
-          {
-            return false;
-          }
-
-          break;
-
-        case DOT:
-          if (Character.isDigit(c))
-          {
-            status = Status.FRAC;
-          }
-          else if (c == 'E' || c == 'e')
-          {
-            if (!hasInt)
-            {
-              return false;
-            }
-
-            status = Status.E;
-          }
-          else
-          {
-            return false;
-          }
-
-          break;
-
-        case FRAC:
-          if (Character.isDigit(c))
-          {
-          }
-          else if (c == 'E' || c == 'e')
-          {
-            status = Status.E;
-          }
-          else
-          {
-            return false;
-          }
-
-          break;
-
-        case E:
-          if (Character.isDigit(c))
-          {
-            status = Status.INT_E;
-          }
-          else if (c == '+' || c == '-')
-          {
-            status = Status.SYMBOL_E;
-          }
-          else
-          {
-            return false;
-          }
-
-          break;
-
-        case SYMBOL_E:
-          if (Character.isDigit(c))
-          {
-            status = Status.INT_E;
-          }
-          else
-          {
-            return false;
-          }
-
-          break;
-
-        case INT_E:
-          if (Character.isDigit(c))
-          {
-          }
-          else
-          {
-            return false;
-          }
-
-          break;
-        }
-      }
-
-      return (hasInt && status == Status.DOT) || status == Status.INT
-             || status == Status.FRAC || status == Status.INT_E;
-    }
-  }
-
diff --git a/65.valid-number.31083150.Accepted.leetcode.java b/65.valid-number.31083150.Accepted.leetcode.java
deleted file mode 100644
index 2d10c1a6..00000000
--- ./65.valid-number.31083150.Accepted.leetcode.java
+++ /dev/null
@@ -1,158 +0,0 @@
-  enum Status
-  {
-    INIT, SYMBOL, INT, DOT, FRAC, E, SYMBOL_E, INT_E
-  }
-
-  public class Solution
-  {
-    public boolean isNumber(String s)
-    {
-      s = s.trim();
-      Status status = Status.INIT;
-      boolean hasInt = false;
-
-      for (int i = 0; i < s.length(); i++ )
-      {
-        char c = s.charAt(i);
-
-        switch (status)
-        {
-          case INIT:
-            if (c == '+' || c == '-')
-            {
-              status = Status.SYMBOL;
-            }
-            else if (Character.isDigit(c))
-            {
-              status = Status.INT;
-              hasInt = true;
-            }
-            else if (c == '.')
-            {
-              status = Status.DOT;
-            }
-            else
-            {
-              return false;
-            }
-
-            break;
-
-          case SYMBOL:
-            if (Character.isDigit(c))
-            {
-              status = Status.INT;
-              hasInt = true;
-            }
-            else if (c == '.')
-            {
-              status = Status.DOT;
-            }
-            else
-            {
-              return false;
-            }
-
-            break;
-
-          case INT:
-            if (Character.isDigit(c))
-            {
-            }
-            else if (c == '.')
-            {
-              status = Status.DOT;
-            }
-            else if (c == 'E' || c == 'e')
-            {
-              status = Status.E;
-            }
-            else
-            {
-              return false;
-            }
-
-            break;
-
-          case DOT:
-            if (Character.isDigit(c))
-            {
-              status = Status.FRAC;
-            }
-            else if (c == 'E' || c == 'e')
-            {
-              if (!hasInt)
-              {
-                return false;
-              }
-
-              status = Status.E;
-            }
-            else
-            {
-              return false;
-            }
-
-            break;
-
-          case FRAC:
-            if (Character.isDigit(c))
-            {
-            }
-            else if (c == 'E' || c == 'e')
-            {
-              status = Status.E;
-            }
-            else
-            {
-              return false;
-            }
-
-            break;
-
-          case E:
-            if (Character.isDigit(c))
-            {
-              status = Status.INT_E;
-            }
-            else if (c == '+' || c == '-')
-            {
-              status = Status.SYMBOL_E;
-            }
-            else
-            {
-              return false;
-            }
-
-            break;
-
-          case SYMBOL_E:
-            if (Character.isDigit(c))
-            {
-              status = Status.INT_E;
-            }
-            else
-            {
-              return false;
-            }
-
-            break;
-
-          case INT_E:
-            if (Character.isDigit(c))
-            {
-            }
-            else
-            {
-              return false;
-            }
-
-            break;
-        }
-      }
-
-      return (hasInt && status == Status.DOT) || status == Status.INT
-        || status == Status.FRAC || status == Status.INT_E;
-    }
-  }
-
diff --git a/66.plus-one.7657354.Accepted.leetcode.java b/66.plus-one.7657354.Accepted.leetcode.java
deleted file mode 100644
index f677eadd..00000000
--- ./66.plus-one.7657354.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-  public class Solution {
-    public int[] plusOne(int[] digits) {
-      int carry = 1;
-
-      for (int i = digits.length - 1; i >= 0; i--) {
-        int sum = digits[i] + carry;
-        carry = sum / 10;
-        digits[i] = sum % 10;
-      }
-
-      if (carry == 1) {
-        int[] re = new int[digits.length + 1];
-        System.arraycopy(digits, 0, re, 1, digits.length);
-        re[0] = 1;
-        return re;
-      }
-      else {
-        return digits;
-      }
-    }
-  }
-
diff --git a/66.plus-one.85275465.Accepted.leetcode.java b/66.plus-one.85275465.Accepted.leetcode.java
deleted file mode 100644
index 480d48f1..00000000
--- ./66.plus-one.85275465.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution 
-{
-    public int[] plusOne(int[] digits) 
-    {
-        int carry = 1;
-
-        for (int i = digits.length - 1; i >= 0; i--) 
-        {
-            int sum = digits[i] + carry;
-            carry = sum / 10;
-            digits[i] = sum % 10;
-        }
-
-        if (carry == 1) 
-        {
-            int[] re = new int[digits.length + 1];
-            System.arraycopy(digits, 0, re, 1, digits.length);
-            re[0] = 1;
-            return re;
-        }
-        else 
-        {
-            return digits;
-        }
-    }
-}
diff --git a/66.plus-one.85276464.Wrong-Answer.leetcode.java b/66.plus-one.85276464.Wrong-Answer.leetcode.java
deleted file mode 100644
index 7c3f568d..00000000
--- ./66.plus-one.85276464.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution 
-{
-    public int[] plusOne(int[] digits) 
-    {
-        int carry = 1;
-
-        for(int i = digits.length - 1; i >= 0; i--)
-        {
-            digits[i] += carry;
-            carry = digits[i] / 10;
-            digits[i] %= 10;
-        }
-        
-        if (carry == 1) 
-        {
-            int[] re = new int[digits.length + 1];
-            System.arraycopy(digits, 0, re, 1, digits.length);
-            return re;
-        }
-        else 
-        {
-            return digits;
-        }
-    }
-}
diff --git a/66.plus-one.85276500.Accepted.leetcode.java b/66.plus-one.85276500.Accepted.leetcode.java
deleted file mode 100644
index 0ccfd7ef..00000000
--- ./66.plus-one.85276500.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution 
-{
-    public int[] plusOne(int[] digits) 
-    {
-        int carry = 1;
-
-        for(int i = digits.length - 1; i >= 0; i--)
-        {
-            digits[i] += carry;
-            carry = digits[i] / 10;
-            digits[i] %= 10;
-        }
-        
-        if (carry == 1) 
-        {
-            int[] re = new int[digits.length + 1];
-            System.arraycopy(digits, 0, re, 1, digits.length);
-            re[0] = 1;
-            return re;
-        }
-        else 
-        {
-            return digits;
-        }
-    }
-}
diff --git a/67.add-binary.7524564.Accepted.leetcode.java b/67.add-binary.7524564.Accepted.leetcode.java
deleted file mode 100644
index 723d420b..00000000
--- ./67.add-binary.7524564.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution {
-    public String addBinary(String a, String b) {
-        StringBuilder re = new StringBuilder();
-      int i = a.length() - 1;
-      int j = b.length() - 1;
-      int carry = 0;
-
-      while (i >= 0 || j >= 0 || carry > 0) {
-        int valueA = i < 0 ? 0 : a.charAt(i) - '0';
-        int valueB = j < 0 ? 0 : b.charAt(j) - '0';
-        re.append((valueA + valueB + carry) % 2);
-        carry = (valueA + valueB + carry) / 2;
-        i--;
-        j--;
-      }
-
-      return re.reverse().toString();
-
-    }
-}
diff --git a/67.add-binary.7764378.Accepted.leetcode.java b/67.add-binary.7764378.Accepted.leetcode.java
deleted file mode 100644
index ed62cdfc..00000000
--- ./67.add-binary.7764378.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-  public class Solution {
-    public String addBinary(String a, String b) {
-      StringBuilder re = new StringBuilder();
-      int i = a.length() - 1;
-      int j = b.length() - 1;
-      int carry = 0;
-
-      while (i >= 0 || j >= 0 || carry > 0) {
-        int valueA = i < 0 ? 0 : a.charAt(i) - '0';
-        int valueB = j < 0 ? 0 : b.charAt(j) - '0';
-        re.append((valueA + valueB + carry) % 2);
-        carry = (valueA + valueB + carry) / 2;
-        i--;
-        j--;
-      }
-
-      return re.reverse().toString();
-    }
-  }
-
diff --git a/68.text-justification.31083319.Accepted.leetcode.java b/68.text-justification.31083319.Accepted.leetcode.java
deleted file mode 100644
index 2be940db..00000000
--- ./68.text-justification.31083319.Accepted.leetcode.java
+++ /dev/null
@@ -1,83 +0,0 @@
-  public class Solution
-  {
-    private void appendSpace(StringBuilder line, int space)
-    {
-      for (int i = 0; i < space; i++)
-      {
-        line.append(' ');
-      }
-    }
-
-    public ArrayList<String> fullJustify(String[] words, int L)
-    {
-      ArrayList<String> ans = new ArrayList<String>();
-
-      if (words.length == 0)
-      {
-        return ans;
-      }
-
-      int begin = 0;
-      int len = words[0].length();
-      int current = 1;
-
-      while (current < words.length)
-      {
-        if (len + words[current].length() + 1 <= L)
-        {
-          len += words[current].length() + 1;
-        }
-        else
-        {
-          int wordCount = current - begin;
-          int padding = L - len + wordCount - 1;
-          StringBuilder line = new StringBuilder();
-
-          if (wordCount == 1)
-          {
-            line.append(words[begin]);
-            appendSpace(line, padding);
-          }
-          else
-          {
-            int slotSize = padding / (wordCount - 1);
-            int moreSlotCount = padding % (wordCount - 1);
-
-            for (int i = 0; i < moreSlotCount; i++)
-            {
-              line.append(words[begin + i]);
-              appendSpace(line, slotSize + 1);
-            }
-
-            for (int i = moreSlotCount; i < wordCount - 1; i++)
-            {
-              line.append(words[begin + i]);
-              appendSpace(line, slotSize);
-            }
-
-            line.append(words[current - 1]);
-          }
-
-          ans.add(line.toString());
-          begin = current;
-          len = words[current].length();
-        }
-
-        current++;
-      }
-
-      StringBuilder line = new StringBuilder();
-
-      for (int i = begin; i < words.length - 1; i++)
-      {
-        line.append(words[i]);
-        line.append(' ');
-      }
-
-      line.append(words[words.length - 1]);
-      appendSpace(line, L - len);
-      ans.add(line.toString());
-      return ans;
-    }
-  }
-
diff --git a/68.text-justification.83157030.Accepted.leetcode.java b/68.text-justification.83157030.Accepted.leetcode.java
deleted file mode 100644
index 613d845d..00000000
--- ./68.text-justification.83157030.Accepted.leetcode.java
+++ /dev/null
@@ -1,82 +0,0 @@
-public class Solution
-{
-    private void appendSpace(StringBuilder line, int space)
-    {
-        for (int i = 0; i < space; i++)
-        {
-            line.append(' ');
-        }
-    }
-
-    public ArrayList<String> fullJustify(String[] words, int L)
-    {
-        ArrayList<String> ans = new ArrayList<String>();
-
-        if (words.length == 0)
-        {
-            return ans;
-        }
-
-        int begin = 0;
-        int len = words[0].length();
-        int current = 1;
-
-        while (current < words.length)
-        {
-            if (len + words[current].length() + 1 <= L)
-            {
-                len += words[current].length() + 1;
-            }
-            else
-            {
-                int wordCount = current - begin;
-                int padding = L - len + wordCount - 1;
-                StringBuilder line = new StringBuilder();
-
-                if (wordCount == 1)
-                {
-                    line.append(words[begin]);
-                    appendSpace(line, padding);
-                }
-                else
-                {
-                    int slotSize = padding / (wordCount - 1);
-                    int moreSlotCount = padding % (wordCount - 1);
-
-                    for (int i = 0; i < moreSlotCount; i++)
-                    {
-                        line.append(words[begin + i]);
-                        appendSpace(line, slotSize + 1);
-                    }
-
-                    for (int i = moreSlotCount; i < wordCount - 1; i++)
-                    {
-                        line.append(words[begin + i]);
-                        appendSpace(line, slotSize);
-                    }
-
-                    line.append(words[current - 1]);
-                }
-
-                ans.add(line.toString());
-                begin = current;
-                len = words[current].length();
-            }
-
-            current++;
-        }
-
-        StringBuilder line = new StringBuilder();
-
-        for (int i = begin; i < words.length - 1; i++)
-        {
-            line.append(words[i]);
-            line.append(' ');
-        }
-
-        line.append(words[words.length - 1]);
-        appendSpace(line, L - len);
-        ans.add(line.toString());
-        return ans;
-    }
-}
diff --git a/68.text-justification.83234161.Accepted.leetcode.java b/68.text-justification.83234161.Accepted.leetcode.java
deleted file mode 100644
index ef2d9f50..00000000
--- ./68.text-justification.83234161.Accepted.leetcode.java
+++ /dev/null
@@ -1,69 +0,0 @@
-public class Solution 
-{
-    public ArrayList<String> fullJustify(String[] words, int L) 
-    {
-        int wordsCount = words.length;
-        ArrayList<String> result = new ArrayList<String>();
-        int curLen = 0;
-        int lastI = 0;
-        
-        for (int i = 0; i <= wordsCount; i++) 
-        {
-            if (i == wordsCount || curLen + words[i].length() + i - lastI > L) 
-            {
-                StringBuffer buf = new StringBuffer();
-                int spaceCount = L - curLen;
-                int spaceSlots = i - lastI - 1;
-                
-                if (spaceSlots == 0 || i == wordsCount) 
-                {
-                    for(int j = lastI; j < i; j++)
-                    {
-                        buf.append(words[j]);
-                        
-                        if(j != i - 1)
-                        {
-                            appendSpace(buf, 1);
-                        }
-                    }
-                
-                    appendSpace(buf, L - buf.length());
-                } 
-                else 
-                {
-                    int spaceEach = spaceCount / spaceSlots;
-                    int spaceExtra = spaceCount % spaceSlots;
-                
-                    for (int j = lastI; j < i; j++) 
-                    {
-                        buf.append(words[j]);
-                        
-                        if (j != i - 1)
-                        {
-                            appendSpace(buf, spaceEach + (j - lastI < spaceExtra ? 1 : 0));
-                        }
-                    }
-                }
-
-                result.add(buf.toString());
-                lastI = i;
-                curLen = 0;
-            }
-            
-            if (i < wordsCount)
-            {
-                curLen += words[i].length();
-            }
-        }
-
-        return result;
-    }
-
-    private void appendSpace(StringBuffer sb, int count) 
-    {
-        for (int i = 0; i < count; i++)
-        {
-            sb.append(' ');
-        }
-    }
-}
diff --git a/68.text-justification.83234584.Accepted.leetcode.java b/68.text-justification.83234584.Accepted.leetcode.java
deleted file mode 100644
index 4d9f5bc3..00000000
--- ./68.text-justification.83234584.Accepted.leetcode.java
+++ /dev/null
@@ -1,60 +0,0 @@
-public class Solution {
-    public ArrayList<String> fullJustify(String[] words, int L) {
-    ArrayList<String> res = new ArrayList<String>();
-    if(words==null || words.length==0)
-        return res;
-    int count = 0;
-    int last = 0;
-    for(int i=0;i<words.length;i++){
-        //count是上一次计算的单词的长度，words[i].length()是当前尝试放的一个单词的长度，
-        //假设当前放上了这个单词，那么这一行单词跟单词间的间隔数就是i-last
-        //判断这些总的长度加起来是不是大于L（超行数了）
-        if(count + words[i].length() + (i-last) > L){
-            int spaceNum = 0;
-            int extraNum = 0;
-            //因为尝试的words[i]失败了，所以间隔数减1.此时判断剩余的间隔数是否大于0
-            if( i-last-1 >0){
-                //是间隔的倍数（为啥要减1，因为尝试当前words[i]后发现比L长了，
-                //所以当前这个单词不能算作这行，所以间隔就减少一个
-                spaceNum = (L-count)/(i-last-1);
-                extraNum = (L-count)%(i-last-1);//不是倍数的话还要计算
-            }
-            StringBuilder str = new StringBuilder();
-            for(int j=last;j<i;j++){
-                str.append(words[j]);
-                if(j<i-1){//words[i-1]的话后面就不用填空格了，所以这里j<i-1
-                    for(int k=0;k<spaceNum;k++)
-                        str.append(" ");
-                    
-                    if(extraNum>0)
-                        str.append(" ");
-                    
-                    extraNum--;
-                }
-            }
-            
-            //下面这个for循环作用于一行只有一个单词还没填满一行的情况
-            for(int j=str.length();j<L;j++)
-                str.append(" ");
-                
-            res.add(str.toString());
-            count=0;
-            last=i;//下一个开始的单词
-        }
-        count += words[i].length();
-    }
-    
-    //处理最后一行
-    StringBuilder str = new StringBuilder();
-    for(int i=last;i<words.length;i++){
-        str.append(words[i]);
-        if(str.length()<L)
-            str.append(" ");
-    }
-    for(int i=str.length();i<L;i++)
-        str.append(" ");
-    
-    res.add(str.toString());
-    return res;
-}
-}
diff --git a/68.text-justification.83234697.Accepted.leetcode.java b/68.text-justification.83234697.Accepted.leetcode.java
deleted file mode 100644
index 40f7a3c1..00000000
--- ./68.text-justification.83234697.Accepted.leetcode.java
+++ /dev/null
@@ -1,91 +0,0 @@
-public class Solution
-{
-    public ArrayList<String> fullJustify(String[] words, int L)
-    {
-        ArrayList<String> res = new ArrayList<String>();
-
-        if (words == null || words.length == 0)
-        {
-            return res;
-        }
-
-        int count = 0;
-        int last = 0;
-
-        for (int i = 0; i < words.length; i++)
-        {
-            //count是上一次计算的单词的长度，words[i].length()是当前尝试放的一个单词的长度，
-            //假设当前放上了这个单词，那么这一行单词跟单词间的间隔数就是i-last
-            //判断这些总的长度加起来是不是大于L（超行数了）
-            if (count + words[i].length() + (i - last) > L)
-            {
-                int spaceNum = 0;
-                int extraNum = 0;
-
-                //因为尝试的words[i]失败了，所以间隔数减1.此时判断剩余的间隔数是否大于0
-                if (i - last - 1 > 0)
-                {
-                    //是间隔的倍数（为啥要减1，因为尝试当前words[i]后发现比L长了，
-                    //所以当前这个单词不能算作这行，所以间隔就减少一个
-                    spaceNum = (L - count) / (i - last - 1);
-                    extraNum = (L - count) % (i - last - 1); //不是倍数的话还要计算
-                }
-
-                StringBuilder str = new StringBuilder();
-
-                for (int j = last; j < i; j++)
-                {
-                    str.append(words[j]);
-
-                    if (j < i - 1) //words[i-1]的话后面就不用填空格了，所以这里j<i-1
-                    {
-                        for (int k = 0; k < spaceNum; k++)
-                        {
-                            str.append(" ");
-                        }
-
-                        if (extraNum > 0)
-                        {
-                            str.append(" ");
-                        }
-
-                        extraNum--;
-                    }
-                }
-
-                //下面这个for循环作用于一行只有一个单词还没填满一行的情况
-                for (int j = str.length(); j < L; j++)
-                {
-                    str.append(" ");
-                }
-
-                res.add(str.toString());
-                count = 0;
-                last = i; //下一个开始的单词
-            }
-
-            count += words[i].length();
-        }
-
-        //处理最后一行
-        StringBuilder str = new StringBuilder();
-
-        for (int i = last; i < words.length; i++)
-        {
-            str.append(words[i]);
-
-            if (str.length() < L)
-            {
-                str.append(" ");
-            }
-        }
-
-        for (int i = str.length(); i < L; i++)
-        {
-            str.append(" ");
-        }
-
-        res.add(str.toString());
-        return res;
-    }
-}
diff --git a/69.sqrtx.10181735.Wrong-Answer.leetcode.java b/69.sqrtx.10181735.Wrong-Answer.leetcode.java
deleted file mode 100644
index b965d320..00000000
--- ./69.sqrtx.10181735.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-	public class Solution {
-		public int sqrt(int a) {
-			if (a < 0) {
-				return -1;
-			}
-
-			if (a == 0) {
-				return 0;
-			}
-
-			int l = 1;
-			int r = a / 2 + 1;
-
-			while (l <= r) {
-				int m = (l + r) / 2;
-
-				if (m * m <= a && a < (m + 1) * (m + 1)) {
-					return m;
-				}
-
-				if (a / m < m) {
-					r = m - 1;
-				}
-				else {
-					l = m + 1;
-				}
-			}
-
-			return 0;
-		}
-	}
-
diff --git a/7.reverse-integer.26881153.Wrong-Answer.leetcode.java b/7.reverse-integer.26881153.Wrong-Answer.leetcode.java
deleted file mode 100644
index ea0a523c..00000000
--- ./7.reverse-integer.26881153.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,15 +0,0 @@
-  public class Solution
-  {
-    public int reverse(int x)
-    {
-      int r = 0;
-
-      for (; x != 0; x /= 10)
-      {
-        r = r * 10 + x % 10;
-      }
-
-      return r;
-    }
-  }
-
diff --git a/7.reverse-integer.27413338.Wrong-Answer.leetcode.java b/7.reverse-integer.27413338.Wrong-Answer.leetcode.java
deleted file mode 100644
index e1aad540..00000000
--- ./7.reverse-integer.27413338.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-  public class Solution
-  {
-    public int reverse(int x)
-    {
-      boolean isNeg = x < 0 ? true : false;
-      x = Math.abs(x);
-      int res = 0;
-
-      while (x != 0)
-      {
-        int digit = x % 10;
-        x = x / 10;
-
-        if (isNeg == false && res * 10 + digit > Integer.MAX_VALUE)
-        {
-          return Integer.MAX_VALUE;
-        }
-
-        if (isNeg == true  && res * (-10) - digit < Integer.MIN_VALUE)
-        {
-          return Integer.MIN_VALUE;
-        }
-
-        res = res * 10 + digit;
-      }
-
-      return isNeg == true ? -res : res ;
-    }
-  }
-
diff --git a/7.reverse-integer.27413466.Accepted.leetcode.java b/7.reverse-integer.27413466.Accepted.leetcode.java
deleted file mode 100644
index 1c1b7cfe..00000000
--- ./7.reverse-integer.27413466.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-  public class Solution
-  {
-    public int reverse(int x)
-    {
-      boolean isNeg = x < 0 ? true : false;
-      x = Math.abs(x);
-      int res = 0;
-
-      while (x != 0)
-      {
-        int digit = x % 10;
-        x = x / 10;
-
-        if (res > (Integer.MAX_VALUE - digit) / 10)
-        {
-          return 0;
-        }
-
-        res = res * 10 + digit;
-      }
-      return isNeg == true ? -res : res ;
-    }
-  }
-
diff --git a/7.reverse-integer.33775486.Accepted.leetcode.java b/7.reverse-integer.33775486.Accepted.leetcode.java
deleted file mode 100644
index aeb83284..00000000
--- ./7.reverse-integer.33775486.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-  public class Solution
-  {
-    public int reverse(int x)
-    {
-      boolean isNeg = x < 0 ? true : false;
-      x = Math.abs(x);
-      int res = 0;
-
-      while (x != 0)
-      {
-        int digit = x % 10;
-        x = x / 10;
-
-        if (res > (Integer.MAX_VALUE - digit) / 10)
-        {
-          return 0;
-        }
-
-        res = res * 10 + digit;
-      }
-
-      return isNeg == true ? -res : res ;
-    }
-  }
-
diff --git a/7.reverse-integer.86604267.Accepted.leetcode.java b/7.reverse-integer.86604267.Accepted.leetcode.java
deleted file mode 100644
index 768f2668..00000000
--- ./7.reverse-integer.86604267.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution
-{
-    public int reverse(int x)
-    {
-        boolean isNeg = x < 0 ? true : false;
-        x = Math.abs(x);
-        int res = 0;
-
-        while (x != 0)
-        {
-            int digit = x % 10;
-            x = x / 10;
-
-            if (res > (Integer.MAX_VALUE - digit) / 10)
-            {
-                return 0;
-            }
-
-            res = res * 10 + digit;
-        }
-
-        return isNeg == true ? -res : res ;
-    }
-}
diff --git a/7.reverse-integer.86606417.Wrong-Answer.leetcode.java b/7.reverse-integer.86606417.Wrong-Answer.leetcode.java
deleted file mode 100644
index 146b8671..00000000
--- ./7.reverse-integer.86606417.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int reverse(int x)
-    {
-        boolean isNeg = x < 0 ? true : false;
-        x = Math.abs(x);
-        int res = 0;
-
-        while (x != 0)
-        {
-            int digit = x % 10;
-            x = x / 10;
-
-            if (isNeg == false && res * 10 + digit > Integer.MAX_VALUE)
-            {
-                return Integer.MAX_VALUE;
-            }
-
-            if (isNeg == true  && res * (-10) - digit < Integer.MIN_VALUE)
-            {
-                return Integer.MIN_VALUE;
-            }
-
-            res = res * 10 + digit;
-        }
-
-        return isNeg == true ? -res : res ;
-    }
-}
diff --git a/7.reverse-integer.9051500.Accepted.leetcode.java b/7.reverse-integer.9051500.Accepted.leetcode.java
deleted file mode 100644
index 116740ec..00000000
--- ./7.reverse-integer.9051500.Accepted.leetcode.java
+++ /dev/null
@@ -1,12 +0,0 @@
-public class Solution {
-    public int reverse(int x) {
-      int r = 0;
-
-      for (; x != 0; x /= 10) {
-        r = r * 10 + x % 10;
-      }
-
-      return r;
-    }
-  }
-
diff --git a/70.climbing-stairs.29625832.Accepted.leetcode.java b/70.climbing-stairs.29625832.Accepted.leetcode.java
deleted file mode 100644
index c10c672a..00000000
--- ./70.climbing-stairs.29625832.Accepted.leetcode.java
+++ /dev/null
@@ -1,15 +0,0 @@
-public class Solution {
-    public int climbStairs(int n) {
-        if(n == 1 || n == 2)
-            return n;
-        int dp1 = 1;
-        int dp2 = 2;
-        for(int i = 3;i <= n; i++)
-        {
-            int temp = dp1 + dp2;
-            dp1 = dp2;
-            dp2 = temp;
-        }
-        return dp2;
-    }
-}
diff --git a/70.climbing-stairs.7645369.Accepted.leetcode.java b/70.climbing-stairs.7645369.Accepted.leetcode.java
deleted file mode 100644
index 61f96a0a..00000000
--- ./70.climbing-stairs.7645369.Accepted.leetcode.java
+++ /dev/null
@@ -1,15 +0,0 @@
-  public class Solution {
-    public int climbStairs(int n) {
-      int f1 = 1;
-      int f2 = 1;
-
-      for (int i = 2; i <= n; i++) {
-        int temp = f1 + f2;
-        f1 = f2;
-        f2 = temp;
-      }
-
-      return f2;
-    }
-  }
-
diff --git a/70.climbing-stairs.7825970.Accepted.leetcode.java b/70.climbing-stairs.7825970.Accepted.leetcode.java
deleted file mode 100644
index ef94d97e..00000000
--- ./70.climbing-stairs.7825970.Accepted.leetcode.java
+++ /dev/null
@@ -1,15 +0,0 @@
-public class Solution {
-		public int climbStairs(int n) {
-			int f1 = 0;
-			int f2 = 1;
-
-			for (int i = 1; i <= n; i++) {
-				int temp = f1 + f2;
-				f1 = f2;
-				f2 = temp;
-			}
-
-			return f2;
-		}
-	}
-
diff --git a/70.climbing-stairs.81683004.Runtime-Error.leetcode.java b/70.climbing-stairs.81683004.Runtime-Error.leetcode.java
deleted file mode 100644
index 03fe7fa7..00000000
--- ./70.climbing-stairs.81683004.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-public class Solution 
-{
-    public int climbStairs(int n) 
-    {
-        int[] dp = new int[n];
-        dp[0] = 1;
-        dp[1] = 1;
-        
-        for(int i = 2; i < n; i++)
-        {
-            dp[i] = dp[i - 1] + dp[i - 2];        
-        }
-        
-        return dp[n - 1];
-    }
-}
diff --git a/70.climbing-stairs.81683099.Wrong-Answer.leetcode.java b/70.climbing-stairs.81683099.Wrong-Answer.leetcode.java
deleted file mode 100644
index 246fe844..00000000
--- ./70.climbing-stairs.81683099.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution 
-{
-    public int climbStairs(int n) 
-    {
-        if(n < 2)
-        {
-            return 1;
-        }
-        
-        int[] dp = new int[n];
-        dp[0] = 1;
-        dp[1] = 1;
-        
-        for(int i = 2; i < n; i++)
-        {
-            dp[i] = dp[i - 1] + dp[i - 2];        
-        }
-        
-        return dp[n - 1];
-    }
-}
diff --git a/70.climbing-stairs.81683241.Runtime-Error.leetcode.java b/70.climbing-stairs.81683241.Runtime-Error.leetcode.java
deleted file mode 100644
index b47c8dfd..00000000
--- ./70.climbing-stairs.81683241.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution 
-{
-    public int climbStairs(int n) 
-    {
-        if(n < 2)
-        {
-            return 1;
-        }
-        
-        int[] dp = new int[n];
-        dp[0] = 1;
-        dp[1] = 1;
-        
-        for(int i = 2; i <= n; i++)
-        {
-            dp[i] = dp[i - 1] + dp[i - 2];        
-        }
-        
-        return dp[n - 1];
-    }
-}
diff --git a/70.climbing-stairs.81683353.Accepted.leetcode.java b/70.climbing-stairs.81683353.Accepted.leetcode.java
deleted file mode 100644
index e8d60a84..00000000
--- ./70.climbing-stairs.81683353.Accepted.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution 
-{
-    public int climbStairs(int n) 
-    {
-        if(n < 2)
-        {
-            return 1;
-        }
-        
-        int[] dp = new int[n + 1];
-        dp[0] = 1;
-        dp[1] = 1;
-        
-        for(int i = 2; i <= n; i++)
-        {
-            dp[i] = dp[i - 1] + dp[i - 2];        
-        }
-        
-        return dp[n];
-    }
-}
diff --git a/71.simplify-path.102924338.Accepted.leetcode.java b/71.simplify-path.102924338.Accepted.leetcode.java
deleted file mode 100644
index 66f2a02e..00000000
--- ./71.simplify-path.102924338.Accepted.leetcode.java
+++ /dev/null
@@ -1,40 +0,0 @@
-public class Solution
-{
-    public String simplifyPath(String path)
-    {
-        String[] splits = path.split("/");
-        Stack<String> stack = new Stack<String>();
-
-        for (String split : splits)
-        {
-            if (!split.isEmpty())
-            {
-                if (split.equals(".."))
-                {
-                    if (!stack.isEmpty())
-                    {
-                        stack.pop();
-                    }
-                }
-                else if (split.equals("."))
-                {
-                    continue;
-                }
-                else
-                {
-                    stack.push(split);
-                }
-            }
-        }
-
-        StringBuilder newPath = new StringBuilder();
-
-        for (String s : stack)
-        {
-            newPath.append('/');
-            newPath.append(s);
-        }
-
-        return newPath.length() == 0 ? "/" : newPath.toString();
-    }
-}
diff --git a/71.simplify-path.102926993.Runtime-Error.leetcode.java b/71.simplify-path.102926993.Runtime-Error.leetcode.java
deleted file mode 100644
index 7a0016f3..00000000
--- ./71.simplify-path.102926993.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public String simplifyPath(String path)
-    {
-        String[] splits = path.split("/");
-        Stack<String> stack = new Stack<String>();
-
-        for (String split : splits)
-        {
-            if (!split.isEmpty())
-            {
-                if (split.equals(".."))
-                {
-                    stack.pop();
-                }
-                else if (split.equals("."))
-                {
-                    continue;
-                }
-                else
-                {
-                    stack.push(split);
-                }
-            }
-        }
-
-        StringBuilder newPath = new StringBuilder();
-
-        for (String s : stack)
-        {
-            newPath.append('/');
-            newPath.append(s);
-        }
-
-        return newPath.length() == 0 ? "/" : newPath.toString();
-    }
-}
diff --git a/71.simplify-path.102927039.Wrong-Answer.leetcode.java b/71.simplify-path.102927039.Wrong-Answer.leetcode.java
deleted file mode 100644
index bc7a3a62..00000000
--- ./71.simplify-path.102927039.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public String simplifyPath(String path)
-    {
-        String[] splits = path.split("/");
-        Stack<String> stack = new Stack<String>();
-
-        for (String split : splits)
-        {
-            if (split.equals(".."))
-            {
-                if (!stack.isEmpty())
-                {
-                    stack.pop();
-                }
-            }
-            else if (split.equals("."))
-            {
-                continue;
-            }
-            else
-            {
-                stack.push(split);
-            }
-        }
-
-        StringBuilder newPath = new StringBuilder();
-
-        for (String s : stack)
-        {
-            newPath.append('/');
-            newPath.append(s);
-        }
-
-        return newPath.length() == 0 ? "/" : newPath.toString();
-    }
-}
diff --git a/71.simplify-path.102927122.Wrong-Answer.leetcode.java b/71.simplify-path.102927122.Wrong-Answer.leetcode.java
deleted file mode 100644
index 1b1494cf..00000000
--- ./71.simplify-path.102927122.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public String simplifyPath(String path)
-    {
-        String[] splits = path.split("/");
-        Stack<String> stack = new Stack<String>();
-
-        for (String split : splits)
-        {
-            if (split.equals(".."))
-            {
-                if (!stack.isEmpty())
-                {
-                    stack.pop();
-                }
-            }
-            else if (split.equals("."))
-            {
-                continue;
-            }
-            else
-            {
-                stack.push(split);
-            }
-        }
-
-        StringBuilder newPath = new StringBuilder();
-
-        for (String s : stack)
-        {
-            newPath.append('/');
-            newPath.append(s);
-        }
-
-        return newPath.toString();
-    }
-}
diff --git a/71.simplify-path.102927149.Wrong-Answer.leetcode.java b/71.simplify-path.102927149.Wrong-Answer.leetcode.java
deleted file mode 100644
index 30363613..00000000
--- ./71.simplify-path.102927149.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-public class Solution
-{
-    public String simplifyPath(String path)
-    {
-        String[] splits = path.split("/");
-        Stack<String> stack = new Stack<String>();
-
-        for (String split : splits)
-        {
-            if (split.equals(".."))
-            {
-                if (!stack.isEmpty())
-                {
-                    stack.pop();
-                }
-            }
-            else if (split.equals("."))
-            {
-                continue;
-            }
-            else
-            {
-                stack.push(split);
-            }
-        }
-
-        StringBuilder newPath = new StringBuilder();
-        return newPath.length() == 0 ? "/" : newPath.toString();
-    }
-}
diff --git a/71.simplify-path.9105907.Accepted.leetcode.java b/71.simplify-path.9105907.Accepted.leetcode.java
deleted file mode 100644
index 499af3b7..00000000
--- ./71.simplify-path.9105907.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution {
-    public String simplifyPath(String path) {
-      String[] splits = path.split("/");
-      Stack<String> stack = new Stack<String>();
-
-      for (String split : splits) {
-        if (!split.isEmpty()) {
-          if (split.equals("..")) {
-            if (!stack.isEmpty()) {
-              stack.pop();
-            }
-          }
-          else if (split.equals(".")) {
-            continue;
-          }
-          else {
-            stack.push(split);
-          }
-        }
-      }
-
-      StringBuilder newPath = new StringBuilder();
-
-      for (String s : stack) {
-        newPath.append('/');
-        newPath.append(s);
-      }
-
-      return newPath.length() == 0 ? "/" : newPath.toString();
-    }
-  }
-
diff --git a/72.edit-distance.102404832.Wrong-Answer.leetcode.java b/72.edit-distance.102404832.Wrong-Answer.leetcode.java
deleted file mode 100644
index 53a6e5ab..00000000
--- ./72.edit-distance.102404832.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int minDistance(String word1, String word2)
-    {
-        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
-        
-        for (int j = 1; j <= word2.length(); j++)
-        {
-            dp[0][j] = j;
-        }
-
-        for (int i = 1; i <= word1.length(); i++)
-        {
-            for (int j = 1; j <= word2.length(); j++)
-            {
-                if (word1.charAt(i - 1) == word2.charAt(j - 1))
-                {
-                    dp[i][j] = dp[i - 1][j - 1];
-                }
-                else
-                {
-                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i - 1][j - 1]), dp[i][j - 1]) + 1;
-                }
-            }
-        }
-
-        return dp[word1.length()][word2.length()];
-    }
-}
diff --git a/72.edit-distance.102404889.Accepted.leetcode.java b/72.edit-distance.102404889.Accepted.leetcode.java
deleted file mode 100644
index 983c7966..00000000
--- ./72.edit-distance.102404889.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    public int minDistance(String word1, String word2)
-    {
-        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
-        
-        for (int j = 1; j <= word2.length(); j++)
-        {
-            dp[0][j] = j;
-        }
-        
-        for (int i = 1; i <= word1.length(); i++)
-        {
-            dp[i][0] = i;
-        }
-
-        for (int i = 1; i <= word1.length(); i++)
-        {
-            for (int j = 1; j <= word2.length(); j++)
-            {
-                if (word1.charAt(i - 1) == word2.charAt(j - 1))
-                {
-                    dp[i][j] = dp[i - 1][j - 1];
-                }
-                else
-                {
-                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i - 1][j - 1]), dp[i][j - 1]) + 1;
-                }
-            }
-        }
-
-        return dp[word1.length()][word2.length()];
-    }
-}
diff --git a/72.edit-distance.102405006.Runtime-Error.leetcode.java b/72.edit-distance.102405006.Runtime-Error.leetcode.java
deleted file mode 100644
index b4de9c33..00000000
--- ./72.edit-distance.102405006.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution
-{
-    public int minDistance(String word1, String word2)
-    {
-        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
-        
-        for (int i = 0; i <= word1.length(); i++)
-        {
-            for (int j = 0; j <= word2.length(); j++)
-            {
-                if (word1.charAt(i - 1) == word2.charAt(j - 1))
-                {
-                    dp[i][j] = dp[i - 1][j - 1];
-                }
-                else
-                {
-                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i - 1][j - 1]), dp[i][j - 1]) + 1;
-                }
-            }
-        }
-
-        return dp[word1.length()][word2.length()];
-    }
-}
diff --git a/72.edit-distance.102405065.Runtime-Error.leetcode.java b/72.edit-distance.102405065.Runtime-Error.leetcode.java
deleted file mode 100644
index 8667e07c..00000000
--- ./72.edit-distance.102405065.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution
-{
-    public int minDistance(String word1, String word2)
-    {
-        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
-        
-        for (int i = 0; i <= word1.length(); i++)
-        {
-            for (int j = 0; j <= word2.length(); j++)
-            {
-                if (i - 1 >= 0 && j - 1 >= 0 && word1.charAt(i - 1) == word2.charAt(j - 1))
-                {
-                    dp[i][j] = dp[i - 1][j - 1];
-                }
-                else
-                {
-                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i - 1][j - 1]), dp[i][j - 1]) + 1;
-                }
-            }
-        }
-
-        return dp[word1.length()][word2.length()];
-    }
-}
diff --git a/72.edit-distance.102405490.Accepted.leetcode.java b/72.edit-distance.102405490.Accepted.leetcode.java
deleted file mode 100644
index edff2156..00000000
--- ./72.edit-distance.102405490.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public int minDistance(String word1, String word2)
-    {
-        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
-
-        for (int i = 0; i <= word2.length(); i++)
-        {
-            dp[0][i] = i;
-        }
-
-        for (int i = 1; i <= word1.length(); i++)
-        {
-            dp[i][0] = i;
-
-            for (int j = 1; j <= word2.length(); j++)
-            {
-                if (word1.charAt(i - 1) == word2.charAt(j - 1))
-                {
-                    dp[i][j] = dp[i - 1][j - 1];
-                }
-                else
-                {
-                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i - 1][j - 1]), dp[i][j - 1]) + 1;
-                }
-            }
-        }
-
-        return dp[word1.length()][word2.length()];
-    }
-}
diff --git a/72.edit-distance.81830347.Wrong-Answer.leetcode.java b/72.edit-distance.81830347.Wrong-Answer.leetcode.java
deleted file mode 100644
index ceab7bde..00000000
--- ./72.edit-distance.81830347.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution 
-{
-    public int minDistance(String word1, String word2) 
-    {
-        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
-
-		for (int i = 0; i <= word2.length(); i++) 
-		{
-		    dp[0][i] = i;
-		}
-
-		for (int i = 1; i <= word1.length(); i++) 
-		{
-		    dp[i][0] = i;
-
-			for (int j = word2.length(); j >= 1; j--) 
-			{
-			    if (word1.charAt(i - 1) == word2.charAt(j - 1)) 
-				{
-				    dp[i][j] = dp[i - 1][j - 1];
-				}
-				else 
-				{
-				    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i - 1][j - 1]), dp[i][j - 1]) + 1;
-				}
-			}
-		}
-
-		return dp[word1.length()][word2.length()];
-	}
-}
diff --git a/72.edit-distance.81830623.Accepted.leetcode.java b/72.edit-distance.81830623.Accepted.leetcode.java
deleted file mode 100644
index 551fbb92..00000000
--- ./72.edit-distance.81830623.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution 
-{
-    public int minDistance(String word1, String word2) 
-    {
-        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
-
-		for (int i = 0; i <= word2.length(); i++) 
-		{
-		    dp[0][i] = i;
-		}
-
-		for (int i = 1; i <= word1.length(); i++) 
-		{
-		    dp[i][0] = i;
-
-			for (int j = 1; j <= word2.length(); j++) 
-			{
-			    if (word1.charAt(i - 1) == word2.charAt(j - 1)) 
-				{
-				    dp[i][j] = dp[i - 1][j - 1];
-				}
-				else 
-				{
-				    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i - 1][j - 1]), dp[i][j - 1]) + 1;
-				}
-			}
-		}
-
-		return dp[word1.length()][word2.length()];
-	}
-}
diff --git a/72.edit-distance.97355299.Wrong-Answer.leetcode.java b/72.edit-distance.97355299.Wrong-Answer.leetcode.java
deleted file mode 100644
index e99e5a83..00000000
--- ./72.edit-distance.97355299.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public int minDistance(String word1, String word2)
-    {
-        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
-
-        for (int i = 0; i <= word2.length(); i++)
-        {
-            dp[0][i] = i;
-        }
-
-        for (int i = 1; i <= word1.length(); i++)
-        {
-            dp[i][0] = i;
-
-            for (int j = word2.length(); j >= 1; j--)
-            {
-                if (word1.charAt(i - 1) == word2.charAt(j - 1))
-                {
-                    dp[i][j] = dp[i - 1][j - 1];
-                }
-                else
-                {
-                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i - 1][j - 1]), dp[i][j - 1]) + 1;
-                }
-            }
-        }
-
-        return dp[word1.length()][word2.length()];
-    }
-}
diff --git a/72.edit-distance.97356590.Wrong-Answer.leetcode.java b/72.edit-distance.97356590.Wrong-Answer.leetcode.java
deleted file mode 100644
index d18075cb..00000000
--- ./72.edit-distance.97356590.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public int minDistance(String word1, String word2)
-    {
-        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
-
-        for (int i = 0; i <= word2.length(); i++)
-        {
-            dp[0][i] = i;
-        }
-
-        for (int i = 1; i <= word1.length(); i++)
-        {
-            dp[i][0] = i;
-
-            for (int j = word2.length(); j >= 1; j--)
-            {
-                if (word1.charAt(i - 1) == word2.charAt(j - 1))
-                {
-                    dp[i][j] = dp[i - 1][j - 1];
-                    System.out.println(i + "," + j + " --> " + dp[i][j]);
-                }
-                else
-                {
-                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i - 1][j - 1]), dp[i][j - 1]) + 1;
-                    System.out.println(i + "," + j + " --> " + dp[i][j]);
-                }
-            }
-        }
-
-        return dp[word1.length()][word2.length()];
-    }
-}
diff --git a/72.edit-distance.97357580.Time-Limit-Exceeded.leetcode.java b/72.edit-distance.97357580.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index b8c28942..00000000
--- ./72.edit-distance.97357580.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public int minDistance(String word1, String word2)
-    {
-        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
-
-        for (int i = 0; i <= word2.length(); i++)
-        {
-            dp[0][i] = i;
-        }
-
-        for (int i = 1; i <= word1.length(); i++)
-        {
-            dp[i][0] = i;
-
-            for (int j = 1; j <= word2.length(); j++)
-            {
-                if (word1.charAt(i - 1) == word2.charAt(j - 1))
-                {
-                    dp[i][j] = dp[i - 1][j - 1];
-                    System.out.println(i + "," + j + " --> " + dp[i][j]);
-                }
-                else
-                {
-                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i - 1][j - 1]), dp[i][j - 1]) + 1;
-                    System.out.println(i + "," + j + " --> " + dp[i][j]);
-                }
-            }
-        }
-
-        return dp[word1.length()][word2.length()];
-    }
-}
diff --git a/72.edit-distance.97357633.Accepted.leetcode.java b/72.edit-distance.97357633.Accepted.leetcode.java
deleted file mode 100644
index fae402b0..00000000
--- ./72.edit-distance.97357633.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public int minDistance(String word1, String word2)
-    {
-        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
-
-        for (int i = 0; i <= word2.length(); i++)
-        {
-            dp[0][i] = i;
-        }
-
-        for (int i = 1; i <= word1.length(); i++)
-        {
-            dp[i][0] = i;
-
-            for (int j = 1; j <= word2.length(); j++)
-            {
-                if (word1.charAt(i - 1) == word2.charAt(j - 1))
-                {
-                    dp[i][j] = dp[i - 1][j - 1];
-                    //System.out.println(i + "," + j + " --> " + dp[i][j]);
-                }
-                else
-                {
-                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i - 1][j - 1]), dp[i][j - 1]) + 1;
-                    //System.out.println(i + "," + j + " --> " + dp[i][j]);
-                }
-            }
-        }
-
-        return dp[word1.length()][word2.length()];
-    }
-}
diff --git a/72.edit-distance.97358223.Runtime-Error.leetcode.java b/72.edit-distance.97358223.Runtime-Error.leetcode.java
deleted file mode 100644
index 7bcd73d0..00000000
--- ./72.edit-distance.97358223.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int minDistance(String word1, String word2)
-    {
-        int[][] dp = new int[word1.length()][word2.length()];
-
-        dp[0][0] = word1.charAt(0) == word2.charAt(0) ? 0 : 1;
-        
-        for (int i = 1; i < word1.length(); i++)
-        {
-            for (int j = 1; j < word2.length(); j++)
-            {
-                if (word1.charAt(i - 1) == word2.charAt(j - 1))
-                {
-                    dp[i][j] = dp[i - 1][j - 1];
-                    //System.out.println(i + "," + j + " --> " + dp[i][j]);
-                }
-                else
-                {
-                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i - 1][j - 1]), dp[i][j - 1]) + 1;
-                    //System.out.println(i + "," + j + " --> " + dp[i][j]);
-                }
-            }
-        }
-
-        return dp[word1.length() - 1][word2.length() - 1];
-    }
-}
diff --git a/72.edit-distance.97358920.Wrong-Answer.leetcode.java b/72.edit-distance.97358920.Wrong-Answer.leetcode.java
deleted file mode 100644
index 060eaa2c..00000000
--- ./72.edit-distance.97358920.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution
-{
-    public int minDistance(String word1, String word2)
-    {
-        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
-
-        for (int i = 1; i <= word1.length(); i++)
-        {
-            for (int j = 1; j <= word2.length(); j++)
-            {
-                if (word1.charAt(i - 1) == word2.charAt(j - 1))
-                {
-                    dp[i][j] = dp[i - 1][j - 1];
-                }
-                else
-                {
-                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i - 1][j - 1]), dp[i][j - 1]) + 1;
-                }
-            }
-        }
-
-        return dp[word1.length()][word2.length()];
-    }
-}
diff --git a/73.set-matrix-zeroes.28601675.Wrong-Answer.leetcode.java b/73.set-matrix-zeroes.28601675.Wrong-Answer.leetcode.java
deleted file mode 100644
index 3f9fc859..00000000
--- ./73.set-matrix-zeroes.28601675.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution {
-    public void setZeroes(int[][] matrix) {
-        int m = matrix.length;
-        int n = matrix[0].length;
-        for (int i = 0;i < m;i++)
-        {
-            for(int j = 0;j < n;j++)
-            {
-                if(matrix[i][j] == 0)
-                {
-                    matrix[0][j] = 0;
-                    matrix[i][0] = 0;
-                }
-            }
-        }
-        for(int j = 0;j < n;j++)
-        {
-            if(matrix[0][j] == 0)
-            {
-                for(int i = 0;i<m;i++)
-                {
-                    matrix[i][j] = 0;
-                }
-            }
-        }
-        for(int i=0;i<m;i++)
-        {
-            if(matrix[i][0] == 0)
-            {
-                for(int j=0;j<n;j++)
-                {
-                    matrix[i][j] = 0;
-                }
-            }
-        }
-    }
-}
diff --git a/73.set-matrix-zeroes.8323530.Accepted.leetcode.java b/73.set-matrix-zeroes.8323530.Accepted.leetcode.java
deleted file mode 100644
index 99b0754a..00000000
--- ./73.set-matrix-zeroes.8323530.Accepted.leetcode.java
+++ /dev/null
@@ -1,55 +0,0 @@
-  public class Solution {
-    public void setZeroes(int[][] matrix) {
-      if (matrix.length == 0 || matrix[0].length == 0) {
-        return;
-      }
-
-      boolean firstRowZero = false;
-
-      for (int i = 0; i < matrix[0].length; i++) {
-        if (matrix[0][i] == 0) {
-          firstRowZero = true;
-          break;
-        }
-      }
-
-      boolean firstColumnZero = false;
-
-      for (int i = 0; i < matrix.length; i++) {
-        if (matrix[i][0] == 0) {
-          firstColumnZero = true;
-          break;
-        }
-      }
-
-      for (int i = 1; i < matrix.length; i++) {
-        for (int j = 1; j < matrix[i].length; j++) {
-          if (matrix[i][j] == 0) {
-            matrix[i][0] = 0;
-            matrix[0][j] = 0;
-          }
-        }
-      }
-
-      for (int i = 1; i < matrix.length; i++) {
-        for (int j = 1; j < matrix[i].length; j++) {
-          if (matrix[i][0] == 0 || matrix[0][j] == 0) {
-            matrix[i][j] = 0;
-          }
-        }
-      }
-
-      if (firstRowZero) {
-        for (int i = 0; i < matrix[0].length; i++) {
-          matrix[0][i] = 0;
-        }
-      }
-
-      if (firstColumnZero) {
-        for (int i = 0; i < matrix.length; i++) {
-          matrix[i][0] = 0;
-        }
-      }
-    }
-  }
-
diff --git a/74.search-a-2d-matrix.28252978.Time-Limit-Exceeded.leetcode.java b/74.search-a-2d-matrix.28252978.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 60277233..00000000
--- ./74.search-a-2d-matrix.28252978.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution {
-    public boolean searchMatrix(int[][] matrix, int target) {
-        int rows = matrix.length;
-        int cols = matrix[0].length;
-        int left = 0;
-        int right = rows*cols - 1;
-        int mid = left + (right-left)/2;
-        while(left < right)
-        {
-            if(matrix[mid/cols][mid%cols] > target)
-            {
-                right = mid;
-            }
-            else if(matrix[mid/cols][mid%cols] < target)
-            {
-                left = mid;
-            }
-            else
-            {
-                return true;
-            }    
-        }
-        return false;
-    }
-}
diff --git a/74.search-a-2d-matrix.28253055.Time-Limit-Exceeded.leetcode.java b/74.search-a-2d-matrix.28253055.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 687eb316..00000000
--- ./74.search-a-2d-matrix.28253055.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution {
-    public boolean searchMatrix(int[][] matrix, int target) {
-        int rows = matrix.length;
-        int cols = matrix[0].length;
-        int left = 0;
-        int right = rows*cols - 1;
-        while(left < right)
-        {
-            int mid = left + (right-left)/2;
-            if(matrix[mid/cols][mid%cols] > target)
-            {
-                right = mid;
-            }
-            else if(matrix[mid/cols][mid%cols] < target)
-            {
-                left = mid;
-            }
-            else
-            {
-                return true;
-            }    
-        }
-        return false;
-    }
-}
diff --git a/74.search-a-2d-matrix.72960863.Accepted.leetcode.java b/74.search-a-2d-matrix.72960863.Accepted.leetcode.java
deleted file mode 100644
index c2c12453..00000000
--- ./74.search-a-2d-matrix.72960863.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public boolean searchMatrix(int[][] matrix, int target)
-    {
-        if (matrix.length == 0 || matrix[0].length == 0)
-        {
-            return false;
-        }
-
-        int columns = matrix[0].length;
-        int left = 0;
-        int right = matrix.length * columns - 1;
-
-        while (left <= right)
-        {
-            int mid = left + (right - left) / 2;
-            int val = matrix[mid / columns][mid % columns];
-
-            if (val < target)
-            {
-                left = mid + 1;
-            }
-            else if (val > target)
-            {
-                right = mid - 1;
-            }
-            else
-            {
-                return true;
-            }
-        }
-
-        return false;
-    }
-}
-
diff --git a/74.search-a-2d-matrix.72961139.Accepted.leetcode.java b/74.search-a-2d-matrix.72961139.Accepted.leetcode.java
deleted file mode 100644
index f7a2e014..00000000
--- ./74.search-a-2d-matrix.72961139.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public boolean searchMatrix(int[][] matrix, int target)
-    {
-        if (matrix.length == 0 || matrix[0].length == 0)
-        {
-            return false;
-        }
-
-        int columns = matrix[0].length;
-        int left = 0;
-        int right = matrix.length * columns - 1;
-
-        while (left + 1 < right)
-        {
-            int mid = left + (right - left) / 2;
-            int val = matrix[mid / columns][mid % columns];
-
-            if (val < target)
-            {
-                left = mid;
-            }
-            else if (val > target)
-            {
-                right = mid;
-            }
-            else
-            {
-                return true;
-            }
-        }
-
-        return (matrix[left / columns][left % columns] == target || matrix[right / columns][right % columns] == target);
-    }
-}
-
diff --git a/75.sort-colors.102552265.Wrong-Answer.leetcode.java b/75.sort-colors.102552265.Wrong-Answer.leetcode.java
deleted file mode 100644
index aafcfa87..00000000
--- ./75.sort-colors.102552265.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public void sortColors(int[] A)
-    {
-        if (A == null)
-        {
-            return;
-        }
-
-        int redIndex = 0;
-        int blueIndex = A.length - 1;
-        int index = 0;
-
-        while (index <= blueIndex)
-        {
-            if (A[index] == 0)
-            {
-                swap(A, index++, redIndex++);
-            }
-            else if (A[index] == 2)
-            {
-                swap(A, index, blueIndex--);
-            }
-            else
-            {
-                index++ ;
-            }
-        }
-    }
-
-    private void swap(int[] a, int index, int blueIndex)
-    {
-        int temp = a[index];
-        a[index] = a[blueIndex];
-        a[blueIndex] = a[index];
-    }
-}
diff --git a/75.sort-colors.102560381.Accepted.leetcode.java b/75.sort-colors.102560381.Accepted.leetcode.java
deleted file mode 100644
index e6b86695..00000000
--- ./75.sort-colors.102560381.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public void sortColors(int[] A)
-    {
-        if (A == null)
-        {
-            return;
-        }
-
-        int redIndex = 0;
-        int blueIndex = A.length - 1;
-        int index = 0;
-
-        while (index <= blueIndex)
-        {
-            if (A[index] == 0)
-            {
-                swap(A, index++, redIndex++);
-            }
-            else if (A[index] == 2)
-            {
-                swap(A, index, blueIndex--);
-            }
-            else
-            {
-                index++ ;
-            }
-        }
-    }
-
-    private void swap(int[] a, int index, int blueIndex)
-    {
-        int temp = a[index];
-        a[index] = a[blueIndex];
-        a[blueIndex] = temp;
-    }
-}
diff --git a/75.sort-colors.102560593.Wrong-Answer.leetcode.java b/75.sort-colors.102560593.Wrong-Answer.leetcode.java
deleted file mode 100644
index 96921ab5..00000000
--- ./75.sort-colors.102560593.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-public class Solution
-{
-    public void sortColors(int[] A)
-    {
-        if (A == null)
-        {
-            return;
-        }
-
-        int redIndex = 0;
-        int blueIndex = A.length - 1;
-        int index = 0;
-
-        while (index < blueIndex)
-        {
-            if (A[index] == 0)
-            {
-                swap(A, index++, redIndex++);
-            }
-            else if (A[index] == 2)
-            {
-                swap(A, index, blueIndex--);
-            }
-            else
-            {
-                index++ ;
-            }
-        }
-    }
-
-    private void swap(int[] a, int index, int blueIndex)
-    {
-        int temp = a[index];
-        a[index] = a[blueIndex];
-        a[blueIndex] = temp;
-    }
-}
diff --git a/75.sort-colors.157123703.Accepted.leetcode.java b/75.sort-colors.157123703.Accepted.leetcode.java
deleted file mode 100644
index 4ef1e4de..00000000
--- ./75.sort-colors.157123703.Accepted.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class Solution
-{
-    public void sortColors(int[] A)
-    {
-        if (A == null)
-        {
-            return;
-        }
-
-        int redIndex = 0;
-        int blueIndex = A.length - 1;
-        int index = 0;
-
-        while (index <= blueIndex)
-        {
-            if (A[index] == 0)
-            {
-                swap(A, index++, redIndex++);
-            }
-            else if (A[index] == 2)
-            {
-                swap(A, index, blueIndex--);
-            }
-            else
-            {
-                index++ ;
-            }
-        }
-    }
-
-    private void swap(int[] a, int index, int blueIndex)
-    {
-        int temp = a[index];
-        a[index] = a[blueIndex];
-        a[blueIndex] = temp;
-    }
-}
-
diff --git a/75.sort-colors.157124299.Wrong-Answer.leetcode.java b/75.sort-colors.157124299.Wrong-Answer.leetcode.java
deleted file mode 100644
index 3e848ab2..00000000
--- ./75.sort-colors.157124299.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class Solution
-{
-    public void sortColors(int[] A)
-    {
-        if (A == null)
-        {
-            return;
-        }
-
-        int redIndex = 0;
-        int blueIndex = A.length - 1;
-        int index = 0;
-
-        while (index < blueIndex)
-        {
-            if (A[index] == 0)
-            {
-                swap(A, index++, redIndex++);
-            }
-            else if (A[index] == 2)
-            {
-                swap(A, index, blueIndex--);
-            }
-            else
-            {
-                index++;
-            }
-        }
-    }
-
-    private void swap(int[] a, int index, int blueIndex)
-    {
-        int temp = a[index];
-        a[index] = a[blueIndex];
-        a[blueIndex] = temp;
-    }
-}
-
diff --git a/75.sort-colors.157125148.Accepted.leetcode.java b/75.sort-colors.157125148.Accepted.leetcode.java
deleted file mode 100644
index 8a709669..00000000
--- ./75.sort-colors.157125148.Accepted.leetcode.java
+++ /dev/null
@@ -1,38 +0,0 @@
-public class Solution
-{
-	public void sortColors(int[] A)
-	{
-		if (A == null)
-		{
-			return;
-		}
-
-		int redIndex = 0;
-		int blueIndex = A.length - 1;
-		int index = 0;
-
-		while (index <= blueIndex)
-		{
-			if (A[index] == 0)
-			{
-				swap(A, index++, redIndex++);
-			}
-			else if (A[index] == 2)
-			{
-				swap(A, index, blueIndex--);
-			}
-			else
-			{
-				index++;
-			}
-		}
-	}
-
-	private void swap(int[] a, int index, int blueIndex)
-	{
-		int temp = a[index];
-		a[index] = a[blueIndex];
-		a[blueIndex] = temp;
-	}
-}
-
diff --git a/75.sort-colors.157125240.Accepted.leetcode.java b/75.sort-colors.157125240.Accepted.leetcode.java
deleted file mode 100644
index 16c6a486..00000000
--- ./75.sort-colors.157125240.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-	public void sortColors(int[] A)
-	{
-		int redIndex = 0;
-		int blueIndex = A.length - 1;
-		int index = 0;
-
-		while (index <= blueIndex)
-		{
-			if (A[index] == 0)
-			{
-				swap(A, index++, redIndex++);
-			}
-			else if (A[index] == 2)
-			{
-				swap(A, index, blueIndex--);
-			}
-			else
-			{
-				index++;
-			}
-		}
-	}
-
-	private void swap(int[] a, int index, int blueIndex)
-	{
-		int temp = a[index];
-		a[index] = a[blueIndex];
-		a[blueIndex] = temp;
-	}
-}
-
diff --git a/75.sort-colors.78131274.Accepted.leetcode.java b/75.sort-colors.78131274.Accepted.leetcode.java
deleted file mode 100644
index 66b6002f..00000000
--- ./75.sort-colors.78131274.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution
-{
-    public void sortColors(int[] A)
-    {
-        if (A == null)
-        {
-            return;
-        }
-
-        int redIndex = 0;
-        int blueIndex = A.length - 1;
-        int index = 0;
-
-        while (index <= blueIndex)
-        {
-            if (A[index] == 0)
-            {
-                swap(A, index++ , redIndex++ ); // index cannot be less than redIndex
-            }
-            else if (A[index] == 2)
-            {
-                swap(A, index, blueIndex-- );
-            }
-            else
-            {
-                index++ ;
-            }
-        }
-    }
-
-    private void swap(int[] a, int index, int blueIndex)
-    {
-        if(index != blueIndex)
-        {
-            a[blueIndex] ^= a[index];
-            a[index] ^= a[blueIndex];
-            a[blueIndex] ^= a[index];    
-        }
-    }
-}
-
diff --git a/75.sort-colors.78136210.Accepted.leetcode.java b/75.sort-colors.78136210.Accepted.leetcode.java
deleted file mode 100644
index d4144c62..00000000
--- ./75.sort-colors.78136210.Accepted.leetcode.java
+++ /dev/null
@@ -1,41 +0,0 @@
-public class Solution
-{
-    public void sortColors(int[] A)
-    {
-        if(A == null || A.length == 0)
-        {
-            return;
-        }
-        
-        int redIndex = 0;
-        int blueIndex = A.length - 1;
-        int index = 0;
-
-        while (index <= blueIndex)
-        {
-            if(A[index] == 0)
-            {
-                swap(A, index++, redIndex++);        
-            }
-            else if(A[index] == 2)
-            {
-                swap(A, index, blueIndex--);   
-            }
-            else
-            {
-                index++;
-            }
-        }
-    }
-
-    private void swap(int[] a, int index, int blueIndex)
-    {
-        if(index != blueIndex)
-        {
-            a[blueIndex] ^= a[index];
-            a[index] ^= a[blueIndex];
-            a[blueIndex] ^= a[index];    
-        }
-    }
-}
-
diff --git a/76.minimum-window-substring.102400881.Accepted.leetcode.java b/76.minimum-window-substring.102400881.Accepted.leetcode.java
deleted file mode 100644
index 1e942a8e..00000000
--- ./76.minimum-window-substring.102400881.Accepted.leetcode.java
+++ /dev/null
@@ -1,69 +0,0 @@
-public class Solution
-{
-    public String minWindow(String s, String t)
-    {
-        if (t.length() > s.length())
-        {
-            return "";
-        }
-
-        Map<Character, Integer> map = new HashMap<>();
-
-        for (char c : t.toCharArray())
-        {
-            map.put(c, map.getOrDefault(c, 0) + 1);
-        }
-
-        int counter = map.size();
-        int begin = 0, end = 0;
-        int head = 0;
-        int len = Integer.MAX_VALUE;
-
-        while (end < s.length())
-        {
-            char c = s.charAt(end);
-
-            if (map.containsKey(c))
-            {
-                map.put(c, map.get(c) - 1);
-
-                if (map.get(c) == 0)
-                {
-                    counter--;
-                }
-            }
-
-            end++;
-
-            while (counter == 0)
-            {
-                char tempc = s.charAt(begin);
-
-                if (map.containsKey(tempc))
-                {
-                    map.put(tempc, map.get(tempc) + 1);
-
-                    if (map.get(tempc) > 0)
-                    {
-                        counter++;
-                    }
-                }
-
-                if (end - begin < len)
-                {
-                    len = end - begin;
-                    head = begin;
-                }
-
-                begin++;
-            }
-        }
-
-        if (len == Integer.MAX_VALUE)
-        {
-            return "";
-        }
-
-        return s.substring(head, head + len);
-    }
-}
diff --git a/76.minimum-window-substring.102547164.Accepted.leetcode.java b/76.minimum-window-substring.102547164.Accepted.leetcode.java
deleted file mode 100644
index 5b2f6d54..00000000
--- ./76.minimum-window-substring.102547164.Accepted.leetcode.java
+++ /dev/null
@@ -1,77 +0,0 @@
-public class Solution
-{
-    public String minWindow(String s, String t)
-    {
-        if (t.length() > s.length())
-        {
-            return "";
-        }
-
-        String result = "";
-        HashMap<Character, Integer> target = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (!target.containsKey(c))
-            {
-                target.put(c, 0);
-            }
-
-            target.put(c, target.get(c) + 1);
-        }
-
-        // character counter for s
-        HashMap<Character, Integer> source = new HashMap<Character, Integer>();
-        int start = 0;
-        int minLen = s.length() + 1;
-        int count = 0; // the total of mapped characters
-
-        for (int end = 0; end < s.length(); end++)
-        {
-            char c = s.charAt(end);
-
-            if (target.containsKey(c))
-            {
-                if (source.containsKey(c))
-                {
-                    if (source.get(c) < target.get(c))
-                    {
-                        count++;
-                    }
-
-                    source.put(c, source.get(c) + 1);
-                }
-                else
-                {
-                    source.put(c, 1);
-                    count++;
-                }
-            }
-
-            if (count == t.length())
-            {
-                char sc = s.charAt(start);
-
-                while (!target.containsKey(sc) || source.get(sc) > target.get(sc))
-                {
-                    if (source.containsKey(sc))
-                    {
-                        source.put(sc, source.get(sc) - 1);    
-                    }
-                    
-                    sc = s.charAt(++start);
-                }
-
-                if (end - start + 1 < minLen)
-                {
-                    minLen = end - start + 1;
-                    result = s.substring(start, end + 1);
-                }
-            }
-        }
-
-        return result;
-    }
-}
diff --git a/76.minimum-window-substring.102547351.Accepted.leetcode.java b/76.minimum-window-substring.102547351.Accepted.leetcode.java
deleted file mode 100644
index 5a39f2ce..00000000
--- ./76.minimum-window-substring.102547351.Accepted.leetcode.java
+++ /dev/null
@@ -1,76 +0,0 @@
-public class Solution
-{
-    public String minWindow(String s, String t)
-    {
-        if (t.length() > s.length())
-        {
-            return "";
-        }
-
-        String result = "";
-        HashMap<Character, Integer> target = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (!target.containsKey(c))
-            {
-                target.put(c, 0);
-            }
-
-            target.put(c, target.get(c) + 1);
-        }
-
-        HashMap<Character, Integer> source = new HashMap<Character, Integer>();
-        int start = 0;
-        int minLen = s.length() + 1;
-        int count = 0;
-
-        for (int end = 0; end < s.length(); end++)
-        {
-            char c = s.charAt(end);
-
-            if (target.containsKey(c))
-            {
-                if (source.containsKey(c))
-                {
-                    if (source.get(c) < target.get(c))
-                    {
-                        count++;
-                    }
-
-                    source.put(c, source.get(c) + 1);
-                }
-                else
-                {
-                    source.put(c, 1);
-                    count++;
-                }
-            }
-
-            if (count == t.length())
-            {
-                char sc = s.charAt(start);
-
-                while (!target.containsKey(sc) || source.get(sc) > target.get(sc))
-                {
-                    if (source.containsKey(sc))
-                    {
-                        source.put(sc, source.get(sc) - 1);    
-                    }
-                    
-                    sc = s.charAt(++start);
-                }
-
-                if (end - start + 1 < minLen)
-                {
-                    minLen = end - start + 1;
-                    result = s.substring(start, end + 1);
-                }
-            }
-        }
-
-        return result;
-    }
-}
diff --git a/76.minimum-window-substring.102548546.Runtime-Error.leetcode.java b/76.minimum-window-substring.102548546.Runtime-Error.leetcode.java
deleted file mode 100644
index a5848083..00000000
--- ./76.minimum-window-substring.102548546.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,72 +0,0 @@
-public class Solution
-{
-    public String minWindow(String s, String t)
-    {
-        if (t.length() > s.length())
-        {
-            return "";
-        }
-
-        String result = "";
-        HashMap<Character, Integer> target = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (!target.containsKey(c))
-            {
-                target.put(c, 0);
-            }
-
-            target.put(c, target.get(c) + 1);
-        }
-
-        HashMap<Character, Integer> source = new HashMap<Character, Integer>();
-        int start = 0;
-        int minLen = s.length() + 1;
-        int count = 0;
-
-        for (int end = 0; end < s.length(); end++)
-        {
-            char c = s.charAt(end);
-
-            if (target.containsKey(c))
-            {
-                if (source.containsKey(c))
-                {
-                    if (source.get(c) < target.get(c))
-                    {
-                        count++;
-                    }
-
-                    source.put(c, source.get(c) + 1);
-                }
-                else
-                {
-                    source.put(c, 1);
-                    count++;
-                }
-            }
-
-            if (count == t.length())
-            {
-                char sc = s.charAt(start);
-                
-                while (!target.containsKey(sc) || source.get(sc) > target.get(sc))
-                {
-                    source.put(sc, source.get(sc) - 1);
-                    sc = s.charAt(++start);
-                }
-
-                if (end - start + 1 < minLen)
-                {
-                    minLen = end - start + 1;
-                    result = s.substring(start, end + 1);
-                }
-            }
-        }
-
-        return result;
-    }
-}
diff --git a/76.minimum-window-substring.102548915.Accepted.leetcode.java b/76.minimum-window-substring.102548915.Accepted.leetcode.java
deleted file mode 100644
index 8049a19c..00000000
--- ./76.minimum-window-substring.102548915.Accepted.leetcode.java
+++ /dev/null
@@ -1,68 +0,0 @@
-public class Solution
-{
-    public String minWindow(String s, String t)
-    {
-        if (t.length() > s.length())
-        {
-            return "";
-        }
-
-        String result = "";
-        HashMap<Character, Integer> target = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (!target.containsKey(c))
-            {
-                target.put(c, 0);
-            }
-
-            target.put(c, target.get(c) + 1);
-        }
-
-        HashMap<Character, Integer> source = new HashMap<Character, Integer>();
-        int start = 0;
-        int minLen = s.length() + 1;
-        int count = 0;
-
-        for (int end = 0; end < s.length(); end++)
-        {
-            char c = s.charAt(end);
-            
-            if (source.containsKey(c))
-            {
-                source.put(c, source.get(c) + 1);
-            }
-            else
-            {
-                source.put(c, 1);
-            }
-
-            if (target.containsKey(c) && source.get(c) <= target.get(c))
-            {
-                count++;
-            }
-
-            if (count == t.length())
-            {
-                char sc = s.charAt(start);
-                
-                while (!target.containsKey(sc) || source.get(sc) > target.get(sc))
-                {
-                    source.put(sc, source.get(sc) - 1);
-                    sc = s.charAt(++start);
-                }
-
-                if (end - start + 1 < minLen)
-                {
-                    minLen = end - start + 1;
-                    result = s.substring(start, end + 1);
-                }
-            }
-        }
-
-        return result;
-    }
-}
diff --git a/76.minimum-window-substring.102548974.Wrong-Answer.leetcode.java b/76.minimum-window-substring.102548974.Wrong-Answer.leetcode.java
deleted file mode 100644
index b740ab45..00000000
--- ./76.minimum-window-substring.102548974.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,66 +0,0 @@
-public class Solution
-{
-    public String minWindow(String s, String t)
-    {
-        if (t.length() > s.length())
-        {
-            return "";
-        }
-
-        String result = "";
-        HashMap<Character, Integer> target = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (!target.containsKey(c))
-            {
-                target.put(c, 0);
-            }
-
-            target.put(c, target.get(c) + 1);
-        }
-
-        HashMap<Character, Integer> source = new HashMap<Character, Integer>();
-        int start = 0;
-        int minLen = s.length() + 1;
-        int count = 0;
-
-        for (int end = 0; end < s.length(); end++)
-        {
-            char c = s.charAt(end);
-            
-            if (!source.containsKey(c))
-            {
-                source.put(c, 1);
-            }
-            
-            source.put(c, source.get(c) + 1);
-
-            if (target.containsKey(c) && source.get(c) <= target.get(c))
-            {
-                count++;
-            }
-
-            if (count == t.length())
-            {
-                char sc = s.charAt(start);
-                
-                while (!target.containsKey(sc) || source.get(sc) > target.get(sc))
-                {
-                    source.put(sc, source.get(sc) - 1);
-                    sc = s.charAt(++start);
-                }
-
-                if (end - start + 1 < minLen)
-                {
-                    minLen = end - start + 1;
-                    result = s.substring(start, end + 1);
-                }
-            }
-        }
-
-        return result;
-    }
-}
diff --git a/76.minimum-window-substring.102548998.Accepted.leetcode.java b/76.minimum-window-substring.102548998.Accepted.leetcode.java
deleted file mode 100644
index 1ccb840d..00000000
--- ./76.minimum-window-substring.102548998.Accepted.leetcode.java
+++ /dev/null
@@ -1,66 +0,0 @@
-public class Solution
-{
-    public String minWindow(String s, String t)
-    {
-        if (t.length() > s.length())
-        {
-            return "";
-        }
-
-        String result = "";
-        HashMap<Character, Integer> target = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (!target.containsKey(c))
-            {
-                target.put(c, 0);
-            }
-
-            target.put(c, target.get(c) + 1);
-        }
-
-        HashMap<Character, Integer> source = new HashMap<Character, Integer>();
-        int start = 0;
-        int minLen = s.length() + 1;
-        int count = 0;
-
-        for (int end = 0; end < s.length(); end++)
-        {
-            char c = s.charAt(end);
-            
-            if (!source.containsKey(c))
-            {
-                source.put(c, 0);
-            }
-            
-            source.put(c, source.get(c) + 1);
-
-            if (target.containsKey(c) && source.get(c) <= target.get(c))
-            {
-                count++;
-            }
-
-            if (count == t.length())
-            {
-                char sc = s.charAt(start);
-                
-                while (!target.containsKey(sc) || source.get(sc) > target.get(sc))
-                {
-                    source.put(sc, source.get(sc) - 1);
-                    sc = s.charAt(++start);
-                }
-
-                if (end - start + 1 < minLen)
-                {
-                    minLen = end - start + 1;
-                    result = s.substring(start, end + 1);
-                }
-            }
-        }
-
-        return result;
-    }
-}
diff --git a/76.minimum-window-substring.95611035.Time-Limit-Exceeded.leetcode.java b/76.minimum-window-substring.95611035.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 3585bf67..00000000
--- ./76.minimum-window-substring.95611035.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,81 +0,0 @@
-public class Solution
-{
-    public String minWindow(String s, String t)
-    {
-        if (t.length() > s.length())
-        {
-            return "";
-        }
-
-        String result = "";
-        HashMap<Character, Integer> target = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (!target.containsKey(c))
-            {
-                target.put(c, 0);
-            }
-
-            target.put(c, target.get(c) + 1);
-        }
-
-        // character counter for s
-        HashMap<Character, Integer> source = new HashMap<Character, Integer>();
-        int start = 0;
-        int minLen = s.length() + 1;
-        int count = 0; // the total of mapped characters
-
-        for (int end = 0; end < s.length(); end++)
-        {
-            char c = s.charAt(end);
-
-            if (target.containsKey(c))
-            {
-                if (source.containsKey(c))
-                {
-                    if (source.get(c) < target.get(c))
-                    {
-                        count++;
-                    }
-
-                    source.put(c, source.get(c) + 1);
-                }
-                else
-                {
-                    source.put(c, 1);
-                    count++;
-                }
-            }
-
-            if (count == t.length())
-            {
-                char sc = s.charAt(start);
-                System.out.println("sc --> " + sc);
-                System.out.println("source.get(sc) --> " + source.get(sc));
-                System.out.println("target.get(sc) --> " + target.get(sc));
-
-                while (!source.containsKey(sc) || source.get(sc) > target.get(sc))
-                {
-                    if (source.containsKey(sc))
-                    {
-                        source.put(sc, source.get(sc) - 1);    
-                    }
-                    
-                    sc = s.charAt(++start);
-                    System.out.println("sc --> " + sc);
-                }
-
-                if (end - start + 1 < minLen)
-                {
-                    minLen = end - start + 1;
-                    result = s.substring(start, end + 1);
-                }
-            }
-        }
-
-        return result;
-    }
-}
diff --git a/76.minimum-window-substring.95611066.Time-Limit-Exceeded.leetcode.java b/76.minimum-window-substring.95611066.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index efcf42d9..00000000
--- ./76.minimum-window-substring.95611066.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,80 +0,0 @@
-public class Solution
-{
-    public String minWindow(String s, String t)
-    {
-        if (t.length() > s.length())
-        {
-            return "";
-        }
-
-        String result = "";
-        HashMap<Character, Integer> target = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (!target.containsKey(c))
-            {
-                target.put(c, 0);
-            }
-
-            target.put(c, target.get(c) + 1);
-        }
-
-        // character counter for s
-        HashMap<Character, Integer> source = new HashMap<Character, Integer>();
-        int start = 0;
-        int minLen = s.length() + 1;
-        int count = 0; // the total of mapped characters
-
-        for (int end = 0; end < s.length(); end++)
-        {
-            char c = s.charAt(end);
-
-            if (target.containsKey(c))
-            {
-                if (source.containsKey(c))
-                {
-                    if (source.get(c) < target.get(c))
-                    {
-                        count++;
-                    }
-
-                    source.put(c, source.get(c) + 1);
-                }
-                else
-                {
-                    source.put(c, 1);
-                    count++;
-                }
-            }
-
-            if (count == t.length())
-            {
-                char sc = s.charAt(start);
-                System.out.println("sc --> " + sc);
-                System.out.println("source.get(sc) --> " + source.get(sc));
-                System.out.println("target.get(sc) --> " + target.get(sc));
-
-                while (!source.containsKey(sc) || source.get(sc) > target.get(sc))
-                {
-                    if (source.containsKey(sc))
-                    {
-                        source.put(sc, source.get(sc) - 1);    
-                    }
-                    
-                    sc = s.charAt(++start);
-                }
-
-                if (end - start + 1 < minLen)
-                {
-                    minLen = end - start + 1;
-                    result = s.substring(start, end + 1);
-                }
-            }
-        }
-
-        return result;
-    }
-}
diff --git a/76.minimum-window-substring.95611122.Accepted.leetcode.java b/76.minimum-window-substring.95611122.Accepted.leetcode.java
deleted file mode 100644
index 9c8e5748..00000000
--- ./76.minimum-window-substring.95611122.Accepted.leetcode.java
+++ /dev/null
@@ -1,77 +0,0 @@
-public class Solution
-{
-    public String minWindow(String s, String t)
-    {
-        if (t.length() > s.length())
-        {
-            return "";
-        }
-
-        String result = "";
-        HashMap<Character, Integer> target = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (!target.containsKey(c))
-            {
-                target.put(c, 0);
-            }
-
-            target.put(c, target.get(c) + 1);
-        }
-
-        // character counter for s
-        HashMap<Character, Integer> source = new HashMap<Character, Integer>();
-        int start = 0;
-        int minLen = s.length() + 1;
-        int count = 0; // the total of mapped characters
-
-        for (int end = 0; end < s.length(); end++)
-        {
-            char c = s.charAt(end);
-
-            if (target.containsKey(c))
-            {
-                if (source.containsKey(c))
-                {
-                    if (source.get(c) < target.get(c))
-                    {
-                        count++;
-                    }
-
-                    source.put(c, source.get(c) + 1);
-                }
-                else
-                {
-                    source.put(c, 1);
-                    count++;
-                }
-            }
-
-            if (count == t.length())
-            {
-                char sc = s.charAt(start);
-
-                while (!source.containsKey(sc) || source.get(sc) > target.get(sc))
-                {
-                    if (source.containsKey(sc))
-                    {
-                        source.put(sc, source.get(sc) - 1);    
-                    }
-                    
-                    sc = s.charAt(++start);
-                }
-
-                if (end - start + 1 < minLen)
-                {
-                    minLen = end - start + 1;
-                    result = s.substring(start, end + 1);
-                }
-            }
-        }
-
-        return result;
-    }
-}
diff --git a/76.minimum-window-substring.95611623.Wrong-Answer.leetcode.java b/76.minimum-window-substring.95611623.Wrong-Answer.leetcode.java
deleted file mode 100644
index d6fb17a0..00000000
--- ./76.minimum-window-substring.95611623.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,78 +0,0 @@
-public class Solution
-{
-    public String minWindow(String s, String t)
-    {
-        if (t.length() > s.length())
-        {
-            return "";
-        }
-
-        String result = "";
-        HashMap<Character, Integer> target = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (!target.containsKey(c))
-            {
-                target.put(c, 0);
-            }
-
-            target.put(c, target.get(c) + 1);
-        }
-
-        // character counter for s
-        HashMap<Character, Integer> source = new HashMap<Character, Integer>();
-        int start = 0;
-        int minLen = s.length() + 1;
-        int count = 0; // the total of mapped characters
-
-        for (int end = 0; end < s.length(); end++)
-        {
-            char c = s.charAt(end);
-
-            if (target.containsKey(c))
-            {
-                if (source.containsKey(c))
-                {
-                    if (source.get(c) < target.get(c))
-                    {
-                        count++;
-                    }
-
-                    source.put(c, source.get(c) + 1);
-                }
-                else
-                {
-                    source.put(c, 1);
-                    count++;
-                }
-            }
-
-            if (count == t.length())
-            {
-                char sc = s.charAt(start);
-
-                while (!source.containsKey(sc) || source.get(sc) > target.get(sc))
-                {
-                    if (source.containsKey(sc))
-                    {
-                        source.put(sc, source.get(sc) - 1);    
-                    }
-                    
-                    sc = s.charAt(++start);
-                }
-
-                if (end - start + 1 < minLen)
-                {
-                    minLen = end - start + 1;
-                    result = s.substring(start + 1, end + 1);
-                }
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/76.minimum-window-substring.95650440.Wrong-Answer.leetcode.java b/76.minimum-window-substring.95650440.Wrong-Answer.leetcode.java
deleted file mode 100644
index 4df0e496..00000000
--- ./76.minimum-window-substring.95650440.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,80 +0,0 @@
-public class Solution
-{
-    public String minWindow(String s, String t)
-    {
-        if (t.length() > s.length())
-        {
-            return "";
-        }
-
-        String result = "";
-        HashMap<Character, Integer> target = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (!target.containsKey(c))
-            {
-                target.put(c, 0);
-            }
-
-            target.put(c, target.get(c) + 1);
-        }
-
-        // character counter for s
-        HashMap<Character, Integer> source = new HashMap<Character, Integer>();
-        int start = 0;
-        int minLen = s.length() + 1;
-        int count = 0; // the total of mapped characters
-
-        for (int end = 0; end < s.length(); end++)
-        {
-            char c = s.charAt(end);
-
-            if (target.containsKey(c))
-            {
-                if (source.containsKey(c))
-                {
-                    if (source.get(c) < target.get(c))
-                    {
-                        count++;
-                    }
-
-                    source.put(c, source.get(c) + 1);
-                }
-                else
-                {
-                    source.put(c, 1);
-                    count++;
-                }
-            }
-
-            System.out.println("count --> " + count);
-            
-            if (count == t.length())
-            {
-                char sc = s.charAt(start);
-
-                while (!source.containsKey(sc) || source.get(sc) > target.get(sc))
-                {
-                    if (source.containsKey(sc))
-                    {
-                        source.put(sc, source.get(sc) - 1);    
-                    }
-                    
-                    sc = s.charAt(++start);
-                }
-
-                if (end - start + 1 < minLen)
-                {
-                    minLen = end - start + 1;
-                    result = s.substring(start + 1, end + 1);
-                }
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/76.minimum-window-substring.95650819.Wrong-Answer.leetcode.java b/76.minimum-window-substring.95650819.Wrong-Answer.leetcode.java
deleted file mode 100644
index 43dce2a5..00000000
--- ./76.minimum-window-substring.95650819.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,83 +0,0 @@
-public class Solution
-{
-    public String minWindow(String s, String t)
-    {
-        if (t.length() > s.length())
-        {
-            return "";
-        }
-
-        String result = "";
-        HashMap<Character, Integer> target = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (!target.containsKey(c))
-            {
-                target.put(c, 0);
-            }
-
-            target.put(c, target.get(c) + 1);
-        }
-
-        // character counter for s
-        HashMap<Character, Integer> source = new HashMap<Character, Integer>();
-        int start = 0;
-        int minLen = s.length() + 1;
-        int count = 0; // the total of mapped characters
-
-        for (int end = 0; end < s.length(); end++)
-        {
-            char c = s.charAt(end);
-
-            if (target.containsKey(c))
-            {
-                if (source.containsKey(c))
-                {
-                    if (source.get(c) < target.get(c))
-                    {
-                        count++;
-                    }
-
-                    source.put(c, source.get(c) + 1);
-                }
-                else
-                {
-                    source.put(c, 1);
-                    count++;
-                }
-            }
-
-            System.out.println("count --> " + count);
-            
-            if (count == t.length())
-            {
-                char sc = s.charAt(start);
-
-                while (!source.containsKey(sc) || source.get(sc) > target.get(sc))
-                {
-                    if (source.containsKey(sc))
-                    {
-                        source.put(sc, source.get(sc) - 1);    
-                    }
-                    
-                    sc = s.charAt(++start);
-                }
-
-                System.out.println("s.charAt(start) --> " + s.charAt(start));
-                System.out.println("s.charAt(end) --> " + s.charAt(end));
-                
-                if (end - start + 1 < minLen)
-                {
-                    minLen = end - start + 1;
-                    result = s.substring(start + 1, end + 1);
-                }
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/76.minimum-window-substring.95650964.Time-Limit-Exceeded.leetcode.java b/76.minimum-window-substring.95650964.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 1c2f8770..00000000
--- ./76.minimum-window-substring.95650964.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,83 +0,0 @@
-public class Solution
-{
-    public String minWindow(String s, String t)
-    {
-        if (t.length() > s.length())
-        {
-            return "";
-        }
-
-        String result = "";
-        HashMap<Character, Integer> target = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (!target.containsKey(c))
-            {
-                target.put(c, 0);
-            }
-
-            target.put(c, target.get(c) + 1);
-        }
-
-        // character counter for s
-        HashMap<Character, Integer> source = new HashMap<Character, Integer>();
-        int start = 0;
-        int minLen = s.length() + 1;
-        int count = 0; // the total of mapped characters
-
-        for (int end = 0; end < s.length(); end++)
-        {
-            char c = s.charAt(end);
-
-            if (target.containsKey(c))
-            {
-                if (source.containsKey(c))
-                {
-                    if (source.get(c) < target.get(c))
-                    {
-                        count++;
-                    }
-
-                    source.put(c, source.get(c) + 1);
-                }
-                else
-                {
-                    source.put(c, 1);
-                    count++;
-                }
-            }
-
-            System.out.println("count --> " + count);
-            
-            if (count == t.length())
-            {
-                char sc = s.charAt(start);
-
-                while (!source.containsKey(sc) || source.get(sc) > target.get(sc))
-                {
-                    if (source.containsKey(sc))
-                    {
-                        source.put(sc, source.get(sc) - 1);    
-                    }
-                    
-                    sc = s.charAt(++start);
-                }
-
-                System.out.println("s.charAt(start) --> " + s.charAt(start));
-                System.out.println("s.charAt(end) --> " + s.charAt(end));
-                
-                if (end - start + 1 < minLen)
-                {
-                    minLen = end - start + 1;
-                    result = s.substring(start, end + 1);
-                }
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/76.minimum-window-substring.95651043.Accepted.leetcode.java b/76.minimum-window-substring.95651043.Accepted.leetcode.java
deleted file mode 100644
index 95e2b7cb..00000000
--- ./76.minimum-window-substring.95651043.Accepted.leetcode.java
+++ /dev/null
@@ -1,78 +0,0 @@
-public class Solution
-{
-    public String minWindow(String s, String t)
-    {
-        if (t.length() > s.length())
-        {
-            return "";
-        }
-
-        String result = "";
-        HashMap<Character, Integer> target = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (!target.containsKey(c))
-            {
-                target.put(c, 0);
-            }
-
-            target.put(c, target.get(c) + 1);
-        }
-
-        // character counter for s
-        HashMap<Character, Integer> source = new HashMap<Character, Integer>();
-        int start = 0;
-        int minLen = s.length() + 1;
-        int count = 0; // the total of mapped characters
-
-        for (int end = 0; end < s.length(); end++)
-        {
-            char c = s.charAt(end);
-
-            if (target.containsKey(c))
-            {
-                if (source.containsKey(c))
-                {
-                    if (source.get(c) < target.get(c))
-                    {
-                        count++;
-                    }
-
-                    source.put(c, source.get(c) + 1);
-                }
-                else
-                {
-                    source.put(c, 1);
-                    count++;
-                }
-            }
-
-            if (count == t.length())
-            {
-                char sc = s.charAt(start);
-
-                while (!source.containsKey(sc) || source.get(sc) > target.get(sc))
-                {
-                    if (source.containsKey(sc))
-                    {
-                        source.put(sc, source.get(sc) - 1);    
-                    }
-                    
-                    sc = s.charAt(++start);
-                }
-
-                if (end - start + 1 < minLen)
-                {
-                    minLen = end - start + 1;
-                    result = s.substring(start, end + 1);
-                }
-            }
-        }
-
-        return result;
-    }
-}
-
diff --git a/76.minimum-window-substring.95651246.Accepted.leetcode.java b/76.minimum-window-substring.95651246.Accepted.leetcode.java
deleted file mode 100644
index 07286f05..00000000
--- ./76.minimum-window-substring.95651246.Accepted.leetcode.java
+++ /dev/null
@@ -1,77 +0,0 @@
-public class Solution
-{
-    public String minWindow(String s, String t)
-    {
-        if (t.length() > s.length())
-        {
-            return "";
-        }
-
-        String result = "";
-        HashMap<Character, Integer> target = new HashMap<Character, Integer>();
-
-        for (int i = 0; i < t.length(); i++)
-        {
-            char c = t.charAt(i);
-
-            if (!target.containsKey(c))
-            {
-                target.put(c, 0);
-            }
-
-            target.put(c, target.get(c) + 1);
-        }
-
-        // character counter for s
-        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
-        int start = 0;
-        int minLen = s.length() + 1;
-        int count = 0; // the total of mapped characters
-
-        for (int end = 0; end < s.length(); end++)
-        {
-            char c = s.charAt(end);
-
-            if (target.containsKey(c))
-            {
-                if (map.containsKey(c))
-                {
-                    if (map.get(c) < target.get(c))
-                    {
-                        count++;
-                    }
-
-                    map.put(c, map.get(c) + 1);
-                }
-                else
-                {
-                    map.put(c, 1);
-                    count++;
-                }
-            }
-
-            if (count == t.length())
-            {
-                char sc = s.charAt(start);
-
-                while (!map.containsKey(sc) || map.get(sc) > target.get(sc))
-                {
-                    if (map.containsKey(sc))
-                    {
-                        map.put(sc, map.get(sc) - 1);    
-                    }
-                    
-                    sc = s.charAt(++start);
-                }
-
-                if (end - start + 1 < minLen)
-                {
-                    minLen = end - start + 1;
-                    result = s.substring(start, end + 1);
-                }
-            }
-        }
-
-        return result;
-    }
-}
diff --git a/77.combinations.154938340.Accepted.leetcode.java b/77.combinations.154938340.Accepted.leetcode.java
deleted file mode 100644
index 01fe4bab..00000000
--- ./77.combinations.154938340.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combine(int n, int k)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        List<Integer> current = new ArrayList<Integer>();
-        helper(1, n, k, result, current);
-        return result;
-    }
-    public void helper(int left, int right, int k, List<List<Integer>> result, List<Integer> current)
-    {
-        if (k == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        if (left > right)
-        {
-            return;
-        }
-
-        for (int index = left; index <= right; index++)
-        {
-            current.add(index);
-            helper(index + 1, right, k - 1, result, current);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/77.combinations.154952702.Accepted.leetcode.java b/77.combinations.154952702.Accepted.leetcode.java
deleted file mode 100644
index ab73177d..00000000
--- ./77.combinations.154952702.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combine(int n, int k)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        List<Integer> current = new ArrayList<Integer>();
-        helper(1, n, k, result, current);
-        return result;
-    }
-    public void helper(int left, int right, int k, List<List<Integer>> result, List<Integer> current)
-    {
-        if (k == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int index = left; index <= right; index++)
-        {
-            current.add(index);
-            helper(index + 1, right, k - 1, result, current);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/77.combinations.154955759.Accepted.leetcode.java b/77.combinations.154955759.Accepted.leetcode.java
deleted file mode 100644
index 65a1c478..00000000
--- ./77.combinations.154955759.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combine(int n, int k)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        List<Integer> current = new ArrayList<Integer>();
-        helper(1, n, k, result, current);
-        return result;
-    }
-    public void helper(int left, int right, int k, List<List<Integer>> result, List<Integer> current)
-    {
-        if (k == 0)
-        {
-            result.add(new ArrayList<Integer>(current));
-            return;
-        }
-
-        for (int index = left; index <= right - k + 1; index++)
-        {
-            current.add(index);
-            helper(index + 1, right, k - 1, result, current);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/77.combinations.97983004.Wrong-Answer.leetcode.java b/77.combinations.97983004.Wrong-Answer.leetcode.java
deleted file mode 100644
index 8baa673a..00000000
--- ./77.combinations.97983004.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combine(int n, int k)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        List<Integer> cur = new ArrayList<Integer>();
-        helper(1, n, k, result, cur);
-        return result;
-    }
-    public void helper(int l, int r, int k, List<List<Integer>> res, List<Integer> cur)
-    {
-        if (k == 0)
-        {
-            res.add(cur);
-            return;
-        }
-
-        for (int i = l; i <= r; i++)
-        {
-            cur.add(i);
-            helper(i + 1, r, k - 1, res, cur);
-            cur.remove(cur.size() - 1);
-        }
-    }
-}
diff --git a/77.combinations.97983057.Time-Limit-Exceeded.leetcode.java b/77.combinations.97983057.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index 0aa3ebd3..00000000
--- ./77.combinations.97983057.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combine(int n, int k)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        List<Integer> cur = new ArrayList<Integer>();
-        helper(1, n, k, result, cur);
-        return result;
-    }
-    public void helper(int l, int r, int k, List<List<Integer>> res, List<Integer> cur)
-    {
-        if (k == 0)
-        {
-            res.add(new ArrayList<Integer>(cur));
-            return;
-        }
-
-        for (int i = l; i <= r; i++)
-        {
-            cur.add(i);
-            helper(i + 1, r, k - 1, res, cur);
-            cur.remove(cur.size() - 1);
-        }
-    }
-}
diff --git a/77.combinations.97983488.Wrong-Answer.leetcode.java b/77.combinations.97983488.Wrong-Answer.leetcode.java
deleted file mode 100644
index 64cab5a6..00000000
--- ./77.combinations.97983488.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combine(int n, int k)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        List<Integer> cur = new ArrayList<Integer>();
-        helper(1, n, k, result, cur);
-        return result;
-    }
-    public void helper(int l, int r, int k, List<List<Integer>> res, List<Integer> cur)
-    {
-        if (k == 0)
-        {
-            res.add(new ArrayList<Integer>(cur));
-            return;
-        }
-
-        for (int i = l; i < r - k; i++)
-        {
-            cur.add(i);
-            helper(i + 1, r, k - 1, res, cur);
-            cur.remove(cur.size() - 1);
-        }
-    }
-}
diff --git a/77.combinations.97983539.Accepted.leetcode.java b/77.combinations.97983539.Accepted.leetcode.java
deleted file mode 100644
index d17b8aac..00000000
--- ./77.combinations.97983539.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combine(int n, int k)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        List<Integer> cur = new ArrayList<Integer>();
-        helper(1, n, k, result, cur);
-        return result;
-    }
-    public void helper(int l, int r, int k, List<List<Integer>> res, List<Integer> cur)
-    {
-        if (k == 0)
-        {
-            res.add(new ArrayList<Integer>(cur));
-            return;
-        }
-
-        for (int i = l; i <= r - k + 1; i++)
-        {
-            cur.add(i);
-            helper(i + 1, r, k - 1, res, cur);
-            cur.remove(cur.size() - 1);
-        }
-    }
-}
diff --git a/77.combinations.97984383.Wrong-Answer.leetcode.java b/77.combinations.97984383.Wrong-Answer.leetcode.java
deleted file mode 100644
index 6954ecfd..00000000
--- ./77.combinations.97984383.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combine(int n, int k)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        List<Integer> cur = new ArrayList<Integer>();
-        helper(1, n, k, result, cur);
-        return result;
-    }
-    public void helper(int l, int r, int k, List<List<Integer>> res, List<Integer> cur)
-    {
-        if (k == 0)
-        {
-            res.add(new ArrayList<Integer>(cur));
-            return;
-        }
-
-        for (int i = l; i <= r - k + 1; i++)
-        {
-            cur.add(l);
-            helper(l + 1, r, k - 1, res, cur);
-            cur.remove(cur.size() - 1);    
-        }
-    }
-}
diff --git a/77.combinations.97984668.Wrong-Answer.leetcode.java b/77.combinations.97984668.Wrong-Answer.leetcode.java
deleted file mode 100644
index 4757600a..00000000
--- ./77.combinations.97984668.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combine(int n, int k)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        List<Integer> cur = new ArrayList<Integer>();
-        helper(1, n, k, result, cur);
-        return result;
-    }
-    public void helper(int l, int r, int k, List<List<Integer>> res, List<Integer> cur)
-    {
-        if (k == 0)
-        {
-            res.add(new ArrayList<Integer>(cur));
-            return;
-        }
-
-        for (int i = l; i <= r - k + 1; i++)
-        {
-            cur.add(l);
-            helper(i + 1, r, k - 1, res, cur);
-            cur.remove(cur.size() - 1);    
-        }
-    }
-}
diff --git a/77.combinations.97984739.Accepted.leetcode.java b/77.combinations.97984739.Accepted.leetcode.java
deleted file mode 100644
index 830b2371..00000000
--- ./77.combinations.97984739.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combine(int n, int k)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        List<Integer> cur = new ArrayList<Integer>();
-        helper(1, n, k, result, cur);
-        return result;
-    }
-    public void helper(int l, int r, int k, List<List<Integer>> res, List<Integer> cur)
-    {
-        if (k == 0)
-        {
-            res.add(new ArrayList<Integer>(cur));
-            return;
-        }
-
-        for (int i = l; i <= r - k + 1; i++)
-        {
-            cur.add(i);
-            helper(i + 1, r, k - 1, res, cur);
-            cur.remove(cur.size() - 1);    
-        }
-    }
-}
diff --git a/77.combinations.97985147.Runtime-Error.leetcode.java b/77.combinations.97985147.Runtime-Error.leetcode.java
deleted file mode 100644
index d0187c31..00000000
--- ./77.combinations.97985147.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combine(int n, int k)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        List<Integer> cur = new ArrayList<Integer>();
-        helper(1, n, k, result, cur);
-        return result;
-    }
-    public void helper(int l, int r, int k, List<List<Integer>> res, List<Integer> cur)
-    {
-        if (k == 0)
-        {
-            res.add(new ArrayList<Integer>(cur));
-        }
-        
-        for (int i = l; i <= r - k + 1; i++)
-        {
-            cur.add(i);
-            helper(i + 1, r, k - 1, res, cur);
-            cur.remove(cur.size() - 1);    
-        }
-        
-    }
-}
diff --git a/77.combinations.97985449.Runtime-Error.leetcode.java b/77.combinations.97985449.Runtime-Error.leetcode.java
deleted file mode 100644
index b9a336ee..00000000
--- ./77.combinations.97985449.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combine(int n, int k)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        List<Integer> cur = new ArrayList<Integer>();
-        helper(1, n, k, result, cur);
-        return result;
-    }
-    public void helper(int l, int r, int k, List<List<Integer>> res, List<Integer> cur)
-    {
-        if (k == 0)
-        {
-            res.add(new ArrayList<Integer>(cur));
-        }
-        
-        for (int i = l; i <= r - k + 1; i++)
-        {
-            cur.add(i);
-            helper(i + 1, r, k - 1, res, cur);
-            cur.remove(cur.size() - 1);    
-        }
-    }
-}
diff --git a/77.combinations.97985643.Accepted.leetcode.java b/77.combinations.97985643.Accepted.leetcode.java
deleted file mode 100644
index fb3d557b..00000000
--- ./77.combinations.97985643.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> combine(int n, int k)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        List<Integer> cur = new ArrayList<Integer>();
-        helper(1, n, k, result, cur);
-        return result;
-    }
-    public void helper(int l, int r, int k, List<List<Integer>> res, List<Integer> cur)
-    {
-        if (k == 0)
-        {
-            res.add(new ArrayList<Integer>(cur));
-            return;
-        }
-        
-        for (int i = l; i <= r - k + 1; i++)
-        {
-            cur.add(i);
-            helper(i + 1, r, k - 1, res, cur);
-            cur.remove(cur.size() - 1);    
-        }
-    }
-}
diff --git a/78.subsets.102867762.Runtime-Error.leetcode.java b/78.subsets.102867762.Runtime-Error.leetcode.java
deleted file mode 100644
index 1224f42c..00000000
--- ./78.subsets.102867762.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsets(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        dfs(S, 0, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    public void dfs(int[] S, int start, List<Integer> current, List<List<Integer>> result)
-    {
-        result.add(new ArrayList<Integer>(current));
-        
-        for (int i = start; i < S.length; i++)
-        {
-            current.add(S[i]);
-            dfs(S, i, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
diff --git a/78.subsets.102867777.Wrong-Answer.leetcode.java b/78.subsets.102867777.Wrong-Answer.leetcode.java
deleted file mode 100644
index d448aaf9..00000000
--- ./78.subsets.102867777.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsets(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        return result;
-    }
-
-    public void dfs(int[] S, int start, List<Integer> current, List<List<Integer>> result)
-    {
-        result.add(new ArrayList<Integer>(current));
-        
-        for (int i = start; i < S.length; i++)
-        {
-            current.add(S[i]);
-            dfs(S, i + 1, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
diff --git a/78.subsets.155131268.Accepted.leetcode.java b/78.subsets.155131268.Accepted.leetcode.java
deleted file mode 100644
index d4163f2f..00000000
--- ./78.subsets.155131268.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsets(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (S == null)
-        {
-            return result;
-        }
-
-        dfs(S, 0, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    public void dfs(int[] S, int start, List<Integer> current, List<List<Integer>> result)
-    {
-        result.add(new ArrayList<Integer>(current));
-
-        for (int index = start; index < S.length; index++)
-        {
-            current.add(S[index]);
-            dfs(S, index + 1, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/78.subsets.155132208.Wrong-Answer.leetcode.java b/78.subsets.155132208.Wrong-Answer.leetcode.java
deleted file mode 100644
index 0f915ad4..00000000
--- ./78.subsets.155132208.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsets(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (S == null)
-        {
-            return result;
-        }
-
-        dfs(S, 0, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    public void dfs(int[] S, int start, List<Integer> current, List<List<Integer>> result)
-    {
-        for (int index = start; index < S.length; index++)
-        {
-            result.add(new ArrayList<Integer>(current));
-            current.add(S[index]);
-            dfs(S, index + 1, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/78.subsets.155166079.Wrong-Answer.leetcode.java b/78.subsets.155166079.Wrong-Answer.leetcode.java
deleted file mode 100644
index 6df63c66..00000000
--- ./78.subsets.155166079.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsets(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (S == null)
-        {
-            return result;
-        }
-
-        dfs(S, 0, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    public void dfs(int[] S, int start, List<Integer> current, List<List<Integer>> result)
-    {
-        for (int i = start; i < S.length; i++)
-        {
-            current.add(S[i]);
-            result.add(new ArrayList<Integer>(current));
-            dfs(S, i + 1, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/78.subsets.155166209.Wrong-Answer.leetcode.java b/78.subsets.155166209.Wrong-Answer.leetcode.java
deleted file mode 100644
index 50349acd..00000000
--- ./78.subsets.155166209.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsets(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (S == null)
-        {
-            return result;
-        }
-
-        dfs(S, 0, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    public void dfs(int[] S, int start, List<Integer> current, List<List<Integer>> result)
-    {
-        for (int i = start; i < S.length; i++)
-        {
-            result.add(new ArrayList<Integer>(current));
-            current.add(S[i]);
-            dfs(S, i + 1, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/79.word-search.167155712.Runtime-Error.leetcode.java b/79.word-search.167155712.Runtime-Error.leetcode.java
deleted file mode 100644
index 85f62e12..00000000
--- ./79.word-search.167155712.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution
-{
-    private boolean dfs(char[][] board, boolean[][] visited, int i, int j, String word, int begin)
-    {
-        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j] || board[i][j] != word.charAt(begin))
-        {
-            return false;
-        }
-
-        if (begin == word.length())
-        {
-            return true;
-        }
-
-        visited[i][j] = true;
-        boolean re = dfs(board, visited, i + 1, j, word, begin + 1)
-                     || dfs(board, visited, i - 1, j, word, begin + 1)
-                     || dfs(board, visited, i, j + 1, word, begin + 1)
-                     || dfs(board, visited, i, j - 1, word, begin + 1);
-        visited[i][j] = false;
-        return re;
-    }
-
-    public boolean exist(char[][] board, String word)
-    {
-        boolean[][] visited = new boolean[board.length][board[0].length];
-
-        for (int i = 0; i < board.length; i++)
-        {
-            for (int j = 0; j < board[0].length; j++)
-            {
-                if (dfs(board, visited, i, j, word, 0))
-                {
-                    return true;
-                }
-            }
-        }
-
-        return false;
-    }
-}
-
diff --git a/79.word-search.167155844.Runtime-Error.leetcode.java b/79.word-search.167155844.Runtime-Error.leetcode.java
deleted file mode 100644
index f5398561..00000000
--- ./79.word-search.167155844.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution
-{
-    private boolean dfs(char[][] board, boolean[][] visited, int i, int j, String word, int begin)
-    {
-        if (visited[i][j] || board[i][j] != word.charAt(begin))
-        {
-            return false;
-        }
-
-        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || begin >= word.length())
-        {
-            return false;
-        }
-
-        visited[i][j] = true;
-        boolean re = dfs(board, visited, i + 1, j, word, begin + 1)
-                     || dfs(board, visited, i - 1, j, word, begin + 1)
-                     || dfs(board, visited, i, j + 1, word, begin + 1)
-                     || dfs(board, visited, i, j - 1, word, begin + 1);
-        visited[i][j] = false;
-        return re;
-    }
-
-    public boolean exist(char[][] board, String word)
-    {
-        boolean[][] visited = new boolean[board.length][board[0].length];
-
-        for (int i = 0; i < board.length; i++)
-        {
-            for (int j = 0; j < board[0].length; j++)
-            {
-                if (dfs(board, visited, i, j, word, 0))
-                {
-                    return true;
-                }
-            }
-        }
-
-        return false;
-    }
-}
-
diff --git a/79.word-search.167156734.Accepted.leetcode.java b/79.word-search.167156734.Accepted.leetcode.java
deleted file mode 100644
index a449520e..00000000
--- ./79.word-search.167156734.Accepted.leetcode.java
+++ /dev/null
@@ -1,42 +0,0 @@
-public class Solution
-{
-    private boolean dfs(char[][] board, boolean[][] visited, int i, int j, String word, int begin)
-    {
-        if (begin == word.length())
-        {
-            return true;
-        }
-
-        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j] || board[i][j] != word.charAt(begin))
-        {
-            return false;
-        }
-
-        visited[i][j] = true;
-        boolean re = dfs(board, visited, i + 1, j, word, begin + 1)
-                     || dfs(board, visited, i - 1, j, word, begin + 1)
-                     || dfs(board, visited, i, j + 1, word, begin + 1)
-                     || dfs(board, visited, i, j - 1, word, begin + 1);
-        visited[i][j] = false;
-        return re;
-    }
-
-    public boolean exist(char[][] board, String word)
-    {
-        boolean[][] visited = new boolean[board.length][board[0].length];
-
-        for (int i = 0; i < board.length; i++)
-        {
-            for (int j = 0; j < board[0].length; j++)
-            {
-                if (dfs(board, visited, i, j, word, 0))
-                {
-                    return true;
-                }
-            }
-        }
-
-        return false;
-    }
-}
-
diff --git a/8.string-to-integer-atoi.7820483.Accepted.leetcode.java b/8.string-to-integer-atoi.7820483.Accepted.leetcode.java
deleted file mode 100644
index 7f6f2f1d..00000000
--- ./8.string-to-integer-atoi.7820483.Accepted.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-  public class Solution {
-
-    public int atoi(String str) {
-      int index = 0;
-
-      while (index < str.length()
-             && Character.isWhitespace(str.charAt(index))) {
-        index++;
-      }
-
-      if (index == str.length()) {
-        return 0;
-      }
-
-      boolean negative = false;
-
-      if (str.charAt(index) == '+') {
-        index++;
-      }
-      else if (str.charAt(index) == '-') {
-        index++;
-        negative = true;
-      }
-
-      long ans = 0;
-
-      while (index < str.length() && Character.isDigit(str.charAt(index))) {
-        ans = ans * 10 + str.charAt(index) - '0';
-
-        if (ans > Integer.MAX_VALUE + 1L) {
-          break;
-        }
-
-        index++;
-      }
-
-      if (negative) {
-        ans = -ans;
-
-        if (ans < Integer.MIN_VALUE) {
-          return Integer.MIN_VALUE;
-        }
-      }
-      else {
-        if (ans > Integer.MAX_VALUE) {
-          return Integer.MAX_VALUE;
-        }
-      }
-
-      return (int) ans;
-    }
-  }
-
diff --git a/8.string-to-integer-atoi.8499277.Accepted.leetcode.java b/8.string-to-integer-atoi.8499277.Accepted.leetcode.java
deleted file mode 100644
index 9c7eed9b..00000000
--- ./8.string-to-integer-atoi.8499277.Accepted.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-  public class Solution {
-
-    public int atoi(String str) {
-      int index = 0;
-
-      while (index < str.length()
-             && Character.isWhitespace(str.charAt(index))) {
-        index++;
-      }
-
-      if (index == str.length()) {
-        return 0;
-      }
-
-      boolean negative = false;
-
-      if (str.charAt(index) == '+') {
-        index++;
-      }
-      else if (str.charAt(index) == '-') {
-        index++;
-        negative = true;
-      }
-
-      long ans = 0;
-
-      while (index < str.length() && Character.isDigit(str.charAt(index))) {
-        ans = ans * 10 + str.charAt(index) - '0';
-
-        if (ans > Integer.MAX_VALUE) {
-          break;
-        }
-
-        index++;
-      }
-
-      if (negative) {
-        ans = -ans;
-
-        if (ans < Integer.MIN_VALUE) {
-          return Integer.MIN_VALUE;
-        }
-      }
-      else {
-        if (ans > Integer.MAX_VALUE) {
-          return Integer.MAX_VALUE;
-        }
-      }
-
-      return (int) ans;
-    }
-  }
-
diff --git a/80.remove-duplicates-from-sorted-array-ii.156366847.Wrong-Answer.leetcode.java b/80.remove-duplicates-from-sorted-array-ii.156366847.Wrong-Answer.leetcode.java
deleted file mode 100644
index 075cd894..00000000
--- ./80.remove-duplicates-from-sorted-array-ii.156366847.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-public class Solution
-{
-    public int removeDuplicates(int[] A)
-    {
-        int index = 2;
-
-        for (int nav = 3; nav < A.length; nav++)
-        {
-            if (A[nav] != A[index - 2])
-            {
-                A[index++] = A[nav];
-            }
-        }
-
-        return index;
-    }
-}
-
diff --git a/80.remove-duplicates-from-sorted-array-ii.156449155.Wrong-Answer.leetcode.java b/80.remove-duplicates-from-sorted-array-ii.156449155.Wrong-Answer.leetcode.java
deleted file mode 100644
index 34b804c3..00000000
--- ./80.remove-duplicates-from-sorted-array-ii.156449155.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class Solution
-{
-    public int removeDuplicates(int[] A)
-    {
-        int index = 2;
-
-        for (int nav = 3; nav < A.length; nav++)
-        {
-            if (A[nav] != A[index - 2])
-            {
-                A[index++] = A[nav];
-            }
-        }
-
-        return index;
-    }
-}
-
-
diff --git a/80.remove-duplicates-from-sorted-array-ii.156453971.Accepted.leetcode.java b/80.remove-duplicates-from-sorted-array-ii.156453971.Accepted.leetcode.java
deleted file mode 100644
index f9776928..00000000
--- ./80.remove-duplicates-from-sorted-array-ii.156453971.Accepted.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-public class Solution
-{
-    public int removeDuplicates(int[] A)
-    {
-        int index = 2;
-
-        for (int nav = 2; nav < A.length; nav++)
-        {
-            if (A[nav] != A[index - 2])
-            {
-                A[index++] = A[nav];
-            }
-        }
-
-        return index;
-    }
-}
-
diff --git a/80.remove-duplicates-from-sorted-array-ii.82225127.Accepted.leetcode.java b/80.remove-duplicates-from-sorted-array-ii.82225127.Accepted.leetcode.java
deleted file mode 100644
index 6981f521..00000000
--- ./80.remove-duplicates-from-sorted-array-ii.82225127.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution 
-{
-    public int removeDuplicates(int[] A) 
-    {
-        if (A.length <= 2) 
-        {
-            return A.length;
-        }
-
-        int index = 2;
-
-        for (int i = 2; i < A.length; i++) 
-        {
-            if (A[i] != A[index - 2]) 
-            {
-                A[index++] = A[i];
-            }
-        }
-
-        return index;
-    }
-}
diff --git a/80.remove-duplicates-from-sorted-array-ii.82226232.Accepted.leetcode.java b/80.remove-duplicates-from-sorted-array-ii.82226232.Accepted.leetcode.java
deleted file mode 100644
index 6dc75df7..00000000
--- ./80.remove-duplicates-from-sorted-array-ii.82226232.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution 
-{
-    public int removeDuplicates(int[] A) 
-    {
-        if (A.length <= 2) 
-        {
-            return A.length;
-        }
-
-        int index = 2;
-
-        for (int nav = 2; nav < A.length; nav++) 
-        {
-            if (A[nav] != A[index - 2]) 
-            {
-                A[index++] = A[nav];
-            }
-        }
-
-        return index;
-    }
-}
diff --git a/80.remove-duplicates-from-sorted-array-ii.82226273.Accepted.leetcode.java b/80.remove-duplicates-from-sorted-array-ii.82226273.Accepted.leetcode.java
deleted file mode 100644
index 80b780ee..00000000
--- ./80.remove-duplicates-from-sorted-array-ii.82226273.Accepted.leetcode.java
+++ /dev/null
@@ -1,17 +0,0 @@
-public class Solution 
-{
-    public int removeDuplicates(int[] A) 
-    {
-        int index = 2;
-
-        for (int nav = 2; nav < A.length; nav++) 
-        {
-            if (A[nav] != A[index - 2]) 
-            {
-                A[index++] = A[nav];
-            }
-        }
-
-        return index;
-    }
-}
diff --git a/80.remove-duplicates-from-sorted-array-ii.9020967.Accepted.leetcode.java b/80.remove-duplicates-from-sorted-array-ii.9020967.Accepted.leetcode.java
deleted file mode 100644
index 90b8f88f..00000000
--- ./80.remove-duplicates-from-sorted-array-ii.9020967.Accepted.leetcode.java
+++ /dev/null
@@ -1,15 +0,0 @@
-public class Solution {
-    public int removeDuplicates(int[] A) {
-      int n = A.length;
-      int distinctCount = 0;
-
-      for (int i = 0; i < n; i++)
-        if (distinctCount < 2 || A[i] != A[distinctCount - 1]
-            || A[i] != A[distinctCount - 2]) {
-          A[distinctCount++] = A[i];
-        }
-
-      return distinctCount;
-    }
-  }
-
diff --git a/80.remove-duplicates-from-sorted-array-ii.9021425.Accepted.leetcode.java b/80.remove-duplicates-from-sorted-array-ii.9021425.Accepted.leetcode.java
deleted file mode 100644
index e388375d..00000000
--- ./80.remove-duplicates-from-sorted-array-ii.9021425.Accepted.leetcode.java
+++ /dev/null
@@ -1,14 +0,0 @@
-public class Solution {
-    public int removeDuplicates(int[] A) {
-      int distinctCount = 0;
-
-      for (int i = 0; i < A.length; i++)
-        if (distinctCount < 2 || A[i] != A[distinctCount - 1]
-            || A[i] != A[distinctCount - 2]) {
-          A[distinctCount++] = A[i];
-        }
-
-      return distinctCount;
-    }
-  }
-
diff --git a/80.remove-duplicates-from-sorted-array-ii.9021632.Accepted.leetcode.java b/80.remove-duplicates-from-sorted-array-ii.9021632.Accepted.leetcode.java
deleted file mode 100644
index dee2759b..00000000
--- ./80.remove-duplicates-from-sorted-array-ii.9021632.Accepted.leetcode.java
+++ /dev/null
@@ -1,18 +0,0 @@
-public class Solution {
-    public int removeDuplicates(int[] A) {
-      if (A.length <= 2) {
-        return A.length;
-      }
-
-      int index = 2;
-
-      for (int i = 2; i < A.length; i++) {
-        if (A[i] != A[index - 2]) {
-          A[index++] = A[i];
-        }
-      }
-
-      return index;
-    }
-  }
-
diff --git a/81.search-in-rotated-sorted-array-ii.102662866.Accepted.leetcode.java b/81.search-in-rotated-sorted-array-ii.102662866.Accepted.leetcode.java
deleted file mode 100644
index 3e33c866..00000000
--- ./81.search-in-rotated-sorted-array-ii.102662866.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution
-{
-    public boolean search(int[] A, int target)
-    {
-        int left = 0;
-        int right = A.length - 1;
-
-        while (left <= right)
-        {
-            int mid = left + (right - left) / 2;
-
-            if (A[mid] == target)
-            {
-                return true;
-            }
-
-            if (A[left] < A[mid])
-            {
-                if (A[left] <= target && target < A[mid])
-                {
-                    right = mid - 1;
-                }
-                else
-                {
-                    left = mid + 1;
-                }
-            }
-            else if (A[left] > A[mid])
-            {
-                if (A[mid] < target && target <= A[right])
-                {
-                    left = mid + 1;
-                }
-                else
-                {
-                    right = mid - 1;
-                }
-            }
-            else
-            {
-                left++;
-            }
-        }
-
-        return false;
-    }
-}
diff --git a/81.search-in-rotated-sorted-array-ii.102665156.Wrong-Answer.leetcode.java b/81.search-in-rotated-sorted-array-ii.102665156.Wrong-Answer.leetcode.java
deleted file mode 100644
index 85b2de78..00000000
--- ./81.search-in-rotated-sorted-array-ii.102665156.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-public class Solution
-{
-    public boolean search(int[] A, int target)
-    {
-        int left = 0;
-        int right = A.length - 1;
-
-        while (left < right)
-        {
-            int mid = left + (right - left) / 2;
-
-            if (A[mid] == target)
-            {
-                return true;
-            }
-
-            if (A[left] < A[mid])
-            {
-                if (A[left] <= target && target < A[mid])
-                {
-                    right = mid - 1;
-                }
-                else
-                {
-                    left = mid + 1;
-                }
-            }
-            else if (A[left] > A[mid])
-            {
-                if (A[mid] < target && target <= A[right])
-                {
-                    left = mid + 1;
-                }
-                else
-                {
-                    right = mid - 1;
-                }
-            }
-            else
-            {
-                left++;
-            }
-        }
-
-        return false;
-    }
-}
diff --git a/81.search-in-rotated-sorted-array-ii.102665329.Runtime-Error.leetcode.java b/81.search-in-rotated-sorted-array-ii.102665329.Runtime-Error.leetcode.java
deleted file mode 100644
index 46447422..00000000
--- ./81.search-in-rotated-sorted-array-ii.102665329.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,52 +0,0 @@
-public class Solution
-{
-    public boolean search(int[] A, int target)
-    {
-        int left = 0;
-        int right = A.length - 1;
-
-        while (left + 1 < right)
-        {
-            int mid = left + (right - left) / 2;
-
-            if (A[mid] == target)
-            {
-                return true;
-            }
-
-            if (A[left] < A[mid])
-            {
-                if (A[left] <= target && target < A[mid])
-                {
-                    right = mid;
-                }
-                else
-                {
-                    left = mid;
-                }
-            }
-            else if (A[left] > A[mid])
-            {
-                if (A[mid] < target && target <= A[right])
-                {
-                    left = mid;
-                }
-                else
-                {
-                    right = mid;
-                }
-            }
-            else
-            {
-                left++;
-            }
-        }
-
-        if (A[left] == target || A[right] == target)
-        {
-            return true;
-        }
-        
-        return false;
-    }
-}
diff --git a/81.search-in-rotated-sorted-array-ii.102665383.Accepted.leetcode.java b/81.search-in-rotated-sorted-array-ii.102665383.Accepted.leetcode.java
deleted file mode 100644
index 6722c5c1..00000000
--- ./81.search-in-rotated-sorted-array-ii.102665383.Accepted.leetcode.java
+++ /dev/null
@@ -1,57 +0,0 @@
-public class Solution
-{
-    public boolean search(int[] A, int target)
-    {
-        if (A == null || A.length ==0)
-        {
-            return false;
-        }
-        
-        int left = 0;
-        int right = A.length - 1;
-
-        while (left + 1 < right)
-        {
-            int mid = left + (right - left) / 2;
-
-            if (A[mid] == target)
-            {
-                return true;
-            }
-
-            if (A[left] < A[mid])
-            {
-                if (A[left] <= target && target < A[mid])
-                {
-                    right = mid;
-                }
-                else
-                {
-                    left = mid;
-                }
-            }
-            else if (A[left] > A[mid])
-            {
-                if (A[mid] < target && target <= A[right])
-                {
-                    left = mid;
-                }
-                else
-                {
-                    right = mid;
-                }
-            }
-            else
-            {
-                left++;
-            }
-        }
-
-        if (A[left] == target || A[right] == target)
-        {
-            return true;
-        }
-        
-        return false;
-    }
-}
diff --git a/81.search-in-rotated-sorted-array-ii.34622932.Accepted.leetcode.java b/81.search-in-rotated-sorted-array-ii.34622932.Accepted.leetcode.java
deleted file mode 100644
index d2e445c3..00000000
--- ./81.search-in-rotated-sorted-array-ii.34622932.Accepted.leetcode.java
+++ /dev/null
@@ -1,48 +0,0 @@
-  public class Solution
-  {
-    public boolean search(int[] A, int target)
-    {
-      int left = 0;
-      int right = A.length - 1;
-
-      while (left <= right)
-      {
-        int mid = left + (right - left) / 2;
-
-        if (A[mid] == target)
-        {
-          return true;
-        }
-
-        if (A[left] < A[mid])
-        {
-          if (A[left] <= target && target < A[mid])
-          {
-            right = mid - 1;
-          }
-          else
-          {
-            left = mid + 1;
-          }
-        }
-        else if (A[left] > A[mid])
-        {
-          if (A[mid] < target && target <= A[right])
-          {
-            left = mid + 1;
-          }
-          else
-          {
-            right = mid - 1;
-          }
-        }
-        else
-        {
-          left++;
-        }
-      }
-
-      return false;
-    }
-  }
-
diff --git a/81.search-in-rotated-sorted-array-ii.9063871.Accepted.leetcode.java b/81.search-in-rotated-sorted-array-ii.9063871.Accepted.leetcode.java
deleted file mode 100644
index 3f6dce8c..00000000
--- ./81.search-in-rotated-sorted-array-ii.9063871.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-  public class Solution {
-    public boolean search(int[] A, int target) {
-      int left = 0;
-      int right = A.length - 1;
-
-      while (left <= right) {
-        int mid = left + (right - left) / 2;
-
-        if (A[mid] == target) {
-          return true;
-        }
-
-        if (A[left] < A[mid]) {
-          if (A[left] <= target && target < A[mid]) {
-            right = mid - 1;
-          }
-          else {
-            left = mid + 1;
-          }
-        }
-        else if (A[left] > A[mid]) {
-          if (A[mid] < target && target <= A[right]) {
-            left = mid + 1;
-          }
-          else {
-            right = mid - 1;
-          }
-        }
-        else {
-          left++;
-        }
-      }
-
-      return false;
-    }
-  }
-
diff --git a/82.remove-duplicates-from-sorted-list-ii.81221543.Runtime-Error.leetcode.java b/82.remove-duplicates-from-sorted-list-ii.81221543.Runtime-Error.leetcode.java
deleted file mode 100644
index 861bdbc1..00000000
--- ./82.remove-duplicates-from-sorted-list-ii.81221543.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public ListNode deleteDuplicates(ListNode head)
-    {
-        if(head == null)
-        {
-            return null;
-        }
-        
-        ListNode dummy = new ListNode(-1);
-        dummy.next = head;
-        head = dummy;
-        
-        while(head.next != null && head.next.next != null)
-        {
-            if(head.next.val == head.next.next.val)
-            {
-                int val = head.next.val;
-                while(val == head.next.val)
-                {
-                    head.next = head.next.next;
-                }
-            }
-            else
-            {
-                head = head.next;
-            }
-        }
-        
-        return dummy.next;
-    }
-}
diff --git a/82.remove-duplicates-from-sorted-list-ii.81221617.Accepted.leetcode.java b/82.remove-duplicates-from-sorted-list-ii.81221617.Accepted.leetcode.java
deleted file mode 100644
index 72c4d7df..00000000
--- ./82.remove-duplicates-from-sorted-list-ii.81221617.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public ListNode deleteDuplicates(ListNode head)
-    {
-        if(head == null)
-        {
-            return null;
-        }
-        
-        ListNode dummy = new ListNode(-1);
-        dummy.next = head;
-        head = dummy;
-        
-        while(head.next != null && head.next.next != null)
-        {
-            if(head.next.val == head.next.next.val)
-            {
-                int val = head.next.val;
-                while(head.next != null && val == head.next.val)
-                {
-                    head.next = head.next.next;
-                }
-            }
-            else
-            {
-                head = head.next;
-            }
-        }
-        
-        return dummy.next;
-    }
-}
diff --git a/82.remove-duplicates-from-sorted-list-ii.81296367.Wrong-Answer.leetcode.java b/82.remove-duplicates-from-sorted-list-ii.81296367.Wrong-Answer.leetcode.java
deleted file mode 100644
index ba9762b7..00000000
--- ./82.remove-duplicates-from-sorted-list-ii.81296367.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public ListNode deleteDuplicates(ListNode head)
-    {
-        if(head == null || head.next == null)
-        {
-            return null;
-        }
-        
-        ListNode dummy = new ListNode(-1);
-        dummy.next = head;
-        head = dummy;
-        
-        while(head.next != null && head.next.next != null)
-        {
-            if(head.next.val == head.next.next.val)
-            {
-                int val = head.next.val;
-                while(head.next != null && head.next.val == val)
-                {
-                    head.next = head.next.next;
-                }
-            }
-            else
-            {
-                head = head.next;
-            }
-        }
-
-        return dummy.next;
-    }
-}
diff --git a/82.remove-duplicates-from-sorted-list-ii.81297137.Accepted.leetcode.java b/82.remove-duplicates-from-sorted-list-ii.81297137.Accepted.leetcode.java
deleted file mode 100644
index 8a0ed783..00000000
--- ./82.remove-duplicates-from-sorted-list-ii.81297137.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public ListNode deleteDuplicates(ListNode head)
-    {
-        if(head == null)
-        {
-            return null;
-        }
-        
-        ListNode dummy = new ListNode(-1);
-        dummy.next = head;
-        head = dummy;
-        
-        while(head.next != null && head.next.next != null)
-        {
-            if(head.next.val == head.next.next.val)
-            {
-                int val = head.next.val;
-                while(head.next != null && head.next.val == val)
-                {
-                    head.next = head.next.next;
-                }
-            }
-            else
-            {
-                head = head.next;
-            }
-        }
-
-        return dummy.next;
-    }
-}
diff --git a/82.remove-duplicates-from-sorted-list-ii.81297201.Runtime-Error.leetcode.java b/82.remove-duplicates-from-sorted-list-ii.81297201.Runtime-Error.leetcode.java
deleted file mode 100644
index 5865741c..00000000
--- ./82.remove-duplicates-from-sorted-list-ii.81297201.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public ListNode deleteDuplicates(ListNode head)
-    {
-        if(head == null)
-        {
-            return null;
-        }
-        
-        ListNode dummy = new ListNode(-1);
-        dummy.next = head;
-        head = dummy;
-        
-        while(head.next != null)
-        {
-            if(head.next.val == head.next.next.val)
-            {
-                int val = head.next.val;
-                while(val == head.next.val)
-                {
-                    head.next = head.next.next;
-                }
-            }
-            else
-            {
-                head = head.next;
-            }
-        }
-        
-        return dummy.next;
-    }
-}
diff --git a/82.remove-duplicates-from-sorted-list-ii.81297491.Wrong-Answer.leetcode.java b/82.remove-duplicates-from-sorted-list-ii.81297491.Wrong-Answer.leetcode.java
deleted file mode 100644
index ba58a422..00000000
--- ./82.remove-duplicates-from-sorted-list-ii.81297491.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public ListNode deleteDuplicates(ListNode head)
-    {
-        if (head == null)
-        {
-            return head;
-        }
-
-        ListNode dummy = new ListNode(-1);
-        dummy.next = head;
-        head = dummy;
-        
-        while(head.next != null && head.next.next != null)
-        {
-            if(head.next.val == head.next.next.val)
-            {
-                int val = head.next.val;
-                while(head.next.next != null && head.next.next.val == val)
-                {
-                    head.next = head.next.next;
-                }
-            }
-            else
-            {
-                head = head.next;
-            }
-        }
-
-        return dummy.next;
-    }
-}
diff --git a/82.remove-duplicates-from-sorted-list-ii.81297773.Runtime-Error.leetcode.java b/82.remove-duplicates-from-sorted-list-ii.81297773.Runtime-Error.leetcode.java
deleted file mode 100644
index 714e5857..00000000
--- ./82.remove-duplicates-from-sorted-list-ii.81297773.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public ListNode deleteDuplicates(ListNode head)
-    {
-        if (head == null)
-        {
-            return null;
-        }
-
-        ListNode dummy = new ListNode(-1);
-        dummy.next = head;
-        head = dummy;
-        
-        while(head.next != null && head.next.next != null)
-        {
-            if(head.next.val == head.next.next.val)
-            {
-                int val = head.next.val;
-                while(head.next != null && head.next.next.val == val)
-                {
-                    head.next = head.next.next;
-                }
-            }
-            else
-            {
-                head = head.next;
-            }
-        }
-
-        return dummy.next;
-    }
-}
diff --git a/82.remove-duplicates-from-sorted-list-ii.81298066.Accepted.leetcode.java b/82.remove-duplicates-from-sorted-list-ii.81298066.Accepted.leetcode.java
deleted file mode 100644
index 77eee93b..00000000
--- ./82.remove-duplicates-from-sorted-list-ii.81298066.Accepted.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public ListNode deleteDuplicates(ListNode head)
-    {
-        if (head == null)
-        {
-            return null;
-        }
-
-        ListNode dummy = new ListNode(-1);
-        dummy.next = head;
-        head = dummy;
-        
-        while(head.next != null && head.next.next != null)
-        {
-            if(head.next.val == head.next.next.val)
-            {
-                int val = head.next.val;
-                while(head.next != null && head.next.val == val)
-                {
-                    head.next = head.next.next;
-                }
-            }
-            else
-            {
-                head = head.next;
-            }
-        }
-
-        return dummy.next;
-    }
-}
diff --git a/83.remove-duplicates-from-sorted-list.156262849.Wrong-Answer.leetcode.java b/83.remove-duplicates-from-sorted-list.156262849.Wrong-Answer.leetcode.java
deleted file mode 100644
index 16b16fc8..00000000
--- ./83.remove-duplicates-from-sorted-list.156262849.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public ListNode deleteDuplicates(ListNode head)
-    {
-        ListNode current = head;
-
-        while (current != null)
-        {
-            if (current.next != null && current.val == current.next.val)
-            {
-                current.next = current.next.next;
-            }
-
-            current = current.next;
-        }
-
-        return head;
-    }
-}
-
diff --git a/83.remove-duplicates-from-sorted-list.157610726.Runtime-Error.leetcode.java b/83.remove-duplicates-from-sorted-list.157610726.Runtime-Error.leetcode.java
deleted file mode 100644
index d364c9b4..00000000
--- ./83.remove-duplicates-from-sorted-list.157610726.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public ListNode deleteDuplicates(ListNode head)
-    {
-        ListNode current = head;
-
-        while (current != null)
-        {
-            if (current.val == current.next.val)
-            {
-                current.next = current.next.next;
-            }
-            else
-            {
-                current = current.next;
-            }
-        }
-
-        return head;
-    }
-}
-
diff --git a/83.remove-duplicates-from-sorted-list.157610824.Runtime-Error.leetcode.java b/83.remove-duplicates-from-sorted-list.157610824.Runtime-Error.leetcode.java
deleted file mode 100644
index e4f5962d..00000000
--- ./83.remove-duplicates-from-sorted-list.157610824.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public ListNode deleteDuplicates(ListNode head)
-    {
-        ListNode current = head;
-
-        while (current.next != null)
-        {
-            if (current.val == current.next.val)
-            {
-                current.next = current.next.next;
-            }
-            else
-            {
-                current = current.next;
-            }
-        }
-
-        return head;
-    }
-}
-
diff --git a/83.remove-duplicates-from-sorted-list.157611346.Accepted.leetcode.java b/83.remove-duplicates-from-sorted-list.157611346.Accepted.leetcode.java
deleted file mode 100644
index b29c879b..00000000
--- ./83.remove-duplicates-from-sorted-list.157611346.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public ListNode deleteDuplicates(ListNode head)
-    {
-        if (head == null)
-        {
-            return null;
-        }
-
-        ListNode current = head;
-
-        while (current.next != null)
-        {
-            if (current.val == current.next.val)
-            {
-                current.next = current.next.next;
-            }
-            else
-            {
-                current = current.next;
-            }
-        }
-
-        return head;
-    }
-}
-
diff --git a/83.remove-duplicates-from-sorted-list.157615315.Accepted.leetcode.java b/83.remove-duplicates-from-sorted-list.157615315.Accepted.leetcode.java
deleted file mode 100644
index f643ce44..00000000
--- ./83.remove-duplicates-from-sorted-list.157615315.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public ListNode deleteDuplicates(ListNode head)
-    {
-        ListNode current = head;
-
-        while (current != null)
-        {
-            if (current.next != null && current.val == current.next.val)
-            {
-                current.next = current.next.next;
-            }
-            else
-            {
-                current = current.next;
-            }
-        }
-
-        return head;
-    }
-}
-
diff --git a/84.largest-rectangle-in-histogram.79592939.Accepted.leetcode.java b/84.largest-rectangle-in-histogram.79592939.Accepted.leetcode.java
deleted file mode 100644
index bb1f75e3..00000000
--- ./84.largest-rectangle-in-histogram.79592939.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution 
-{
-    public int largestRectangleArea(int[] height) 
-    {
-        Stack<Integer> stack = new Stack<Integer>();
-        int i = 0;
-        int maxArea = 0;
-        int[] h = new int[height.length + 1];
-        h = Arrays.copyOf(height, height.length + 1);
-
-        while (i < h.length) 
-        {
-            if (stack.isEmpty() || h[stack.peek()] <= h[i]) 
-            {
-                stack.push(i++);
-            }
-            else 
-            {
-                int t = stack.pop();
-                maxArea = Math.max(maxArea,
-                             h[t] * (stack.isEmpty() ? i : i - stack.peek() - 1));
-            }
-        }
-
-        return maxArea;
-    }
-}
diff --git a/84.largest-rectangle-in-histogram.79602027.Runtime-Error.leetcode.java b/84.largest-rectangle-in-histogram.79602027.Runtime-Error.leetcode.java
deleted file mode 100644
index a86b8796..00000000
--- ./84.largest-rectangle-in-histogram.79602027.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution 
-{
-    public int largestRectangleArea(int[] height) 
-    {
-        Stack<Integer> stack = new Stack<Integer>();
-        int i = 0;
-        int maxArea = 0;
-        int[] h = new int[height.length + 1];
-        h = Arrays.copyOf(height, height.length + 1);
-
-        while (i < h.length) 
-        {
-            if (stack.isEmpty() || h[stack.peek()] <= h[i]) 
-            {
-                stack.push(i++);
-            }
-            else 
-            {
-                int t = stack.pop();
-                maxArea = Math.max(maxArea,
-                             h[t] * (i - stack.peek() - 1));
-            }
-        }
-
-        return maxArea;
-    }
-}
diff --git a/84.largest-rectangle-in-histogram.8728128.Accepted.leetcode.java b/84.largest-rectangle-in-histogram.8728128.Accepted.leetcode.java
deleted file mode 100644
index f3f582a2..00000000
--- ./84.largest-rectangle-in-histogram.8728128.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution {
-    public int largestRectangleArea(int[] height) {
-      int maxArea = 0;
-      Stack<Integer> stack = new Stack<Integer>();
-      int i = 0;
-
-      while (i < height.length) {
-        if (stack.isEmpty() || height[stack.peek()] <= height[i]) {
-          stack.push(i++);
-        }
-        else {
-          int pos = stack.pop();
-          maxArea = Math.max(maxArea,
-                             (stack.isEmpty() ? i : i - stack.peek() - 1) * height[pos]);
-        }
-      }
-
-      while (!stack.isEmpty()) {
-        int pos = stack.pop();
-        maxArea = Math.max(maxArea,
-                           (stack.isEmpty() ? i : i - stack.peek() - 1) * height[pos]);
-      }
-
-      return maxArea;
-    }
-  }
-
diff --git a/84.largest-rectangle-in-histogram.8728427.Accepted.leetcode.java b/84.largest-rectangle-in-histogram.8728427.Accepted.leetcode.java
deleted file mode 100644
index 55da5c75..00000000
--- ./84.largest-rectangle-in-histogram.8728427.Accepted.leetcode.java
+++ /dev/null
@@ -1,23 +0,0 @@
-  public class Solution {
-    public int largestRectangleArea(int[] height) {
-      Stack<Integer> stack = new Stack<Integer>();
-      int i = 0;
-      int maxArea = 0;
-      int[] h = new int[height.length + 1];
-      h = Arrays.copyOf(height, height.length + 1);
-
-      while (i < h.length) {
-        if (stack.isEmpty() || h[stack.peek()] <= h[i]) {
-          stack.push(i++);
-        }
-        else {
-          int t = stack.pop();
-          maxArea = Math.max(maxArea,
-                             h[t] * (stack.isEmpty() ? i : i - stack.peek() - 1));
-        }
-      }
-
-      return maxArea;
-    }
-  }
-
diff --git a/85.maximal-rectangle.26558522.Accepted.leetcode.java b/85.maximal-rectangle.26558522.Accepted.leetcode.java
deleted file mode 100644
index 53a8aa01..00000000
--- ./85.maximal-rectangle.26558522.Accepted.leetcode.java
+++ /dev/null
@@ -1,58 +0,0 @@
-  public class Solution
-  {
-    private int largestRectangleArea(int[] height)
-    {
-      ArrayDeque<Integer> p = new ArrayDeque<Integer>();
-      int i = 0;
-      int maxArea = 0;
-
-      while (i < height.length)
-      {
-        if (p.isEmpty() || height[p.peekLast()] <= height[i])
-        {
-          p.offerLast(i++);
-        }
-        else
-        {
-          int pos = p.removeLast();
-          maxArea = Math.max(maxArea, height[pos]
-                             * (p.isEmpty() ? i : (i - p.peekLast() - 1)));
-        }
-      }
-
-      return maxArea;
-    }
-
-    public int maximalRectangle(char[][] matrix)
-    {
-      if (matrix.length == 0 || matrix[0].length == 0)
-      {
-        return 0;
-      }
-
-      int m = matrix.length;
-      int n = matrix[0].length;
-      int[] height = new int[n + 1];
-      int maxArea = 0;
-
-      for (int i = 0; i < m; i++)
-      {
-        for (int j = 0; j < n; j++)
-        {
-          if (matrix[i][j] == '1')
-          {
-            height[j]++;
-          }
-          else
-          {
-            height[j] = 0;
-          }
-        }
-
-        maxArea = Math.max(maxArea, largestRectangleArea(height));
-      }
-
-      return maxArea;
-    }
-  }
-
diff --git a/85.maximal-rectangle.26559113.Accepted.leetcode.java b/85.maximal-rectangle.26559113.Accepted.leetcode.java
deleted file mode 100644
index 2cd678e5..00000000
--- ./85.maximal-rectangle.26559113.Accepted.leetcode.java
+++ /dev/null
@@ -1,59 +0,0 @@
-  public class Solution
-  {
-    private int largestRectangleArea(int[] height)
-    {
-      Stack<Integer> stack = new Stack<Integer>();
-      int i = 0;
-      int maxArea = 0;
-      int[] h = new int[height.length + 1];
-      h = Arrays.copyOf(height, height.length + 1);
-
-      while (i < h.length)
-      {
-        if (stack.isEmpty() || h[stack.peek()] <= h[i])
-        {
-          stack.push(i++);
-        }
-        else
-        {
-          int t = stack.pop();
-          maxArea = Math.max(maxArea,
-                             h[t] * (stack.isEmpty() ? i : i - stack.peek() - 1));
-        }
-      }
-
-      return maxArea;
-    }
-    public int maximalRectangle(char[][] matrix)
-    {
-      if (matrix.length == 0 || matrix[0].length == 0)
-      {
-        return 0;
-      }
-
-      int m = matrix.length;
-      int n = matrix[0].length;
-      int[] height = new int[n + 1];
-      int maxArea = 0;
-
-      for (int i = 0; i < m; i++)
-      {
-        for (int j = 0; j < n; j++)
-        {
-          if (matrix[i][j] == '1')
-          {
-            height[j]++;
-          }
-          else
-          {
-            height[j] = 0;
-          }
-        }
-
-        maxArea = Math.max(maxArea, largestRectangleArea(height));
-      }
-
-      return maxArea;
-    }
-  }
-
diff --git a/86.partition-list.74250550.Accepted.leetcode.java b/86.partition-list.74250550.Accepted.leetcode.java
deleted file mode 100644
index 4a97c64f..00000000
--- ./86.partition-list.74250550.Accepted.leetcode.java
+++ /dev/null
@@ -1,26 +0,0 @@
-public class Solution {
-    public ListNode partition(ListNode head, int x) {
-        if (head == null) {
-            return null;
-        }
-        
-        ListNode leftDummy = new ListNode(0);
-        ListNode rightDummy = new ListNode(0);
-        ListNode left = leftDummy, right = rightDummy;
-        
-        while (head != null) {
-            if (head.val < x) {
-                left.next = head;
-                left = head;
-            } else {
-                right.next = head;
-                right = head;
-            }
-            head = head.next;
-        }
-        
-        right.next = null;
-        left.next = rightDummy.next;
-        return leftDummy.next;
-    }
-}
diff --git a/86.partition-list.74251041.Accepted.leetcode.java b/86.partition-list.74251041.Accepted.leetcode.java
deleted file mode 100644
index eb0cafe0..00000000
--- ./86.partition-list.74251041.Accepted.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution
-{
-    public ListNode partition(ListNode head, int x)
-    {
-        if (head == null)
-        {
-            return null;
-        }
-
-        ListNode leftDummy = new ListNode(0);
-        ListNode rightDummy = new ListNode(0);
-        ListNode left = leftDummy, right = rightDummy;
-
-        while (head != null)
-        {
-            if (head.val < x)
-            {
-                left.next = head;
-                left = head;
-            }
-            else
-            {
-                right.next = head;
-                right = head;
-            }
-
-            head = head.next;
-        }
-
-        right.next = null;
-        left.next = rightDummy.next;
-        return leftDummy.next;
-    }
-}
-
diff --git a/86.partition-list.74251797.Accepted.leetcode.java b/86.partition-list.74251797.Accepted.leetcode.java
deleted file mode 100644
index 55b5e1aa..00000000
--- ./86.partition-list.74251797.Accepted.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution
-{
-    public ListNode partition(ListNode head, int x)
-    {
-        if (head == null)
-        {
-            return null;
-        }
-
-        ListNode leftDummy = new ListNode(0);
-        ListNode rightDummy = new ListNode(0);
-        ListNode left = leftDummy, right = rightDummy;
-
-        while(head != null)
-        {
-            if(head.val < x)
-            {
-                left.next = head;
-                left = head;
-            }
-            else
-            {
-                right.next = head;
-                right = head;
-            }
-            
-            head = head.next;
-        }
-
-        right.next = null;
-        left.next = rightDummy.next;
-        return leftDummy.next;
-    }
-}
-
diff --git a/86.partition-list.74252182.Accepted.leetcode.java b/86.partition-list.74252182.Accepted.leetcode.java
deleted file mode 100644
index 175dd7e3..00000000
--- ./86.partition-list.74252182.Accepted.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution
-{
-    public ListNode partition(ListNode head, int x)
-    {
-        if (head == null)
-        {
-            return null;
-        }
-
-        ListNode leftDummy = new ListNode(-1);
-        ListNode rightDummy = new ListNode(-1);
-        ListNode left = leftDummy, right = rightDummy;
-        
-        while(head != null)
-        {
-            if(head.val < x)
-            {
-                left.next = head;
-                left = head;
-            }
-            else
-            {
-                right.next = head;
-                right = head;
-            }
-            
-            head = head.next;
-        }
-
-        right.next = null;
-        left.next = rightDummy.next;
-        return leftDummy.next;
-    }
-}
-
diff --git a/86.partition-list.74252261.Accepted.leetcode.java b/86.partition-list.74252261.Accepted.leetcode.java
deleted file mode 100644
index 572e4709..00000000
--- ./86.partition-list.74252261.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public ListNode partition(ListNode head, int x)
-    {
-        
-        if(head == null)
-        {
-            return head;
-        }
-        
-        ListNode leftDummy = new ListNode(-1);
-        ListNode rightDummy = new ListNode(-1);
-        ListNode left = leftDummy, right = rightDummy;
-        
-        while(head != null)
-        {
-            if(head.val < x)
-            {
-                left.next = head;
-                left = head;
-            }
-            else
-            {
-                right.next = head;
-                right = head;
-            }
-            
-            head = head.next;
-        }
-
-        right.next = null;
-        left.next = rightDummy.next;
-        return leftDummy.next;
-    }
-}
-
diff --git a/86.partition-list.7801686.Accepted.leetcode.java b/86.partition-list.7801686.Accepted.leetcode.java
deleted file mode 100644
index c854a9b2..00000000
--- ./86.partition-list.7801686.Accepted.leetcode.java
+++ /dev/null
@@ -1,24 +0,0 @@
-public class Solution {
-    public ListNode partition(ListNode head, int x) {
-      ListNode left_dummy = new ListNode(-1);
-      ListNode right_dummy = new ListNode(-1);
-      ListNode left_cur = left_dummy;
-      ListNode right_cur = right_dummy;
-
-      for (ListNode cur = head; cur != null; cur = cur.next) {
-        if (cur.val < x) {
-          left_cur.next = cur;
-          left_cur = cur;
-        }
-        else {
-          right_cur.next = cur;
-          right_cur = cur;
-        }
-      }
-
-      left_cur.next = right_dummy.next;
-      right_cur.next = null;
-      return left_dummy.next;
-    }
-  }
-
diff --git a/87.scramble-string.10984448.Accepted.leetcode.java b/87.scramble-string.10984448.Accepted.leetcode.java
deleted file mode 100644
index 431861e6..00000000
--- ./87.scramble-string.10984448.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-	public class Solution {
-		public boolean isScramble(String s1, String s2) {
-			if (s1.length() != s2.length()) {
-				return false;
-			}
-
-			int len = s1.length();
-			boolean[][][] dp = new boolean[len + 1][len][len];
-
-			for (int i = 0; i <= len - 1; i++)
-				for (int j = 0; j <= len - 1; j++) {
-					dp[1][i][j] = s1.charAt(i) == s2.charAt(j) ? true : false;
-				}
-
-			for (int k = 2; k <= len; k++)
-				for (int i = 0; i <= len - k; i++)
-					for (int j = 0; j <= len - k; j++) {
-						dp[k][i][j] = false;
-
-						for (int divlen = 1; divlen < k && !dp[k][i][j]; divlen++)
-							dp[k][i][j] = (dp[divlen][i][j] && dp[k - divlen][i + divlen][j
-									+ divlen])
-									|| (dp[divlen][i][j + k - divlen] && dp[k - divlen][i
-											+ divlen][j]);
-					}
-
-			return dp[len][0][0];
-		}
-	}
-
-
diff --git a/87.scramble-string.10984479.Accepted.leetcode.java b/87.scramble-string.10984479.Accepted.leetcode.java
deleted file mode 100644
index bc8881f0..00000000
--- ./87.scramble-string.10984479.Accepted.leetcode.java
+++ /dev/null
@@ -1,31 +0,0 @@
-	public class Solution {
-		public boolean isScramble(String s1, String s2) {
-			if (s1.length() != s2.length()) {
-				return false;
-			}
-            //动态规划解法
-			int len = s1.length();
-			boolean[][][] dp = new boolean[len + 1][len][len];
-
-			for (int i = 0; i <= len - 1; i++)
-				for (int j = 0; j <= len - 1; j++) {
-					dp[1][i][j] = s1.charAt(i) == s2.charAt(j) ? true : false;
-				}
-
-			for (int k = 2; k <= len; k++)
-				for (int i = 0; i <= len - k; i++)
-					for (int j = 0; j <= len - k; j++) {
-						dp[k][i][j] = false;
-
-						for (int divlen = 1; divlen < k && !dp[k][i][j]; divlen++)
-							dp[k][i][j] = (dp[divlen][i][j] && dp[k - divlen][i + divlen][j
-									+ divlen])
-									|| (dp[divlen][i][j + k - divlen] && dp[k - divlen][i
-											+ divlen][j]);
-					}
-
-			return dp[len][0][0];
-		}
-	}
-
-
diff --git a/87.scramble-string.10984626.Accepted.leetcode.java b/87.scramble-string.10984626.Accepted.leetcode.java
deleted file mode 100644
index c6505d03..00000000
--- ./87.scramble-string.10984626.Accepted.leetcode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-	public class Solution {
-		public boolean isScramble(String s1, String s2) {
-			// 动态规划解法
-			if (s1.length() != s2.length()) {
-				return false;
-			}
-
-			int len = s1.length();
-			// dp[k][i][j]表示s2从j开始长度为k的子串是否可以由s1从i开始长度为k的子串转换而成
-			boolean[][][] dp = new boolean[len + 1][len][len];
-
-			// 初始化长度为1的子串的dp值
-			for (int i = 0; i <= len - 1; i++)
-				for (int j = 0; j <= len - 1; j++) {
-					dp[1][i][j] = s1.charAt(i) == s2.charAt(j) ? true : false;
-				}
-
-			for (int k = 2; k <= len; k++)
-				// 子串的长度
-				for (int i = 0; i <= len - k; i++)
-					// s1的起始位置
-					for (int j = 0; j <= len - k; j++) { // s2的起始位置
-						dp[k][i][j] = false;
-
-						// divlen表示两个子串分割点到子串起始端的距离
-						for (int divlen = 1; divlen < k && !dp[k][i][j]; divlen++)
-							dp[k][i][j] = (dp[divlen][i][j] && dp[k - divlen][i + divlen][j
-									+ divlen])
-									|| (dp[divlen][i][j + k - divlen] && dp[k - divlen][i
-											+ divlen][j]);
-					}
-
-			return dp[len][0][0];
-		}
-	}
-
-
diff --git a/87.scramble-string.28176916.Accepted.leetcode.java b/87.scramble-string.28176916.Accepted.leetcode.java
deleted file mode 100644
index 0a270bee..00000000
--- ./87.scramble-string.28176916.Accepted.leetcode.java
+++ /dev/null
@@ -1,47 +0,0 @@
-  public class Solution
-  {
-    public boolean isScramble(String s1, String s2)
-    {
-      // 动态规划解法
-      if (s1.length() != s2.length())
-      {
-        return false;
-      }
-
-      int len = s1.length();
-      // dp[k][i][j]表示s2从j开始长度为k的子串是否可以由s1从i开始长度为k的子串转换而成
-      boolean[][][] dp = new boolean[len + 1][len][len];
-
-      // 初始化长度为1的子串的dp值
-      for (int i = 0; i <= len - 1; i++ )
-      {
-        for (int j = 0; j <= len - 1; j++ )
-        {
-          dp[1][i][j] = s1.charAt(i) == s2.charAt(j) ? true : false;
-        }
-      }
-
-      for (int k = 2; k <= len; k++ )
-      {
-        // 子串的长度
-        for (int i = 0; i <= len - k; i++ )
-        {
-          // s1的起始位置
-          for (int j = 0; j <= len - k; j++ ) // s2的起始位置
-          {
-            dp[k][i][j] = false;
-
-            // divlen表示两个子串分割点到子串起始端的距离
-            for (int divlen = 1; divlen < k && !dp[k][i][j]; divlen++ )
-              dp[k][i][j] =
-                (dp[divlen][i][j] && dp[k - divlen][i + divlen][j + divlen])
-                  || (dp[divlen][i][j + k - divlen] && dp[k - divlen][i
-                    + divlen][j]);
-          }
-        }
-      }
-
-      return dp[len][0][0];
-    }
-  }
-
diff --git a/88.merge-sorted-array.102702866.Runtime-Error.leetcode.java b/88.merge-sorted-array.102702866.Runtime-Error.leetcode.java
deleted file mode 100644
index 457fa420..00000000
--- ./88.merge-sorted-array.102702866.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution
-{
-    public void merge(int A[], int m, int B[], int n)
-    {
-        int i = m - 1;
-        int j = n - 1;
-        int k = m + n - 1;
-
-        while (k >= 0)
-        {
-            if (j < 0 || A[i] >= B[j])
-            {
-                A[k--] = A[i--];
-            }
-            else
-            {
-                A[k--] = B[j--];
-            }
-        }
-    }
-}
diff --git a/88.merge-sorted-array.102703165.Accepted.leetcode.java b/88.merge-sorted-array.102703165.Accepted.leetcode.java
deleted file mode 100644
index 8ddaa80e..00000000
--- ./88.merge-sorted-array.102703165.Accepted.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution
-{
-    public void merge(int A[], int m, int B[], int n)
-    {
-        int i = m - 1;
-        int j = n - 1;
-        int k = m + n - 1;
-
-        while (k >= 0)
-        {
-            if (j < 0 || (i >= 0 && A[i] >= B[j]))
-            {
-                A[k--] = A[i--];
-            }
-            else
-            {
-                A[k--] = B[j--];
-            }
-        }
-    }
-}
diff --git a/88.merge-sorted-array.102703259.Accepted.leetcode.java b/88.merge-sorted-array.102703259.Accepted.leetcode.java
deleted file mode 100644
index 679d5924..00000000
--- ./88.merge-sorted-array.102703259.Accepted.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution
-{
-    public void merge(int A[], int m, int B[], int n)
-    {
-        int i = m - 1;
-        int j = n - 1;
-        int k = m + n - 1;
-
-        for (; k >= 0; k--)
-        {
-            if (j < 0 || (i >= 0 && A[i] >= B[j]))
-            {
-                A[k] = A[i--];
-            }
-            else
-            {
-                A[k] = B[j--];
-            }
-        }
-    }
-}
diff --git a/88.merge-sorted-array.157437999.Runtime-Error.leetcode.java b/88.merge-sorted-array.157437999.Runtime-Error.leetcode.java
deleted file mode 100644
index 6720b651..00000000
--- ./88.merge-sorted-array.157437999.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public void merge(int A[], int m, int B[], int n)
-    {
-        int i = m - 1;
-        int j = n - 1;
-        int k = m + n - 1;
-
-        while (k >= 0)
-        {
-            if (j < 0 || A[i] >= B[j])
-            {
-                A[k--] = A[i--];
-            }
-            else
-            {
-                A[k--] = B[j--];
-            }
-        }
-    }
-}
-
diff --git a/88.merge-sorted-array.157439389.Accepted.leetcode.java b/88.merge-sorted-array.157439389.Accepted.leetcode.java
deleted file mode 100644
index a15da662..00000000
--- ./88.merge-sorted-array.157439389.Accepted.leetcode.java
+++ /dev/null
@@ -1,22 +0,0 @@
-public class Solution
-{
-    public void merge(int A[], int m, int B[], int n)
-    {
-        int i = m - 1;
-        int j = n - 1;
-        int k = m + n - 1;
-
-        while (k >= 0)
-        {
-            if (j < 0 || (i >= 0 && A[i] >= B[j]))
-            {
-                A[k--] = A[i--];
-            }
-            else
-            {
-                A[k--] = B[j--];
-            }
-        }
-    }
-}
-
diff --git a/89.gray-code.31082560.Accepted.leetcode.java b/89.gray-code.31082560.Accepted.leetcode.java
deleted file mode 100644
index 7239bd45..00000000
--- ./89.gray-code.31082560.Accepted.leetcode.java
+++ /dev/null
@@ -1,15 +0,0 @@
-  public class Solution
-  {
-    public ArrayList<Integer> grayCode(int n)
-    {
-      ArrayList<Integer> ans = new ArrayList<Integer>();
-
-      for (int i = 0; i < (1 << n); i++)
-      {
-        ans.add(i ^ (i >> 1));
-      }
-
-      return ans;
-    }
-  }
-
diff --git a/9.palindrome-number.8872803.Accepted.leetcode.java b/9.palindrome-number.8872803.Accepted.leetcode.java
deleted file mode 100644
index 15dfd406..00000000
--- ./9.palindrome-number.8872803.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-  public class Solution {
-    public boolean isPalindrome(int x) {
-      if (x < 0) {
-        return false;
-      }
-
-      int divider = 1;
-
-      while (x / divider >= 10) {
-        divider *= 10;
-      }
-
-      while (x != 0) {
-        int right = x % 10;
-        int left = x / divider;
-
-        if (right != left) {
-          return false;
-        }
-
-        x %= divider;
-        x /= 10;
-        divider /= 100;
-      }
-
-      return true;
-    }
-  }
-
diff --git a/90.subsets-ii.102868422.Wrong-Answer.leetcode.java b/90.subsets-ii.102868422.Wrong-Answer.leetcode.java
deleted file mode 100644
index c5ff92d6..00000000
--- ./90.subsets-ii.102868422.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsetsWithDup(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (S == null)
-        {
-            return result;
-        }
-
-        dfs(S, 0, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    public void dfs(int[] S, int start, List<Integer> current, List<List<Integer>> result)
-    {
-        result.add(new ArrayList<Integer>(current));
-
-        for (int index = start; index < S.length; index++)
-        {
-            if (index - 1 >= start && S[index] == S[index - 1])
-            {
-                continue;
-            }
-
-            current.add(S[index]);
-            dfs(S, index + 1, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
diff --git a/90.subsets-ii.102868510.Accepted.leetcode.java b/90.subsets-ii.102868510.Accepted.leetcode.java
deleted file mode 100644
index c3e2af2d..00000000
--- ./90.subsets-ii.102868510.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsetsWithDup(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        Arrays.sort(S);
-        dfs(S, 0, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    public void dfs(int[] S, int start, List<Integer> current, List<List<Integer>> result)
-    {
-        result.add(new ArrayList<Integer>(current));
-
-        for (int index = start; index < S.length; index++)
-        {
-            if (index - 1 >= start && S[index] == S[index - 1])
-            {
-                continue;
-            }
-
-            current.add(S[index]);
-            dfs(S, index + 1, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
diff --git a/90.subsets-ii.102868633.Accepted.leetcode.java b/90.subsets-ii.102868633.Accepted.leetcode.java
deleted file mode 100644
index 8bc311df..00000000
--- ./90.subsets-ii.102868633.Accepted.leetcode.java
+++ /dev/null
@@ -1,27 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsetsWithDup(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-        Arrays.sort(S);
-        dfs(S, 0, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    public void dfs(int[] S, int start, List<Integer> current, List<List<Integer>> result)
-    {
-        result.add(new ArrayList<Integer>(current));
-
-        for (int i = start; i < S.length; i++)
-        {
-            if (i -1 >= start && S[i] == S[i - 1])
-            {
-                continue;
-            }
-
-            current.add(S[i]);
-            dfs(S, i + 1, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
diff --git a/90.subsets-ii.155172568.Wrong-Answer.leetcode.java b/90.subsets-ii.155172568.Wrong-Answer.leetcode.java
deleted file mode 100644
index e6d4549d..00000000
--- ./90.subsets-ii.155172568.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsetsWithDup(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (S == null)
-        {
-            return result;
-        }
-
-        dfs(S, 0, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    public void dfs(int[] S, int start, List<Integer> current, List<List<Integer>> result)
-    {
-        result.add(new ArrayList<Integer>(current));
-
-        for (int index = start; index < S.length; index++)
-        {
-            if (index - 1 >= start && S[index] == S[index - 1])
-            {
-                continue;
-            }
-
-            current.add(S[index]);
-            dfs(S, index + 1, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/90.subsets-ii.155174071.Wrong-Answer.leetcode.java b/90.subsets-ii.155174071.Wrong-Answer.leetcode.java
deleted file mode 100644
index aa7bfe7f..00000000
--- ./90.subsets-ii.155174071.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsetsWithDup(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (S == null)
-        {
-            return result;
-        }
-
-        dfs(S, 0, new ArrayList<Integer>(), result);
-        return result;
-    }
-    public void dfs(int[] S, int start, List<Integer> current, List<List<Integer>> result)
-    {
-        result.add(new ArrayList<Integer>(current));
-
-        for (int index = start; index < S.length; index++)
-        {
-            if (index > start && S[index] == S[index - 1])
-            {
-                continue;
-            }
-
-            current.add(S[index]);
-            dfs(S, index + 1, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/90.subsets-ii.72891764.Accepted.leetcode.java b/90.subsets-ii.72891764.Accepted.leetcode.java
deleted file mode 100644
index 4993abe0..00000000
--- ./90.subsets-ii.72891764.Accepted.leetcode.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsetsWithDup(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (S == null)
-        {
-            return result;
-        }
-
-        Arrays.sort(S);
-        dfs(S, 0, new ArrayList<Integer>(), result);
-        return result;
-    }
-    public void dfs(int[] S, int start, List<Integer> current,
-                    List<List<Integer>> result)
-    {
-        result.add(new ArrayList<Integer>(current));
-
-        for (int index = start; index < S.length; index++)
-        {
-            if(index > start && S[index] == S[index-1])
-            {
-                continue;
-            }
-
-            current.add(S[index]);
-            dfs(S, index + 1, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
-
diff --git a/90.subsets-ii.80110005.Wrong-Answer.leetcode.java b/90.subsets-ii.80110005.Wrong-Answer.leetcode.java
deleted file mode 100644
index b4e06818..00000000
--- ./90.subsets-ii.80110005.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsetsWithDup(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (S == null)
-        {
-            return result;
-        }
-
-        Arrays.sort(S);
-        dfs(S, 0, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    public void dfs(int[] S, int start, List<Integer> current, List<List<Integer>> result)
-    {
-        result.add(new ArrayList<Integer>(current));
-
-        for (int i = start; i < S.length; i++)
-        {
-            while (i > start && i < S.length - 1  && S[i] == S[i - 1])
-            {
-                i++;
-            }
-
-            current.add(S[i]);
-            dfs(S, i + 1, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
diff --git a/90.subsets-ii.80110243.Runtime-Error.leetcode.java b/90.subsets-ii.80110243.Runtime-Error.leetcode.java
deleted file mode 100644
index 0004d7fe..00000000
--- ./90.subsets-ii.80110243.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsetsWithDup(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (S == null)
-        {
-            return result;
-        }
-
-        Arrays.sort(S);
-        dfs(S, 0, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    public void dfs(int[] S, int start, List<Integer> current, List<List<Integer>> result)
-    {
-        result.add(new ArrayList<Integer>(current));
-
-        for (int i = start; i < S.length; i++)
-        {
-            while (i > start && i < S.length && S[i] == S[i - 1])
-            {
-                i++;
-            }
-
-            current.add(S[i]);
-            dfs(S, i + 1, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
diff --git a/90.subsets-ii.80110379.Accepted.leetcode.java b/90.subsets-ii.80110379.Accepted.leetcode.java
deleted file mode 100644
index 05e3ca12..00000000
--- ./90.subsets-ii.80110379.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsetsWithDup(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (S == null)
-        {
-            return result;
-        }
-
-        Arrays.sort(S);
-        dfs(S, 0, new ArrayList<Integer>(), result);
-        return result;
-    }
-
-    public void dfs(int[] S, int start, List<Integer> current, List<List<Integer>> result)
-    {
-        result.add(new ArrayList<Integer>(current));
-
-        for (int i = start; i < S.length; i++)
-        {
-            if (i > start && S[i] == S[i - 1])
-            {
-                continue;
-            }
-
-            current.add(S[i]);
-            dfs(S, i + 1, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
diff --git a/90.subsets-ii.80110585.Wrong-Answer.leetcode.java b/90.subsets-ii.80110585.Wrong-Answer.leetcode.java
deleted file mode 100644
index cf9b8fde..00000000
--- ./90.subsets-ii.80110585.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,32 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsetsWithDup(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (S == null)
-        {
-            return result;
-        }
-
-        dfs(S, 0, new ArrayList<Integer>(), result);
-        return result;
-    }
-    
-    public void dfs(int[] S, int start, List<Integer> current, List<List<Integer>> result)
-    {
-        result.add(new ArrayList<Integer>(current));
-
-        for (int index = start; index < S.length; index++)
-        {
-            if (index > start && S[index] == S[index - 1])
-            {
-                continue;
-            }
-
-            current.add(S[index]);
-            dfs(S, index + 1, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
diff --git a/90.subsets-ii.80110790.Accepted.leetcode.java b/90.subsets-ii.80110790.Accepted.leetcode.java
deleted file mode 100644
index 559d1e1a..00000000
--- ./90.subsets-ii.80110790.Accepted.leetcode.java
+++ /dev/null
@@ -1,33 +0,0 @@
-public class Solution
-{
-    public List<List<Integer>> subsetsWithDup(int[] S)
-    {
-        List<List<Integer>> result = new ArrayList<List<Integer>>();
-
-        if (S == null)
-        {
-            return result;
-        }
-
-        Arrays.sort(S);
-        dfs(S, 0, new ArrayList<Integer>(), result);
-        return result;
-    }
-    
-    public void dfs(int[] S, int start, List<Integer> current, List<List<Integer>> result)
-    {
-        result.add(new ArrayList<Integer>(current));
-
-        for (int index = start; index < S.length; index++)
-        {
-            if (index > start && S[index] == S[index - 1])
-            {
-                continue;
-            }
-
-            current.add(S[index]);
-            dfs(S, index + 1, current, result);
-            current.remove(current.size() - 1);
-        }
-    }
-}
diff --git a/91.decode-ways.102463029.Accepted.leetcode.java b/91.decode-ways.102463029.Accepted.leetcode.java
deleted file mode 100644
index 89aa9b37..00000000
--- ./91.decode-ways.102463029.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int numDecodings(String s)
-    {
-        if (s == null || s.isEmpty())
-        {
-            return 0;
-        }
-
-        int[] dp = new int[s.length() + 1];
-        dp[0] = 1;
-        dp[1] = s.charAt(0) == '0' ? 0 : 1;
-
-        for (int i = 2; i <= s.length(); i++)
-        {
-            if (s.charAt(i - 1) != '0')
-            {
-                dp[i] += dp[i - 1];
-            }
-
-            if (s.charAt(i - 2) == '1' || (s.charAt(i - 2) == '2' && s.charAt(i - 1) <= '6'))
-            {
-                dp[i] += dp[i - 2];
-            }
-        }
-
-        return dp[s.length()];
-    }
-}
diff --git a/91.decode-ways.102463139.Runtime-Error.leetcode.java b/91.decode-ways.102463139.Runtime-Error.leetcode.java
deleted file mode 100644
index 997a4506..00000000
--- ./91.decode-ways.102463139.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int numDecodings(String s)
-    {
-        if (s == null || s.isEmpty())
-        {
-            return 0;
-        }
-
-        int[] dp = new int[s.length() + 1];
-        dp[0] = 1;
-
-        for (int i = 1; i <= s.length(); i++)
-        {
-            if (s.charAt(i - 1) != '0')
-            {
-                dp[i] += dp[i - 1];
-            }
-
-            if (i - 2 >= 0 && s.charAt(i - 2) == '1' || (s.charAt(i - 2) == '2' && s.charAt(i - 1) <= '6'))
-            {
-                dp[i] += dp[i - 2];
-            }
-        }
-
-        return dp[s.length()];
-    }
-}
diff --git a/91.decode-ways.102463192.Accepted.leetcode.java b/91.decode-ways.102463192.Accepted.leetcode.java
deleted file mode 100644
index a4b61352..00000000
--- ./91.decode-ways.102463192.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int numDecodings(String s)
-    {
-        if (s == null || s.isEmpty())
-        {
-            return 0;
-        }
-
-        int[] dp = new int[s.length() + 1];
-        dp[0] = 1;
-
-        for (int i = 1; i <= s.length(); i++)
-        {
-            if (s.charAt(i - 1) != '0')
-            {
-                dp[i] += dp[i - 1];
-            }
-
-            if (i - 2 >= 0 && (s.charAt(i - 2) == '1' || (s.charAt(i - 2) == '2' && s.charAt(i - 1) <= '6')))
-            {
-                dp[i] += dp[i - 2];
-            }
-        }
-
-        return dp[s.length()];
-    }
-}
diff --git a/91.decode-ways.102463211.Time-Limit-Exceeded.leetcode.java b/91.decode-ways.102463211.Time-Limit-Exceeded.leetcode.java
deleted file mode 100644
index b411606f..00000000
--- ./91.decode-ways.102463211.Time-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int numDecodings(String s)
-    {
-        if (s == null || s.isEmpty())
-        {
-            return 0;
-        }
-
-        int[] dp = new int[s.length() + 1];
-        dp[0] = 0;
-
-        for (int i = 1; i <= s.length(); i++)
-        {
-            if (s.charAt(i - 1) != '0')
-            {
-                dp[i] += dp[i - 1];
-            }
-
-            if (i - 2 >= 0 && (s.charAt(i - 2) == '1' || (s.charAt(i - 2) == '2' && s.charAt(i - 1) <= '6')))
-            {
-                dp[i] += dp[i - 2];
-            }
-        }
-
-        return dp[s.length()];
-    }
-}
diff --git a/91.decode-ways.102465798.Wrong-Answer.leetcode.java b/91.decode-ways.102465798.Wrong-Answer.leetcode.java
deleted file mode 100644
index 491f8286..00000000
--- ./91.decode-ways.102465798.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int numDecodings(String s)
-    {
-        if (s == null || s.length() == 0)
-        {
-            return 0;
-        }
-        
-        int[] dp = new int[s.length() + 1];
-        dp[0] = 1;
-
-        for (int i = 1; i < s.length(); i++)
-        {
-            if (s.charAt(i - 1) != '0')
-            {
-                dp[i] += dp[i - 1];
-            }
-
-            if (i -2 >= 0 && (s.charAt(i - 2) == '1' || (s.charAt(i - 2) == '2' && s.charAt(i - 1) <= '6')))
-            {
-                dp[i] += dp[i - 2];
-            }
-        }
-
-        return dp[s.length()];
-    }
-}
diff --git a/91.decode-ways.102465867.Accepted.leetcode.java b/91.decode-ways.102465867.Accepted.leetcode.java
deleted file mode 100644
index 7157d8ef..00000000
--- ./91.decode-ways.102465867.Accepted.leetcode.java
+++ /dev/null
@@ -1,28 +0,0 @@
-public class Solution
-{
-    public int numDecodings(String s)
-    {
-        if (s == null || s.length() == 0)
-        {
-            return 0;
-        }
-        
-        int[] dp = new int[s.length() + 1];
-        dp[0] = 1;
-
-        for (int i = 1; i <= s.length(); i++)
-        {
-            if (s.charAt(i - 1) != '0')
-            {
-                dp[i] += dp[i - 1];
-            }
-
-            if (i - 2 >= 0 && (s.charAt(i - 2) == '1' || (s.charAt(i - 2) == '2' && s.charAt(i - 1) <= '6')))
-            {
-                dp[i] += dp[i - 2];
-            }
-        }
-
-        return dp[s.length()];
-    }
-}
diff --git a/91.decode-ways.102465960.Accepted.leetcode.java b/91.decode-ways.102465960.Accepted.leetcode.java
deleted file mode 100644
index 116d2aeb..00000000
--- ./91.decode-ways.102465960.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-public class Solution
-{
-    public int numDecodings(String s)
-    {
-        if (s == null || s.isEmpty())
-        {
-            return 0;
-        }
-
-        int[] dp = new int[s.length() + 1];
-        dp[0] = 1;
-        dp[1] = s.charAt(0) == '0' ? 0 : 1;
-
-        for (int i = 1; i < s.length(); i++)
-        {
-            if (s.charAt(i) != '0')
-            {
-                dp[i + 1] += dp[i];
-            }
-
-            if ( s.charAt(i - 1) == '1' || (s.charAt(i - 1) == '2' && s.charAt(i) <= '6'))
-            {
-                dp[i + 1] += dp[i - 1];
-            }
-        }
-
-        return dp[s.length()];
-    }
-}
diff --git a/91.decode-ways.98620491.Wrong-Answer.leetcode.java b/91.decode-ways.98620491.Wrong-Answer.leetcode.java
deleted file mode 100644
index b91881a5..00000000
--- ./91.decode-ways.98620491.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public int numDecodings(String s)
-    {
-        if (s == null || s.isEmpty())
-        {
-            return 0;
-        }
-
-        int[] dp = new int[s.length() + 1];
-        dp[0] = 1;
-        dp[1] = s.charAt(0) == '0' ? 0 : 1;
-
-        for (int i = 1; i < s.length(); i++)
-        {
-            if (s.charAt(i) != '0')
-            {
-                dp[i + 1] += dp[i];
-            }
-
-        }
-
-        return dp[s.length()];
-    }
-}
diff --git a/92.reverse-linked-list-ii.156957350.Memory-Limit-Exceeded.leetcode.java b/92.reverse-linked-list-ii.156957350.Memory-Limit-Exceeded.leetcode.java
deleted file mode 100644
index ec1086a5..00000000
--- ./92.reverse-linked-list-ii.156957350.Memory-Limit-Exceeded.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public ListNode reverseBetween(ListNode head, int m, int n)
-    {
-        ListNode dummy = new ListNode(0);
-        dummy.next = head;
-        ListNode prevM = dummy;
-        ListNode prev = null;
-        ListNode curr = null;
-        ListNode post = null;
-
-        for (int i = 1; i <= n; i++)
-        {
-            if (i < m)
-            {
-                prevM = prevM.next;
-            }
-            else if (i == m)
-            {
-                prev = prevM.next;
-                curr = prev.next;
-            }
-            else
-            {
-                post = curr.next;
-                curr.next = prev;
-                prev = curr;
-                curr = post;
-            }
-        }
-
-        prevM.next = prev;
-        return dummy.next;
-    }
-}
-
diff --git a/92.reverse-linked-list-ii.157019993.Wrong-Answer.leetcode.java b/92.reverse-linked-list-ii.157019993.Wrong-Answer.leetcode.java
deleted file mode 100644
index 6ae59149..00000000
--- ./92.reverse-linked-list-ii.157019993.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public ListNode reverseBetween(ListNode head, int m, int n)
-    {
-        ListNode dummy = new ListNode(0);
-        dummy.next = head;
-        ListNode prevM = dummy;
-        ListNode prev = null;
-        ListNode temp = null;
-
-        for (int i = 1; i <= n; i++)
-        {
-            if (i < m)
-            {
-                prevM = prevM.next;
-            }
-            else if (i == m)
-            {
-                prev = prevM.next;
-                head = prev.next;
-            }
-            else
-            {
-                temp = head.next;
-                head.next = prev;
-                prev = head;
-                head = temp;
-            }
-        }
-
-        prevM.next.next = temp;
-        prevM.next = head;
-        return dummy.next;
-    }
-}
-
diff --git a/92.reverse-linked-list-ii.157020431.Wrong-Answer.leetcode.java b/92.reverse-linked-list-ii.157020431.Wrong-Answer.leetcode.java
deleted file mode 100644
index 95be1163..00000000
--- ./92.reverse-linked-list-ii.157020431.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public ListNode reverseBetween(ListNode head, int m, int n)
-    {
-        ListNode dummy = new ListNode(0);
-        dummy.next = head;
-        ListNode prevM = dummy;
-        ListNode prev = null;
-        ListNode temp = null;
-
-        for (int i = 1; i <= n; i++)
-        {
-            if (i < m)
-            {
-                prevM = prevM.next;
-            }
-            else if (i == m)
-            {
-                prev = prevM.next;
-                head = prev.next;
-            }
-            else
-            {
-                temp = head.next;
-                head.next = prev;
-                prev = head;
-                head = temp;
-            }
-        }
-
-        prevM.next.next = temp;
-        prevM.next = prev;
-        return dummy.next;
-    }
-}
-
diff --git a/92.reverse-linked-list-ii.157023162.Accepted.leetcode.java b/92.reverse-linked-list-ii.157023162.Accepted.leetcode.java
deleted file mode 100644
index a3f6ecfb..00000000
--- ./92.reverse-linked-list-ii.157023162.Accepted.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution
-{
-    public ListNode reverseBetween(ListNode head, int m, int n)
-    {
-        ListNode dummy = new ListNode(-1);
-        dummy.next = head;
-        ListNode prevM = dummy;
-        ListNode prev = null;
-        ListNode curr = null;
-
-        for (int i = 1; i <= n; i++)
-        {
-            if (i < m)
-            {
-                prevM = prevM.next;
-            }
-            else if (i == m)
-            {
-                prev = prevM.next;
-                curr = prevM.next.next;
-            }
-            else
-            {
-                ListNode temp = curr.next;
-                curr.next = prevM.next;
-                prevM.next = curr;
-                curr = temp;
-            }
-        }
-
-        prev.next = curr;
-        return dummy.next;
-    }
-}
-
diff --git a/92.reverse-linked-list-ii.157023824.Accepted.leetcode.java b/92.reverse-linked-list-ii.157023824.Accepted.leetcode.java
deleted file mode 100644
index 03462a4b..00000000
--- ./92.reverse-linked-list-ii.157023824.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public ListNode reverseBetween(ListNode head, int m, int n)
-    {
-        ListNode dummy = new ListNode(0);
-        dummy.next = head;
-        ListNode prevM = dummy;
-        ListNode prev = null;
-        ListNode temp = null;
-
-        for (int i = 1; i <= n; i++)
-        {
-            if (i < m)
-            {
-                prevM = prevM.next;
-            }
-            else if (i == m)
-            {
-                prev = prevM.next;
-                head = prev.next;
-            }
-            else
-            {
-                temp = head.next;
-                head.next = prev;
-                prev = head;
-                head = temp;
-            }
-        }
-
-        prevM.next.next = head;
-        prevM.next = prev;
-        return dummy.next;
-    }
-}
-
diff --git a/92.reverse-linked-list-ii.157024324.Accepted.leetcode.java b/92.reverse-linked-list-ii.157024324.Accepted.leetcode.java
deleted file mode 100644
index c2e04a88..00000000
--- ./92.reverse-linked-list-ii.157024324.Accepted.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution
-{
-    public ListNode reverseBetween(ListNode head, int m, int n)
-    {
-        ListNode dummy = new ListNode(0);
-        dummy.next = head;
-        ListNode prevM = dummy;
-        ListNode prev = null;
-
-        for (int i = 1; i <= n; i++)
-        {
-            if (i < m)
-            {
-                prevM = prevM.next;
-            }
-            else if (i == m)
-            {
-                prev = prevM.next;
-                head = prev.next;
-            }
-            else
-            {
-                ListNode temp = head.next;
-                head.next = prev;
-                prev = head;
-                head = temp;
-            }
-        }
-
-        prevM.next.next = head;
-        prevM.next = prev;
-        return dummy.next;
-    }
-}
-
diff --git a/93.restore-ip-addresses.7590579.Accepted.leetcode.java b/93.restore-ip-addresses.7590579.Accepted.leetcode.java
deleted file mode 100644
index de09a6ec..00000000
--- ./93.restore-ip-addresses.7590579.Accepted.leetcode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-	public class Solution {
-		private String toAddr(ArrayList<Integer> solution) {
-			String addr = "";
-			addr += solution.get(0);
-			addr += ".";
-			addr += solution.get(1);
-			addr += ".";
-			addr += solution.get(2);
-			addr += ".";
-			addr += solution.get(3);
-			return addr;
-		}
-
-		private void search(String s, int begin, ArrayList<Integer> solution,
-				ArrayList<String> solutions) {
-			if (begin == s.length() && solution.size() == 4) {
-				solutions.add(toAddr(solution));
-				return;
-			}
-
-			
-			if (s.length() - begin > (4 - solution.size()) * 3) {
-				return;
-			}
-
-			if (s.length() - begin < 4 - solution.size()) {
-				return;
-			}
-
-			int num = 0;
-
-			for (int i = begin; i < Math.min(begin + 3, s.length()); i++) {
-				num = num * 10 + s.charAt(i) - '0';
-
-				if (num < 256) {
-					solution.add(num);
-					search(s, i + 1, solution, solutions);
-					solution.remove(solution.size() - 1);
-				}
-
-				if (num == 0) {
-					break;
-				}
-			}
-		}
-
-		public ArrayList<String> restoreIpAddresses(String s) {
-			ArrayList<String> solutions = new ArrayList<String>();
-			search(s, 0, new ArrayList<Integer>(), solutions);
-			return solutions;
-		}
-	}
-
diff --git a/95.unique-binary-search-trees-ii.9474410.Accepted.leetcode.java b/95.unique-binary-search-trees-ii.9474410.Accepted.leetcode.java
deleted file mode 100644
index ecaed355..00000000
--- ./95.unique-binary-search-trees-ii.9474410.Accepted.leetcode.java
+++ /dev/null
@@ -1,29 +0,0 @@
-  public class Solution {
-
-    private ArrayList<TreeNode> generateTrees(int start, int end) {
-      ArrayList<TreeNode> ans = new ArrayList<TreeNode>();
-
-      if (start > end) {
-        ans.add(null);
-        return ans;
-      }
-
-      for (int i = start; i <= end; i++) {
-        for (TreeNode left : generateTrees(start, i - 1)) {
-          for (TreeNode right : generateTrees(i + 1, end)) {
-            TreeNode p = new TreeNode(i);
-            p.left = left;
-            p.right = right;
-            ans.add(p);
-          }
-        }
-      }
-
-      return ans;
-    }
-
-    public ArrayList<TreeNode> generateTrees(int n) {
-      return generateTrees(1, n);
-    }
-  }
-
diff --git a/96.unique-binary-search-trees.7762444.Accepted.leetcode.java b/96.unique-binary-search-trees.7762444.Accepted.leetcode.java
deleted file mode 100644
index 46d387fb..00000000
--- ./96.unique-binary-search-trees.7762444.Accepted.leetcode.java
+++ /dev/null
@@ -1,16 +0,0 @@
-public class Solution {
-    public int numTrees(int n) {
-      int[] dp = new int[n + 1];
-      dp[0] = 1;
-      dp[1] = 1;
-
-      for (int i = 2; i <= n; i++) {
-        for (int k = 1; k <= i; k++) {
-          dp[i] += dp[k - 1] * dp[i - k];
-        }
-      }
-
-      return dp[n];
-    }
-  }
-
diff --git a/97.interleaving-string.157109812.Runtime-Error.leetcode.java b/97.interleaving-string.157109812.Runtime-Error.leetcode.java
deleted file mode 100644
index 85ecd41c..00000000
--- ./97.interleaving-string.157109812.Runtime-Error.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public boolean isInterleave(String s1, String s2, String s3)
-    {
-        boolean [][] dp = new boolean[s1.length() + 1][s2.length() + 1];
-        dp[0][0] = true;
-
-        for (int i = 1; i <= s1.length(); i++)
-        {
-            if (s1.charAt(i - 1) == s3.charAt(i - 1) && dp[i - 1][0])
-            {
-                dp[i][0] = true;
-            }
-        }
-
-        for (int j = 1; j <= s2.length(); j++)
-        {
-            if (s2.charAt(j - 1) == s3.charAt(j - 1) && dp[0][j - 1])
-            {
-                dp[0][j] = true;
-            }
-        }
-
-        for (int i = 1; i <= s1.length(); i++)
-        {
-            for (int j = 1; j <= s2.length(); j++)
-            {
-                dp[i][j] = (s1.charAt(i - 1) == s3.charAt(i + j - 1) && dp[i - 1][j])
-                           || (s2.charAt(j - 1) == s3.charAt(i + j - 1) && dp[i][j - 1]);
-            }
-        }
-
-        return dp[s1.length()][s2.length()];
-    }
-}
-
diff --git a/97.interleaving-string.157110491.Wrong-Answer.leetcode.java b/97.interleaving-string.157110491.Wrong-Answer.leetcode.java
deleted file mode 100644
index b7cee5c4..00000000
--- ./97.interleaving-string.157110491.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution
-{
-    public boolean isInterleave(String s1, String s2, String s3)
-    {
-        if ((s1.length() + s2.length()) != s3.length())
-        {
-            return false;
-        }
-
-        boolean [][] dp = new boolean[s1.length() + 1][s2.length() + 1];
-        dp[0][0] = true;
-
-        for (int i = 1; i <= s1.length(); i++)
-        {
-            dp[i][0] = true;
-        }
-
-        for (int j = 1; j <= s2.length(); j++)
-        {
-            dp[0][j] = true;
-        }
-
-        for (int i = 1; i <= s1.length(); i++)
-        {
-            for (int j = 1; j <= s2.length(); j++)
-            {
-                dp[i][j] = (s1.charAt(i - 1) == s3.charAt(i + j - 1) && dp[i - 1][j])
-                           || (s2.charAt(j - 1) == s3.charAt(i + j - 1) && dp[i][j - 1]);
-            }
-        }
-
-        return dp[s1.length()][s2.length()];
-    }
-}
-
diff --git a/97.interleaving-string.157111283.Wrong-Answer.leetcode.java b/97.interleaving-string.157111283.Wrong-Answer.leetcode.java
deleted file mode 100644
index 00bf3b5b..00000000
--- ./97.interleaving-string.157111283.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,35 +0,0 @@
-public class Solution
-{
-    public boolean isInterleave(String s1, String s2, String s3)
-    {
-        if (s1.length() + s2.length() != s3.length())
-        {
-            return false;
-        }
-
-        boolean [][] dp = new boolean[s1.length() + 1][s2.length() + 1];
-        dp[0][0] = true;
-
-        for (int i = 1; i <= s1.length(); i++)
-        {
-            dp[i][0] = s1.charAt(i - 1) == s3.charAt(i - 1) && dp[i - 1][0];
-        }
-
-        for (int j = 1; j <= s2.length(); j++)
-        {
-            dp[0][j] = s2.charAt(j - 1) == s3.charAt(j - 1) && dp[0][j - 1];
-        }
-
-        for (int i = 0; i <= s1.length(); i++)
-        {
-            for (int j = 0; j <= s2.length(); j++)
-            {
-                dp[i][j] = (i >= 1 && s1.charAt(i - 1) == s3.charAt(i + j - 1) && dp[i - 1][j])
-                           || (j >= 1 && s2.charAt(j - 1) == s3.charAt(i + j - 1) && dp[i][j - 1]);
-            }
-        }
-
-        return dp[s1.length()][s2.length()];
-    }
-}
-
diff --git a/97.interleaving-string.157115831.Accepted.leetcode.java b/97.interleaving-string.157115831.Accepted.leetcode.java
deleted file mode 100644
index 6464fc1e..00000000
--- ./97.interleaving-string.157115831.Accepted.leetcode.java
+++ /dev/null
@@ -1,36 +0,0 @@
-public class Solution
-{
-    public boolean isInterleave(String s1, String s2, String s3)
-    {
-        if (s1.length() + s2.length() != s3.length())
-        {
-            return false;
-        }
-
-        boolean [][] dp = new boolean[s1.length() + 1][s2.length() + 1];
-        dp[0][0] = true;
-
-        for (int i = 1; i <= s1.length(); i++)
-        {
-            dp[i][0] = s1.charAt(i - 1) == s3.charAt(i - 1) && dp[i - 1][0];
-        }
-
-        for (int j = 1; j <= s2.length(); j++)
-        {
-            dp[0][j] = s2.charAt(j - 1) == s3.charAt(j - 1) && dp[0][j - 1];
-        }
-
-        for (int i = 0; i <= s1.length(); i++)
-        {
-            for (int j = 0; j <= s2.length(); j++)
-            {
-                dp[i][j] = (i == 0 && j == 0)
-                           || (i >= 1 && s1.charAt(i - 1) == s3.charAt(i + j - 1) && dp[i - 1][j])
-                           || (j >= 1 && s2.charAt(j - 1) == s3.charAt(i + j - 1) && dp[i][j - 1]);
-            }
-        }
-
-        return dp[s1.length()][s2.length()];
-    }
-}
-
diff --git a/97.interleaving-string.157115952.Accepted.leetcode.java b/97.interleaving-string.157115952.Accepted.leetcode.java
deleted file mode 100644
index 7bb47e36..00000000
--- ./97.interleaving-string.157115952.Accepted.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public boolean isInterleave(String s1, String s2, String s3)
-    {
-        if (s1.length() + s2.length() != s3.length())
-        {
-            return false;
-        }
-
-        boolean [][] dp = new boolean[s1.length() + 1][s2.length() + 1];
-
-        for (int i = 0; i <= s1.length(); i++)
-        {
-            for (int j = 0; j <= s2.length(); j++)
-            {
-                dp[i][j] = (i == 0 && j == 0)
-                           || (i >= 1 && s1.charAt(i - 1) == s3.charAt(i + j - 1) && dp[i - 1][j])
-                           || (j >= 1 && s2.charAt(j - 1) == s3.charAt(i + j - 1) && dp[i][j - 1]);
-            }
-        }
-
-        return dp[s1.length()][s2.length()];
-    }
-}
-
diff --git a/98.validate-binary-search-tree.151618806.Wrong-Answer.leetcode.java b/98.validate-binary-search-tree.151618806.Wrong-Answer.leetcode.java
deleted file mode 100644
index db5363d4..00000000
--- ./98.validate-binary-search-tree.151618806.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public Boolean isValidBST(TreeNode root, double lower, double upper)
-    {
-        if (root == null)
-        {
-            return true;
-        }
-
-        return root.val > lower && root.val < upper
-               && isValidBST(root.left, lower, root.val)
-               && isValidBST(root.right, root.val, upper);
-    }
-
-    public boolean isValidBST(TreeNode root)
-    {
-        return isValidBST(root, Double.MIN_VALUE, Double.MAX_VALUE);
-    }
-}
-
diff --git a/98.validate-binary-search-tree.151619319.Wrong-Answer.leetcode.java b/98.validate-binary-search-tree.151619319.Wrong-Answer.leetcode.java
deleted file mode 100644
index bee2aa5b..00000000
--- ./98.validate-binary-search-tree.151619319.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,25 +0,0 @@
-public class Solution
-{
-    public Boolean isValidBST(TreeNode root, double lower, double upper)
-    {
-        if (root == null)
-        {
-            return true;
-        }
-
-        if (root.left == null && root.right == null)
-        {
-            return true;
-        }
-
-        return root.val > lower && root.val < upper
-               && isValidBST(root.left, lower, root.val)
-               && isValidBST(root.right, root.val, upper);
-    }
-
-    public boolean isValidBST(TreeNode root)
-    {
-        return isValidBST(root, Double.MIN_VALUE, Double.MAX_VALUE);
-    }
-}
-
diff --git a/98.validate-binary-search-tree.151620056.Accepted.leetcode.java b/98.validate-binary-search-tree.151620056.Accepted.leetcode.java
deleted file mode 100644
index 1cfb8796..00000000
--- ./98.validate-binary-search-tree.151620056.Accepted.leetcode.java
+++ /dev/null
@@ -1,20 +0,0 @@
-public class Solution
-{
-    public Boolean isValidBST(TreeNode root, double lower, double upper)
-    {
-        if (root == null)
-        {
-            return true;
-        }
-
-        return root.val > lower && root.val < upper
-               && isValidBST(root.left, lower, root.val)
-               && isValidBST(root.right, root.val, upper);
-    }
-
-    public boolean isValidBST(TreeNode root)
-    {
-        return isValidBST(root, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
-    }
-}
-
diff --git a/98.validate-binary-search-tree.157936542.Wrong-Answer.leetcode.java b/98.validate-binary-search-tree.157936542.Wrong-Answer.leetcode.java
deleted file mode 100644
index e1503476..00000000
--- ./98.validate-binary-search-tree.157936542.Wrong-Answer.leetcode.java
+++ /dev/null
@@ -1,21 +0,0 @@
-public class Solution
-{
-    public Boolean isValidBST(TreeNode root, int lower, int upper)
-    {
-        if (root == null)
-        {
-            return true;
-        }
-
-        return root.val > lower && root.val < upper
-               && isValidBST(root.left, lower, root.val)
-               && isValidBST(root.right, root.val, upper);
-    }
-
-    public boolean isValidBST(TreeNode root)
-    {
-        return isValidBST(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
-    }
-}
-
-
diff --git a/99.recover-binary-search-tree.31082288.Accepted.leetcode.java b/99.recover-binary-search-tree.31082288.Accepted.leetcode.java
deleted file mode 100644
index 1f5344d0..00000000
--- ./99.recover-binary-search-tree.31082288.Accepted.leetcode.java
+++ /dev/null
@@ -1,71 +0,0 @@
-  public class Solution
-  {
-    public void recoverTree(TreeNode root)
-    {
-      TreeNode first = null;
-      TreeNode second = null;
-      TreeNode p = root;
-      TreeNode pre = null;
-
-      while (p != null)
-      {
-        if (p.left == null)
-        {
-          if (pre != null && pre.val > p.val)
-          {
-            if (first == null)
-            {
-              first = pre;
-              second = p;
-            }
-            else
-            {
-              second = p;
-            }
-          }
-
-          pre = p;
-          p = p.right;
-        }
-        else
-        {
-          TreeNode temp = p.left;
-
-          while (temp.right != null && temp.right != p)
-          {
-            temp = temp.right;
-          }
-
-          if (temp.right == null)
-          {
-            temp.right = p;
-            p = p.left;
-          }
-          else
-          {
-            if (pre != null && pre.val > p.val)
-            {
-              if (first == null)
-              {
-                first = pre;
-                second = p;
-              }
-              else
-              {
-                second = p;
-              }
-            }
-
-            temp.right = null;
-            pre = p;
-            p = p.right;
-          }
-        }
-      }
-
-      int temp = first.val;
-      first.val = second.val;
-      second.val = temp;
-    }
-  }
-
